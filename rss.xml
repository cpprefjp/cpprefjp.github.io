<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++ Reference Site</title>
  <link href="http://cpprefjp.github.io" />
  <updated>2015-01-15T15:03:31.445640</updated>
  <id>7c6da6b4-b951-4bb1-a1fa-598e34da35d3</id>

  
    <entry>
      <title>begin (非メンバ関数) (C++11) -- initializer_list : 非メンバ関数版のbegin/endが入る経緯となった提案文書を追加。</title>
      <link href="http://cpprefjp.github.io/reference/initializer_list/begin_free.html"/>
      <id>b359934af2e39ce8f437b5c34cdc882fbd6e77a6:reference/initializer_list/begin_free.md</id>
      <updated>2015-01-15 15:03:14 +0900</updated>
      
        <content type="html">&lt;h1&gt;begin (非メンバ関数) (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;E&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; E&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; begin(initializer_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;E&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; il) noexcept;           &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;E&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
constexpr &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; E&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; begin(initializer_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;E&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; il) noexcept; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++14&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;先頭要素を指すポインタを取得する。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;il.&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list/begin.html&#34;&gt;begin&lt;/a&gt;()
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;投げない&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;initializer_list&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;initializer_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; init &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;};

  decltype(init)&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator it &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(init);

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3257.pdf&#34; target=&#34;_blank&#34;&gt;N3257 Range-based for statements and ADL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3469.html&#34; target=&#34;_blank&#34;&gt;N3469 Constexpr Library Additions: chrono, v3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end (非メンバ関数) (C++11) -- initializer_list : 非メンバ関数版のbegin/endが入る経緯となった提案文書を追加。</title>
      <link href="http://cpprefjp.github.io/reference/initializer_list/end_free.html"/>
      <id>b359934af2e39ce8f437b5c34cdc882fbd6e77a6:reference/initializer_list/end_free.md</id>
      <updated>2015-01-15 15:03:14 +0900</updated>
      
        <content type="html">&lt;h1&gt;end (非メンバ関数) (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;E&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; E&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; end(initializer_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;E&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; il) noexcept;           &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;E&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
constexpr &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; E&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; end(initializer_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;E&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; il) noexcept; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++14&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;最後尾要素の次を指すポインタを取得する。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;il.&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list/end.html&#34;&gt;end&lt;/a&gt;()
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;投げない&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;initializer_list&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;algorithm&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;initializer_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; init &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;};

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(init), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;end(init), [](&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  });
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3257.pdf&#34; target=&#34;_blank&#34;&gt;N3257 Range-based for statements and ADL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3469.html&#34; target=&#34;_blank&#34;&gt;N3469 Constexpr Library Additions: chrono, v3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin (C++11) -- initializer_list : C++14対応の提案文書を、参照に追加。</title>
      <link href="http://cpprefjp.github.io/reference/initializer_list/begin.html"/>
      <id>291317e5c63f10bc72ea7aac527e26424bfe4e00:reference/initializer_list/begin.md</id>
      <updated>2015-01-15 14:52:49 +0900</updated>
      
        <content type="html">&lt;h1&gt;begin (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; E&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; begin() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; noexcept;           &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11&lt;/span&gt;
constexpr &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; E&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; begin() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; noexcept; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++14&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;先頭要素を指すポインタを取得する。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;配列の先頭要素を指すポインタを返す。&lt;/p&gt;
&lt;p&gt;配列の要素数が空である場合、&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list/end.html&#34;&gt;&lt;code&gt;end()&lt;/code&gt;&lt;/a&gt;と同じ未規定のポインタ値を返す。&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;投げない&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;initializer_list&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;initializer_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; init &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;};

  decltype(init)&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator it &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; init.begin();

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.4.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3469.html&#34; target=&#34;_blank&#34;&gt;N3469 Constexpr Library Additions: chrono, v3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin (非メンバ関数) (C++11) -- initializer_list : C++14対応の提案文書を、参照に追加。</title>
      <link href="http://cpprefjp.github.io/reference/initializer_list/begin_free.html"/>
      <id>291317e5c63f10bc72ea7aac527e26424bfe4e00:reference/initializer_list/begin_free.md</id>
      <updated>2015-01-15 14:52:49 +0900</updated>
      
        <content type="html">&lt;h1&gt;begin (非メンバ関数) (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;E&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; E&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; begin(initializer_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;E&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; il) noexcept;           &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;E&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
constexpr &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; E&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; begin(initializer_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;E&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; il) noexcept; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++14&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;先頭要素を指すポインタを取得する。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;il.&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list/begin.html&#34;&gt;begin&lt;/a&gt;()
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;投げない&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;initializer_list&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;initializer_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; init &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;};

  decltype(init)&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator it &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(init);

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3469.html&#34; target=&#34;_blank&#34;&gt;N3469 Constexpr Library Additions: chrono, v3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end (C++11) -- initializer_list : C++14対応の提案文書を、参照に追加。</title>
      <link href="http://cpprefjp.github.io/reference/initializer_list/end.html"/>
      <id>291317e5c63f10bc72ea7aac527e26424bfe4e00:reference/initializer_list/end.md</id>
      <updated>2015-01-15 14:52:49 +0900</updated>
      
        <content type="html">&lt;h1&gt;end (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; E&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; end() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; noexcept;           &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11&lt;/span&gt;
constexpr &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; E&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; end() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; noexcept; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++14&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;最後尾要素の次を指すポインタを取得する。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list/begin.html&#34;&gt;&lt;code&gt;begin()&lt;/code&gt;&lt;/a&gt; &lt;code&gt;+&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt;を返す。&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;投げない&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;initializer_list&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;algorithm&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;initializer_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; init &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;};

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(init.begin(), init.end(), [](&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  });
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1
2
3
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.4.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3469.html&#34; target=&#34;_blank&#34;&gt;N3469 Constexpr Library Additions: chrono, v3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end (非メンバ関数) (C++11) -- initializer_list : C++14対応の提案文書を、参照に追加。</title>
      <link href="http://cpprefjp.github.io/reference/initializer_list/end_free.html"/>
      <id>291317e5c63f10bc72ea7aac527e26424bfe4e00:reference/initializer_list/end_free.md</id>
      <updated>2015-01-15 14:52:49 +0900</updated>
      
        <content type="html">&lt;h1&gt;end (非メンバ関数) (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;E&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; E&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; end(initializer_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;E&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; il) noexcept;           &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;E&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
constexpr &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; E&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; end(initializer_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;E&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; il) noexcept; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++14&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;最後尾要素の次を指すポインタを取得する。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;il.&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list/end.html&#34;&gt;end&lt;/a&gt;()
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;投げない&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;initializer_list&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;algorithm&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;initializer_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; init &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;};

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(init), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;end(init), [](&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  });
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3469.html&#34; target=&#34;_blank&#34;&gt;N3469 Constexpr Library Additions: chrono, v3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ (C++11) -- initializer_list : C++14対応の提案文書を、参照に追加。</title>
      <link href="http://cpprefjp.github.io/reference/initializer_list/op_constructor.html"/>
      <id>291317e5c63f10bc72ea7aac527e26424bfe4e00:reference/initializer_list/op_constructor.md</id>
      <updated>2015-01-15 14:52:49 +0900</updated>
      
        <content type="html">&lt;h1&gt;コンストラクタ (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;initializer_list() noexcept;           &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11&lt;/span&gt;
constexpr initializer_list() noexcept; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++14&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;空の&lt;code&gt;initializer_list&lt;/code&gt;オブジェクトを構築する。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;cassert&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;initializer_list&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;initializer_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; init;
  assert(init.size() &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.4.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3469.html&#34; target=&#34;_blank&#34;&gt;N3469 Constexpr Library Additions: chrono, v3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>size (C++11) -- initializer_list : C++14対応の提案文書を、参照に追加。</title>
      <link href="http://cpprefjp.github.io/reference/initializer_list/size.html"/>
      <id>291317e5c63f10bc72ea7aac527e26424bfe4e00:reference/initializer_list/size.md</id>
      <updated>2015-01-15 14:52:49 +0900</updated>
      
        <content type="html">&lt;h1&gt;size (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; size() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; noexcept;           &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11&lt;/span&gt;
constexpr &lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; size() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; noexcept; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++14&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;要素数を取得する。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;*this&lt;/code&gt;に含まれる、配列の要素数を返す。&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;投げない&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;initializer_list&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;initializer_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; init &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;};

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; n &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; init.size();
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; n &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;3
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.4.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3469.html&#34; target=&#34;_blank&#34;&gt;N3469 Constexpr Library Additions: chrono, v3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>initializer_list (C++11) -- initializer_list : メンバ関数用のページを用意し、C++14に対応した。</title>
      <link href="http://cpprefjp.github.io/reference/initializer_list.html"/>
      <id>52981eca76b6982a027ad9dec5cd742274eeb104:reference/initializer_list.md</id>
      <updated>2015-01-15 14:50:30 +0900</updated>
      
        <content type="html">&lt;h1&gt;initializer_list (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;E&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;initializer_list&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;initializer_list&amp;gt;&lt;/code&gt;ヘッダで提供される&lt;code&gt;initializer_list&lt;/code&gt;クラスは、ユーザー定義型が初期化子リスト構文による初期化を可能にするための特別なクラスである。コンテナクラスの初期化、代入に使用される。&lt;/p&gt;
&lt;h2&gt;メンバ関数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list/op_constructor.html&#34;&gt;&lt;code&gt;constructor&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタ&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;~initializer_list() = default;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;デストラクタ&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素数を取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list/begin.html&#34;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;先頭要素へのポインタを取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list/end.html&#34;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最後尾要素の次を指すポインタを取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;メンバ型&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;value_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;E&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;reference&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;const E&amp;amp;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;const_reference&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;const E&amp;amp;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;size_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;size_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;const E*&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;const_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;const E*&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;非メンバ関数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list/begin_free.html&#34;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;先頭要素へのポインタを取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list/end_free.html&#34;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最後尾要素の次を指すポインタを取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;initializer_list&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Vector&lt;/span&gt; {
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; vec_;
&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
  Vector(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;initializer_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; init)
    &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; vec_(init.begin(), init.end()) {}
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;}; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 初期化子リストによる初期化&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.4.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;参照&lt;/h3&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin (C++11) -- initializer_list : メンバ関数用のページを用意し、C++14に対応した。</title>
      <link href="http://cpprefjp.github.io/reference/initializer_list/begin.html"/>
      <id>52981eca76b6982a027ad9dec5cd742274eeb104:reference/initializer_list/begin.md</id>
      <updated>2015-01-15 14:50:30 +0900</updated>
      
        <content type="html">&lt;h1&gt;begin (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; E&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; begin() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; noexcept;           &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11&lt;/span&gt;
constexpr &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; E&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; begin() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; noexcept; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++14&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;先頭要素を指すポインタを取得する。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;配列の先頭要素を指すポインタを返す。&lt;/p&gt;
&lt;p&gt;配列の要素数が空である場合、&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list/end.html&#34;&gt;&lt;code&gt;end()&lt;/code&gt;&lt;/a&gt;と同じ未規定のポインタ値を返す。&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;投げない&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;initializer_list&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;initializer_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; init &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;};

  decltype(init)&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator it &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; init.begin();

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.4.0&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin (非メンバ関数) (C++11) -- initializer_list : メンバ関数用のページを用意し、C++14に対応した。</title>
      <link href="http://cpprefjp.github.io/reference/initializer_list/begin_free.html"/>
      <id>52981eca76b6982a027ad9dec5cd742274eeb104:reference/initializer_list/begin_free.md</id>
      <updated>2015-01-15 14:50:30 +0900</updated>
      
        <content type="html">&lt;h1&gt;begin (非メンバ関数) (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;E&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; E&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; begin(initializer_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;E&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; il) noexcept;           &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;E&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
constexpr &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; E&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; begin(initializer_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;E&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; il) noexcept; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++14&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;先頭要素を指すポインタを取得する。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;il.&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list/begin.html&#34;&gt;begin&lt;/a&gt;()
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;投げない&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;initializer_list&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;initializer_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; init &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;};

  decltype(init)&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator it &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(init);

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end (C++11) -- initializer_list : メンバ関数用のページを用意し、C++14に対応した。</title>
      <link href="http://cpprefjp.github.io/reference/initializer_list/end.html"/>
      <id>52981eca76b6982a027ad9dec5cd742274eeb104:reference/initializer_list/end.md</id>
      <updated>2015-01-15 14:50:30 +0900</updated>
      
        <content type="html">&lt;h1&gt;end (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; E&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; end() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; noexcept;           &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11&lt;/span&gt;
constexpr &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; E&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; end() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; noexcept; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++14&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;最後尾要素の次を指すポインタを取得する。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list/begin.html&#34;&gt;&lt;code&gt;begin()&lt;/code&gt;&lt;/a&gt; &lt;code&gt;+&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt;を返す。&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;投げない&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;initializer_list&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;algorithm&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;initializer_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; init &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;};

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(init.begin(), init.end(), [](&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  });
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1
2
3
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.4.0&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end (非メンバ関数) (C++11) -- initializer_list : メンバ関数用のページを用意し、C++14に対応した。</title>
      <link href="http://cpprefjp.github.io/reference/initializer_list/end_free.html"/>
      <id>52981eca76b6982a027ad9dec5cd742274eeb104:reference/initializer_list/end_free.md</id>
      <updated>2015-01-15 14:50:30 +0900</updated>
      
        <content type="html">&lt;h1&gt;end (非メンバ関数) (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;E&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; E&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; end(initializer_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;E&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; il) noexcept;           &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;E&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
constexpr &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; E&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; end(initializer_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;E&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; il) noexcept; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++14&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;最後尾要素の次を指すポインタを取得する。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;il.&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list/end.html&#34;&gt;end&lt;/a&gt;()
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;投げない&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;initializer_list&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;algorithm&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;initializer_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; init &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;};

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(init), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;end(init), [](&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  });
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ (C++11) -- initializer_list : メンバ関数用のページを用意し、C++14に対応した。</title>
      <link href="http://cpprefjp.github.io/reference/initializer_list/op_constructor.html"/>
      <id>52981eca76b6982a027ad9dec5cd742274eeb104:reference/initializer_list/op_constructor.md</id>
      <updated>2015-01-15 14:50:30 +0900</updated>
      
        <content type="html">&lt;h1&gt;コンストラクタ (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;initializer_list() noexcept;           &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11&lt;/span&gt;
constexpr initializer_list() noexcept; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++14&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;空の&lt;code&gt;initializer_list&lt;/code&gt;オブジェクトを構築する。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;cassert&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;initializer_list&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;initializer_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; init;
  assert(init.size() &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.4.0&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>size (C++11) -- initializer_list : メンバ関数用のページを用意し、C++14に対応した。</title>
      <link href="http://cpprefjp.github.io/reference/initializer_list/size.html"/>
      <id>52981eca76b6982a027ad9dec5cd742274eeb104:reference/initializer_list/size.md</id>
      <updated>2015-01-15 14:50:30 +0900</updated>
      
        <content type="html">&lt;h1&gt;size (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; size() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; noexcept;           &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11&lt;/span&gt;
constexpr &lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; size() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; noexcept; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++14&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;要素数を取得する。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;*this&lt;/code&gt;に含まれる、配列の要素数を返す。&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;投げない&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;initializer_list&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;initializer_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; init &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;};

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; n &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; init.size();
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; n &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;3
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.4.0&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_regex (C++11) -- リンク切れを修正</title>
      <link href="http://cpprefjp.github.io/reference/regex/basic_regex.html"/>
      <id>3d2adeb82e86db0e149e366fa86df4e9160bfbba:reference/regex/basic_regex.md</id>
      <updated>2015-01-15 13:26:24 +0900</updated>
      
        <content type="html">&lt;h1&gt;basic_regex (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;charT&lt;/span&gt;,
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;traits&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; regex_traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;charT&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;basic_regex&lt;/span&gt;;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; basic_regex&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;    regex;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; basic_regex&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;wchar_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; wregex;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;basic_regex&lt;/code&gt;クラステンプレートは、&lt;code&gt;charT&lt;/code&gt;型の文字列から構築する正規表現を表す。
&lt;code&gt;charT&lt;/code&gt;は、&lt;code&gt;char&lt;/code&gt;型、&lt;code&gt;wchar_t&lt;/code&gt;型のような文字型である。
&lt;code&gt;traits&lt;/code&gt;は正規表現の文字・変換に関する特性である。
利便性のために、&lt;code&gt;charT&lt;/code&gt;を&lt;code&gt;char&lt;/code&gt;特殊化した&lt;code&gt;regex&lt;/code&gt;と、&lt;code&gt;charT&lt;/code&gt;を&lt;code&gt;wchar_t&lt;/code&gt;特殊化した&lt;code&gt;wregex&lt;/code&gt;が用意されている。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;basic_regex&lt;/code&gt;オブジェクトの内部表現や、正規表現アルゴリズムが&lt;code&gt;basic_regex&lt;/code&gt;オブジェクトの内部表現にどのようにアクセスするかは規定されない。
ユーザーはそれらを意識することなく、&lt;code&gt;basic_regex&lt;/code&gt;オブジェクトを正規表現アルゴリズムに渡すだけでよい。&lt;/p&gt;
&lt;p&gt;エラーは正規表現アルゴリズムが&lt;code&gt;regex_error&lt;/code&gt;型の例外投げることで通知される。&lt;/p&gt;
&lt;h2&gt;メンバ関数&lt;/h2&gt;
&lt;h3&gt;構築&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(constructor)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタ&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(destructor)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;デストラクタ&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;代入&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/basic_regex/op_assign.html&#34;&gt;&lt;code&gt;operator=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;正規表現を代入する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/basic_regex/assign.html&#34;&gt;&lt;code&gt;assign&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;正規表現を代入する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;定数操作&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/basic_regex/mark_count.html&#34;&gt;&lt;code&gt;mark_count&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;正規表現内のキャプチャグループの数を返す&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/basic_regex/flags.html&#34;&gt;&lt;code&gt;flags&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最後に設定された正規表現フラグを返す&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;ロケール&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/basic_regex/imbue.html&#34;&gt;&lt;code&gt;imbue&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ロケールを設定する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/basic_regex/getloc.html&#34;&gt;&lt;code&gt;getloc&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;現在のロケールを得る&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;交換&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/basic_regex/swap.html&#34;&gt;&lt;code&gt;swap&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;正規表現オブジェクトを交換する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;メンバ定数&lt;/h2&gt;
&lt;p&gt;静的メンバ定数は利便性のために&lt;code&gt;std::regex_constants&lt;/code&gt;で定義される定数の同義語として提供される。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;icase&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;static constexpr regex_constants::syntax_option_type icase      = regex_constants::icase;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;nosubs&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;static constexpr regex_constants::syntax_option_type nosubs     = regex_constants::nosubs;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;optimize&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;static constexpr regex_constants::syntax_option_type optimize   = regex_constants::optimize;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;collate&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;static constexpr regex_constants::syntax_option_type collate    = regex_constants::collate;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ECMAScript&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;static constexpr regex_constants::syntax_option_type ECMAScript = regex_constants::ECMAScript;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;basic&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;static constexpr regex_constants::syntax_option_type basic      = regex_constants::basic;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;extended&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;static constexpr regex_constants::syntax_option_type extended   = regex_constants::extended;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;awk&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;static constexpr regex_constants::syntax_option_type awk        = regex_constants::awk;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;grep&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;static constexpr regex_constants::syntax_option_type grep       = regex_constants::grep;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;egrep&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;static constexpr regex_constants::syntax_option_type egrep      = regex_constants::egrep;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;メンバ型&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;value_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;charT&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;traits_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;traits&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;string_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;traits::string_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;flag_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;regex_constants::syntax_option_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;locale_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;traits::locale_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;非メンバ関数&lt;/h2&gt;
&lt;h3&gt;交換&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/basic_regex/swap_free.html&#34;&gt;&lt;code&gt;swap&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;二つの正規表現オブジェクトを交換する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>match_results (C++11) -- リンク切れを修正</title>
      <link href="http://cpprefjp.github.io/reference/regex/match_results.html"/>
      <id>3d2adeb82e86db0e149e366fa86df4e9160bfbba:reference/regex/match_results.md</id>
      <updated>2015-01-15 13:26:24 +0900</updated>
      
        <content type="html">&lt;h1&gt;match_results (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;BidirectionalIterator&lt;/span&gt;,
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Allocator&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator.html&#34;&gt;allocator&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/sub_match.html&#34;&gt;sub_match&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;BidirectionalIterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;match_results&lt;/span&gt;;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; match_results&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&lt;/span&gt;             cmatch;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; match_results&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;wchar_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&lt;/span&gt;          wcmatch;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; match_results&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;string&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;const_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;  smatch;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; match_results&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;wstring&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;const_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; wsmatch;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;match_results&lt;/code&gt; は正規表現によるマッチ結果を格納するコンテナである。コンテナの要素はマッチ結果を表すサブマッチ（&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/sub_match.html&#34;&gt;&lt;code&gt;sub_match&lt;/code&gt;&lt;/a&gt;）である。&lt;br /&gt;
コンテナとは言っても &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_match.html&#34;&gt;&lt;code&gt;regex_match&lt;/code&gt;&lt;/a&gt; や &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;&lt;code&gt;regex_search&lt;/code&gt;&lt;/a&gt; のマッチ結果を格納することを目的としているため、
一般的なコンテナのように通常の操作でコンテナに要素を格納したり変更したりすることはできない。&lt;/p&gt;
&lt;p&gt;構築直後の &lt;code&gt;match_results&lt;/code&gt; オブジェクトは結果を格納していない（&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/ready.html&#34;&gt;&lt;code&gt;ready&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == false&lt;/code&gt;）ため、ほとんどのメンバ関数は使用することができない。&lt;br /&gt;
&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_match.html&#34;&gt;&lt;code&gt;regex_match&lt;/code&gt;&lt;/a&gt; や &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;&lt;code&gt;regex_search&lt;/code&gt;&lt;/a&gt; に引数として渡されると、マッチが成功したか否かにかかわらずその結果を格納する（&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/ready.html&#34;&gt;&lt;code&gt;ready&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == true&lt;/code&gt;）。&lt;br /&gt;
なお、&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator.html&#34;&gt;&lt;code&gt;regex_iterator&lt;/code&gt;&lt;/a&gt; を間接参照した際の &lt;code&gt;match_results&lt;/code&gt; オブジェクトは常にマッチ結果を格納している（&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/ready.html&#34;&gt;&lt;code&gt;ready&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == true&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;マッチ結果を格納した &lt;code&gt;match_results&lt;/code&gt; オブジェクトは、マッチが成功した場合には 1 つ以上の要素を格納しているため、&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/empty.html&#34;&gt;&lt;code&gt;empty&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == false&lt;/code&gt; となる。&lt;br /&gt;
マッチに成功し &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/empty.html&#34;&gt;&lt;code&gt;empty&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == false&lt;/code&gt; となった &lt;code&gt;match_results&lt;/code&gt; オブジェクトに格納されている各要素（サブマッチ：&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/sub_match.html&#34;&gt;&lt;code&gt;sub_match&lt;/code&gt;&lt;/a&gt;）には、標準シーケンスコンテナの &lt;a href=&#34;http://cpprefjp.github.io/reference/vector.html&#34;&gt;&lt;code&gt;vector&lt;/code&gt;&lt;/a&gt; 等と同様に &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/op_at.html&#34;&gt;&lt;code&gt;operator[]&lt;/code&gt;&lt;/a&gt; で直接アクセスすることができるだけでなく、
&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/str.html&#34;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt;、&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/position.html&#34;&gt;&lt;code&gt;position&lt;/code&gt;&lt;/a&gt;、&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/length.html&#34;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt; といったメンバ関数で各要素の内容にアクセスすることもできる。&lt;br /&gt;
最初の要素には、マッチした文字列全体を表すサブマッチが格納され、以降に各キャプチャグループ（正規表現内の括弧で囲まれた部分に対応する）が続く。&lt;br /&gt;
また、マッチした文字列だけでなく、マッチした文字列の前（&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/prefix.html&#34;&gt;&lt;code&gt;prefix&lt;/code&gt;&lt;/a&gt;）、および、後（&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/suffix.html&#34;&gt;&lt;code&gt;suffix&lt;/code&gt;&lt;/a&gt;）を指すサブマッチも保持している。
さらに、マッチした結果を用いた書式出力機能も有する（&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/format.html&#34;&gt;&lt;code&gt;format&lt;/code&gt;&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;match_results&lt;/code&gt; はアロケータ対応コンテナの要件のすべて、および、シーケンスコンテナの要件のうち読み取り専用の操作をサポートしている。&lt;br /&gt;
&lt;code&gt;match_results&lt;/code&gt; オブジェクトからメンバ関数で取得できるイテレータについて規格では特に言及されていないが、&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/op_at.html&#34;&gt;&lt;code&gt;operator[]&lt;/code&gt;&lt;/a&gt; が使用できることから通常ランダムアクセスイテレータであるもの考えても差し支えないものと思われる。&lt;/p&gt;
&lt;h2&gt;メンバ関数&lt;/h2&gt;
&lt;h3&gt;構築・破棄&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/op_constructor.html&#34;&gt;(constructor)&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタ&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/op_destructor.html&#34;&gt;(destructor)&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;デストラクタ&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/op_assign.html&#34;&gt;&lt;code&gt;operator=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;代入演算子&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;状態&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/ready.html&#34;&gt;&lt;code&gt;ready&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;結果が利用可能か否かを返す&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;サイズ&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;サブマッチの数を返す&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/max_size.html&#34;&gt;&lt;code&gt;max_size&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;格納できるサブマッチの最大数を返す&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/empty.html&#34;&gt;&lt;code&gt;empty&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;マッチしたか否かを返す&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;要素アクセス&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/length.html&#34;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指定されたサブマッチの長さを返す&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/position.html&#34;&gt;&lt;code&gt;position&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指定されたサブマッチの位置を返す&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/str.html&#34;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指定されたサブマッチを文字列の形で返す&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/op_at.html&#34;&gt;&lt;code&gt;operator[]&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指定されたサブマッチを返す&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/prefix.html&#34;&gt;&lt;code&gt;prefix&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;マッチした文字列の前の文字列を示すサブマッチを返す&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/suffix.html&#34;&gt;&lt;code&gt;suffix&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;マッチした文字列の後の文字列を示すサブマッチを返す&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/begin.html&#34;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;先頭のサブマッチを指すイテレータを取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/end.html&#34;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;末尾のサブマッチの次を指すイテレータを取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/cbegin.html&#34;&gt;&lt;code&gt;cbegin&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;先頭のサブマッチを指すイテレータを取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/cend.html&#34;&gt;&lt;code&gt;cend&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;末尾のサブマッチの次を指すイテレータを取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;フォーマット&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/format.html&#34;&gt;&lt;code&gt;format&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;match_results&lt;/code&gt; オブジェクトを書式文字列に従って出力する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;アロケータ&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;アロケータオブジェクトを取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;交換&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/swap.html&#34;&gt;&lt;code&gt;swap&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;オブジェクトの内容を交換する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;メンバ型&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;value_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素の型。&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/sub_match.html&#34;&gt;&lt;code&gt;sub_match&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;BidirectionalIterator&amp;gt;&lt;/code&gt; の typedef&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;const_reference&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;const&lt;/code&gt; 参照の型。&lt;code&gt;const value_type&amp;amp;&lt;/code&gt; の typedef&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;reference&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;参照の型。&lt;code&gt;value_type&amp;amp;&lt;/code&gt; の typedef（C++11 では &lt;code&gt;const value_type&amp;amp;&lt;/code&gt; となっていたが、規格のバグとして C++14 で修正された）&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;const_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;読み取り専用イテレータの型。実装依存の型の typedef&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータの型。&lt;code&gt;const_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;difference_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2 つのイテレータの差の型。&lt;code&gt;typename&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/iterator_traits.html&#34;&gt;&lt;code&gt;iterator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;BidirectionalIterator&amp;gt;::difference_type&lt;/code&gt; の typedef&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;size_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;typename&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;&lt;code&gt;allocator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Allocator&amp;gt;::size_type&lt;/code&gt; の typedef&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;allocator_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アロケータオブジェクトの型。&lt;code&gt;Allocator&lt;/code&gt; の typedef&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;char_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字の型。&lt;code&gt;typename&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/iterator_traits.html&#34;&gt;&lt;code&gt;iterator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;BidirectionalIterator&amp;gt;::value_type&lt;/code&gt; の typedef&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;string_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列の型。&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;&lt;code&gt;basic_string&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;char_type&amp;gt;&lt;/code&gt; の typedef&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;非メンバ関数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/op_equal.html&#34;&gt;&lt;code&gt;operator==&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;等値比較を行う&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/op_not_equal.html&#34;&gt;&lt;code&gt;operator!=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;非等値比較を行う&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/swap_free.html&#34;&gt;&lt;code&gt;swap&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2 つの &lt;code&gt;match_results&lt;/code&gt; オブジェクトの内容を交換する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex.html&#34;&gt;regex&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; s[] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;The C++11 is very cool!!&#34;&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex.html&#34;&gt;regex&lt;/a&gt; re(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;(&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;w+) is (&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;w+)&#34;&lt;/span&gt;);

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;cmatch&lt;/span&gt; m;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;regex_search&lt;/a&gt;(s, m, re)) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/ready.html&#34;&gt;ready&lt;/a&gt; = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;boolalpha &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; m.&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/ready.html&#34;&gt;ready&lt;/a&gt;() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/empty.html&#34;&gt;empty&lt;/a&gt; = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; m.&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/empty.html&#34;&gt;empty&lt;/a&gt;() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/prefix.html&#34;&gt;prefix&lt;/a&gt;:&#39;&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; m.&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/prefix.html&#34;&gt;prefix&lt;/a&gt;() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\&#39;&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, n &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; m.&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/size.html&#34;&gt;size&lt;/a&gt;(); i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; n; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i) {
      std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;:&#39;&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; m.&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/str.html&#34;&gt;str&lt;/a&gt;(i) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\&#39;&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;, &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/position.html&#34;&gt;position&lt;/a&gt; = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; m.&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/position.html&#34;&gt;position&lt;/a&gt;(i) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/length.html&#34;&gt;length&lt;/a&gt; = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; m.&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/length.html&#34;&gt;length&lt;/a&gt;(i) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/suffix.html&#34;&gt;suffix&lt;/a&gt;:&#39;&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; m.&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/suffix.html&#34;&gt;suffix&lt;/a&gt;() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\&#39;&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; m.&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/format.html&#34;&gt;format&lt;/a&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;$`14 is $2$&#39;&#34;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  } &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;not match&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;ready = true, empty = false

prefix:&#39;The C++&#39;
0:&#39;11 is very&#39;, position = 7, length = 10
1:&#39;11&#39;, position = 7, length = 2
2:&#39;very&#39;, position = 13, length = 4
suffix:&#39; cool!!&#39;

The C++14 is very cool!!
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.9.0, 4.9.1, 4.9.2, 5.0.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>empty (C++11) -- リンク切れを修正</title>
      <link href="http://cpprefjp.github.io/reference/regex/match_results/empty.html"/>
      <id>3d2adeb82e86db0e149e366fa86df4e9160bfbba:reference/regex/match_results/empty.md</id>
      <updated>2015-01-15 13:26:24 +0900</updated>
      
        <content type="html">&lt;h1&gt;empty (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; empty() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;*this&lt;/code&gt; が空か否か（つまり、マッチが失敗したか否か）を返す。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == 0&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_match.html&#34;&gt;&lt;code&gt;regex_match&lt;/code&gt;&lt;/a&gt;、および、&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;&lt;code&gt;regex_search&lt;/code&gt;&lt;/a&gt; の引数に渡した &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results.html&#34;&gt;&lt;code&gt;match_results&lt;/code&gt;&lt;/a&gt; オブジェクトは、マッチが成功すると &lt;code&gt;empty() != true&lt;/code&gt; となる。&lt;br /&gt;
&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results.html&#34;&gt;&lt;code&gt;match_results&lt;/code&gt;&lt;/a&gt; オブジェクトの結果が利用可能か否かを確認する場合には &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/ready.html&#34;&gt;&lt;code&gt;ready&lt;/code&gt;&lt;/a&gt; を使用すると良い。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator.html&#34;&gt;&lt;code&gt;regex_iterator&lt;/code&gt;&lt;/a&gt; を間接参照して得られる &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results.html&#34;&gt;&lt;code&gt;match_results&lt;/code&gt;&lt;/a&gt; オブジェクトは、必ず &lt;code&gt;empty() != true&lt;/code&gt; となる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;empty() == true&lt;/code&gt; の場合、&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results.html&#34;&gt;&lt;code&gt;match_results&lt;/code&gt;&lt;/a&gt; のメンバ関数には結果が未規定であるものがあるので、注意が必要である（&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_match.html&#34;&gt;&lt;code&gt;regex_match&lt;/code&gt;&lt;/a&gt;、および、&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;&lt;code&gt;regex_search&lt;/code&gt;&lt;/a&gt; を参照）。&lt;/li&gt;
&lt;li&gt;本メンバ関数は &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/ready.html&#34;&gt;&lt;code&gt;ready&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == false&lt;/code&gt; でも呼び出すことが可能である（その場合、&lt;code&gt;true&lt;/code&gt; が返される）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex.html&#34;&gt;regex&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; s1[] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; abc &#34;&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; s2[] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; 012 &#34;&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex.html&#34;&gt;regex&lt;/a&gt; re(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;d+&#34;&lt;/span&gt;);

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results.html&#34;&gt;cmatch&lt;/a&gt; m;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;regex_search&lt;/a&gt; 実行前&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ios/boolalpha.html&#34;&gt;boolalpha&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/ready.html&#34;&gt;ready&lt;/a&gt; = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; m.&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/ready.html&#34;&gt;ready&lt;/a&gt;() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &lt;span style=&#34;color:#ff0000&#34;&gt;empty&lt;/span&gt; = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; m.&lt;span style=&#34;color:#ff0000&#34;&gt;empty&lt;/span&gt;() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;regex_search&lt;/a&gt; 実行後（マッチ失敗）&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;regex_search&lt;/a&gt;(s1, m, re)) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;match:&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/ready.html&#34;&gt;ready&lt;/a&gt; = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; m.&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/ready.html&#34;&gt;ready&lt;/a&gt;() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &lt;span style=&#34;color:#ff0000&#34;&gt;empty&lt;/span&gt; = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; m.&lt;span style=&#34;color:#ff0000&#34;&gt;empty&lt;/span&gt;() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;
  } &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;not match:&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/ready.html&#34;&gt;ready&lt;/a&gt; = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; m.&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/ready.html&#34;&gt;ready&lt;/a&gt;() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &lt;span style=&#34;color:#ff0000&#34;&gt;empty&lt;/span&gt; = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; m.&lt;span style=&#34;color:#ff0000&#34;&gt;empty&lt;/span&gt;() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;regex_search&lt;/a&gt; 実行後（マッチ成功）&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;regex_search&lt;/a&gt;(s2, m, re)) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;match:&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/ready.html&#34;&gt;ready&lt;/a&gt; = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; m.&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/ready.html&#34;&gt;ready&lt;/a&gt;() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &lt;span style=&#34;color:#ff0000&#34;&gt;empty&lt;/span&gt; = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; m.&lt;span style=&#34;color:#ff0000&#34;&gt;empty&lt;/span&gt;() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;
  } &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;not match:&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/ready.html&#34;&gt;ready&lt;/a&gt; = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; m.&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/ready.html&#34;&gt;ready&lt;/a&gt;() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &lt;span style=&#34;color:#ff0000&#34;&gt;empty&lt;/span&gt; = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; m.&lt;span style=&#34;color:#ff0000&#34;&gt;empty&lt;/span&gt;() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;ready = false, empty = true
not match:ready = true, empty = true
match:ready = true, empty = false
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.9.0, 4.9.1, 5.0.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= (C++11) -- リンク切れを修正</title>
      <link href="http://cpprefjp.github.io/reference/regex/match_results/op_assign.html"/>
      <id>3d2adeb82e86db0e149e366fa86df4e9160bfbba:reference/regex/match_results/op_assign.md</id>
      <updated>2015-01-15 13:26:24 +0900</updated>
      
        <content type="html">&lt;h1&gt;operator= (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;match_results&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; match_results&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; m);       &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;

match_results&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(match_results&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; m) noexcept;   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;match_results&lt;/code&gt; オブジェクトを代入する。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) &lt;code&gt;value_type&lt;/code&gt;（&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/sub_match.html&#34;&gt;&lt;code&gt;sub_match&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;BidirectionalIterator&amp;gt;&lt;/code&gt;）はこのコンテナに対してコピー挿入可能（CopyInsertable）であること。&lt;/li&gt;
&lt;li&gt;(2) &lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;&lt;code&gt;allocator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;allocator_type&amp;gt;::propagate_on_container_move_assignment::value == false&lt;/code&gt; である場合、&lt;code&gt;value_type&lt;/code&gt;（&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/sub_match.html&#34;&gt;&lt;code&gt;sub_match&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;BidirectionalIterator&amp;gt;&lt;/code&gt;）はこのコンテナに対してムーブ挿入可能（MoveInsertable）であること。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) コピー代入演算子。引数 &lt;code&gt;m&lt;/code&gt; を &lt;code&gt;*this&lt;/code&gt; にコピー代入する。&lt;/li&gt;
&lt;li&gt;(2) ムーブ代入演算子。引数 &lt;code&gt;m&lt;/code&gt; を &lt;code&gt;*this&lt;/code&gt; にムーブ代入する。&lt;code&gt;*this&lt;/code&gt; の全ての既存の要素はムーブ代入されるか破棄される。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;事後条件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(1)、(2) 以下の表を満たす。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;要素&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/ready.html&#34;&gt;&lt;code&gt;ready&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;m.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/ready.html&#34;&gt;&lt;code&gt;ready&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;m.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/str.html&#34;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(n)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;n &amp;lt;&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; である全ての整数 &lt;code&gt;n&lt;/code&gt; について、&lt;code&gt;m.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/str.html&#34;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(n)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/prefix.html&#34;&gt;&lt;code&gt;prefix&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;m.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/prefix.html&#34;&gt;&lt;code&gt;prefix&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/suffix.html&#34;&gt;&lt;code&gt;suffix&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;m.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/suffix.html&#34;&gt;&lt;code&gt;suffix&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(*this)[n]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;n &amp;lt;&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; である全ての整数 &lt;code&gt;n&lt;/code&gt; について、&lt;code&gt;m[n]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/length.html&#34;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;n &amp;lt;&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; である全ての整数 &lt;code&gt;n&lt;/code&gt; について、&lt;code&gt;m.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/length.html&#34;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(n)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/position.html&#34;&gt;&lt;code&gt;position&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;n &amp;lt;&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; である全ての整数 &lt;code&gt;n&lt;/code&gt; について、&lt;code&gt;m.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/position.html&#34;&gt;&lt;code&gt;position&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(n)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) 線形時間&lt;/li&gt;
&lt;li&gt;(2) 線形時間&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;p&gt;規格では明確ではないものの、以下の事後条件を満たすべきであると思われる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(1) &lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;&lt;code&gt;allocator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;allocator_type&amp;gt;::propagate_on_container_copy_assignment::value == true&lt;/code&gt; である場合、&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == m.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(2) &lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;&lt;code&gt;allocator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;allocator_type&amp;gt;::propagate_on_container_move_assignment::value == true&lt;/code&gt; である場合、&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == m.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex.html&#34;&gt;regex&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results.html&#34;&gt;cmatch&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; m)
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/ready.html&#34;&gt;ready&lt;/a&gt;:&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ios/boolalpha.html&#34;&gt;boolalpha&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; m.&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/ready.html&#34;&gt;ready&lt;/a&gt;() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (m.&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/ready.html&#34;&gt;ready&lt;/a&gt;()) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/prefix.html&#34;&gt;prefix&lt;/a&gt;:&#39;&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; m.&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/prefix.html&#34;&gt;prefix&lt;/a&gt;() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\&#39;&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, n &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; m.&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/size.html&#34;&gt;size&lt;/a&gt;(); i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; n; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i) {
      std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;:&#39;&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; m.&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/str.html&#34;&gt;str&lt;/a&gt;(i) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\&#39;&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;
    }
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/suffix.html&#34;&gt;suffix&lt;/a&gt;:&#39;&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; m.&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/suffix.html&#34;&gt;suffix&lt;/a&gt;() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\&#39;&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;
  }
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; s[] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; abc 123 def &#34;&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex.html&#34;&gt;regex&lt;/a&gt; re(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;(&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;w+) (&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;d+) (&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;w+)&#34;&lt;/span&gt;);

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results.html&#34;&gt;cmatch&lt;/a&gt; m1, m2, m3;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;regex_search&lt;/a&gt;(s, m1, re);
  print(m1);

  m2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; m1;                          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) の形式&lt;/span&gt;
  print(m2);

  m3 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/move.html&#34;&gt;move&lt;/a&gt;(m1);               &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) の形式&lt;/span&gt;
  print(m3);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;ready:true
prefix:&#39; &#39;
0:&#39;abc 123 def&#39;
1:&#39;abc&#39;
2:&#39;123&#39;
3:&#39;def&#39;
suffix:&#39; &#39;

ready:true
prefix:&#39; &#39;
0:&#39;abc 123 def&#39;
1:&#39;abc&#39;
2:&#39;123&#39;
3:&#39;def&#39;
suffix:&#39; &#39;

ready:true
prefix:&#39; &#39;
0:&#39;abc 123 def&#39;
1:&#39;abc&#39;
2:&#39;123&#39;
3:&#39;def&#39;
suffix:&#39; &#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.9.0, 4.9.1, 5.0.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;備考&lt;/h3&gt;
&lt;p&gt;GCC(libstdc++) の 4.9.2 までは、アロケータが上記の備考欄のようには設定されず、また、&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator.html&#34;&gt;&lt;code&gt;regex_iterator&lt;/code&gt;&lt;/a&gt; を間接参照した結果を代入した場合に &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/position.html&#34;&gt;&lt;code&gt;position&lt;/code&gt;&lt;/a&gt; の結果が正しくコピーされない。これは、4.9.3 以降で修正される予定である。&lt;/p&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>size (C++11) -- リンク切れを修正</title>
      <link href="http://cpprefjp.github.io/reference/regex/match_results/size.html"/>
      <id>3d2adeb82e86db0e149e366fa86df4e9160bfbba:reference/regex/match_results/size.md</id>
      <updated>2015-01-15 13:26:24 +0900</updated>
      
        <content type="html">&lt;h1&gt;size (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;size_type size() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;*this&lt;/code&gt; が保持しているサブマッチの数を返す。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;*this&lt;/code&gt; が成功したマッチの結果を保持している場合、マッチした正規表現のキャプチャグループ（括弧で囲まれた部分）の数に 1 を加えた数。&lt;br /&gt;
そうでなければ 0。&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/prefix.html&#34;&gt;&lt;code&gt;prefix&lt;/code&gt;&lt;/a&gt;、および、&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/suffix.html&#34;&gt;&lt;code&gt;suffix&lt;/code&gt;&lt;/a&gt; で返されるオブジェクトも &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/sub_match.html&#34;&gt;&lt;code&gt;sub_match&lt;/code&gt;&lt;/a&gt; 型ではあるが、これらは本メンバ関数の戻り値の数には含まれていない。&lt;/li&gt;
&lt;li&gt;本メンバ関数は &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/ready.html&#34;&gt;&lt;code&gt;ready&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == false&lt;/code&gt; でも呼び出すことが可能である（その場合、0 が返される）。&lt;/li&gt;
&lt;li&gt;正規表現 &lt;code&gt;re&lt;/code&gt; に含まれているキャプチャグループの数は &lt;code&gt;re.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/basic_regex/mark_count.html&#34;&gt;&lt;code&gt;mark_count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; で取得することができる。&lt;br /&gt;
    したがって、成功したマッチの結果を保持している場合には、&lt;code&gt;size() == 1 + re.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/basic_regex/mark_count.html&#34;&gt;&lt;code&gt;mark_count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; となっている。&lt;br /&gt;
    1 が加えられる理由は、正規表現全体にマッチした部分をサブマッチとして保持しているためである。&lt;br /&gt;
    なお、失敗したマッチの結果を保持している場合には、使用した正規表現に含まれているキャプチャグループの数によらずに &lt;code&gt;size() == 0&lt;/code&gt; である。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex.html&#34;&gt;regex&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; s1[] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; abc 012 def &#34;&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; s2[] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; 012 abc 345 &#34;&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex.html&#34;&gt;regex&lt;/a&gt; re(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;(&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;d+) (&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;w+) (&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;d+)&#34;&lt;/span&gt;);

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ios/boolalpha.html&#34;&gt;boolalpha&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/basic_regex/mark_count.html&#34;&gt;mark_count&lt;/a&gt; = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; re.&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/basic_regex/mark_count.html&#34;&gt;mark_count&lt;/a&gt;() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results.html&#34;&gt;cmatch&lt;/a&gt; m;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;regex_search&lt;/a&gt; 実行前&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/ready.html&#34;&gt;ready&lt;/a&gt; = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; m.&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/ready.html&#34;&gt;ready&lt;/a&gt;() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &lt;span style=&#34;color:#ff0000&#34;&gt;size&lt;/span&gt; = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; m.&lt;span style=&#34;color:#ff0000&#34;&gt;size&lt;/span&gt;() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;regex_search&lt;/a&gt; 実行後（マッチ失敗）&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;regex_search&lt;/a&gt;(s1, m, re)) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;match:&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/ready.html&#34;&gt;ready&lt;/a&gt; = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; m.&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/ready.html&#34;&gt;ready&lt;/a&gt;() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &lt;span style=&#34;color:#ff0000&#34;&gt;size&lt;/span&gt; = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; m.&lt;span style=&#34;color:#ff0000&#34;&gt;size&lt;/span&gt;() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;
  } &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;not match:&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/ready.html&#34;&gt;ready&lt;/a&gt; = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; m.&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/ready.html&#34;&gt;ready&lt;/a&gt;() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &lt;span style=&#34;color:#ff0000&#34;&gt;size&lt;/span&gt; = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; m.&lt;span style=&#34;color:#ff0000&#34;&gt;size&lt;/span&gt;() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;regex_search&lt;/a&gt; 実行後（マッチ成功）&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;regex_search&lt;/a&gt;(s2, m, re)) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;match:&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/ready.html&#34;&gt;ready&lt;/a&gt; = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; m.&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/ready.html&#34;&gt;ready&lt;/a&gt;() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &lt;span style=&#34;color:#ff0000&#34;&gt;size&lt;/span&gt; = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; m.&lt;span style=&#34;color:#ff0000&#34;&gt;size&lt;/span&gt;() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;
  } &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;not match:&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/ready.html&#34;&gt;ready&lt;/a&gt; = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; m.&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/ready.html&#34;&gt;ready&lt;/a&gt;() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &lt;span style=&#34;color:#ff0000&#34;&gt;size&lt;/span&gt; = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; m.&lt;span style=&#34;color:#ff0000&#34;&gt;size&lt;/span&gt;() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;mark_count = 3
ready = false, size = 0
not match:ready = true, size = 0
match:ready = true, size = 4
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.9.0, 4.9.1, 5.0.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>scoped_allocator_adaptor (C++11) -- リンク切れを修正</title>
      <link href="http://cpprefjp.github.io/reference/scoped_allocator/scoped_allocator_adaptor.html"/>
      <id>3d2adeb82e86db0e149e366fa86df4e9160bfbba:reference/scoped_allocator/scoped_allocator_adaptor.md</id>
      <updated>2015-01-15 13:26:24 +0900</updated>
      
        <content type="html">&lt;h1&gt;scoped_allocator_adaptor (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;OuterAlloc&lt;/span&gt;, class... InnerAllocs&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;scoped_allocator_adaptor&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; OuterAlloc;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;scoped_allocator_adaptor&lt;/code&gt;は、&lt;a href=&#34;http://cpprefjp.github.io/reference/vector.html&#34;&gt;&lt;code&gt;vector&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;のように、メモリ確保を行う型が入れ子になっているような場合に、外側と内側でアロケータオブジェクトを共有するための、アロケータクラスのアダプタである。&lt;/p&gt;
&lt;p&gt;以下は、このアダプタクラスを使用することによって変化する、コンテナのメモリイメージである。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://raw.github.com/cpprefjp/image/master/reference/scoped_allocator/scoped_allocator_adaptor/ScopedAllocatorModel_01.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;図1 コンテナ、および各要素がそれぞれに別個のアロケータオブジェクトを持つ&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://raw.github.com/cpprefjp/image/master/reference/scoped_allocator/scoped_allocator_adaptor/ScopedAllocatorModel_03.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;図2 コンテナとその要素で、アロケータオブジェクトの状態を伝搬させる(例1)&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://raw.github.com/cpprefjp/image/master/reference/scoped_allocator/scoped_allocator_adaptor/ScopedAllocatorModel_02.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;図3 全ての要素にアロケータオブジェクトの状態を伝搬させる(例2)&lt;/p&gt;
&lt;p&gt;テンプレートパラメータは、以下を意味する：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;OuterAlloc&lt;/code&gt; : 外側のアロケータ。(たとえばコンテナのアロケータ)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;InnerAlloc...&lt;/code&gt; : 内側のアロケータ。(たとえばコンテナの要素に対するアロケータ)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;メンバ関数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/scoped_allocator/scoped_allocator_adaptor/op_constructor.html&#34;&gt;&lt;code&gt;(constructor)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタ&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;~scoped_allocator_adaptor() = default&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;デストラクタ&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/scoped_allocator/scoped_allocator_adaptor/inner_allocator.html&#34;&gt;&lt;code&gt;inner_allocator&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;内側のアロケータを取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/scoped_allocator/scoped_allocator_adaptor/outer_allocator.html&#34;&gt;&lt;code&gt;outer_allocator&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;外側のアロケータを取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/scoped_allocator/scoped_allocator_adaptor/allocate.html&#34;&gt;&lt;code&gt;allocate&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;メモリを確保する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/scoped_allocator/scoped_allocator_adaptor/deallocate.html&#34;&gt;&lt;code&gt;deallocate&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;メモリを解放する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/scoped_allocator/scoped_allocator_adaptor/max_size.html&#34;&gt;&lt;code&gt;max_size&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;一度に確保可能なメモリの最大サイズを取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/scoped_allocator/scoped_allocator_adaptor/construct.html&#34;&gt;&lt;code&gt;construct&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;オブジェクトを構築する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/scoped_allocator/scoped_allocator_adaptor/destroy.html&#34;&gt;&lt;code&gt;destroy&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;オブジェクトを破棄する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/scoped_allocator/scoped_allocator_adaptor/select_on_container_copy_construction.html&#34;&gt;&lt;code&gt;select_on_container_copy_construction&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンテナのコピー構築に必要なアロケータを取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;メンバ型&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;outer_allocator_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;外側のアロケータ&lt;code&gt;OuterAlloc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;inner_allocator_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;内側のアロケータ。 &lt;code&gt;InnerAllocs&lt;/code&gt;が空だったら&lt;code&gt;scoped_allocator_adaptor&amp;lt;OuterAlloc&amp;gt;&lt;/code&gt;。空じゃなければ&lt;code&gt;scoped_allocator_adaptor&amp;lt;InnerAllocs...&amp;gt;&lt;/code&gt;。&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;value_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素型&lt;code&gt;allocator_traits&amp;lt;OuterAlloc&amp;gt;::value_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;size_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素数を表す符号なし整数型 &lt;code&gt;allocator_traits&amp;lt;OuterAlloc&amp;gt;::size_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;difference_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ポインタの差を表す符号あり整数型&lt;code&gt;allocator_traits&amp;lt;OuterAlloc&amp;gt;::difference_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;pointer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素のポインタ型&lt;code&gt;allocator_traits&amp;lt;OuterAlloc&amp;gt;::pointer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;const_pointer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;読み取り専用の要素のポインタ型 &lt;code&gt;allocator_traits&amp;lt;OuterAlloc&amp;gt;::const_pointer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;void_pointer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;void&lt;/code&gt;ポインタ型 &lt;code&gt;allocator_traits&amp;lt;OuterAlloc&amp;gt;::void_pointer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;const_void_pointer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;読み取り専用の&lt;code&gt;void&lt;/code&gt;ポインタ型 &lt;code&gt;allocator_traits&amp;lt;OuterAlloc&amp;gt;::const_void_pointer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;propagate_on_container_copy_assignment&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コンテナのコピー代入でアロケータを置き換えるかどうかを示す論理型。&lt;br /&gt; &lt;code&gt;OuterAlloc::propagate_on_container_copy_assignment&lt;/code&gt;が存在する場合はその型が使用され、そうでなければ&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/integral_constant-true_type-false_type.html&#34;&gt;&lt;code&gt;false_type&lt;/code&gt;&lt;/a&gt;が使用される。&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;propagate_on_container_move_assignment&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コンテナのムーブ代入でアロケータを置き換えるかどうかを示す論理型。&lt;br /&gt; &lt;code&gt;OuterAlloc::propagate_on_container_move_assignment&lt;/code&gt;が存在する場合はその型が使用され、そうでなければ&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/integral_constant-true_type-false_type.html&#34;&gt;&lt;code&gt;false_type&lt;/code&gt;&lt;/a&gt;が使用される。&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;propagate_on_container_swap&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コンテナの&lt;code&gt;swap&lt;/code&gt;操作でアロケータを置き換えるかどうかを示す論理型。&lt;br /&gt; &lt;code&gt;OuterAlloc::propagate_on_container_swap&lt;/code&gt;が存在する場合はその型が使用され、そうでなければ&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/integral_constant-true_type-false_type.html&#34;&gt;&lt;code&gt;false_type&lt;/code&gt;&lt;/a&gt;が使用される。&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;rebind&amp;lt;U&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型&lt;code&gt;U&lt;/code&gt;を確保するように再束縛する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;非メンバ関数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/scoped_allocator/scoped_allocator_adaptor/op_equal.html&#34;&gt;&lt;code&gt;operator==&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;等値比較&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/scoped_allocator/scoped_allocator_adaptor/op_not_equal.html&#34;&gt;&lt;code&gt;operator!=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;非等値比較&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;例1 コンテナとその要素で、アロケータオブジェクトの状態を伝搬させる&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;forward_list&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;scoped_allocator&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// std::allocatorに状態変数を持たせただけのクラス&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;MyAlloc&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; {
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; state_; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 状態&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;class&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;friend&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;MyAlloc&lt;/span&gt;;
&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;U&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; rebind { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; MyAlloc&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;U&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; other; };

  MyAlloc(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; state &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)
    &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; state_(state) {}

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;U&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  MyAlloc(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; MyAlloc&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;U&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; alloc)
    &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; state_(alloc.state_) {}

  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; getState() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; state_; }
};

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;U&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; MyAlloc&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; lhs, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; MyAlloc&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;U&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; rhs)
{ &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; lhs.getState() &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; rhs.getState(); }

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;U&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; MyAlloc&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; lhs, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; MyAlloc&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;U&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; rhs)
{ &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; lhs.getState() &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; rhs.getState(); }

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// コンテナの要素(Inner)&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; forward_list &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;forward_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;,
  MyAlloc&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// コンテナ(Outer)&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; vector &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;
  T,
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;scoped_allocator_adaptor&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;MyAlloc&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// stringで使用するアロケータオブジェクトを、&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// vectorでも使用する&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; state &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;;
  MyAlloc&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;forward_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; alloc(state);
  vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;forward_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v(alloc);

  v.push_back(forward_list{&lt;span style=&#34;color: #666666&#34;&gt;100&lt;/span&gt;});
  v.push_back(forward_list{&lt;span style=&#34;color: #666666&#34;&gt;200&lt;/span&gt;});

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 同じアロケータオブジェクトが使われていることを確認する。&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// getState()の値が、どちらも5になる。&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; v.get_allocator().getState() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; v.front().get_allocator().getState() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;5
5
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;例2 全ての要素にアロケータオブジェクトの状態を伝搬させる&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;forward_list&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;scoped_allocator&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// std::allocatorに状態変数を持たせただけのクラス&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;MyAlloc&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; {
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; state_; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 状態&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;class&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;friend&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;MyAlloc&lt;/span&gt;;
&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;U&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; rebind { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; MyAlloc&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;U&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; other; };

  MyAlloc(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; state &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)
    &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; state_(state) {}

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;U&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  MyAlloc(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; MyAlloc&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;U&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; alloc)
    &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; state_(alloc.state_) {}

  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; getState() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; state_; }
};

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;U&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; MyAlloc&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; lhs, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; MyAlloc&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;U&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; rhs)
{ &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; lhs.getState() &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; rhs.getState(); }

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;U&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; MyAlloc&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; lhs, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; MyAlloc&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;U&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; rhs)
{ &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; lhs.getState() &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; rhs.getState(); }

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// コンテナの要素(Inner)&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; forward_list &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;forward_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;,
  MyAlloc&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// コンテナ(Outer)&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; vector &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;
  T,
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;scoped_allocator_adaptor&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;MyAlloc&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;, MyAlloc&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; outer_state &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;;
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; inner_state &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;;
  vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;forward_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;allocator_type alloc {
    (MyAlloc&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;forward_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(outer_state)), &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// vector自体のアロケータオブジェクト&lt;/span&gt;
    (MyAlloc&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(inner_state))    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// vectorの全ての要素に使用するアロケータオブジェクト&lt;/span&gt;
  };
  vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;forward_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v(alloc);

  v.push_back(forward_list{&lt;span style=&#34;color: #666666&#34;&gt;100&lt;/span&gt;});
  v.push_back(forward_list{&lt;span style=&#34;color: #666666&#34;&gt;200&lt;/span&gt;});

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// コンテナに使用されるアロケータの状態を確認&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 5になる(outer_state)&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;container allocator : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; v.get_allocator().getState() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 要素に使用されるアロケータの状態を確認&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 全ての要素に、アロケータの状態が伝搬される&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; forward_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; v) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;element allocator : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x.get_allocator().getState() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;container allocator : 5
element allocator : 2
element allocator : 2
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.7.3, 4.8.1, 4.8.2, 4.9.0, 4.9.1, 5.0.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;参照&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2554.pdf&#34; target=&#34;_blank&#34;&gt;N2554 The Scoped Allocator Model (Rev 2)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www32.ocn.ne.jp/~ons/text/CPP0xFAQ.html.ja#scoped-allocator&#34; target=&#34;_blank&#34;&gt;スコープ付きアロケータ - C++11 FAQ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>construct (C++11) -- リンク切れを修正</title>
      <link href="http://cpprefjp.github.io/reference/scoped_allocator/scoped_allocator_adaptor/construct.html"/>
      <id>3d2adeb82e86db0e149e366fa86df4e9160bfbba:reference/scoped_allocator/scoped_allocator_adaptor/construct.md</id>
      <updated>2015-01-15 13:26:24 +0900</updated>
      
        <content type="html">&lt;h1&gt;construct (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, class... Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; construct(T&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; p, Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;... args);                         &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T1&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T2&lt;/span&gt;, class... Args1, class... Args2&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; construct(&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T1, T2&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;*&lt;/span&gt; p, &lt;a href=&#34;http://cpprefjp.github.io/reference/utility/piecewise_construct.html&#34;&gt;piecewise_construct_t&lt;/a&gt;,
               &lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple.html&#34;&gt;tuple&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Args1...&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; x, &lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple.html&#34;&gt;tuple&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Args2...&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; y);         &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T1&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T2&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; construct(&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T1, T2&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;*&lt;/span&gt; p);                              &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T1&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T2&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;U&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;V&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; construct(&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T1, T2&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;*&lt;/span&gt; p, U&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; x, V&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; y);                &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T1&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T2&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;U&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;V&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; construct(&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T1, T2&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;*&lt;/span&gt; p, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;U, V&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; x);         &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (5)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T1&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T2&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;U&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;V&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; construct(&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T1, T2&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;*&lt;/span&gt; p, &lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;U, V&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&amp;amp;&lt;/span&gt; x);              &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (6)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;引数を元にインスタンスを構築する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(1) : 型&lt;code&gt;T&lt;/code&gt;のコンストラクタ引数&lt;code&gt;args...&lt;/code&gt;を元に、型&lt;code&gt;T&lt;/code&gt;のオブジェクトを生成する。以下のいずれかの形式のコンストラクタを呼び出す：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;T(Args&amp;amp;&amp;amp;... args)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;T(allocator_arg_t, Allocator alloc, Args&amp;amp;&amp;amp;... args)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;T(Args&amp;amp;&amp;amp;... args, Allocator alloc)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(2) : &lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;&lt;code&gt;pair&lt;/code&gt;&lt;/a&gt;型の各要素型のコンストラクタ引数を元に、&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;&lt;code&gt;pair&lt;/code&gt;&lt;/a&gt;型のオブジェクトを生成する。以下のいずれかの形式のコンストラクタを呼び出す：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pair&amp;lt;T1, T2&amp;gt;(piecewise_construct_t, tuple&amp;lt;Args1...&amp;gt; x, tuple&amp;lt;Args2...&amp;gt; y)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pair&amp;lt;T1, T2&amp;gt;(piecewise_construct_t, tuple&amp;lt;allocator_arg_t, Allocator, Args1...&amp;gt; xprime, tuple&amp;lt;allocator_arg_t, Allocator, Args2...&amp;gt; yprime)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pair&amp;lt;T1, T2&amp;gt;(piecewise_construct_t, tuple&amp;lt;Args1..., Allocator&amp;gt; xprime, tuple&amp;lt;Args2..., Allocator&amp;gt; yprime)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(3) : &lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;&lt;code&gt;pair&lt;/code&gt;&lt;/a&gt;型の各要素をデフォルト構築する。以下の形式のコンストラクタを呼び出す：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pair&amp;lt;T1, T2&amp;gt;(piecewise_construct_t, tuple&amp;lt;&amp;gt;, tuple&amp;lt;&amp;gt;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(4) : &lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;&lt;code&gt;pair&lt;/code&gt;&lt;/a&gt;型の各要素のコンストラクタ引数を一つずつとって構築する。以下の形式のコンストラクタを呼び出す：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pair&amp;lt;T1, T2&amp;gt;(piecewise_construct_t, tuple&amp;lt;U&amp;gt;&amp;amp;&amp;amp;, tuple&amp;lt;V&amp;gt;&amp;amp;&amp;amp;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(5) : &lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;&lt;code&gt;pair&lt;/code&gt;&lt;/a&gt;型の各要素のコンストラクタ引数をそれぞれひとつずつ、まとめて&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;&lt;code&gt;pair&lt;/code&gt;&lt;/a&gt;としてとって構築する。以下の形式のコンストラクタを呼び出す：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pair&amp;lt;T1, T2&amp;gt;(piecewise_construct_t, const tuple&amp;lt;U&amp;gt;&amp;amp;, const tuple&amp;lt;V&amp;gt;&amp;amp;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(6) : &lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;&lt;code&gt;pair&lt;/code&gt;&lt;/a&gt;型の各要素のコンストラクタ引数をそれぞれひとつずつ、まとめて&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;&lt;code&gt;pair&lt;/code&gt;&lt;/a&gt;としてとって構築する。以下の形式のコンストラクタを呼び出す：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pair&amp;lt;T1, T2&amp;gt;(piecewise_construct_t, tuple&amp;lt;U&amp;gt;&amp;amp;&amp;amp;, tuple&amp;lt;V&amp;gt;&amp;amp;&amp;amp;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;この関数において、以下の名称定義を行う。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;OUTERMOST(x)&lt;/code&gt;関数は、アロケータオブジェクト&lt;code&gt;x&lt;/code&gt;が&lt;code&gt;outer_allocator()&lt;/code&gt;メンバ関数を持っている場合、その関数によって返されるアロケータを返す。そうでない場合は、&lt;code&gt;x&lt;/code&gt;を返す。&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;&lt;code&gt;allocator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;decltype(OUTERMOST(x))&amp;gt;&lt;/code&gt;を&lt;code&gt;OUTERMOST_ALLOC_TRAITS(x)&lt;/code&gt;とする。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(1) : &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/uses_allocator.html&#34;&gt;&lt;code&gt;uses_allocator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;T, inner_allocator_type&amp;gt;::value == false&lt;/code&gt;かつ&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_constructible.html&#34;&gt;&lt;code&gt;is_constructible&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;T, Args...&amp;gt;::value == true&lt;/code&gt;の場合、&lt;code&gt;OUTERMOST_ALLOC_TRAITS(*this)::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits/construct.html&#34;&gt;&lt;code&gt;construct&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(OUTERMOST(*this), p,&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;std::forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Args&amp;gt;(args)...)&lt;/code&gt;を呼び出す。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/uses_allocator.html&#34;&gt;&lt;code&gt;uses_allocator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;T, inner_allocator_type&amp;gt;::value == true&lt;/code&gt;かつ&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_constructible.html&#34;&gt;&lt;code&gt;is_constructible&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;T,&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_arg_t.html&#34;&gt;&lt;code&gt;allocator_arg_t&lt;/code&gt;&lt;/a&gt;&lt;code&gt;, inner_allocator_type, Args...&amp;gt;::value == true&lt;/code&gt;の場合、&lt;code&gt;OUTERMOST_ALLOC_TRAITS(*this)::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits/construct.html&#34;&gt;&lt;code&gt;construct&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(OUTERMOST(*this), p,&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_arg_t.html&#34;&gt;&lt;code&gt;allocator_arg&lt;/code&gt;&lt;/a&gt;&lt;code&gt;, inner_allocator(),&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;std::forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Args&amp;gt;(args)...)&lt;/code&gt;を呼び出す。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/uses_allocator.html&#34;&gt;&lt;code&gt;uses_allocator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;T, inner_allocator_type&amp;gt;::value == true&lt;/code&gt;かつ&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_constructible.html&#34;&gt;&lt;code&gt;is_constructible&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;T, Args..., inner_allocator_type&amp;gt;::value == true&lt;/code&gt;の場合、&lt;code&gt;OUTERMOST_ALLOC_TRAITS(*this)::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits/construct.html&#34;&gt;&lt;code&gt;construct&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(OUTERMOST(*this), p,&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;std::forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Args&amp;gt;(args)..., inner_allocator())&lt;/code&gt;を呼び出す。&lt;/li&gt;
&lt;li&gt;それ以外の場合、プログラムは不適格となる。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(2) : &lt;code&gt;T1&lt;/code&gt;を構築するための説明用の変数&lt;code&gt;xprime&lt;/code&gt;を、&lt;code&gt;Args1...&lt;/code&gt;を以下のように元に定義する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/uses_allocator.html&#34;&gt;&lt;code&gt;uses_allocator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;T1, inner_allocator_type&amp;gt;::value == false&lt;/code&gt;かつ&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_constructible.html&#34;&gt;&lt;code&gt;is_constructible&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;T1, Args1...&amp;gt;::value == true&lt;/code&gt;の場合、&lt;code&gt;x&lt;/code&gt;を&lt;code&gt;xprime&lt;/code&gt;とする。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/uses_allocator&#34;&gt;&lt;code&gt;uses_allocator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;T1, inner_allocator_type&amp;gt;::value == true&lt;/code&gt;かつ&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_constructible.html&#34;&gt;&lt;code&gt;is_constructible&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;T1,&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_arg_t.html&#34;&gt;&lt;code&gt;allocator_arg_t&lt;/code&gt;&lt;/a&gt;&lt;code&gt;, inner_allocator_type, Args1...&amp;gt;::value == true&lt;/code&gt;の場合、&lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple/tuple_cat.html&#34;&gt;&lt;code&gt;tuple_cat&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple.html&#34;&gt;&lt;code&gt;tuple&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_arg_t.html&#34;&gt;&lt;code&gt;allocator_arg_t&lt;/code&gt;&lt;/a&gt;&lt;code&gt;, inner_allocator_type&amp;amp;&amp;gt;(&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_arg_t.html&#34;&gt;&lt;code&gt;allocator_arg&lt;/code&gt;&lt;/a&gt;&lt;code&gt;, inner_allocator_type()), x)&lt;/code&gt;を&lt;code&gt;xprime&lt;/code&gt;とする。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/uses_allocator&#34;&gt;&lt;code&gt;uses_allocator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;T1, inner_allocator_type&amp;gt;::value == true&lt;/code&gt;かつ&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_constructible.html&#34;&gt;&lt;code&gt;is_constructible&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;T1, Args1..., inner_allocator_type&amp;gt;::value == true&lt;/code&gt;の場合&lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple/tuple_cat.html&#34;&gt;&lt;code&gt;tuple_cat&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(x,&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple.html&#34;&gt;&lt;code&gt;tuple&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;inner_allocator_type&amp;amp;&amp;gt;(inner_allocator_type()))&lt;/code&gt;を&lt;code&gt;xprime&lt;/code&gt;とする。&lt;/li&gt;
&lt;li&gt;それ以外の場合、プログラムは不適格となる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同様の定義を&lt;code&gt;T2&lt;/code&gt;型に対しても行い、&lt;code&gt;Args2...&lt;/code&gt;から&lt;code&gt;yprime&lt;/code&gt;を定義する。&lt;/p&gt;
&lt;p&gt;ここで定義した&lt;code&gt;xprime&lt;/code&gt;と&lt;code&gt;yprime&lt;/code&gt;を使用し、以下の呼び出しを行う：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;OUTERMOST_ALLOC_TRAITS(*this)::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits/construct.html&#34;&gt;&lt;code&gt;construct&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(OUTERMOST(*this), p,&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/utility/piecewise_construct.html&#34;&gt;&lt;code&gt;piecewise_construct&lt;/code&gt;&lt;/a&gt;&lt;code&gt;, xprime, yprime)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(3) : 以下と同等の動作を行う。 &lt;code&gt;construct(p,&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/utility/piecewise_construct.html&#34;&gt;&lt;code&gt;piecewise_construct&lt;/code&gt;&lt;/a&gt;&lt;code&gt;,&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple.html&#34;&gt;&lt;code&gt;tuple&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;&amp;gt;(),&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple.html&#34;&gt;&lt;code&gt;tuple&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;&amp;gt;())&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(4) : 以下と同等の動作を行う。 &lt;code&gt;construct(p,&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/utility/piecewise_construct.html&#34;&gt;&lt;code&gt;piecewise_construct&lt;/code&gt;&lt;/a&gt;&lt;code&gt;,&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple/forward_as_tuple.html&#34;&gt;&lt;code&gt;forward_as_tuple&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;std::forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;U&amp;gt;(x)),&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple/forward_as_tuple.html&#34;&gt;&lt;code&gt;forward_as_tuple&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;std::forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;V&amp;gt;(y)))&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(5) : 以下と同等の動作を行う。 &lt;code&gt;construct(p,&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/utility/piecewise_construct.html&#34;&gt;&lt;code&gt;piecewise_construct&lt;/code&gt;&lt;/a&gt;&lt;code&gt;,&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple/forward_as_tuple.html&#34;&gt;&lt;code&gt;forward_as_tuple&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(x.first),&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple/forward_as_tuple.html&#34;&gt;&lt;code&gt;forward_as_tuple&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(x.second))&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;(6) : 以下と同等の動作を行う。 &lt;code&gt;construct(p,&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/utility/piecewise_construct.html&#34;&gt;&lt;code&gt;piecewise_construct&lt;/code&gt;&lt;/a&gt;&lt;code&gt;,&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple/forward_as_tuple.html&#34;&gt;&lt;code&gt;forward_as_tuple&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;std::forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(x.first)),&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple/forward_as_tuple.html&#34;&gt;&lt;code&gt;forward_as_tuple&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;std::forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(x.second)))&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;cassert&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;scoped_allocator&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;alloc_t&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// コンテナの要素(Inner)&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; string &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;,
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;char_traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;,
  &lt;span style=&#34;color: #B00040&#34;&gt;alloc_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// コンテナ(Outer)&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; vector &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;
  T,
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;scoped_allocator_adaptor&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;alloc_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;alloc_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; pair_of_vector &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;
  T,
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;scoped_allocator_adaptor&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;alloc_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;construct_propagate_alloc&lt;/span&gt;()
{
  vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;allocator_type alloc {
    &lt;span style=&#34;color: #B00040&#34;&gt;alloc_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(), &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// vector自体のアロケータオブジェクト&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;alloc_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;()    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// vectorの全ての要素に使用するアロケータオブジェクト&lt;/span&gt;
  };

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 外側のアロケータを使用し、stringが1要素入るメモリを確保&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; n &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;;
  string&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; p &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; alloc.allocate(n);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) 以下のコンストラクタを呼び出し、アロケータオブジェクトを伝搬させる&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// basic_string(const char*, Allocator)&lt;/span&gt;
  alloc.construct(p, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;hello&#34;&lt;/span&gt;);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// オブジェクトを破棄&lt;/span&gt;
  alloc.destroy(p);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// メモリを解放&lt;/span&gt;
  alloc.deallocate(p, n);
}

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;construct_pair&lt;/span&gt;()
{
  pair_of_vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;string, string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;::&lt;/span&gt;allocator_type alloc;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; n &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;string, string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;*&lt;/span&gt; p &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; alloc.allocate(n);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// pairの各要素に対して以下のコンストラクタを呼び出し、&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// アロケータオブジェクトを伝搬させる。&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// basic_string(const char*, Allocator)&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;string, string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;*&lt;/span&gt; pair_p &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; p;
  alloc.construct(p, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;piecewise_construct,
                  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;forward_as_tuple(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;hello&#34;&lt;/span&gt;),
                  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;forward_as_tuple(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;world&#34;&lt;/span&gt;));
  assert(pair_p&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;first &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;hello&#34;&lt;/span&gt;);
  assert(pair_p&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;second &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;world&#34;&lt;/span&gt;);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// pairの要素をデフォルト構築する。&lt;/span&gt;
  pair_p &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;next(pair_p);
  alloc.construct(pair_p);
  assert(pair_p&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;first &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&#34;&lt;/span&gt;);
  assert(pair_p&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;second &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&#34;&lt;/span&gt;);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4)&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// pairの各要素のコンストラクタ引数をひとつずつ受け取って構築&lt;/span&gt;
  pair_p &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;next(pair_p);
  alloc.construct(pair_p, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;hello&#34;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;world&#34;&lt;/span&gt;);
  assert(pair_p&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;first &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;hello&#34;&lt;/span&gt;);
  assert(pair_p&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;second &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;world&#34;&lt;/span&gt;);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (5)&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// pairの各要素のコンストラクタ引数をひとつずつ、&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// まとめてpairとして受け取り、それぞれをtupleに分解して構築&lt;/span&gt;
  pair_p &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;next(pair_p);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&lt;/span&gt; fifth_args(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;hello&#34;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;world&#34;&lt;/span&gt;);
  alloc.construct(pair_p, fifth_args);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (6)&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// pairの各要素のコンストラクタ引数をひとつずつ、&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// まとめてpairとして受け取り、それぞれをtupleに分解して転送して構築&lt;/span&gt;
  pair_p &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;next(pair_p);
  alloc.construct(pair_p, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;hello&#34;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;world&#34;&lt;/span&gt;));

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; n; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i) {
    alloc.destroy(p &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; i);
  }

  alloc.deallocate(p, n);
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  construct_propagate_alloc();
  construct_pair();
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.3 (&lt;code&gt;forward_as_tuple()&lt;/code&gt;まで含めた完全な実装)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.7.3&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; ??&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>multisetset -- リンク切れを修正</title>
      <link href="http://cpprefjp.github.io/reference/set/multiset.html"/>
      <id>3d2adeb82e86db0e149e366fa86df4e9160bfbba:reference/set/multiset.md</id>
      <updated>2015-01-15 13:26:24 +0900</updated>
      
        <content type="html">&lt;h1&gt;multisetset&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Key&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Compare&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/less.html&#34;&gt;less&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Key&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Allocator&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator.html&#34;&gt;allocator&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Key&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;multiset&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;multiset&lt;/code&gt; は連想コンテナの一種であり、要素自身がキーとなる。 
連想コンテナは特にそれらキーによる要素アクセスが効率的になるようよう設計されたコンテナである（要素への相対位置または絶対位置によるアクセスが効率的であるシーケンシャルコンテナとは異なる）。 
内部的には、&lt;code&gt;multiset&lt;/code&gt; 内の要素は、コンテナの構築時に設定された&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm.html#strict-weak-ordering&#34;&gt;狭義の弱順序&lt;/a&gt;基準に従って小さいものから大きいものへとソートされる。 &lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set.html&#34;&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt;が重複キーを許可しないのに対し、&lt;code&gt;multiset&lt;/code&gt;は重複キーを許可する。&lt;br /&gt;
&lt;code&gt;set&lt;/code&gt;とは違い、&lt;a href=&#34;http://cpprefjp.github.io/reference/set/multiset/find.html&#34;&gt;&lt;code&gt;find()&lt;/code&gt;&lt;/a&gt;メンバ関数は、キーに合致した最初の要素へのイテレータを返し、&lt;a href=&#34;http://cpprefjp.github.io/reference/set/multiset/count.html&#34;&gt;&lt;code&gt;count()&lt;/code&gt;&lt;/a&gt;メンバ関数はキーに合致する要素数を返す。  &lt;/p&gt;
&lt;p&gt;このコンテナクラスは、双方向イテレータをサポートする。  &lt;/p&gt;
&lt;p&gt;各テンプレートパラメータは以下のような意味である。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Key&lt;/code&gt;: キーの型。このコンテナに格納されれる要素の型。&lt;code&gt;multiset&lt;/code&gt; に格納される要素はそれぞれはキーでもある。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Compare&lt;/code&gt;: 比較クラス。このクラスは 2 つの引数（同じ型であり、コンテナの要素型でもある）をとり &lt;code&gt;bool&lt;/code&gt; 値を返す。&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm.html#strict-weak-ordering&#34;&gt;狭義の弱順序&lt;/a&gt;において &lt;code&gt;a&lt;/code&gt; が &lt;code&gt;b&lt;/code&gt; よりも前の場所に位置づけられる場合に &lt;code&gt;true&lt;/code&gt; である。これはクラスが関数呼び出しオブジェクトを実装したクラスであっても良いし関数ポインタであっても良い（例は コンストラクタ を参照）。これは、&lt;code&gt;operator&amp;lt;()&lt;/code&gt; を適用( &lt;code&gt;a &amp;lt; b&lt;/code&gt; )したときと同じ値を返す &lt;code&gt;less&amp;lt;Key&amp;gt;&lt;/code&gt; がデフォルトである。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Allocator&lt;/code&gt;: ストレージアロケーションモデルを決定づける、アロケータオブジェクトの型である。デフォルトでは、&lt;code&gt;Key&lt;/code&gt; への &lt;code&gt;allocator&lt;/code&gt; クラステンプレート（これは値に依存しないシンプルなメモリ確保モデルを定義する）が使われる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;メンバ関数&lt;/h2&gt;
&lt;h3&gt;構築・破棄&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/op_constructor.html&#34;&gt;(constructor)&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタ&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/op_destructor.html&#34;&gt;(destructor)&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;デストラクタ&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/op_assign.html&#34;&gt;&lt;code&gt;operator=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;代入演算子&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;アロケータオブジェクトを取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;イテレータ&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/begin.html&#34;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;先頭を指すイテレータを取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/begin.html&#34;&gt;&lt;code&gt;cbegin&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;先頭を指す読み取り専用イテレータを取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/end.html&#34;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;末尾を指すイテレータを取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/end.html&#34;&gt;&lt;code&gt;cend&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;末尾を指す読み取り専用イテレータを取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/rbegin.html&#34;&gt;&lt;code&gt;rbegin&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;末尾を指す逆イテレータを取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/rbegin.html&#34;&gt;&lt;code&gt;crbegin&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;末尾を指す読み取り専用逆イテレータを取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/rend.html&#34;&gt;&lt;code&gt;rend&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;先頭を指す逆イテレータを取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/rend.html&#34;&gt;&lt;code&gt;crend&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;先頭を指す読み取り専用逆イテレータを取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;領域&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/empty.html&#34;&gt;&lt;code&gt;empty&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンテナが空であるかどうかを調べる&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素数を取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/max_size.html&#34;&gt;&lt;code&gt;max_size&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;格納可能な最大の要素数を取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;コンテナの変更&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/clear.html&#34;&gt;&lt;code&gt;clear&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;全ての要素を削除する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/insert.html&#34;&gt;&lt;code&gt;insert&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素を挿入する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/emplace.html&#34;&gt;&lt;code&gt;emplace&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素を直接構築する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/emplace_hint.html&#34;&gt;&lt;code&gt;emplace_hint&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ヒントを使って要素を直接構築する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/erase.html&#34;&gt;&lt;code&gt;erase&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素を削除する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/swap.html&#34;&gt;&lt;code&gt;swap&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンテンツを交換する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;要素アクセス&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/count.html&#34;&gt;&lt;code&gt;count&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指定したキーにマッチする要素の数を返す&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/find.html&#34;&gt;&lt;code&gt;find&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指定したキーで要素を探す&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/equal_range.html&#34;&gt;&lt;code&gt;equal_range&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指定したキーにマッチする要素範囲を返す&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/lower_bound.html&#34;&gt;&lt;code&gt;lower_bound&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;与えられた値より小さくない最初の要素へのイテレータを返す&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/upper_bound.html&#34;&gt;&lt;code&gt;upper_bound&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;特定の値よりも大きい最初の要素へのイテレータを返す&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;オブザーバー&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/key_comp.html&#34;&gt;&lt;code&gt;key_comp&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;キーを比較した結果を返す&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/value_comp.html&#34;&gt;&lt;code&gt;value_comp&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;値を比較した結果を返す&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;メンバ型&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;key_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;キーの型。テンプレートパラメータ &lt;code&gt;Key&lt;/code&gt;。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;value_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素の型。テンプレートパラメータ &lt;code&gt;Key&lt;/code&gt;。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;key_compare&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;キーの大小関係を判定する二項述語の型。テンプレートパラメータ &lt;code&gt;Compare&lt;/code&gt;。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;value_compare&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素の大小関係を判定する二項述語の型。テンプレートパラメータ &lt;code&gt;Compare&lt;/code&gt;。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;allocator_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アロケータの型。テンプレートパラメータ &lt;code&gt;Allocator&lt;/code&gt;。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;reference&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素&lt;code&gt;value_type&lt;/code&gt;への参照型。&lt;code&gt;value_type&amp;amp;&lt;/code&gt;。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;const_reference&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素&lt;code&gt;value_type&lt;/code&gt;への&lt;code&gt;const&lt;/code&gt;参照型。&lt;code&gt;const value_type&amp;amp;&lt;/code&gt;。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;双方向イテレータ&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;const_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;読み取り専用双方向イテレータ。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;size_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素数を表す符号なし整数型。&lt;code&gt;difference_type&lt;/code&gt; で表現可能な非負整数（0以上の整数）を表すことが可能。(通常は &lt;a href=&#34;http://cpprefjp.github.io/reference/cstddef/size_t.html&#34;&gt;&lt;code&gt;size_t&lt;/code&gt;&lt;/a&gt;)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;difference_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;同一のコンテナを指す &lt;code&gt;iterator&lt;/code&gt; の差を表す符号付き整数型(通常は &lt;a href=&#34;http://cpprefjp.github.io/reference/cstddef/ptrdiff_t.html&#34;&gt;&lt;code&gt;ptrdiff_t&lt;/code&gt;&lt;/a&gt;) &lt;br /&gt;&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/iterator_traits.html&#34;&gt;&lt;code&gt;iterator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;iterator&amp;gt;::difference_type&lt;/code&gt;、および、&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/iterator_traits.html&#34;&gt;&lt;code&gt;iterator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;const_iterator&amp;gt;::difference_type&lt;/code&gt; と同じ。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;pointer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素 &lt;code&gt;value_type&lt;/code&gt;へのポインタ。&lt;br /&gt; C++03 : &lt;code&gt;typename Allocator::pointer&lt;/code&gt;。&lt;br /&gt; C++11以降 : &lt;code&gt;typename&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;&lt;code&gt;allocator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Allocator&amp;gt;::pointer&lt;/code&gt;。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;const pointer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素 &lt;code&gt;value_type&lt;/code&gt;への&lt;code&gt;const&lt;/code&gt;ポインタ。&lt;br /&gt; C++03 : &lt;code&gt;typename Allocator::const_pointer&lt;/code&gt;。&lt;br /&gt; C++11以降 : &lt;code&gt;typename&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;&lt;code&gt;allocator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Allocator&amp;gt;::const_pointer&lt;/code&gt;。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;reverse_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;逆順双方向イテレータ。&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/reverse_iterator.html&#34;&gt;&lt;code&gt;reverse_iterator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;iterator&amp;gt;&lt;/code&gt;。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;const_reverse_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;読み取り専用逆順双方向イテレータ。&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/reverse_iterator.html&#34;&gt;&lt;code&gt;reverse_iterator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;const_iterator&amp;gt;&lt;/code&gt;。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;非メンバ関数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/op_equal.html&#34;&gt;&lt;code&gt;operator==&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;左辺と右辺が等しいかの判定を行う&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/op_not_equal.html&#34;&gt;&lt;code&gt;operator!=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;左辺と右辺が等しくないかの判定を行う&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/op_less.html&#34;&gt;&lt;code&gt;operator&amp;lt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;左辺が右辺より小さいかの判定を行う&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/op_greater_equal.html&#34;&gt;&lt;code&gt;operator&amp;lt;=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;左辺が右辺より小さいか等しいかの判定を行う&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/op_greater.html&#34;&gt;&lt;code&gt;operator&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;左辺が右辺より大きいかの判定を行う&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/op_greater_equal.html&#34;&gt;&lt;code&gt;operator&amp;gt;=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;左辺が右辺より大きいか等しいかの判定を行う&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;swap&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2つの&lt;code&gt;set&lt;/code&gt;オブジェクトを入れ替える&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;set&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// intをキーとして扱う集合&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;multiset&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; s;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 挿入&lt;/span&gt;
  s.insert(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);
  s.insert(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
  s.insert(&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;);
  s.insert(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// キーを重複させることが可能&lt;/span&gt;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// キー1に該当する要素数を取得する&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; count &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; s.count(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 検索 : キー(int)を指定し、対応する値を得る&lt;/span&gt;
  decltype(s)&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator it &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; s.find(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (it &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; s.end()) {
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 発見した&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 同じキーの要素を全て列挙する&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; count; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i) {
      &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; value &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it;
      std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; value &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;not found&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1
1
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>set -- リンク切れを修正</title>
      <link href="http://cpprefjp.github.io/reference/set/set.html"/>
      <id>3d2adeb82e86db0e149e366fa86df4e9160bfbba:reference/set/set.md</id>
      <updated>2015-01-15 13:26:24 +0900</updated>
      
        <content type="html">&lt;h1&gt;set&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Key&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Compare&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/less.html&#34;&gt;less&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Key&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Allocator&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator.html&#34;&gt;allocator&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Key&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;set&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;set&lt;/code&gt; はユニークな要素を格納する連想コンテナの一種であり、要素自身がキーとなる。 
連想コンテナは特にそれらキーによる要素アクセスが効率的になるようよう設計されたコンテナである（要素への相対位置または絶対位置によるアクセスが効率的であるシーケンシャルコンテナとは異なる）。 
内部的には、&lt;code&gt;set&lt;/code&gt; 内の要素は、コンテナの構築時に設定された&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm.html#strict-weak-ordering&#34;&gt;狭義の弱順序&lt;/a&gt;基準に従って小さいものから大きいものへとソートされる。 &lt;/p&gt;
&lt;p&gt;&lt;code&gt;set&lt;/code&gt; は一般的に、二分木として実装される。従って、連想コンテナである &lt;code&gt;set&lt;/code&gt; の主な特性は以下の通りである。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ユニークな要素の値：互いに等しい二つの要素が &lt;code&gt;set&lt;/code&gt; に格納されることは無い。複数の等しい値を許す同様の連想コンテナは &lt;code&gt;multiset&lt;/code&gt; を参照のこと。&lt;/li&gt;
&lt;li&gt;要素の値はキーそのものである。キーを使って要素にアクセスするがキーとは異なる値へマップする同様の連想コンテナは &lt;code&gt;map&lt;/code&gt; を参照のこと。&lt;/li&gt;
&lt;li&gt;要素は常に&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm.html#strict-weak-ordering&#34;&gt;狭義の弱順序&lt;/a&gt;に従う。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このコンテナクラスは、双方向イテレータをサポートする。&lt;/p&gt;
&lt;p&gt;各テンプレートパラメータは以下のような意味である。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Key&lt;/code&gt;: キーの型。このコンテナに格納されれる要素の型。&lt;code&gt;set&lt;/code&gt; に格納される要素はそれぞれはキーでもある。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Compare&lt;/code&gt;: 比較クラス。このクラスは 2 つの引数（同じ型であり、コンテナの要素型でもある）をとり &lt;code&gt;bool&lt;/code&gt; 値を返す。&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm.html#strict-weak-ordering&#34;&gt;狭義の弱順序&lt;/a&gt;において &lt;code&gt;a&lt;/code&gt; が &lt;code&gt;b&lt;/code&gt; よりも前の場所に位置づけられる場合に &lt;code&gt;true&lt;/code&gt; である。これはクラスが関数呼び出しオブジェクトを実装したクラスであっても良いし関数ポインタであっても良い（例は コンストラクタ を参照）。これは、&lt;code&gt;operator&amp;lt;()&lt;/code&gt; を適用( &lt;code&gt;a &amp;lt; b&lt;/code&gt; )したときと同じ値を返す &lt;code&gt;less&amp;lt;Key&amp;gt;&lt;/code&gt; がデフォルトである。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Allocator&lt;/code&gt;: ストレージアロケーションモデルを決定づける、アロケータオブジェクトの型である。デフォルトでは、&lt;code&gt;Key&lt;/code&gt; への &lt;code&gt;allocator&lt;/code&gt; クラステンプレート（これは値に依存しないシンプルなメモリ確保モデルを定義する）が使われる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;メンバ関数&lt;/h2&gt;
&lt;h3&gt;構築・破棄&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/op_constructor.html&#34;&gt;(constructor)&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタ&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/op_destructor.html&#34;&gt;(destructor)&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;デストラクタ&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/op_assign.html&#34;&gt;&lt;code&gt;operator=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;代入演算子&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;アロケータオブジェクトを取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;イテレータ&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/begin.html&#34;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;先頭を指すイテレータを取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/begin.html&#34;&gt;&lt;code&gt;cbegin&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;先頭を指す読み取り専用イテレータを取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/end.html&#34;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;末尾を指すイテレータを取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/end.html&#34;&gt;&lt;code&gt;cend&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;末尾を指す読み取り専用イテレータを取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/rbegin.html&#34;&gt;&lt;code&gt;rbegin&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;末尾を指す逆イテレータを取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/rbegin.html&#34;&gt;&lt;code&gt;crbegin&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;末尾を指す読み取り専用逆イテレータを取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/rend.html&#34;&gt;&lt;code&gt;rend&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;先頭を指す逆イテレータを取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/rend.html&#34;&gt;&lt;code&gt;crend&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;先頭を指す読み取り専用逆イテレータを取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;領域&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/empty.html&#34;&gt;&lt;code&gt;empty&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンテナが空であるかどうかを調べる&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素数を取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/max_size.html&#34;&gt;&lt;code&gt;max_size&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;格納可能な最大の要素数を取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;コンテナの変更&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/clear.html&#34;&gt;&lt;code&gt;clear&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;全ての要素を削除する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/insert.html&#34;&gt;&lt;code&gt;insert&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素を挿入する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/emplace.html&#34;&gt;&lt;code&gt;emplace&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素を直接構築する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/emplace_hint.html&#34;&gt;&lt;code&gt;emplace_hint&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ヒントを使って要素を直接構築する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/erase.html&#34;&gt;&lt;code&gt;erase&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素を削除する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/swap.html&#34;&gt;&lt;code&gt;swap&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンテンツを交換する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;要素アクセス&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/count.html&#34;&gt;&lt;code&gt;count&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指定したキーにマッチする要素の数を返す&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/find.html&#34;&gt;&lt;code&gt;find&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指定したキーで要素を探す&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/equal_range.html&#34;&gt;&lt;code&gt;equal_range&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指定したキーにマッチする要素範囲を返す&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/lower_bound.html&#34;&gt;&lt;code&gt;lower_bound&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;与えられた値より小さくない最初の要素へのイテレータを返す&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/upper_bound.html&#34;&gt;&lt;code&gt;upper_bound&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;特定の値よりも大きい最初の要素へのイテレータを返す&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;オブザーバー&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/key_comp.html&#34;&gt;&lt;code&gt;key_comp&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;キーを比較した結果を返す&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/value_comp.html&#34;&gt;&lt;code&gt;value_comp&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;値を比較した結果を返す&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;メンバ型&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;key_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;キーの型。テンプレートパラメータ &lt;code&gt;Key&lt;/code&gt;。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;value_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素の型。テンプレートパラメータ &lt;code&gt;Key&lt;/code&gt;。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;key_compare&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;キーの大小関係を判定する二項述語の型。テンプレートパラメータ &lt;code&gt;Compare&lt;/code&gt;。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;value_compare&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素の大小関係を判定する二項述語の型。テンプレートパラメータ &lt;code&gt;Compare&lt;/code&gt;。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;allocator_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アロケータの型。テンプレートパラメータ &lt;code&gt;Allocator&lt;/code&gt;。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;reference&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素&lt;code&gt;value_type&lt;/code&gt;への参照型。&lt;code&gt;value_type&amp;amp;&lt;/code&gt;。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;const_reference&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素&lt;code&gt;value_type&lt;/code&gt;への&lt;code&gt;const&lt;/code&gt;参照型。&lt;code&gt;const value_type&amp;amp;&lt;/code&gt;。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;双方向イテレータ&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;const_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;読み取り専用双方向イテレータ。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;size_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素数を表す符号なし整数型。&lt;code&gt;difference_type&lt;/code&gt; で表現可能な非負整数（0以上の整数）を表すことが可能。(通常は &lt;a href=&#34;http://cpprefjp.github.io/reference/cstddef/size_t.html&#34;&gt;&lt;code&gt;size_t&lt;/code&gt;&lt;/a&gt;)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;difference_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;同一のコンテナを指す &lt;code&gt;iterator&lt;/code&gt; の差を表す符号付き整数型(通常は &lt;a href=&#34;http://cpprefjp.github.io/reference/cstddef/ptrdiff_t.html&#34;&gt;&lt;code&gt;ptrdiff_t&lt;/code&gt;&lt;/a&gt;) &lt;br /&gt;&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/iterator_traits.html&#34;&gt;&lt;code&gt;iterator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;iterator&amp;gt;::difference_type&lt;/code&gt;、および、&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/iterator_traits.html&#34;&gt;&lt;code&gt;iterator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;const_iterator&amp;gt;::difference_type&lt;/code&gt; と同じ。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;pointer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素 &lt;code&gt;value_type&lt;/code&gt;へのポインタ。&lt;br /&gt; C++03 : &lt;code&gt;typename Allocator::pointer&lt;/code&gt;。&lt;br /&gt; C++11以降 : &lt;code&gt;typename&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;&lt;code&gt;allocator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Allocator&amp;gt;::pointer&lt;/code&gt;。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;const pointer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素 &lt;code&gt;value_type&lt;/code&gt;への&lt;code&gt;const&lt;/code&gt;ポインタ。&lt;br /&gt; C++03 : &lt;code&gt;typename Allocator::const_pointer&lt;/code&gt;。&lt;br /&gt; C++11以降 : &lt;code&gt;typename&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;&lt;code&gt;allocator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Allocator&amp;gt;::const_pointer&lt;/code&gt;。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;reverse_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;逆順双方向イテレータ。&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/reverse_iterator.html&#34;&gt;&lt;code&gt;reverse_iterator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;iterator&amp;gt;&lt;/code&gt;。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;const_reverse_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;読み取り専用逆順双方向イテレータ。&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/reverse_iterator.html&#34;&gt;&lt;code&gt;reverse_iterator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;const_iterator&amp;gt;&lt;/code&gt;。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;非メンバ関数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/op_equal.html&#34;&gt;&lt;code&gt;operator==&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;左辺と右辺が等しいかの判定を行う&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/op_not_equal.html&#34;&gt;&lt;code&gt;operator!=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;左辺と右辺が等しくないかの判定を行う&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/op_less.html&#34;&gt;&lt;code&gt;operator&amp;lt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;左辺が右辺より小さいかの判定を行う&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/op_greater_equal.html&#34;&gt;&lt;code&gt;operator&amp;lt;=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;左辺が右辺より小さいか等しいかの判定を行う&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/op_greater.html&#34;&gt;&lt;code&gt;operator&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;左辺が右辺より大きいかの判定を行う&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/op_greater_equal.html&#34;&gt;&lt;code&gt;operator&amp;gt;=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;左辺が右辺より大きいか等しいかの判定を行う&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;swap&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2つの&lt;code&gt;set&lt;/code&gt;オブジェクトを入れ替える&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;set&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// intをキーとして扱う集合&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;set&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; s;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 挿入&lt;/span&gt;
  s.insert(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);
  s.insert(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
  s.insert(&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 検索 : キー(int)を指定し、対応する値を得る&lt;/span&gt;
  decltype(s)&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator it &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; s.find(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (it &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; s.end()) {
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 発見した&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; value &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; value &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;not found&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin, cbegin -- リンク切れを修正</title>
      <link href="http://cpprefjp.github.io/reference/set/set/begin.html"/>
      <id>3d2adeb82e86db0e149e366fa86df4e9160bfbba:reference/set/set/begin.md</id>
      <updated>2015-01-15 13:26:24 +0900</updated>
      
        <content type="html">&lt;h1&gt;begin, cbegin&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;iterator begin() noexcept;
const_iterator begin() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; noexcept;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// since C++11&lt;/span&gt;
const_iterator cbegin() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; noexcept;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;set&lt;/code&gt; コンテナの先頭要素を参照するイテレータを返す。 
内部的に、&lt;code&gt;set&lt;/code&gt;コンテナは要素を下位から上位へと並べており、従って &lt;code&gt;begin()&lt;/code&gt;, &lt;code&gt;cbegin()&lt;/code&gt; は &lt;code&gt;set&lt;/code&gt; 内の最下位のキーにあたる値を返す。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;コンテナの先頭要素へのイテレータ。
&lt;code&gt;iterator&lt;/code&gt; と &lt;code&gt;const_iterator&lt;/code&gt; はともにメンバ型である。&lt;code&gt;set&lt;/code&gt; クラステンプレートにおいて、これらは双方向イテレータである。&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;定数時間。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;set&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  set&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c;
  c.insert(&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;);
  c.insert(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);
  c.insert(&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;);
  c.insert(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
  c.insert(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;);
  c.insert(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;);
  c.insert(&lt;span style=&#34;color: #666666&#34;&gt;9&lt;/span&gt;);

  set&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;iterator i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; c.begin();
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;while&lt;/span&gt; (i &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; c.end())
    cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;i&lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; &#34;&lt;/span&gt;;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;0 1 2 4 5 9 
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/end.html&#34;&gt;&lt;code&gt;set::end, cend&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;末尾を指すイテレータを取得する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/rbegin.html&#34;&gt;&lt;code&gt;set::rbegin, crbegin&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;末尾を指す逆イテレータを取得する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/rend.html&#34;&gt;&lt;code&gt;set::rend, crend&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;先頭を指す逆イテレータを取得する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- リンク切れを修正</title>
      <link href="http://cpprefjp.github.io/reference/set/set/op_assign.html"/>
      <id>3d2adeb82e86db0e149e366fa86df4e9160bfbba:reference/set/set/op_assign.md</id>
      <updated>2015-01-15 13:26:24 +0900</updated>
      
        <content type="html">&lt;h1&gt;operator=&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;set&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Key,Compare,Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; set&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Key,Compare,Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; x);

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// since C++11&lt;/span&gt;
set&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Key,Compare,Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(set&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Key,Compare,Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&amp;amp;&lt;/span&gt; y);

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// since C++11&lt;/span&gt;
set&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(initializer_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; init);
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;set&amp;lt;Key,Compare,Allocator&amp;gt;&amp;amp; operator=(const set&amp;lt;Key,Compare,Allocator&amp;gt;&amp;amp; x)&lt;/code&gt;&lt;br /&gt;&lt;code&gt;x&lt;/code&gt;に格納されている要素のコピーをコンテナの新しい要素とする。&lt;br /&gt;この呼び出しの前に格納されていた要素は取り除かれ、&lt;code&gt;x&lt;/code&gt; に格納されている要素のそれぞれのコピーによって置き換えられる。&lt;br /&gt;このメンバ関数の呼び出しの後、&lt;code&gt;set&lt;/code&gt; オブジェクトと &lt;code&gt;x&lt;/code&gt; は同じサイズになり、比較すると互いに等しくなる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set&amp;lt;Key,Compare,Allocator&amp;gt;&amp;amp; operator=(set&amp;lt;Key,Compare,Allocator&amp;gt;&amp;amp;&amp;amp; y)&lt;/code&gt;&lt;br /&gt;&lt;code&gt;y&lt;/code&gt; に格納されている要素をムーブしてコンテナの新しい要素とする。&lt;br /&gt;この呼び出しの前に格納されていた要素は取り除かれ、&lt;code&gt;y&lt;/code&gt; に格納されていた要素がムーブされることで置き換えられる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set&amp;amp; operator=(initializer_list&amp;lt;value_type&amp;gt; init)&lt;/code&gt;&lt;br /&gt;&lt;code&gt;init&lt;/code&gt; で指定した要素をコンテナの新しい要素とする。&lt;br /&gt;この呼び出しの前に格納されていた要素は取り除かれ、&lt;code&gt;init&lt;/code&gt; で指定した要素によって置き換える&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;パラメータ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;x&lt;/code&gt;&lt;br /&gt;
コンテンツのコピー元となる、テンプレートパラメータ(&lt;code&gt;Key, Compare, Allocator&lt;/code&gt;)が同じ &lt;code&gt;set&lt;/code&gt; オブジェクト。 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;y&lt;/code&gt;&lt;br /&gt;
コンテンツのムーブ元となる、テンプレートパラメータ(&lt;code&gt;Key, Compare, Allocator&lt;/code&gt;)が同じ &lt;code&gt;set&lt;/code&gt; オブジェクト。 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;init&lt;/code&gt;&lt;br /&gt;
メンバ型 &lt;code&gt;value_type&lt;/code&gt; と同じ型の &lt;code&gt;initializer_list&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;*this&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;set&amp;lt;Key,Compare,Allocator&amp;gt;&amp;amp; operator=(const set&amp;lt;Key,Compare,Allocator&amp;gt;&amp;amp; x)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;set&amp;amp; operator=(initializer_list&amp;lt;value_type&amp;gt; init)&lt;/code&gt;
&lt;code&gt;x&lt;/code&gt; または &lt;code&gt;init&lt;/code&gt; の要素数に対して線形時間。 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;set&amp;lt;Key,Compare,Allocator&amp;gt;&amp;amp; operator=(set&amp;lt;Key,Compare,Allocator&amp;gt;&amp;amp;&amp;amp; y)&lt;/code&gt;
定数時間。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;set&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; values[] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;9&lt;/span&gt; };
  set&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c1(values, values &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;);
  set&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c2;

  c2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; c1;
  c1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; set&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;();

  cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Size of c1: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c1.size() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Size of c2: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c2.size() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;Size of c1: 0
Size of c2: 6
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/insert.html&#34;&gt;&lt;code&gt;insert&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素を挿入する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/op_constructor.html&#34;&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタ&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>append -- リンク切れを修正</title>
      <link href="http://cpprefjp.github.io/reference/string/basic_string/append.html"/>
      <id>3d2adeb82e86db0e149e366fa86df4e9160bfbba:reference/string/basic_string/append.md</id>
      <updated>2015-01-15 13:26:24 +0900</updated>
      
        <content type="html">&lt;h1&gt;append&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; append(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; str);                              &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;

basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; append(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; str, size_type pos, size_type n);  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;

basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; append(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; charT&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; s, size_type n);                          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;

basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; append(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; charT&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; s);                                       &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4)&lt;/span&gt;

basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; append(size_type n, charT c);                                 &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (5)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; append(InputIterator first, InputIterator last);              &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (6)&lt;/span&gt;

basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; append(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;charT&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; il);                           &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (7) C++11 から&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;指定された文字列、文字、あるいは初期化リストを追加する。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(2) では、&lt;code&gt;pos &amp;lt;=&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; であること。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(3) では、&lt;code&gt;s&lt;/code&gt; は少なくとも &lt;code&gt;n&lt;/code&gt; の長さを持つ &lt;code&gt;charT&lt;/code&gt; 型の配列を指していること。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(4) では、&lt;code&gt;s&lt;/code&gt; は少なくとも &lt;code&gt;traits_type::length(s) + 1&lt;/code&gt; の長さを持つ &lt;code&gt;charT&lt;/code&gt; 型の配列を指していること。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(6) では、&lt;code&gt;[first, last)&lt;/code&gt; が有効な範囲であること。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(1) 対象オブジェクトの末尾に &lt;code&gt;str&lt;/code&gt; の値が追加（コピー）される。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++03 まで：&lt;code&gt;append(str, 0, npos)&lt;/code&gt; と同一。&lt;/li&gt;
&lt;li&gt;C++11 から：&lt;code&gt;append(str.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/data.html&#34;&gt;&lt;code&gt;data&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(), str.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;())&lt;/code&gt; と同一。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(2) 対象オブジェクトの末尾に &lt;code&gt;str&lt;/code&gt; の &lt;code&gt;pos&lt;/code&gt; 以降の文字が追加される。
    追加される文字列の長さ &lt;code&gt;rlen&lt;/code&gt; は、&lt;code&gt;n&lt;/code&gt; と &lt;code&gt;str.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() - pos&lt;/code&gt; の小さい方である。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++03 まで：対象オブジェクトの末尾に &lt;code&gt;str&lt;/code&gt; の &lt;code&gt;pos&lt;/code&gt; 番目からの &lt;code&gt;rlen&lt;/code&gt; 文字を追加（コピー）する。&lt;/li&gt;
&lt;li&gt;C++11 から：&lt;code&gt;append(str.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/data.html&#34;&gt;&lt;code&gt;data&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() + pos, rlen)&lt;/code&gt; と同一。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(3) 対象オブジェクトの末尾に &lt;code&gt;s&lt;/code&gt; が指す長さ &lt;code&gt;n&lt;/code&gt; の文字列が追加（コピー）される。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++03 まで：&lt;code&gt;append(&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/op_constructor.html&#34;&gt;&lt;code&gt;basic_string&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;value_type, traits_type, allocator_type&amp;gt;(s, n))&lt;/code&gt; と同一。&lt;/li&gt;
&lt;li&gt;C++11 から：対象オブジェクトの末尾に &lt;code&gt;s&lt;/code&gt; からの &lt;code&gt;n&lt;/code&gt; 文字を追加（コピー）する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(4) 対象オブジェクトの末尾に &lt;code&gt;s&lt;/code&gt; が指す NULL 終端された文字列が追加（コピー）される。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++03 まで：&lt;code&gt;append(&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/op_constructor.html&#34;&gt;&lt;code&gt;basic_string&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;value_type, traits_type, allocator_type&amp;gt;(s))&lt;/code&gt; と同一。&lt;/li&gt;
&lt;li&gt;C++11 から：&lt;code&gt;append(s, traits_type::length(s))&lt;/code&gt; と同一。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(5) 対象オブジェクトの末尾に、文字 &lt;code&gt;c&lt;/code&gt; が &lt;code&gt;n&lt;/code&gt; 文字が追加（コピー）される。&lt;br /&gt;
&lt;code&gt;append(&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/op_constructor.html&#34;&gt;&lt;code&gt;basic_string&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;value_type, traits_type, allocator_type&amp;gt;(n, c))&lt;/code&gt; と同一。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(6) 対象オブジェクトの末尾に、範囲 &lt;code&gt;[first, last)&lt;/code&gt; の文字列が追加（コピー）される。&lt;br /&gt;
&lt;code&gt;append(&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/op_constructor.html&#34;&gt;&lt;code&gt;basic_string&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;value_type, traits_type, allocator_type&amp;gt;(first, last))&lt;/code&gt; と同一。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(7) 対象オブジェクトの末尾に初期化リスト &lt;code&gt;il&lt;/code&gt; で表された文字列が追加される。&lt;br /&gt;
&lt;code&gt;append(il.begin(), il.end())&lt;/code&gt; と同一。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;*this&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(1) C++03 まで：&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() &amp;gt;= npos - str.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の場合、&lt;code&gt;length_error&lt;/code&gt; が送出される。&lt;br /&gt;
    C++11 から：&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() + str.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() &amp;gt;&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/max_size.html&#34;&gt;&lt;code&gt;max_size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の場合、&lt;code&gt;length_error&lt;/code&gt; が送出される。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(2) &lt;code&gt;pos &amp;gt; str.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の場合、&lt;code&gt;out_of_range&lt;/code&gt; が送出される。&lt;br /&gt;
    C++03 まで：&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() &amp;gt;= npos - rlen&lt;/code&gt; の場合、&lt;code&gt;length_error&lt;/code&gt; が送出される。&lt;br /&gt;
    C++11 から：&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() + rlen &amp;gt;&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/max_size.html&#34;&gt;&lt;code&gt;max_size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の場合、&lt;code&gt;length_error&lt;/code&gt; が送出される。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(3) C++03 まで：&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() &amp;gt;= npos - n&lt;/code&gt; の場合、&lt;code&gt;length_error&lt;/code&gt; が送出される。&lt;br /&gt;
    C++11 から：&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() + n &amp;gt;&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/max_size.html&#34;&gt;&lt;code&gt;max_size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の場合、&lt;code&gt;length_error&lt;/code&gt; が送出される。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(4) C++03 まで：&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() &amp;gt;= npos - traits::length(s)&lt;/code&gt; の場合、&lt;code&gt;length_error&lt;/code&gt; が送出される。&lt;br /&gt;
    C++11 から：&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() + traits::length(s) &amp;gt;&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/max_size.html&#34;&gt;&lt;code&gt;max_size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の場合、&lt;code&gt;length_error&lt;/code&gt; が送出される。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(5) C++03 まで：&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() &amp;gt;= npos - n&lt;/code&gt; の場合、&lt;code&gt;length_error&lt;/code&gt; が送出される。&lt;br /&gt;
    C++11 から：&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() + n &amp;gt;&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/max_size.html&#34;&gt;&lt;code&gt;max_size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の場合、&lt;code&gt;length_error&lt;/code&gt; が送出される。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(6) C++03 まで：&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() &amp;gt;= npos -&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/distance.html&#34;&gt;&lt;code&gt;distance&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(first, last)&lt;/code&gt; の場合、&lt;code&gt;length_error&lt;/code&gt; が送出される。&lt;br /&gt;
    C++11 から：&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() +&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/distance.html&#34;&gt;&lt;code&gt;distance&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(first, last) &amp;gt;&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/max_size.html&#34;&gt;&lt;code&gt;max_size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の場合、&lt;code&gt;length_error&lt;/code&gt; が送出される。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(7) &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() + il.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() &amp;gt;&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/max_size.html&#34;&gt;&lt;code&gt;max_size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の場合、&lt;code&gt;length_error&lt;/code&gt; が送出される。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;p&gt;本メンバ関数の呼び出しによって、対象オブジェクトの要素への参照、ポインタ、および、イテレータは無効になる可能性がある。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt; s1(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Hello&#34;&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt; s2(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Hell, world!&#34;&lt;/span&gt;);
  s1.&lt;span style=&#34;color:#ff0000&#34;&gt;append&lt;/span&gt;(s2, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;

  s1.&lt;span style=&#34;color:#ff0000&#34;&gt;append&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;worldworldworld&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;

  s1.&lt;span style=&#34;color:#ff0000&#34;&gt;append&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;!&#39;&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;

  s1.&lt;span style=&#34;color:#ff0000&#34;&gt;append&lt;/span&gt;({ &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;:&#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;)&#39;&lt;/span&gt; });
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;Hello
Hello, 
Hello, world
Hello, world!!
Hello, world!! :)
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/op_plus_assign.html&#34;&gt;&lt;code&gt;operator+=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;文字／文字列を追加する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/push_back.html&#34;&gt;&lt;code&gt;push_back&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;文字を追加する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/insert.html&#34;&gt;&lt;code&gt;insert&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;文字／文字列を挿入する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/op_plus.html&#34;&gt;&lt;code&gt;operator+&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;文字列を連結する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator+ -- リンク切れを修正</title>
      <link href="http://cpprefjp.github.io/reference/string/basic_string/op_plus.html"/>
      <id>3d2adeb82e86db0e149e366fa86df4e9160bfbba:reference/string/basic_string/op_plus.md</id>
      <updated>2015-01-15 13:26:24 +0900</updated>
      
        <content type="html">&lt;h1&gt;operator+&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;charT&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;traits&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Allocator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;charT, traits, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;charT, traits, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; lhs,
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;charT, traits, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; rhs); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;charT&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;traits&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Allocator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;charT, traits, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt;(basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;charT, traits, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&amp;amp;&lt;/span&gt; lhs,
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;charT, traits, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; rhs); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) C++11 から&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;charT&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;traits&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Allocator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;charT, traits, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;charT, traits, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; lhs,
            basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;charT, traits, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&amp;amp;&lt;/span&gt; rhs);      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3) C++11 から&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;charT&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;traits&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Allocator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;charT, traits, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt;(basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;charT, traits, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&amp;amp;&lt;/span&gt; lhs,
            basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;charT, traits, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&amp;amp;&lt;/span&gt; rhs);      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4) C++11 から&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;charT&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;traits&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Allocator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;charT, traits, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; charT&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; lhs,
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;charT, traits, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; rhs); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (5)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;charT&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;traits&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Allocator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;charT, traits, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; charT&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; lhs,
            basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;charT, traits, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&amp;amp;&lt;/span&gt; rhs);      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (6) C++11 から&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;charT&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;traits&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Allocator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;charT, traits, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt;(charT lhs,
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;charT, traits, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; rhs); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (7)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;charT&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;traits&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Allocator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;charT, traits, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt;(charT lhs,
            basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;charT, traits, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&amp;amp;&lt;/span&gt; rhs);      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (8) C++11 から&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;charT&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;traits&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Allocator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;charT, traits, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;charT, traits, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; rhs,
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; charT&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; lhs);                                  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (9)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;charT&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;traits&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Allocator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;charT, traits, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt;(basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;charT, traits, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&amp;amp;&lt;/span&gt; rhs,
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; charT&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; lhs);                                  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (10) C++11 から&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;charT&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;traits&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Allocator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;charT, traits, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;charT, traits, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; rhs,
            charT lhs);                                         &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (11)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;charT&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;traits&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Allocator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;charT, traits, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt;(basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;charT, traits, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&amp;amp;&lt;/span&gt; rhs,
            charT lhs);                                         &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (12) C++11 から&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;basic_string&lt;/code&gt; オブジェクトの連結を行う。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(1) &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/op_constructor.html&#34;&gt;&lt;code&gt;basic_string&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;charT, traits, Allocator&amp;gt;(lhs).&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/append.html&#34;&gt;&lt;code&gt;append&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(rhs)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(2) &lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/move.html&#34;&gt;&lt;code&gt;move&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(lhs.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/append.html&#34;&gt;&lt;code&gt;append&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(rhs))&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(3) &lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/move.html&#34;&gt;&lt;code&gt;move&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(rhs.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/insert.html&#34;&gt;&lt;code&gt;insert&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(0, lhs))&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(4) &lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/move.html&#34;&gt;&lt;code&gt;move&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(lhs.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/append.html&#34;&gt;&lt;code&gt;append&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(rhs))&lt;/code&gt;&lt;br /&gt;
    (&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/move.html&#34;&gt;&lt;code&gt;move&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(rhs.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/insert.html&#34;&gt;&lt;code&gt;insert&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(0, lhs))&lt;/code&gt; とも同等)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(5) &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/op_constructor.html&#34;&gt;&lt;code&gt;basic_string&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;charT, traits, Allocator&amp;gt;(lhs) + rhs&lt;/code&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(6) &lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/move.html&#34;&gt;&lt;code&gt;move&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(rhs.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/insert.html&#34;&gt;&lt;code&gt;insert&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(0, lhs))&lt;/code&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(7) &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/op_constructor.html&#34;&gt;&lt;code&gt;basic_string&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;charT, traits, Allocator&amp;gt;(1, lhs) + rhs&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(8) &lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/move.html&#34;&gt;&lt;code&gt;move&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(rhs.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/insert.html&#34;&gt;&lt;code&gt;insert&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(0, 1, lhs))&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(9) &lt;code&gt;lhs +&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/op_constructor.html&#34;&gt;&lt;code&gt;basic_string&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;charT, traits, Allocator&amp;gt;(rhs)&lt;/code&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(10) &lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/move.html&#34;&gt;&lt;code&gt;move&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(lhs.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/append.html&#34;&gt;&lt;code&gt;append&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(rhs))&lt;/code&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(11) &lt;code&gt;lhs +&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/op_constructor.html&#34;&gt;&lt;code&gt;basic_string&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;charT, traits, Allocator&amp;gt;(1, rhs)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(12) &lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/move.html&#34;&gt;&lt;code&gt;move&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(lhs.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/append.html&#34;&gt;&lt;code&gt;append&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(1, rhs))&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;p&gt;(5)、(6) の形式の &lt;code&gt;lhs&lt;/code&gt;、および、(9)、(10) の形式の &lt;code&gt;rhs&lt;/code&gt; の文字列長算出のために &lt;code&gt;traits::length()&lt;/code&gt; が使用される&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt; s1(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Hell&#34;&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt; s2(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;world&#34;&lt;/span&gt;);

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt; s3 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; s1 &lt;span style=&#34;color:#ff0000&#34;&gt;&lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;o&#39;&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;&lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &#34;&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;&lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt;&lt;/span&gt; s2 &lt;span style=&#34;color:#ff0000&#34;&gt;&lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;!&#39;&lt;/span&gt;;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s3 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;Hello, world!
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/append.html&#34;&gt;&lt;code&gt;append&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;文字／文字列を追加する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/push_back.html&#34;&gt;&lt;code&gt;push_back&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;文字を追加する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/insert.html&#34;&gt;&lt;code&gt;insert&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;文字／文字列を挿入する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator+= -- リンク切れを修正</title>
      <link href="http://cpprefjp.github.io/reference/string/basic_string/op_plus_assign.html"/>
      <id>3d2adeb82e86db0e149e366fa86df4e9160bfbba:reference/string/basic_string/op_plus_assign.md</id>
      <updated>2015-01-15 13:26:24 +0900</updated>
      
        <content type="html">&lt;h1&gt;operator+=&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;+=&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; str);      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;

basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;+=&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; charT&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; s);               &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;

basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;+=&lt;/span&gt;(charT c);                      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;

basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;+=&lt;/span&gt;(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;charT&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; il);   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4) C++11 から&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;指定された文字列、文字、あるいは初期化リストを追加する。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;s&lt;/code&gt; は少なくとも &lt;code&gt;traits_type::length(s) + 1&lt;/code&gt; の長さを持つ &lt;code&gt;charT&lt;/code&gt; 型の配列を指していること。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(1) 対象オブジェクトの末尾に &lt;code&gt;str&lt;/code&gt; の値が追加（コピー）される。&lt;br /&gt;
&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/append.html&#34;&gt;&lt;code&gt;append&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(str)&lt;/code&gt; と同一。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(2) 対象オブジェクトの末尾に &lt;code&gt;s&lt;/code&gt; から始まる NULL で終端された文字列が追加される。&lt;br /&gt;
&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/append.html&#34;&gt;&lt;code&gt;append&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;&lt;code&gt;basic_string&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;value_type, traits_type, allocator_type&amp;gt;(s))&lt;/code&gt;（C++03 まで）、あるいは、&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/append.html&#34;&gt;&lt;code&gt;append&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(s)&lt;/code&gt;（C++11 から）と同一。&lt;br /&gt;
    なお、&lt;code&gt;s&lt;/code&gt; から始まる NULL 終端された文字列の長さは、&lt;code&gt;traits_type::length(s)&lt;/code&gt; で求められる。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(3) 対象オブジェクトの末尾に文字 &lt;code&gt;c&lt;/code&gt; が追加される。&lt;br /&gt;
&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/append.html&#34;&gt;&lt;code&gt;append&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;&lt;code&gt;basic_string&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;value_type, traits_type, allocator_type&amp;gt;(1, c))&lt;/code&gt; と同一。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(4) 対象オブジェクトの末尾に初期化リスト &lt;code&gt;il&lt;/code&gt; で表された文字列が追加される。&lt;br /&gt;
&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/append.html&#34;&gt;&lt;code&gt;append&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(il)&lt;/code&gt; と同一。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;*this&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(1) &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() + str.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() &amp;gt;&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/max_size.html&#34;&gt;&lt;code&gt;max_size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の場合、&lt;code&gt;length_error&lt;/code&gt; が送出される。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(2) &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() + traits_type::length(s) &amp;gt;&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/max_size.html&#34;&gt;&lt;code&gt;max_size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の場合、&lt;code&gt;length_error&lt;/code&gt; が送出される。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(3) &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() + 1 &amp;gt;&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/max_size.html&#34;&gt;&lt;code&gt;max_size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の場合、&lt;code&gt;length_error&lt;/code&gt; が送出される。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(4) &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() + il.size() &amp;gt;&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/max_size.html&#34;&gt;&lt;code&gt;max_size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の場合、&lt;code&gt;length_error&lt;/code&gt; が送出される。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;p&gt;本メンバ関数の呼び出しによって、対象オブジェクトの要素への参照、ポインタ、および、イテレータは無効になる可能性がある。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt; s1(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Hello&#34;&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt; s2(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &#34;&lt;/span&gt;);
  s1 &lt;span style=&#34;color:#ff0000&#34;&gt;&lt;span style=&#34;color: #666666&#34;&gt;+=&lt;/span&gt;&lt;/span&gt; s2;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;

  s1 &lt;span style=&#34;color:#ff0000&#34;&gt;&lt;span style=&#34;color: #666666&#34;&gt;+=&lt;/span&gt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;world&#34;&lt;/span&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;

  s1 &lt;span style=&#34;color:#ff0000&#34;&gt;&lt;span style=&#34;color: #666666&#34;&gt;+=&lt;/span&gt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;!&#39;&lt;/span&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;

  s1 &lt;span style=&#34;color:#ff0000&#34;&gt;&lt;span style=&#34;color: #666666&#34;&gt;+=&lt;/span&gt;&lt;/span&gt; { &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;:&#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;)&#39;&lt;/span&gt; };
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;Hello
Hello, 
Hello, world
Hello, world!
Hello, world! :)
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/append.html&#34;&gt;&lt;code&gt;append&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;文字／文字列を追加する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/push_back.html&#34;&gt;&lt;code&gt;push_back&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;文字を追加する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/insert.html&#34;&gt;&lt;code&gt;insert&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;文字／文字列を挿入する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/op_plus.html&#34;&gt;&lt;code&gt;operator+&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;文字列を連結する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>eq_int_type -- リンク切れを修正</title>
      <link href="http://cpprefjp.github.io/reference/string/char_traits/eq_int_type.html"/>
      <id>3d2adeb82e86db0e149e366fa86df4e9160bfbba:reference/string/char_traits/eq_int_type.md</id>
      <updated>2015-01-15 13:26:24 +0900</updated>
      
        <content type="html">&lt;h1&gt;eq_int_type&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++03&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;eq_int_type&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; int_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; c1, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; int_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; c2);

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11以降&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;static&lt;/span&gt; constexpr &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; eq_int_type(int_type c1, int_type c2) noexcept;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;数値の等値比較を行う。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;全ての文字&lt;code&gt;c&lt;/code&gt;と&lt;code&gt;d&lt;/code&gt;に対しては、&lt;a href=&#34;http://cpprefjp.github.io/reference/string/char_traits/eq.html&#34;&gt;&lt;code&gt;eq&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(c, d)&lt;/code&gt;と&lt;code&gt;eq_int_type(&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/char_traits/to_int_type.html&#34;&gt;&lt;code&gt;to_int_type&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(c),&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/string/char_traits/to_int_type.html&#34;&gt;&lt;code&gt;to_int_type&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(d))&lt;/code&gt;は等価となる。&lt;/p&gt;
&lt;p&gt;文字以外として、&lt;code&gt;c1&lt;/code&gt;と&lt;code&gt;c2&lt;/code&gt;がどちらも&lt;a href=&#34;http://cpprefjp.github.io/reference/string/char_traits/eof.html&#34;&gt;&lt;code&gt;eof&lt;/code&gt;&lt;/a&gt;であるなら&lt;code&gt;true&lt;/code&gt;、それ以外は&lt;code&gt;false&lt;/code&gt;を返す。&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;定数時間&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;char_traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;eq_int_type(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;equal&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;not equal&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力例&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;equal
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>default_error_condition (C++11) -- リンク切れを修正</title>
      <link href="http://cpprefjp.github.io/reference/system_error/error_code/default_error_condition.html"/>
      <id>3d2adeb82e86db0e149e366fa86df4e9160bfbba:reference/system_error/error_code/default_error_condition.md</id>
      <updated>2015-01-15 13:26:24 +0900</updated>
      
        <content type="html">&lt;h1&gt;default_error_condition (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/error_condition.html&#34;&gt;error_condition&lt;/a&gt; default_error_condition() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; noexcept;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;包含しているエラー値とエラーカテゴリに対応する&lt;code&gt;error_condition&lt;/code&gt;を構築&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/error_code/category.html&#34;&gt;&lt;code&gt;category()&lt;/code&gt;&lt;/a&gt;&lt;code&gt;.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/error_category/default_error_condition.html&#34;&gt;&lt;code&gt;default_error_condition&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/error_code/value.html&#34;&gt;&lt;code&gt;value()&lt;/code&gt;&lt;/a&gt;&lt;code&gt;)&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;投げない&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;p&gt;構築される&lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/error_condition.html&#34;&gt;&lt;code&gt;error_condition&lt;/code&gt;&lt;/a&gt;オブジェクトの&lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/error_condition/value.html&#34;&gt;&lt;code&gt;value()&lt;/code&gt;&lt;/a&gt;および&lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/error_condition/category.html&#34;&gt;&lt;code&gt;category()&lt;/code&gt;&lt;/a&gt;は、&lt;code&gt;default_error_condition()&lt;/code&gt;関数内において対応するエラー値、カテゴリに変換される可能性がある(VC10, GCC 4.6.1では同じエラー値、同じカテゴリとなる)。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;system_error&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code ec(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;static_cast&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;errc&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;invalid_argument),
                     std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;generic_category());

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_condition ed &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; ec.&lt;span style=&#34;color:#ff0000&#34;&gt;default_error_condition&lt;/span&gt;();

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ec.value() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ec.category().name() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ec.message() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ed.value() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ed.category().name() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ed.message() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力例&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;22
generic
Invalid argument

22
generic
Invalid argument
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.6.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; 10.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= (C++11) -- リンク切れを修正</title>
      <link href="http://cpprefjp.github.io/reference/system_error/error_code/op_assign.html"/>
      <id>3d2adeb82e86db0e149e366fa86df4e9160bfbba:reference/system_error/error_code/op_assign.md</id>
      <updated>2015-01-15 13:26:24 +0900</updated>
      
        <content type="html">&lt;h1&gt;operator= (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ErrorCodeEnum&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
error_code&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(ErrorCodeEnum e) noexcept;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;エラー値を代入する。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/is_error_code_enum.html&#34;&gt;&lt;code&gt;is_error_code_enum&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;ErrorCodeEnum&amp;gt;::value == true&lt;/code&gt;であること。 
&lt;code&gt;false&lt;/code&gt;だった場合、この関数はオーバーロード解決から除外される。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;*this =&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/make_error_code.html&#34;&gt;&lt;code&gt;make_error_code&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(e)&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;*this&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;投げない&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;system_error&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; is_error_code_enum&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;errc&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;true_type {};
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code ec;

  ec &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;errc&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;invalid_argument;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (ec) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;error&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;success&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ec.value() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ec.category().name() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;error
22
generic
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.6.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ (C++11) -- リンク切れを修正</title>
      <link href="http://cpprefjp.github.io/reference/system_error/error_condition/op_constructor.html"/>
      <id>3d2adeb82e86db0e149e366fa86df4e9160bfbba:reference/system_error/error_condition/op_constructor.md</id>
      <updated>2015-01-15 13:26:24 +0900</updated>
      
        <content type="html">&lt;h1&gt;コンストラクタ (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;error_condition() noexcept;

error_condition(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; val, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/error_category.html&#34;&gt;error_category&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; cat) noexcept;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ErrorConditionEnum&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
error_condition(ErrorConditionEnum e) noexcept;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;error_conditionオブジェクトの構築&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;error_condition() noexcept&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;デフォルト構築する。エラー値は&lt;code&gt;0&lt;/code&gt;、エラーカテゴリは&lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/generic_category.html&#34;&gt;&lt;code&gt;generic_category()&lt;/code&gt;&lt;/a&gt;と見なされる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;error_condition(int val, const&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/error_category.html&#34;&gt;&lt;code&gt;error_category&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;amp; cat) noexcept&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;エラー値とエラーカテゴリを受け取って構築する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;template &amp;lt;class ErrorConditionEnum&amp;gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;error_condition(ErrorConditionEnum e) noexcept&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/is_error_condition_enum.html&#34;&gt;&lt;code&gt;is_error_condition_enum&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;ErrorCodeEnum&amp;gt;::value == true&lt;/code&gt;となる型のエラー値を受け取って構築する。&lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/is_error_condition_enum.html&#34;&gt;&lt;code&gt;is_error_condition_enum&lt;/code&gt;&lt;/a&gt;が&lt;code&gt;false&lt;/code&gt;となる場合、この関数はオーバーロード解決から除外される。&lt;code&gt;*this =&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/make_error_condition.html&#34;&gt;&lt;code&gt;make_error_condition&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(e);&lt;/code&gt; となる。&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;投げない&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;system_error&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// デフォルトコンストラクタ&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;default ctor&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_condition ec;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (ec) {
      std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;error&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
      std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;success&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ec.value() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ec.category().name() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// エラー値とエラーカテゴリを受け取って構築&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;value &amp;amp; category ctor&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_condition ec(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;static_cast&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;errc&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;invalid_argument),
                            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;generic_category());

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (ec) {
      std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;error&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
      std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;success&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ec.value() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ec.category().name() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// is_error_condition_enumが特殊化された型のエラー値を受け取って構築&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;ErrorConditionEnum ctor&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_condition ec(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;errc&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;invalid_argument);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (ec) {
      std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;error&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
      std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;success&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ec.value() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ec.category().name() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;default ctor
success
0
generic

value &amp;amp; category ctor
error
22
generic

ErrorConditionEnum ctor
error
22
generic
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; 10.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ (C++11) -- リンク切れを修正</title>
      <link href="http://cpprefjp.github.io/reference/thread/thread/op_constructor.html"/>
      <id>3d2adeb82e86db0e149e366fa86df4e9160bfbba:reference/thread/thread/op_constructor.md</id>
      <updated>2015-01-15 13:26:24 +0900</updated>
      
        <content type="html">&lt;h1&gt;コンストラクタ (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &lt;i&gt;デフォルト&lt;/i&gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;thread&lt;/span&gt;() noexcept;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &lt;i&gt;explicitテンプレート&lt;/i&gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;F&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Args&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;thread&lt;/span&gt;(F&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; f, Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;... args);

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &lt;i&gt;コピー&lt;/i&gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;thread&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;thread&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;delete&lt;/span&gt;;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &lt;i&gt;ムーブ&lt;/i&gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;thread&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;thread&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;) noexcept;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;新しいスレッドを生成し、そのスレッド上で引数&lt;code&gt;args...&lt;/code&gt;を渡して関数オブジェクトfを呼び出す。
デフォルトコンストラクタでは新しいスレッドを生成しない。また&lt;code&gt;thread&lt;/code&gt;オブジェクトはムーブコンストラクト可能／コピーコンストラクト不可。&lt;/p&gt;
&lt;h2&gt;要件（explicitコンストラクタのみ）&lt;/h2&gt;
&lt;p&gt;型&lt;code&gt;F&lt;/code&gt;および&lt;code&gt;Args&lt;/code&gt;に含まれるすべての型&lt;code&gt;Ti&lt;/code&gt;はムーブコンストラクト可能な型でなければならない。また、&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/invoke.html&#34;&gt;&lt;code&gt;INVOKE&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(DECAY_COPY(&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;std::forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;F&amp;gt;(f)), DECAY_COPY(&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;std::forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Args&amp;gt;(args))...)&lt;/code&gt;が有効な式でなければならない。&lt;/p&gt;
&lt;h2&gt;効果（explicitコンストラクタのみ）&lt;/h2&gt;
&lt;p&gt;新しいスレッドを生成し、&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/invoke.html&#34;&gt;&lt;code&gt;INVOKE&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(DECAY_COPY(&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;std::forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;F&amp;gt;(f)), DECAY_COPY(&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;std::forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Args&amp;gt;(args))...)&lt;/code&gt;を実行する。ただし&lt;code&gt;DECAY_COPY&lt;/code&gt;は同コンストラクタを呼び出したスレッド上にて評価される。また&lt;code&gt;f&lt;/code&gt;のコピーの戻り値は無視される。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;DECAY_COPY(x)&lt;/code&gt;は &lt;code&gt;template &amp;lt;class T&amp;gt; typename std::decay&amp;lt;T&amp;gt;::type decay_copy(T&amp;amp;&amp;amp; v) { return&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;std::forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;T&amp;gt;(v); }&lt;/code&gt; と定義される。おおよそ、&lt;code&gt;x&lt;/code&gt;が配列型なら先頭要素へのポインタ、&lt;code&gt;x&lt;/code&gt;が関数型ならその関数ポインタ、&lt;code&gt;x&lt;/code&gt;がコピーコンストラクト可能な型なら&lt;code&gt;x&lt;/code&gt;からコピーされたオブジェクト、&lt;code&gt;x&lt;/code&gt;がムーブコンストラクト可能な型なら&lt;code&gt;x&lt;/code&gt;からムーブされたオブジェクトとなる。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;INVOKE(f, arg...)&lt;/code&gt;は&lt;code&gt;f&lt;/code&gt;が関数オブジェクトならば &lt;code&gt;f(arg...)&lt;/code&gt; 形式の関数呼び出しとなる。詳細は&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/invoke.html&#34;&gt;&lt;code&gt;INVOKE&lt;/code&gt;&lt;/a&gt;の定義参照。
もし&lt;code&gt;INVOKE(DECAY_COPY(&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;std::forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;F&amp;gt;(f)), DECAY_COPY(&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;std::forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Args&amp;gt;(args))...)&lt;/code&gt;呼び出しからcatchされない例外が送出された場合、&lt;a href=&#34;http://cpprefjp.github.io/reference/exception/terminate.html&#34;&gt;&lt;code&gt;std::terminate()&lt;/code&gt;&lt;/a&gt;が呼び出されてプログラムは異常終了する。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;同期（explicitコンストラクタのみ）&lt;/h2&gt;
&lt;p&gt;同コンストラクタの呼び出し完了は、fのコピーの呼び出し開始と&lt;strong&gt;同期する&lt;/strong&gt;。つまり、「コンストラクタ呼び出し側スレッドT0でのコンストラクタ呼び出し完了」は、「新しいスレッド&lt;code&gt;T1&lt;/code&gt;上での&lt;code&gt;f&lt;/code&gt;のコピーの呼び出し開始」よりも&lt;strong&gt;前に発生する&lt;/strong&gt;。&lt;/p&gt;
&lt;h2&gt;事後条件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;デフォルトコンストラクタ： &lt;a href=&#34;http://cpprefjp.github.io/reference/thread/thread/get_id.html&#34;&gt;&lt;code&gt;get_id()&lt;/code&gt;&lt;/a&gt; &lt;code&gt;==&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/thread/thread/id.html&#34;&gt;&lt;code&gt;id()&lt;/code&gt;&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;explicitコンストラクタ： &lt;a href=&#34;http://cpprefjp.github.io/reference/thread/thread/get_id.html&#34;&gt;&lt;code&gt;get_id()&lt;/code&gt;&lt;/a&gt; &lt;code&gt;!=&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/thread/thread/id.html&#34;&gt;&lt;code&gt;id()&lt;/code&gt;&lt;/a&gt;。&lt;code&gt;*this&lt;/code&gt;は新しいスレッドと関連付けられる。&lt;/li&gt;
&lt;li&gt;ムーブコンストラクタ：ムーブ前の&lt;code&gt;x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/thread/thread/get_id.html&#34;&gt;&lt;code&gt;get_id()&lt;/code&gt;&lt;/a&gt; &lt;code&gt;==&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/thread/thread/get_id.html&#34;&gt;&lt;code&gt;get_id()&lt;/code&gt;&lt;/a&gt; かつ ムーブ後の&lt;code&gt;x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/thread/thread/get_id.html&#34;&gt;&lt;code&gt;get_id()&lt;/code&gt;&lt;/a&gt; &lt;code&gt;==&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/thread/thread/id.html&#34;&gt;&lt;code&gt;id()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例外（explicitコンストラクタのみ）&lt;/h2&gt;
&lt;p&gt;新しいスレッドの作成に失敗した場合、&lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/system_error.html&#34;&gt;&lt;code&gt;system_error&lt;/code&gt;&lt;/a&gt;例外を投げる。その例外オブジェクトには、以下のエラー状態が設定されうる：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;resource_unavailable_try_again&lt;/code&gt; : 新たなスレッドを作るためのリソースが不足している。もしくはシステムやプロセスが規定するスレッド数の上限を超過した。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;memory&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;thread&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;cassert&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; v, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; ri, &lt;a href=&#34;http://cpprefjp.github.io/reference/memory/shared_ptr.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;shared_ptr&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; sp, &lt;a href=&#34;http://cpprefjp.github.io/reference/memory/unique_ptr.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;unique_ptr&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; up)
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// spはコピーされた値が、upはムーブされた値が渡されてくる&lt;/span&gt;
  v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; ri &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;42&lt;/span&gt;;

  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;sp &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;up;
  assert(x &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; x;  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// この戻り値は無視される&lt;/span&gt;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i2;
  &lt;a href=&#34;http://cpprefjp.github.io/reference/memory/shared_ptr.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;shared_ptr&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; sp0 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/memory/shared_ptr/make_shared.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_shared&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;);
  &lt;a href=&#34;http://cpprefjp.github.io/reference/memory/unique_ptr.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;unique_ptr&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; up0(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;));

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;thread&lt;/span&gt; thd( func, i1,  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ref(i2), sp0, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;move(up0) );
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ...&lt;/span&gt;
  thd.join();

  assert(i1 &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; i2 &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;42&lt;/span&gt;);

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.6.3, 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator!= (C++11) -- リンク切れを修正</title>
      <link href="http://cpprefjp.github.io/reference/tuple/tuple/op_not_equal.html"/>
      <id>3d2adeb82e86db0e149e366fa86df4e9160bfbba:reference/tuple/tuple/op_not_equal.md</id>
      <updated>2015-01-15 13:26:24 +0900</updated>
      
        <content type="html">&lt;h1&gt;operator!= (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;class... TTypes, class... UTypes&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple.html&#34;&gt;tuple&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;TTypes...&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; t,
                  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple.html&#34;&gt;tuple&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;UTypes...&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; u); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;class... TTypes, class... UTypes&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple.html&#34;&gt;tuple&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;TTypes...&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; t,
                  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple.html&#34;&gt;tuple&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;UTypes...&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; u); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++14&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;2つの&lt;code&gt;tuple&lt;/code&gt;オブジェクトの非等値比較を行う。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;2つの&lt;code&gt;tuple&lt;/code&gt;オブジェクトの要素数が同じであること。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;!(t&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple/op_equal.html&#34;&gt;&lt;code&gt;==&lt;/code&gt;&lt;/a&gt;&lt;code&gt;u);&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;tuple&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tuple&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&lt;/span&gt; t1(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;hello&#34;&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tuple&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; t2(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;hello&#34;&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tuple&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; t3(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;hellot&#34;&lt;/span&gt;);

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;boolalpha;
  {
    &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; t1 &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; t2;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
  {
    &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; t1 &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; t3;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;false
true
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.6.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3471.html&#34; target=&#34;_blank&#34;&gt;N3471 Constexpr Library Additions: utilities, v3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple/op_equal.html&#34;&gt;&lt;code&gt;operator==&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>unordered_map (C++11) -- リンク切れを修正</title>
      <link href="http://cpprefjp.github.io/reference/unordered_map/unordered_map.html"/>
      <id>3d2adeb82e86db0e149e366fa86df4e9160bfbba:reference/unordered_map/unordered_map.md</id>
      <updated>2015-01-15 13:26:24 +0900</updated>
      
        <content type="html">&lt;h1&gt;unordered_map (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Key&lt;/span&gt;,
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;,
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Hash&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/hash.html&#34;&gt;hash&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Key&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;,
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Pred&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/equal_to.html&#34;&gt;equal_to&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Key&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;,
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Allocator&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator.html&#34;&gt;allocator&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Key, T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;unordered_map&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;unordered_map&lt;/code&gt; は、同一キーの要素を複数格納できず、格納順が規定されていないコンテナである。&lt;/p&gt;
&lt;p&gt;一般的には &lt;code&gt;hash map&lt;/code&gt; と呼ばれるコンテナであるが、標準への採用が遅かったことから、既に存在する各種コンテナとの名前の衝突を避けるため、&lt;code&gt;unordered_map&lt;/code&gt; と名付けられた。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;unordered_map&lt;/code&gt; の特徴は以下の通りである。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;連想&lt;br /&gt;
標準の配列や &lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector.html&#34;&gt;&lt;code&gt;vector&lt;/code&gt;&lt;/a&gt; と異なり、コンテナ内の要素へのアクセスは絶対的な位置（添え字）によるのではなく、キーによる。&lt;/li&gt;
&lt;li&gt;非順序&lt;br /&gt;
コンテナ内の各要素は、キーのハッシュ値に基づきハッシュテーブルに格納されるため、決められた順序で並んでいるわけではない。&lt;/li&gt;
&lt;li&gt;マップ（map）&lt;br /&gt;
キーと、それに対応する値がペアとなった要素を持ち、かつ、同一のキー値を格納することはできない。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;テンプレートパラメータ &lt;code&gt;Hash&lt;/code&gt; は、以下に示す Hash requirements を満たし、テンプレートパラメータ &lt;code&gt;Key&lt;/code&gt; のハッシュ関数として振る舞わなければならない。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;関数オブジェクト型である。&lt;/li&gt;
&lt;li&gt;CopyConstructible requirements と Destructible requirements の要件を満たす。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;h&lt;/code&gt; を &lt;code&gt;Hash&lt;/code&gt; 型のオブジェクト、&lt;code&gt;Key&lt;/code&gt; を &lt;code&gt;Hash&lt;/code&gt; 型のオブジェクトの引数の型、&lt;code&gt;u&lt;/code&gt; を &lt;code&gt;Key&lt;/code&gt; 型の左辺値、&lt;code&gt;k&lt;/code&gt; を &lt;code&gt;Key&lt;/code&gt; 型（あるいは &lt;code&gt;const Key&lt;/code&gt; 型）に変換可能な値とすると、以下の要件を満たす。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;h(k)&lt;/code&gt; は戻り値の型が &lt;code&gt;std::size_t&lt;/code&gt; で、戻り値は引数 &lt;code&gt;k&lt;/code&gt; のみにしかよらない&lt;/li&gt;
&lt;li&gt;&lt;code&gt;h(u)&lt;/code&gt; は &lt;code&gt;u&lt;/code&gt; を変更しない&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;テンプレートパラメータ &lt;code&gt;Pred&lt;/code&gt; は二項述語で、テンプレート引数 &lt;code&gt;Key&lt;/code&gt; に対する同値関係でなければならない。&lt;/p&gt;
&lt;p&gt;テンプレートパラメータ &lt;code&gt;Allocator&lt;/code&gt; は、Allocator requirements を満たさなければならない。&lt;/p&gt;
&lt;h2&gt;メンバ関数&lt;/h2&gt;
&lt;h3&gt;構築／コピー／破棄&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/op_constructor.html&#34;&gt;(constructor)&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/op_destructor.html&#34;&gt;(destructor)&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;デストラクタ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/op_assign.html&#34;&gt;&lt;code&gt;operator=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;代入演算子&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;領域&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/empty.html&#34;&gt;&lt;code&gt;empty&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンテナが空かどうかを判定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素数の取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/max_size.html&#34;&gt;&lt;code&gt;max_size&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;格納可能な最大の要素数の取得&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;イテレータ&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/begin.html&#34;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;先頭要素を指すイテレータの取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/end.html&#34;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最終要素の次を指すイテレータの取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/cbegin.html&#34;&gt;&lt;code&gt;cbegin&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;先頭要素を指す読み取り専用イテレータの取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/cend.html&#34;&gt;&lt;code&gt;cend&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最終要素の次を指す読み取り専用イテレータの取得&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;アロケータ&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;アロケータオブジェクトの取得&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;コンテナの変更&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/emplace.html&#34;&gt;&lt;code&gt;emplace&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンテナ内への要素の直接構築&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/emplace_hint.html&#34;&gt;&lt;code&gt;emplace_hint&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;挿入位置のヒントを使用したコンテナ内への要素の直接構築&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/insert.html&#34;&gt;&lt;code&gt;insert&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素の追加&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/erase.html&#34;&gt;&lt;code&gt;erase&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素の削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/clear.html&#34;&gt;&lt;code&gt;clear&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;全要素の削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/swap.html&#34;&gt;&lt;code&gt;swap&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;内容の交換&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;オブザーバー&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/hash_function.html&#34;&gt;&lt;code&gt;hash_function&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ハッシュ関数オブジェクトの取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/key_eq.html&#34;&gt;&lt;code&gt;key_eq&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;キー比較用関数オブジェクトの取得&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;検索&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/find.html&#34;&gt;&lt;code&gt;find&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指定したキーの位置を検索&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/count.html&#34;&gt;&lt;code&gt;count&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指定したキーの要素数を取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/equal_range.html&#34;&gt;&lt;code&gt;equal_range&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指定したキーの範囲を取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/op_at.html&#34;&gt;&lt;code&gt;operator[]&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素の値へのアクセス&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/at.html&#34;&gt;&lt;code&gt;at&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素の値へのアクセス&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;バケットインタフェース&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/bucket_count.html&#34;&gt;&lt;code&gt;bucket_count&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;バケット数の取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/max_bucket_count.html&#34;&gt;&lt;code&gt;max_bucket_count&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最大バケット数の取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/bucket_size.html&#34;&gt;&lt;code&gt;bucket_size&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;インデックス（添え字）で指定したバケット内の要素数を取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/bucket.html&#34;&gt;&lt;code&gt;bucket&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;キーで指定したバケットのインデックス（添え字）を取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/begin-size_type.html&#34;&gt;&lt;code&gt;begin(size_type)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;インデックス（添え字）で指定したバケット内の先頭要素を指すイテレータを取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/end-size_type.html&#34;&gt;&lt;code&gt;end(size_type)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;インデックス（添え字）で指定したバケット内の最終要素の次を指すイテレータを取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/cbegin-size_type.html&#34;&gt;&lt;code&gt;cbegin(size_type)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;インデックス（添え字）で指定したバケット内の先頭要素を指す読み取り専用イテレータを取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/cend-size_type.html&#34;&gt;&lt;code&gt;cend(size_type)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;インデックス（添え字）で指定したバケット内の最終要素の次を指す読み取り専用イテレータを取得&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;ハッシュポリシー&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/load_factor.html&#34;&gt;&lt;code&gt;load_factor&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;現在の負荷率（バケットあたりの要素数の平均）を取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;負荷率の最大値を取得、設定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/rehash.html&#34;&gt;&lt;code&gt;rehash&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最小バケット数指定によるバケット数の調整&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/reserve.html&#34;&gt;&lt;code&gt;reserve&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最小要素数指定によるバケット数の調整&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;メンバ型&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;key_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;キーの型。テンプレートパラメータ &lt;code&gt;Key&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;value_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素の型。&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;&lt;code&gt;pair&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;const Key, T&amp;gt;&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mapped_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;値の型。テンプレートパラメータ &lt;code&gt;T&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;hasher&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;キーのハッシュ関数の型。テンプレートパラメータ &lt;code&gt;Hash&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;key_equal&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;キーが等値か否かを判断するための二項述語の型。テンプレートパラメータ &lt;code&gt;Pred&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;allocator_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アロケータの型。テンプレートパラメータ &lt;code&gt;Allocator&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;pointer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素 &lt;code&gt;value_type&lt;/code&gt;（&lt;code&gt;= std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;&lt;code&gt;pair&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;const Key, T&amp;gt;&lt;/code&gt;）へのポインタ。スマートポインタも可であるが、通常は &lt;code&gt;value_type*&lt;/code&gt;。&lt;br /&gt;規格書では、&lt;code&gt;allocator_type::pointer&lt;/code&gt; となっているが、これは規格書の誤りで、ドラフト &lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3376.pdf&#34; target=&#34;_blank&#34;&gt;N3376&lt;/a&gt; で既に &lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits&#34;&gt;&lt;code&gt;allocator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Allocator&amp;gt;::pointer&lt;/code&gt; に修正されている。&lt;br /&gt;（さもないと、必須である &lt;code&gt;allocator_type::value_type&lt;/code&gt; のみを定義したユーザ定義のアロケータを使用することができないため）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;const_pointer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素 &lt;code&gt;value_type&lt;/code&gt;（&lt;code&gt;= std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;&lt;code&gt;pair&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;const Key, T&amp;gt;&lt;/code&gt;）へのコンストポインタ。スマートポインタも可であるが、通常は &lt;code&gt;const value_type*&lt;/code&gt;。&lt;br /&gt;規格書では、&lt;code&gt;allocator_type::const_pointer&lt;/code&gt; となっているが、これは規格書の誤りで、ドラフト &lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3376.pdf&#34; target=&#34;_blank&#34;&gt;N3376&lt;/a&gt; で既に &lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits&#34;&gt;&lt;code&gt;allocator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Allocator&amp;gt;::const_pointer&lt;/code&gt; に修正されている。&lt;br /&gt;（さもないと、必須である &lt;code&gt;allocator_type::value_type&lt;/code&gt; のみを定義したユーザ定義のアロケータを使用することができないため）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;reference&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素 &lt;code&gt;value_type&lt;/code&gt;（&lt;code&gt;= std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;&lt;code&gt;pair&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;const Key, T&amp;gt;&lt;/code&gt;）への参照。&lt;br /&gt;規格書では、&lt;code&gt;allocator_type::reference&lt;/code&gt; となっているが、これは規格書の誤りで、ドラフト &lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3376.pdf&#34; target=&#34;_blank&#34;&gt;N3376&lt;/a&gt; で既に &lt;code&gt;value_type&amp;amp;&lt;/code&gt; に修正されている。&lt;br /&gt;（さもないと、必須である &lt;code&gt;allocator_type::value_type&lt;/code&gt; のみを定義したユーザ定義のアロケータを使用することができないため）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;const_reference&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素 &lt;code&gt;value_type&lt;/code&gt;（&lt;code&gt;= std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;&lt;code&gt;pair&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;const Key, T&amp;gt;&lt;/code&gt;）へのコンスト参照。&lt;br /&gt;規格書では、&lt;code&gt;allocator_type::const_reference&lt;/code&gt; となっているが、これは規格書の誤りで、ドラフト &lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3376.pdf&#34; target=&#34;_blank&#34;&gt;N3376&lt;/a&gt; で既に &lt;code&gt;const value_type&amp;amp;&lt;/code&gt; に修正されている。&lt;br /&gt;（さもないと、必須である &lt;code&gt;allocator_type::value_type&lt;/code&gt; のみを定義したユーザ定義のアロケータを使用することができないため）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;size_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素数を表す符号なし整数型。&lt;code&gt;difference_type&lt;/code&gt; で表現可能な非負整数（0以上の整数）を表すことが可能。(通常は &lt;a href=&#34;http://cpprefjp.github.io/reference/cstddef/size_t.html&#34;&gt;&lt;code&gt;size_t&lt;/code&gt;&lt;/a&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;difference_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;同一のコンテナを指す &lt;code&gt;iterator&lt;/code&gt; の差を表す符号付き整数型(通常は &lt;a href=&#34;http://cpprefjp.github.io/reference/cstddef/ptrdiff_t.html&#34;&gt;&lt;code&gt;ptrdiff_t&lt;/code&gt;&lt;/a&gt;) &lt;br /&gt;&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/iterator_traits.html&#34;&gt;&lt;code&gt;iterator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;iterator&amp;gt;::difference_type&lt;/code&gt;、および、&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/iterator_traits.html&#34;&gt;&lt;code&gt;iterator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;const_iterator&amp;gt;::difference_type&lt;/code&gt; と同じ。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&#34;読み取り専用&#34;前方向イテレータ（誤植ではない）&lt;br /&gt;規格書には記載はないが、（連想コンテナがそうであるように）&lt;code&gt;const_iterator&lt;/code&gt; と同じ型か否かは実装依存であるものと思われる。&lt;br /&gt;従って、ODR（One Definition Rule）に違反しないようにするため、関数のパラメータ型には常に &lt;code&gt;const_iterator&lt;/code&gt; を使用したほうが良いだろう。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;const_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;読み取り専用前方向イテレータ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;local_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;同一バケット内のみで有効なイテレータ。&lt;br /&gt;規格書には記載はないが、&lt;code&gt;iterator&lt;/code&gt; と同様）&lt;code&gt;const_local_iterator&lt;/code&gt; と同じ型か否かは実装依存であるものと思われる。&lt;br /&gt;&lt;code&gt;iterator&lt;/code&gt; と、&lt;code&gt;iterator_category&lt;/code&gt;、&lt;code&gt;value_type&lt;/code&gt;、&lt;code&gt;difference_type&lt;/code&gt;、&lt;code&gt;pointer&lt;/code&gt;、&lt;code&gt;reference&lt;/code&gt; は同一である。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;const_local_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;同一バケット内のみで有効な読み取り専用イテレータ。&lt;br /&gt;&lt;code&gt;const_iterator&lt;/code&gt; と、&lt;code&gt;iterator_category&lt;/code&gt;、&lt;code&gt;value_type&lt;/code&gt;、&lt;code&gt;difference_type&lt;/code&gt;、&lt;code&gt;pointer&lt;/code&gt;、&lt;code&gt;reference&lt;/code&gt; は同一である。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;非メンバ関数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/swap_free.html&#34;&gt;&lt;code&gt;swap&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;内容の交換&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/op_equal.html&#34;&gt;&lt;code&gt;operator==&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;等値比較&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/op_not_equal.html&#34;&gt;&lt;code&gt;operator!=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;非等値比較&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map.html&#34;&gt;unordered_map&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator.html&#34;&gt;iterator&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm.html&#34;&gt;algorithm&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;C&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; print(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; C&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; c, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/site/cpprefjp/reference/ostream&#34;&gt;ostream&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; os &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout)
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/for_each.html&#34;&gt;for_each&lt;/a&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/begin.html&#34;&gt;begin&lt;/a&gt;(c), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/end.html&#34;&gt;end&lt;/a&gt;(c), [&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;os](&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; C&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;value_type p) { os &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;{&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p.first &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;,&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p.second &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;}, &#34;&lt;/span&gt;; });
  os &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map.html&#34;&gt;unordered_map&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; um{ {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;1st&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;}, {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;2nd&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;}, {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;3rd&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;}, };

  print(um);

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;3rd:&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; um.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/at.html&#34;&gt;at&lt;/a&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;3rd&#34;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  um.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/emplace.html&#34;&gt;emplace&lt;/a&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;4th&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;);

  print(um);

  um.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/erase.html&#34;&gt;erase&lt;/a&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;2nd&#34;&lt;/span&gt;);

  print(um);

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;5th:&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; um[&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;5th&#34;&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  print(um);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;{2nd,2}, {3rd,3}, {1st,1},
3rd:3
{4th,4}, {2nd,2}, {3rd,3}, {1st,1},
{4th,4}, {3rd,3}, {1st,1},
5th:0
{5th,0}, {4th,4}, {3rd,3}, {1st,1},
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2050&#34; target=&#34;_blank&#34;&gt;Unordered associative containers do not use allocator_traits to define member types&lt;/a&gt; （上記の &lt;code&gt;pointer&lt;/code&gt;、&lt;code&gt;const_pointer&lt;/code&gt;、&lt;code&gt;reference&lt;/code&gt;、&lt;code&gt;const_reference&lt;/code&gt; の問題に対する修正案）&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>at (C++11) -- リンク切れを修正</title>
      <link href="http://cpprefjp.github.io/reference/unordered_map/unordered_map/at.html"/>
      <id>3d2adeb82e86db0e149e366fa86df4e9160bfbba:reference/unordered_map/unordered_map/at.md</id>
      <updated>2015-01-15 13:26:24 +0900</updated>
      
        <content type="html">&lt;h1&gt;at (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; at(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; key_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; at(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; key_type &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;参照のためのメソッドで、取り出す時にキーの存在チェックをする。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;キーxに対応する値を返す。&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;オブジェクトが存在しないときは、out_of_range例外を投げる。&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;平均： 定数時間&lt;br /&gt;
最悪： &lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt; について線形時間。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;unordered_map&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Container&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; at_wrap(Container &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;c, T v) {

  try{
    cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c.at(v) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;catch&lt;/span&gt;(out_of_range&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;) {
    cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;exception std::out_of_ranget&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  }
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main()
{
  unordered_map&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;,&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; s1;
  s1.insert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;a&#39;&lt;/span&gt;));

  at_wrap(s1, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
  at_wrap(s1, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;a
exception std::out_of_ranget
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??, 11.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/op_assign.html&#34;&gt;&lt;code&gt;operator=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;代入演算子&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/insert.html&#34;&gt;&lt;code&gt;insert&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素を挿入する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>count (C++11) -- リンク切れを修正</title>
      <link href="http://cpprefjp.github.io/reference/unordered_map/unordered_map/count.html"/>
      <id>3d2adeb82e86db0e149e366fa86df4e9160bfbba:reference/unordered_map/unordered_map/count.md</id>
      <updated>2015-01-15 13:26:24 +0900</updated>
      
        <content type="html">&lt;h1&gt;count (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;size_type count(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; key_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;キー &lt;code&gt;x&lt;/code&gt; を検索し、コンテナ内に見つかった要素の数を返す。&lt;code&gt;map&lt;/code&gt; コンテナはキーの重複を許さないため、この関数は実際には要素が見つかったときに 1 を、そうでないときに 0 を返す。&lt;/p&gt;
&lt;h2&gt;パラメータ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt; : 検索するキー値。&lt;code&gt;key_type&lt;/code&gt; はメンバ型であり、&lt;code&gt;map&lt;/code&gt; コンテナの中で &lt;code&gt;Key&lt;/code&gt; の別名として定義される。ここで &lt;code&gt;Key&lt;/code&gt; は 1 番目のテンプレートパラメータである。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;x&lt;/code&gt; と同じ値のキーが見つかったなら 1、そうでないなら 0。
メンバ型 &lt;code&gt;size_type&lt;/code&gt; は符号なし整数型である。&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;投げない。&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;平均： 定数時間&lt;br /&gt;
最悪： &lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt; について線形時間。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;unordered_map&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;() 
{
  unordered_map&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c;
  c[&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;D&#39;&lt;/span&gt;;

  cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c.count(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c.count(&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;0
1
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??, 11.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/find.html&#34;&gt;&lt;code&gt;find&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指定したキーで要素を探す&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素数を取得する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>equal_range (C++11) -- リンク切れを修正</title>
      <link href="http://cpprefjp.github.io/reference/unordered_map/unordered_map/equal_range.html"/>
      <id>3d2adeb82e86db0e149e366fa86df4e9160bfbba:reference/unordered_map/unordered_map/equal_range.md</id>
      <updated>2015-01-15 13:26:24 +0900</updated>
      
        <content type="html">&lt;h1&gt;equal_range (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;iterator,iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; equal_range(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; key_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);
pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;const_iterator,const_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; equal_range(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; key_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;コンテナ内の、&lt;code&gt;x&lt;/code&gt; と等しい全てのキー要素を含む範囲の境界を返す。&lt;code&gt;unordered_map&lt;/code&gt; コンテナではキーの重複は無いため、この範囲は最大一つの要素を含む。 &lt;/p&gt;
&lt;p&gt;もし &lt;code&gt;x&lt;/code&gt; がコンテナ内のどのキーともマッチしなかった場合、戻り値の範囲は長さ 0 になり、両方のイテレータは &lt;code&gt;x&lt;/code&gt; より大きく最も近い値を指す。そうでない場合、&lt;code&gt;x&lt;/code&gt; がコンテナ内の全ての要素よりも大きい場合は &lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/end.html&#34;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt; を指す。&lt;/p&gt;
&lt;h2&gt;パラメータ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt; : 比較されるキー値。&lt;code&gt;key_type&lt;/code&gt; はメンバ型であり、&lt;code&gt;map&lt;/code&gt; コンテナ内で &lt;code&gt;Key&lt;/code&gt; の別名として定義される。ここで &lt;code&gt;Key&lt;/code&gt; は最初のテンプレートパラメータである。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;pair&lt;/code&gt; を返す。
&lt;code&gt;pair::first&lt;/code&gt; は 範囲の下境界にあたり、
&lt;code&gt;pair::second&lt;/code&gt; は 範囲の上境界にあたる。
&lt;code&gt;iterator&lt;/code&gt; はメンバ型であり &lt;code&gt;map&lt;/code&gt; において双方向イテレータとして定義される。&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;平均： 定数時間&lt;br /&gt;
最悪： &lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt; について線形時間。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;unordered_map&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  unordered_map&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;,&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c;

  c.insert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;a&#39;&lt;/span&gt;));
  c.insert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;b&#39;&lt;/span&gt;));
  c.insert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;c&#39;&lt;/span&gt;));
  c.insert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;d&#39;&lt;/span&gt;));
  c.insert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;e&#39;&lt;/span&gt;));

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; unordered_map&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;,&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;iterator &lt;span style=&#34;color: #B00040&#34;&gt;it_t&lt;/span&gt;;
  pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;it_t&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;it_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; ret &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; c.equal_range(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);

  cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;low: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ret.first&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;first &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ret.first&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;second &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;up: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ret.second&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;first &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ret.second&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;second &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;

  pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;it_t&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;it_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; ret2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; c.equal_range(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;);
  cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;low:&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ( ret2.first &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; c.end() )  &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;up:&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ( ret2.second &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; c.end() )  &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;low: 3 c
up: 4 d
low:1
up:1
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??, 11.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/count.html&#34;&gt;&lt;code&gt;count&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指定したキーにマッチする要素の数を返す&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/find.html&#34;&gt;&lt;code&gt;find&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指定したキーで要素を探す&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase (C++11) -- リンク切れを修正</title>
      <link href="http://cpprefjp.github.io/reference/unordered_map/unordered_map/erase.html"/>
      <id>3d2adeb82e86db0e149e366fa86df4e9160bfbba:reference/unordered_map/unordered_map/erase.md</id>
      <updated>2015-01-15 13:26:24 +0900</updated>
      
        <content type="html">&lt;h1&gt;erase (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;iterator &lt;span style=&#34;color: #0000FF&#34;&gt;erase&lt;/span&gt;(const_iterator position);                   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;

size_type &lt;span style=&#34;color: #0000FF&#34;&gt;erase&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; key_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; k);                        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;

iterator &lt;span style=&#34;color: #0000FF&#34;&gt;erase&lt;/span&gt;(const_iterator first, const_iterator last); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;指定された要素を削除する&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;position&lt;/code&gt; は、有効で、かつ、間接参照可能な（dereferenceable、つまり &lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/cend.html&#34;&gt;&lt;code&gt;cend&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; ではない）当該コンテナを指す読み取り専用イテレータでなければならない。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;first&lt;/code&gt; と &lt;code&gt;last&lt;/code&gt; は &lt;code&gt;[first, last)&lt;/code&gt; が当該コンテナの有効な範囲である読み取り専用イテレータでなければならない。&lt;br /&gt;
    なお、規格書では &lt;code&gt;first&lt;/code&gt; は間接参照可能である必要があることになっているが、他の種類のコンテナの要件と照らし合わせると、間接参照可能である必要はない（つまり、&lt;code&gt;first&lt;/code&gt; と &lt;code&gt;last&lt;/code&gt; が共に &lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/cend.html&#34;&gt;&lt;code&gt;cend&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; でも良い）ものと思われる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1)   &lt;code&gt;position&lt;/code&gt; で指定された要素を削除する。&lt;/li&gt;
&lt;li&gt;(2)   &lt;code&gt;k&lt;/code&gt; と等価なキーの要素を削除する。&lt;/li&gt;
&lt;li&gt;(3)   &lt;code&gt;[first, last)&lt;/code&gt; の範囲にある要素を全て削除する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1)   「削除前に、削除された要素の次だった位置」を指すイテレータ。&lt;code&gt;erase()&lt;/code&gt; を呼び出しても削除された要素以外を指す全てのイテレータは無効にならないため、&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/next.html&#34;&gt;&lt;code&gt;next&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(position)&lt;/code&gt; と同じ位置を指す &lt;code&gt;iterator&lt;/code&gt; である。&lt;br /&gt;
    なお、&lt;code&gt;position&lt;/code&gt; は &lt;code&gt;const_iterator&lt;/code&gt; なのに対して、戻り値は &lt;code&gt;iterator&lt;/code&gt; であるため注意が必要だが、非順序連想コンテナの場合いずれにせよどちらも読み取り専用イテレータである。&lt;/li&gt;
&lt;li&gt;(2)   削除した要素数。つまり、&lt;code&gt;k&lt;/code&gt; と等価なキーの要素があれば 1、無ければ 0。&lt;/li&gt;
&lt;li&gt;(3)    「削除前に、削除された要素の範囲の次だった位置」を指すイテレータ。&lt;code&gt;erase()&lt;/code&gt; を呼び出しても削除された要素以外を指す全てのイテレータは無効にならないため、&lt;code&gt;last&lt;/code&gt; と同じ位置を指す &lt;code&gt;iterator&lt;/code&gt; である。&lt;br /&gt;
    なお、&lt;code&gt;first&lt;/code&gt; 及び &lt;code&gt;last&lt;/code&gt; は &lt;code&gt;const_iterator&lt;/code&gt; なのに対して、戻り値は &lt;code&gt;iterator&lt;/code&gt; であるため注意が必要だが、非順序連想コンテナの場合いずれにせよどちらも読み取り専用イテレータである。&lt;br /&gt;
    また、要件に示したように &lt;code&gt;first&lt;/code&gt; が間接参照可能である必要がなかった場合にも、他の種類のコンテナの戻り値と照らし合わせると、&lt;code&gt;last&lt;/code&gt; と同じ位置を指す &lt;code&gt;iterator&lt;/code&gt; を返すのが適切であるものと思われる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1)   投げない。&lt;/li&gt;
&lt;li&gt;(2)   コンテナの &lt;code&gt;key_equal&lt;/code&gt; と &lt;code&gt;hasher&lt;/code&gt; のオブジェクト（それぞれ &lt;code&gt;key_eq()&lt;/code&gt; と &lt;code&gt;hash_function()&lt;/code&gt; が返すオブジェクト）が例外を投げなければ、例外を投げない。&lt;/li&gt;
&lt;li&gt;(3)   投げない。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1)   平均的なケースでは定数（O(&lt;code&gt;1&lt;/code&gt;)）だが、最悪のケースではコンテナの要素数に比例（O(&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;)）&lt;/li&gt;
&lt;li&gt;(2)   平均的なケースでは削除された要素数に比例（O(&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/count.html&#34;&gt;&lt;code&gt;count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(k)&lt;/code&gt;)）だが、最悪のケースではコンテナの要素数に比例（O(&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;)）&lt;/li&gt;
&lt;li&gt;(3)   平均的なケースでは指定された範囲の要素数に比例（O(&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/distance.html&#34;&gt;&lt;code&gt;distance&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(first, last)&lt;/code&gt;)）だが、最悪のケースではコンテナの要素数に比例（O(&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;)）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;p&gt;削除された要素を指すイテレータ、および、参照のみ無効になる。なお、規格書に明確な記載は無いが、削除された要素を指すポインタも無効になる。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map.html&#34;&gt;unordered_map&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator.html&#34;&gt;iterator&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm.html&#34;&gt;algorithm&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;utility&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; si;

std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/basic_ostream.html&#34;&gt;ostream&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/basic_ostream.html&#34;&gt;ostream&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; os, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; si&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; p)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; os &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;(&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p.first &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p.second &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;)&#39;&lt;/span&gt;;
}

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;C&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; print(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; label, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; C&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; c, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/basic_ostream.html&#34;&gt;ostream&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; os &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout)
{
  os &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; label &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; : &#34;&lt;/span&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/for_each.html&#34;&gt;for_each&lt;/a&gt;(c.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/cbegin.html&#34;&gt;cbegin&lt;/a&gt;(), c.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/cend.html&#34;&gt;cend&lt;/a&gt;(), [&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;os](&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; si&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; p) { os &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &#34;&lt;/span&gt;; });
  os &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 指定した位置にある要素を削除（(1)の形式）&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map.html&#34;&gt;unordered_map&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; um{ {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;1st&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;}, {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;3rd&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;}, {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;5th&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;}, {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;7th&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;}, {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;9th&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;9&lt;/span&gt;}, };
    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;(1) &lt;span style=&#34;color:#ff0000&#34;&gt;erase&lt;/span&gt;(const_iterator) before&#34;&lt;/span&gt;, um);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/next.html&#34;&gt;next&lt;/a&gt;(um.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/cbegin.html&#34;&gt;cbegin&lt;/a&gt;(), &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;argument: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.&lt;span style=&#34;color:#ff0000&#34;&gt;erase&lt;/span&gt;(it1);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;return value: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it2 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;after&#34;&lt;/span&gt;, um);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 指定したキーと等価な要素を削除（(2)の形式）&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map.html&#34;&gt;unordered_map&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; um{ {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;1st&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;}, {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;3rd&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;}, {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;5th&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;}, {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;7th&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;}, {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;9th&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;9&lt;/span&gt;}, };
    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;(2) &lt;span style=&#34;color:#ff0000&#34;&gt;erase&lt;/span&gt;(const value_type&amp;amp;) before&#34;&lt;/span&gt;, um);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; count1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.&lt;span style=&#34;color:#ff0000&#34;&gt;erase&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;5th&#34;&lt;/span&gt;);
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; count2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.&lt;span style=&#34;color:#ff0000&#34;&gt;erase&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;8th&#34;&lt;/span&gt;);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;argument: 5th, 8th&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;return value: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; count1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; count2 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;after&#34;&lt;/span&gt;, um);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 指定した位置にある要素を削除（(3)の形式）&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map.html&#34;&gt;unordered_map&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; um{ {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;1st&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;}, {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;3rd&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;}, {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;5th&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;}, {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;7th&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;}, {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;9th&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;9&lt;/span&gt;}, };
    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;(3) &lt;span style=&#34;color:#ff0000&#34;&gt;erase&lt;/span&gt;(const_iterator, const_iterator) before&#34;&lt;/span&gt;, um);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/next.html&#34;&gt;next&lt;/a&gt;(um.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/cbegin.html&#34;&gt;cbegin&lt;/a&gt;());
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/next.html&#34;&gt;next&lt;/a&gt;(it1, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;arguments: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it2 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it3 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.&lt;span style=&#34;color:#ff0000&#34;&gt;erase&lt;/span&gt;(it1, it2);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;return value: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it3 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;after&#34;&lt;/span&gt;, um);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;(1) erase(const_iterator) before : (9th, 9), (7th, 7), (5th, 5), (3rd, 3), (1st, 1), 
argument: (3rd, 3)
return value: (1st, 1)
after : (9th, 9), (7th, 7), (5th, 5), (1st, 1), 

(2) erase(const value_type&amp;amp;) before : (9th, 9), (7th, 7), (5th, 5), (3rd, 3), (1st, 1), 
argument: 5th, 8th
return value: 1, 0
after : (9th, 9), (7th, 7), (3rd, 3), (1st, 1), 

(3) erase(const_iterator, const_iterator) before : (9th, 9), (7th, 7), (5th, 5), (3rd, 3), (1st, 1), 
arguments: (7th, 7), (3rd, 3)
return value: (3rd, 3)
after : (9th, 9), (3rd, 3), (1st, 1), 
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;注：&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map.html&#34;&gt;&lt;code&gt;unordered_map&lt;/code&gt;&lt;/a&gt; は非順序連想コンテナであるため、出力順序は無意味であることに注意&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++0x mode&lt;/a&gt;: 3.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/emplace.html&#34;&gt;&lt;code&gt;emplace&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンテナ内への要素の直接構築&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/emplace_hint.html&#34;&gt;&lt;code&gt;emplace_hint&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;挿入位置のヒントを使用したコンテナ内への要素の直接構築&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/insert.html&#34;&gt;&lt;code&gt;insert&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素の追加&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/clear.html&#34;&gt;&lt;code&gt;clear&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;全要素の削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/swap.html&#34;&gt;&lt;code&gt;swap&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;内容の交換&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>find (C++11) -- リンク切れを修正</title>
      <link href="http://cpprefjp.github.io/reference/unordered_map/unordered_map/find.html"/>
      <id>3d2adeb82e86db0e149e366fa86df4e9160bfbba:reference/unordered_map/unordered_map/find.md</id>
      <updated>2015-01-15 13:26:24 +0900</updated>
      
        <content type="html">&lt;h1&gt;find (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;iterator &lt;span style=&#34;color: #0000FF&#34;&gt;find&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; key_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);
const_iterator find(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; key_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;コンテナ内でキーが &lt;code&gt;x&lt;/code&gt; である要素を検索し、見つかった場合はそれへのイテレータを返し、見つからなかった場合は &lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/end.html&#34;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt; （コンテナの最後の要素の次）を指すイテレータを返す。&lt;/p&gt;
&lt;h2&gt;パラメータ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt; : 検索するキー。&lt;code&gt;key_type&lt;/code&gt; は &lt;code&gt;map&lt;/code&gt; コンテナの中で &lt;code&gt;Key&lt;/code&gt; の別名として定義される。ここで &lt;code&gt;Key&lt;/code&gt; は 1 番目のテンプレートパラメータである。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;指定した値が見つかった場合はその要素へのイテレータ、そうでない場合は &lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/end.html&#34;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt; へのイテレータ。&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;投げない。&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;平均： 定数時間&lt;br /&gt;
最悪： &lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt; について線形時間。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;unordered_map&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;() 
{
  unordered_map&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c;

  c.insert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;a&#39;&lt;/span&gt;));

  cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (c.find(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; c.end()) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (c.find(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; c.end()) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1
0
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??, 11.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/count.html&#34;&gt;&lt;code&gt;count&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指定したキーにマッチする要素の数を返す&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>key_eq (C++11) -- リンク切れを修正</title>
      <link href="http://cpprefjp.github.io/reference/unordered_map/unordered_map/key_eq.html"/>
      <id>3d2adeb82e86db0e149e366fa86df4e9160bfbba:reference/unordered_map/unordered_map/key_eq.md</id>
      <updated>2015-01-15 13:26:24 +0900</updated>
      
        <content type="html">&lt;h1&gt;key_eq (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;key_equal key_eq() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;コンテナのキー比較用関数オブジェクトを返す&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;コンテナのキー比較用関数オブジェクト。&lt;/p&gt;
&lt;p&gt;このメンバ関数で返されるキー比較用関数オブジェクトは、コンストラクタ、あるいは、直近の代入（コピー、あるいはムーブ）、交換でコンテナに保存されたオブジェクトのコピーである。&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;定数&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;p&gt;戻り値の型である、キー比較用関数オブジェクトの型 &lt;code&gt;key_equal&lt;/code&gt; は、&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map.html&#34;&gt;&lt;code&gt;unordered_map&lt;/code&gt;&lt;/a&gt; のメンバ型で、四番目のテンプレートパラメータ &lt;code&gt;Pred&lt;/code&gt; を &lt;code&gt;typedef&lt;/code&gt; したものである。&lt;/p&gt;
&lt;p&gt;キー比較用関数オブジェクトは、名前の通りキーを比較するためのオブジェクトで、与えられた二つのキーが等しいときには &lt;code&gt;true&lt;/code&gt;、等しくないときには &lt;code&gt;false&lt;/code&gt; を返すメンバ関数 &lt;code&gt;bool operator()(key_type, key_type)&lt;/code&gt;を持つ必要がある。&lt;/p&gt;
&lt;p&gt;テンプレートパラメータを省略した場合、&lt;code&gt;key_equal&lt;/code&gt; はデフォルト値 &lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/equal_to.html&#34;&gt;&lt;code&gt;equal_to&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;key_type&amp;gt;&lt;/code&gt; となる。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map.html&#34;&gt;unordered_map&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;boolalpha;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map.html&#34;&gt;unordered_map&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; um &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {
    {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;1st&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;},
    {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;2nd&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;},
    {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;3rd&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;}
  };

  decltype(um)&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;key_equal eq{ um.key_eq() };

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;eq(&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\&#34;&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;1st&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\&#34;&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;, &lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\&#34;&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;2nd&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\&#34;&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;) = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; eq(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;1st&#34;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;2nd&#34;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;eq(&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\&#34;&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;1st&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\&#34;&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;, &lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\&#34;&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;2nd&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\&#34;&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;) = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; eq(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;1st&#34;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;1st&#34;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;eq(&#34;1st&#34;, &#34;2nd&#34;) = false
eq(&#34;1st&#34;, &#34;2nd&#34;) = true
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++0x mode&lt;/a&gt;: 3.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/keual_to.html&#34;&gt;&lt;code&gt;equal_to&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;等値比較演算関数オブジェクト(class template)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/hash_function.html&#34;&gt;&lt;code&gt;hash_function&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ハッシュ関数オブジェクトの取得&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>load_factor (C++11) -- リンク切れを修正</title>
      <link href="http://cpprefjp.github.io/reference/unordered_map/unordered_map/load_factor.html"/>
      <id>3d2adeb82e86db0e149e366fa86df4e9160bfbba:reference/unordered_map/unordered_map/load_factor.md</id>
      <updated>2015-01-15 13:26:24 +0900</updated>
      
        <content type="html">&lt;h1&gt;load_factor (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;float&lt;/span&gt; load_factor() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; noexcept;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;現在の負荷率（バケットあたりの要素数の平均）を取得する。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;現在の負荷率　:&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt; / &lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/bucket_count.html&#34;&gt;`bucket_count&lt;/a&gt; &lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;投げない。&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;定数時間  &lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;unordered_map&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  unordered_map&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;,&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; m;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt;( &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; n&lt;span style=&#34;color: #666666&#34;&gt;=0&lt;/span&gt;; n&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;4&lt;/span&gt;; n&lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt; )
  {
    m.emplace( n, n );
  }

  cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;current max_load_factor: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; m.max_load_factor() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;current size: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; m.size() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;current bucket_count: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; m.bucket_count() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;current load_factor: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; m.load_factor() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;               &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (size / bucket_count)&lt;/span&gt;
  cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力例 (MSVC-11.0)&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;current max_load_factor: 1
current size: 4
current bucket_count: 8
current load_factor: 0.5
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h3&gt;検証&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/load_factor.html&#34;&gt;&lt;code&gt;load_factor&lt;/code&gt;&lt;/a&gt; = &lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt; / &lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/bucket_count.html&#34;&gt;`bucket_count&lt;/a&gt;   を満たしている。&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??, 11.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/emplace.html&#34;&gt;&lt;code&gt;emplace&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンテナ内への要素の直接構築&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素数の取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/bucket_count.html&#34;&gt;&lt;code&gt;bucket_count&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;バケット数の取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;負荷率の最大値を取得、設定&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator[] (C++11) -- リンク切れを修正</title>
      <link href="http://cpprefjp.github.io/reference/unordered_map/unordered_map/op_at.html"/>
      <id>3d2adeb82e86db0e149e366fa86df4e9160bfbba:reference/unordered_map/unordered_map/op_at.md</id>
      <updated>2015-01-15 13:26:24 +0900</updated>
      
        <content type="html">&lt;h1&gt;operator[] (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;[](&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; key_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);
T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;[](&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; key_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; x);
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;要素へのアクセス&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;キーxに対応する値を返す。
オブジェクトが存在しないときは、新しい要素が追加される。&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;投げない。&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;平均： 定数時間&lt;br /&gt;
最悪： &lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt; について線形時間。  &lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;unordered_map&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Container&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; at_wrap(Container &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;c, T v) {

  cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;{&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c[v] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;}&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main()
{
  unordered_map&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;,&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; s1;
  s1.insert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;a&#39;&lt;/span&gt;));

  cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;size=&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s1.size() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;

  at_wrap(s1, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
  at_wrap(s1, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);

  cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;size=&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s1.size() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;a
exception std::out_of_ranget
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??, 11.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/op_assign.html&#34;&gt;&lt;code&gt;operator=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;代入演算子&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/insert.html&#34;&gt;&lt;code&gt;insert&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素を挿入する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== (C++11) -- リンク切れを修正</title>
      <link href="http://cpprefjp.github.io/reference/unordered_map/unordered_map/op_equal.html"/>
      <id>3d2adeb82e86db0e149e366fa86df4e9160bfbba:reference/unordered_map/unordered_map/op_equal.md</id>
      <updated>2015-01-15 13:26:24 +0900</updated>
      
        <content type="html">&lt;h1&gt;operator== (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Key&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Hash&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Pred&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Alloc&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; (&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; unordered_map&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Key,T,Hash,Pred,Alloc&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; x,
                 &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; unordered_map&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Key,T,Hash,Pred,Alloc&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; y );
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;x&lt;/code&gt; が &lt;code&gt;y&lt;/code&gt; と等しいかどうかの判定を行う。&lt;/p&gt;
&lt;h2&gt;パラメータ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;&lt;br /&gt;
比較するコンテナ&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;二つのコンテナが等しい場合に &lt;code&gt;true&lt;/code&gt;, そうでない場合に &lt;code&gt;false&lt;/code&gt;。&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;投げない。&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;平均: &lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt; に対して線形時間&lt;br /&gt;
最悪: &lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt; に対して二乗時間&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;unordered_map&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  unordered_map&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;,&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c1;
  c1.insert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;a&#39;&lt;/span&gt;));
  c1.insert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;20&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;b&#39;&lt;/span&gt;));
  c1.insert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;30&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;c&#39;&lt;/span&gt;));


  unordered_map&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;,&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c2;
  c2.insert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;30&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;c&#39;&lt;/span&gt;));
  c2.insert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;a&#39;&lt;/span&gt;));
  c2.insert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;20&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;b&#39;&lt;/span&gt;));

  cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (c1 &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; c2) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;

  c2.insert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;40&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;d&#39;&lt;/span&gt;));

  cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (c1 &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; c2) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1
0
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??, 11.0&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator!= (C++11) -- リンク切れを修正</title>
      <link href="http://cpprefjp.github.io/reference/unordered_map/unordered_map/op_not_equal.html"/>
      <id>3d2adeb82e86db0e149e366fa86df4e9160bfbba:reference/unordered_map/unordered_map/op_not_equal.md</id>
      <updated>2015-01-15 13:26:24 +0900</updated>
      
        <content type="html">&lt;h1&gt;operator!= (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Key&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Hash&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Pred&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Alloc&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; (&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; unordered_map&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Key,T,Hash,Pred,Alloc&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; x,
                 &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; unordered_map&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Key,T,Hash,Pred,Alloc&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; y );
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;x&lt;/code&gt; が &lt;code&gt;y&lt;/code&gt; と等しくないかどうかの判定を行う。&lt;/p&gt;
&lt;h2&gt;パラメータ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;&lt;br /&gt;
比較するコンテナ&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;二つのコンテナが等しくない場合に &lt;code&gt;true&lt;/code&gt;, そうでない場合に &lt;code&gt;false&lt;/code&gt;。&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;平均: &lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt; に対して線形時間&lt;br /&gt;
最悪: &lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt; に対して二乗時間&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;map&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  map&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;,&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c1;
  c1[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;a&#39;&lt;/span&gt;;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; c2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; c1;

  cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (c1 &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; c2) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;

  c2[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;b&#39;&lt;/span&gt;;

  cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (c1 &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; c2) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;0
1
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??, 11.0&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap (非メンバ関数) (C++11) -- リンク切れを修正</title>
      <link href="http://cpprefjp.github.io/reference/unordered_map/unordered_map/swap_free.html"/>
      <id>3d2adeb82e86db0e149e366fa86df4e9160bfbba:reference/unordered_map/unordered_map/swap_free.md</id>
      <updated>2015-01-15 13:26:24 +0900</updated>
      
        <content type="html">&lt;h1&gt;swap (非メンバ関数) (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Key&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Hash&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Pred&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Alloc&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; swap (unordered_map&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Key,T,Hash,Pred,Alloc&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; x,
             unordered_map&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Key,T,Hash,Pred,Alloc&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; y);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;2つの &lt;code&gt;unordered_map&lt;/code&gt; オブジェクトである &lt;code&gt;x&lt;/code&gt; と &#39;y&#39;が保持するコンテンツを交換する。サイズは異なる場合もある。 
このメンバ関数の呼び出しの後、呼び出し前に &#39;x&#39; にあった要素は &lt;code&gt;y&lt;/code&gt; へ、&lt;code&gt;y&lt;/code&gt; 内にあった要素は &lt;code&gt;x&lt;/code&gt; へ移る。全てのイテレータ、参照、ポインタは有効なまま残る。 &lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/swap.html&#34;&gt;&lt;code&gt;swap&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(y);&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;なし&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;投げない。&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;定数時間&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;unordered_map&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Map&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; print(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; name, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Map&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; m)
{
  cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; name &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; : {&#34;&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; m) {
    cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;[&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x.first &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;,&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x.second &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;], &#34;&lt;/span&gt;;
  }
  cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;}&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main()
{
  unordered_map&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c1;
  c1.insert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;a&#39;&lt;/span&gt;));
  c1.insert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;20&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;b&#39;&lt;/span&gt;));
  c1.insert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;30&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;c&#39;&lt;/span&gt;));

  unordered_map&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c2;
  c2.insert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;d&#39;&lt;/span&gt;));
  c2.insert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;15&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;e&#39;&lt;/span&gt;));

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// c1とc2を入れ替える&lt;/span&gt;
  swap(c1, c2);

  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;c1&#34;&lt;/span&gt;, c1);
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;c2&#34;&lt;/span&gt;, c2);

}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;c1 : {[5,d], [15,e], }
c2 : {[10,a], [20,b], [30,c], }
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??, 11.0&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator^= (C++11) -- リンク切れを修正</title>
      <link href="http://cpprefjp.github.io/reference/atomic/atomic/op_xor_assign.html"/>
      <id>a5829edbc89406c020526b9f2c998caaa5c21c90:reference/atomic/atomic/op_xor_assign.md</id>
      <updated>2015-01-15 12:38:02 +0900</updated>
      
        <content type="html">&lt;h1&gt;operator^= (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;T &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;^=&lt;/span&gt;(T operand) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;volatile&lt;/span&gt; noexcept;
T &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;^=&lt;/span&gt;(T operand) noexcept;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;XOR演算を行う&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/atomic/atomic/fetch_or.html&#34;&gt;&lt;code&gt;fetch_xor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(operand) | operand&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;投げない&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;p&gt;この関数は、&lt;code&gt;atomic&lt;/code&gt;クラスの整数型に対する特殊化で定義される。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;atomic&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;bitset&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0x0b&lt;/span&gt;;
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; b &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0x0e&lt;/span&gt;;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;atomic&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; x(a);

  &lt;span style=&#34;color:#ff0000&#34;&gt;x &lt;span style=&#34;color: #666666&#34;&gt;^=&lt;/span&gt; b&lt;/span&gt;;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bitset&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;4&amp;gt;&lt;/span&gt;(a).to_string() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bitset&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;4&amp;gt;&lt;/span&gt;(b).to_string() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bitset&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;4&amp;gt;&lt;/span&gt;(x.load()).to_string() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1011
1110
0101
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: 11.0, 12.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&amp; -- リンク切れを修正</title>
      <link href="http://cpprefjp.github.io/reference/bitset/op_and.html"/>
      <id>a5829edbc89406c020526b9f2c998caaa5c21c90:reference/bitset/op_and.md</id>
      <updated>2015-01-15 12:38:02 +0900</updated>
      
        <content type="html">&lt;h1&gt;operator&amp;amp;&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; N&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  bitset&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;N&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; bitset&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;N&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; lhs, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; bitset&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;N&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; rhs);          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++03&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; N&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  bitset&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;N&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; bitset&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;N&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; lhs, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; bitset&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;N&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; rhs) noexcept; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;lhs&lt;/code&gt;と&lt;code&gt;rhs&lt;/code&gt;に対して、論理積(AND)した&lt;code&gt;bitset&lt;/code&gt;を生成する。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;lhs&lt;/code&gt;と&lt;code&gt;rhs&lt;/code&gt;の共通して1となるビットを1、それ以外のビットを0とする&lt;code&gt;bitset&lt;/code&gt;オブジェクトを生成して返す。&lt;br /&gt;
この関数は、以下のプログラムと同じ動作をする：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; bitset&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;N&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(lhs) &lt;a href=&#34;http://cpprefjp.github.io/reference/bitset/op_and_assign.html&#34;&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;=&lt;/span&gt;&lt;/a&gt; rhs;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;投げない。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;bitset&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bitset&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;4&amp;gt;&lt;/span&gt; bs1(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;0011&#34;&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bitset&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;4&amp;gt;&lt;/span&gt; bs2(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;0101&#34;&lt;/span&gt;);

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bitset&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;4&amp;gt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; bs1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; bs2;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;0001
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator| -- リンク切れを修正</title>
      <link href="http://cpprefjp.github.io/reference/bitset/op_or.html"/>
      <id>a5829edbc89406c020526b9f2c998caaa5c21c90:reference/bitset/op_or.md</id>
      <updated>2015-01-15 12:38:02 +0900</updated>
      
        <content type="html">&lt;h1&gt;operator|&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; N&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  bitset&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;N&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; bitset&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;N&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; lhs, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; bitset&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;N&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; rhs);          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++03&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; N&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  bitset&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;N&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; bitset&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;N&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; lhs, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; bitset&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;N&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; rhs) noexcept; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;lhs&lt;/code&gt;と&lt;code&gt;rhs&lt;/code&gt;に対して、論理和(OR)した&lt;code&gt;bitset&lt;/code&gt;を生成する。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;lhs&lt;/code&gt;と&lt;code&gt;rhs&lt;/code&gt;のどちらか一方でも1となるビットを1、それ以外のビットを0とする&lt;code&gt;bitset&lt;/code&gt;オブジェクトを生成して返す。&lt;br /&gt;
この関数は、以下のプログラムと同じ動作をする：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; bitset&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;N&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(lhs) &lt;a href=&#34;http://cpprefjp.github.io/reference/bitset/op_or_assign.html&#34;&gt;&lt;span style=&#34;color: #666666&#34;&gt;|=&lt;/span&gt;&lt;/a&gt; rhs;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;投げない。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;bitset&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bitset&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;4&amp;gt;&lt;/span&gt; bs1(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;0011&#34;&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bitset&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;4&amp;gt;&lt;/span&gt; bs2(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;0101&#34;&lt;/span&gt;);

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bitset&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;4&amp;gt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; bs1 &lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt; bs2;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;0111
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator^ -- リンク切れを修正</title>
      <link href="http://cpprefjp.github.io/reference/bitset/op_xor.html"/>
      <id>a5829edbc89406c020526b9f2c998caaa5c21c90:reference/bitset/op_xor.md</id>
      <updated>2015-01-15 12:38:02 +0900</updated>
      
        <content type="html">&lt;h1&gt;operator^&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; N&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  bitset&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;N&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;^&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; bitset&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;N&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; lhs, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; bitset&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;N&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; rhs);          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++03&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; N&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  bitset&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;N&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;^&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; bitset&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;N&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; lhs, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; bitset&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;N&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; rhs) noexcept; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;lhs&lt;/code&gt;と&lt;code&gt;rhs&lt;/code&gt;に対して、排他的論理和(XOR)した&lt;code&gt;bitset&lt;/code&gt;を生成する。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;lhs&lt;/code&gt;と&lt;code&gt;rhs&lt;/code&gt;のどちらか一方だけ1となるビットを1、それ以外のビットを0とする&lt;code&gt;bitset&lt;/code&gt;オブジェクトを生成して返す。&lt;br /&gt;
この関数は、以下のプログラムと同じ動作をする：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; bitset&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;N&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(lhs) &lt;a href=&#34;http://cpprefjp.github.io/reference/bitset/op_xor_assign.html&#34;&gt;&lt;span style=&#34;color: #666666&#34;&gt;^=&lt;/span&gt;&lt;/a&gt; rhs;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;投げない。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;bitset&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bitset&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;4&amp;gt;&lt;/span&gt; bs1(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;0011&#34;&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bitset&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;4&amp;gt;&lt;/span&gt; bs2(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;0101&#34;&lt;/span&gt;);

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bitset&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;4&amp;gt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; bs1 &lt;span style=&#34;color: #666666&#34;&gt;^&lt;/span&gt; bs2;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;0110
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== (C++11) -- リンク切れを修正</title>
      <link href="http://cpprefjp.github.io/reference/chrono/op_equal.html"/>
      <id>a5829edbc89406c020526b9f2c998caaa5c21c90:reference/chrono/op_equal.md</id>
      <updated>2015-01-15 12:38:02 +0900</updated>
      
        <content type="html">&lt;h1&gt;operator== (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; chrono {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Rep1&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Period1&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Rep2&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Period2&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  constexpr &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/chrono/duration.html&#34;&gt;duration&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Rep1, Period1&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; lhs,
                            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/chrono/duration.html&#34;&gt;duration&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Rep2, Period2&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; rhs);      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Clock&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Duration1&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Duration2&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/chrono/time_point.html&#34;&gt;time_point&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Clock, Duration1&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; lhs,
                  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/chrono/time_point.html&#34;&gt;time_point&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Clock, Duration2&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; rhs);           &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) C++11&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Clock&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Duration1&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Duration2&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  constexpr &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/chrono/time_point.html&#34;&gt;time_point&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Clock, Duration1&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; lhs,
                            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/chrono/time_point.html&#34;&gt;time_point&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Clock, Duration2&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; rhs); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) C++14&lt;/span&gt;
}}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;等値比較を行う&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : &lt;code&gt;duration&lt;/code&gt;の比較2つの&lt;a href=&#34;http://cpprefjp.github.io/reference/chrono/duration.html&#34;&gt;&lt;code&gt;duration&lt;/code&gt;&lt;/a&gt;の単位を合わせた上で&lt;a href=&#34;http://cpprefjp.github.io/reference/chrono/duration/count.html&#34;&gt;&lt;code&gt;count()&lt;/code&gt;&lt;/a&gt;の等値比較を行う。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/common_type.html&#34;&gt;common_type&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;decltype(lhs), decltype(rhs)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type ct;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; ct(lhs).&lt;a href=&#34;http://cpprefjp.github.io/reference/chrono/duration/count.html&#34;&gt;count()&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; ct(rhs).&lt;a href=&#34;http://cpprefjp.github.io/reference/chrono/duration/count.html&#34;&gt;count()&lt;/a&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(2) : &lt;code&gt;time_point&lt;/code&gt;の比較&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; lhs.&lt;a href=&#34;http://cpprefjp.github.io/reference/chrono/time_point/time_since_epoch.html&#34;&gt;time_since_epoch&lt;/a&gt;() &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; rhs.time_since_poch();
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;cassert&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;chrono&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;chrono;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// duration同士の比較&lt;/span&gt;
  {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; seconds(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#ff0000&#34;&gt;&lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt;&lt;/span&gt; seconds(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);
    assert(result);
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// time_point同士の比較&lt;/span&gt;
  {
    seconds s(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);

    time_point&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;system_clock&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; p1(s);
    time_point&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;system_clock&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; p2(s);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; p1 &lt;span style=&#34;color:#ff0000&#34;&gt;&lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt;&lt;/span&gt; p2;
    assert(result);
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.6.1&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3469.html&#34; target=&#34;_blank&#34;&gt;N3469 Constexpr Library Additions: chrono, v3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>unordered_multimap (C++11) -- リンク切れを修正</title>
      <link href="http://cpprefjp.github.io/reference/unordered_map/unordered_multimap.html"/>
      <id>a5829edbc89406c020526b9f2c998caaa5c21c90:reference/unordered_map/unordered_multimap.md</id>
      <updated>2015-01-15 12:38:02 +0900</updated>
      
        <content type="html">&lt;h1&gt;unordered_multimap (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Key&lt;/span&gt;,
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;,
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Hash&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/hash.html&#34;&gt;hash&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Key&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;,
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Pred&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/equal_to.html&#34;&gt;equal_to&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Key&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;,
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Allocator&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator.html&#34;&gt;allocator&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Key, T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;unordered_multimap&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;unordered_multimap&lt;/code&gt; は、同一キーの要素を複数格納できる、格納順が規定されていないコンテナである。&lt;/p&gt;
&lt;p&gt;一般的には &lt;code&gt;hash multimap&lt;/code&gt; と呼ばれるコンテナであるが、標準への採用が遅かったことから、既に存在する各種コンテナとの名前の衝突を避けるため、&lt;code&gt;unordered_multimap&lt;/code&gt; と名付けられた。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;unordered_multimap&lt;/code&gt; の特徴は以下の通りである。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;連想&lt;br /&gt;
標準の配列や &lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector.html&#34;&gt;&lt;code&gt;vector&lt;/code&gt;&lt;/a&gt; と異なり、コンテナ内の要素へのアクセスは絶対的な位置（添え字）によるのではなく、キーによる。&lt;/li&gt;
&lt;li&gt;非順序&lt;br /&gt;
コンテナ内の各要素は、キーのハッシュ値に基づきハッシュテーブルに格納されるため、決められた順序で並んでいるわけではない。&lt;/li&gt;
&lt;li&gt;マルチマップ（multimap）&lt;br /&gt;
キーと、それに対応する値がペアとなった要素を持ち、かつ、同一のキー値を格納することができる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;テンプレートパラメータ &lt;code&gt;Hash&lt;/code&gt; は、以下に示す Hash requirements を満たし、テンプレートパラメータ &lt;code&gt;Key&lt;/code&gt; のハッシュ関数として振る舞わなければならない。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;関数オブジェクト型である。&lt;/li&gt;
&lt;li&gt;CopyConstructible requirements と Destructible requirements の要件を満たす。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;h&lt;/code&gt; を &lt;code&gt;Hash&lt;/code&gt; 型のオブジェクト、&lt;code&gt;Key&lt;/code&gt; を &lt;code&gt;Hash&lt;/code&gt; 型のオブジェクトの引数の型、&lt;code&gt;u&lt;/code&gt; を &lt;code&gt;Key&lt;/code&gt; 型の左辺値、&lt;code&gt;k&lt;/code&gt; を &lt;code&gt;Key&lt;/code&gt; 型（あるいは &lt;code&gt;const Key&lt;/code&gt; 型）に変換可能な値とすると、以下の要件を満たす。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;h(k)&lt;/code&gt; は戻り値の型が &lt;code&gt;std::size_t&lt;/code&gt; で、戻り値は引数 &lt;code&gt;k&lt;/code&gt; のみにしかよらない&lt;/li&gt;
&lt;li&gt;&lt;code&gt;h(u)&lt;/code&gt; は &lt;code&gt;u&lt;/code&gt; を変更しない&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;テンプレートパラメータ &lt;code&gt;Pred&lt;/code&gt; は二項述語で、テンプレート引数 &lt;code&gt;Key&lt;/code&gt; に対する同値関係でなければならない。&lt;/p&gt;
&lt;p&gt;テンプレートパラメータ &lt;code&gt;Allocator&lt;/code&gt; は、Allocator requirements を満たさなければならない。&lt;/p&gt;
&lt;h2&gt;メンバ関数&lt;/h2&gt;
&lt;h3&gt;構築／コピー／破棄&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/op_constructor.html&#34;&gt;(constructor)&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/op_destructor.html&#34;&gt;(destructor)&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;デストラクタ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/op_assign.html&#34;&gt;&lt;code&gt;operator=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;代入演算子&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;領域&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/empty.html&#34;&gt;&lt;code&gt;empty&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンテナが空かどうかを判定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素数の取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/max_size.html&#34;&gt;&lt;code&gt;max_size&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;格納可能な最大の要素数の取得&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;イテレータ&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/begin.html&#34;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;先頭要素を指すイテレータの取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/end.html&#34;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最終要素の次を指すイテレータの取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/cbegin.html&#34;&gt;&lt;code&gt;cbegin&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;先頭要素を指す読み取り専用イテレータの取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/cend.html&#34;&gt;&lt;code&gt;cend&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最終要素の次を指す読み取り専用イテレータの取得&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;アロケータ&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;アロケータオブジェクトの取得&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;コンテナの変更&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/emplace.html&#34;&gt;&lt;code&gt;emplace&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンテナ内への要素の直接構築&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/emplace_hint.html&#34;&gt;&lt;code&gt;emplace_hint&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;挿入位置のヒントを使用したコンテナ内への要素の直接構築&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/insert.html&#34;&gt;&lt;code&gt;insert&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素の追加&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/erase.html&#34;&gt;&lt;code&gt;erase&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素の削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/clear.html&#34;&gt;&lt;code&gt;clear&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;全要素の削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/swap.html&#34;&gt;&lt;code&gt;swap&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;内容の交換&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;オブザーバー&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/hash_function.html&#34;&gt;&lt;code&gt;hash_function&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ハッシュ関数オブジェクトの取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/key_eq.html&#34;&gt;&lt;code&gt;key_eq&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;キー比較用関数オブジェクトの取得&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;検索&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/find.html&#34;&gt;&lt;code&gt;find&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指定したキーの位置を検索&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/count.html&#34;&gt;&lt;code&gt;count&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指定したキーの要素数を取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/equal_range.html&#34;&gt;&lt;code&gt;equal_range&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指定したキーの範囲を取得&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;バケットインタフェース&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/bucket_count.html&#34;&gt;&lt;code&gt;bucket_count&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;バケット数の取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/max_bucket_count.html&#34;&gt;&lt;code&gt;max_bucket_count&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最大バケット数の取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/bucket_size.html&#34;&gt;&lt;code&gt;bucket_size&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;インデックス（添え字）で指定したバケット内の要素数を取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/bucket.html&#34;&gt;&lt;code&gt;bucket&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;キーで指定したバケットのインデックス（添え字）を取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/begin-size_type.html&#34;&gt;&lt;code&gt;begin(size_type)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;インデックス（添え字）で指定したバケット内の先頭要素を指すイテレータを取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/end-size_type.html&#34;&gt;&lt;code&gt;end(size_type)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;インデックス（添え字）で指定したバケット内の最終要素の次を指すイテレータを取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/cbegin-size_type.html&#34;&gt;&lt;code&gt;cbegin(size_type)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;インデックス（添え字）で指定したバケット内の先頭要素を指す読み取り専用イテレータを取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/cend-size_type.html&#34;&gt;&lt;code&gt;cend(size_type)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;インデックス（添え字）で指定したバケット内の最終要素の次を指す読み取り専用イテレータを取得&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;ハッシュポリシー&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/load_factor.html&#34;&gt;&lt;code&gt;load_factor&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;現在の負荷率（バケットあたりの要素数の平均）を取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;負荷率の最大値を取得、設定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/rehash.html&#34;&gt;&lt;code&gt;rehash&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最小バケット数指定によるバケット数の調整&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/reserve.html&#34;&gt;&lt;code&gt;reserve&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最小要素数指定によるバケット数の調整&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;メンバ型&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;key_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;キーの型。テンプレートパラメータ &lt;code&gt;Key&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;value_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素の型。&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;&lt;code&gt;pair&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;const Key, T&amp;gt;&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mapped_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;値の型。テンプレートパラメータ &lt;code&gt;T&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;hasher&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;キーのハッシュ関数の型。テンプレートパラメータ &lt;code&gt;Hash&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;key_equal&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;キーが等値か否かを判断するための二項述語の型。テンプレートパラメータ &lt;code&gt;Pred&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;allocator_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アロケータの型。テンプレートパラメータ &lt;code&gt;Allocator&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;pointer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素 &lt;code&gt;value_type&lt;/code&gt;（&lt;code&gt;= std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;&lt;code&gt;pair&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;const Key, T&amp;gt;&lt;/code&gt;）へのポインタ。スマートポインタも可であるが、通常は &lt;code&gt;value_type*&lt;/code&gt;。&lt;br /&gt;規格書では、&lt;code&gt;allocator_type::pointer&lt;/code&gt; となっているが、これは規格書の誤りで、ドラフト &lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3376.pdf&#34; target=&#34;_blank&#34;&gt;N3376&lt;/a&gt; で既に &lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits&#34;&gt;&lt;code&gt;allocator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Allocator&amp;gt;::pointer&lt;/code&gt; に修正されている。&lt;br /&gt;（さもないと、必須である &lt;code&gt;allocator_type::value_type&lt;/code&gt; のみを定義したユーザ定義のアロケータを使用することができないため）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;const_pointer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素 &lt;code&gt;value_type&lt;/code&gt;（&lt;code&gt;= std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;&lt;code&gt;pair&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;const Key, T&amp;gt;&lt;/code&gt;）へのコンストポインタ。スマートポインタも可であるが、通常は &lt;code&gt;const value_type*&lt;/code&gt;。&lt;br /&gt;規格書では、&lt;code&gt;allocator_type::const_pointer&lt;/code&gt; となっているが、これは規格書の誤りで、ドラフト &lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3376.pdf&#34; target=&#34;_blank&#34;&gt;N3376&lt;/a&gt; で既に &lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits&#34;&gt;&lt;code&gt;allocator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Allocator&amp;gt;::const_pointer&lt;/code&gt; に修正されている。&lt;br /&gt;（さもないと、必須である &lt;code&gt;allocator_type::value_type&lt;/code&gt; のみを定義したユーザ定義のアロケータを使用することができないため）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;reference&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素 &lt;code&gt;value_type&lt;/code&gt;（&lt;code&gt;= std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;&lt;code&gt;pair&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;const Key, T&amp;gt;&lt;/code&gt;）への参照。&lt;br /&gt;規格書では、&lt;code&gt;allocator_type::reference&lt;/code&gt; となっているが、これは規格書の誤りで、ドラフト &lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3376.pdf&#34; target=&#34;_blank&#34;&gt;N3376&lt;/a&gt; で既に &lt;code&gt;value_type&amp;amp;&lt;/code&gt; に修正されている。&lt;br /&gt;（さもないと、必須である &lt;code&gt;allocator_type::value_type&lt;/code&gt; のみを定義したユーザ定義のアロケータを使用することができないため）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;const_reference&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素 &lt;code&gt;value_type&lt;/code&gt;（&lt;code&gt;= std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;&lt;code&gt;pair&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;const Key, T&amp;gt;&lt;/code&gt;）へのコンスト参照。&lt;br /&gt;規格書では、&lt;code&gt;allocator_type::const_reference&lt;/code&gt; となっているが、これは規格書の誤りで、ドラフト &lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3376.pdf&#34; target=&#34;_blank&#34;&gt;N3376&lt;/a&gt; で既に &lt;code&gt;const value_type&amp;amp;&lt;/code&gt; に修正されている。&lt;br /&gt;（さもないと、必須である &lt;code&gt;allocator_type::value_type&lt;/code&gt; のみを定義したユーザ定義のアロケータを使用することができないため）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;size_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素数を表す符号なし整数型。&lt;code&gt;difference_type&lt;/code&gt; で表現可能な非負整数（0以上の整数）を表すことが可能。(通常は &lt;a href=&#34;http://cpprefjp.github.io/reference/cstddef/size_t.html&#34;&gt;&lt;code&gt;size_t&lt;/code&gt;&lt;/a&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;difference_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;同一のコンテナを指す &lt;code&gt;iterator&lt;/code&gt; の差を表す符号付き整数型(通常は &lt;a href=&#34;http://cpprefjp.github.io/reference/cstddef/ptrdiff_t.html&#34;&gt;&lt;code&gt;ptrdiff_t&lt;/code&gt;&lt;/a&gt;) &lt;br /&gt;&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/iterator_traits.html&#34;&gt;&lt;code&gt;iterator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;iterator&amp;gt;::difference_type&lt;/code&gt;、および、&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/iterator_traits.html&#34;&gt;&lt;code&gt;iterator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;const_iterator&amp;gt;::difference_type&lt;/code&gt; と同じ。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&#34;読み取り専用&#34;前方向イテレータ（誤植ではない）&lt;br /&gt;規格書には記載はないが、（連想コンテナがそうであるように）&lt;code&gt;const_iterator&lt;/code&gt; と同じ型か否かは実装依存であるものと思われる。&lt;br /&gt;従って、ODR（One Definition Rule）に違反しないようにするため、関数のパラメータ型には常に &lt;code&gt;const_iterator&lt;/code&gt; を使用したほうが良いだろう。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;const_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;読み取り専用前方向イテレータ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;local_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;同一バケット内のみで有効なイテレータ。&lt;br /&gt;規格書には記載はないが、&lt;code&gt;iterator&lt;/code&gt; と同様）&lt;code&gt;const_local_iterator&lt;/code&gt; と同じ型か否かは実装依存であるものと思われる。&lt;br /&gt;&lt;code&gt;iterator&lt;/code&gt; と、&lt;code&gt;iterator_category&lt;/code&gt;、&lt;code&gt;value_type&lt;/code&gt;、&lt;code&gt;difference_type&lt;/code&gt;、&lt;code&gt;pointer&lt;/code&gt;、&lt;code&gt;reference&lt;/code&gt; は同一である。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;const_local_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;同一バケット内のみで有効な読み取り専用イテレータ。&lt;br /&gt;&lt;code&gt;const_iterator&lt;/code&gt; と、&lt;code&gt;iterator_category&lt;/code&gt;、&lt;code&gt;value_type&lt;/code&gt;、&lt;code&gt;difference_type&lt;/code&gt;、&lt;code&gt;pointer&lt;/code&gt;、&lt;code&gt;reference&lt;/code&gt; は同一である。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;非メンバ関数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/swap_free.html&#34;&gt;&lt;code&gt;swap&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;内容の交換&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/op_equal.html&#34;&gt;&lt;code&gt;operator==&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;等値比較&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/op_not_equal.html&#34;&gt;&lt;code&gt;operator!=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;非等値比較&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map.html&#34;&gt;unordered_map&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator.html&#34;&gt;iterator&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm.html&#34;&gt;algorithm&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;C&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; print(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; C&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; c, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/site/cpprefjp/reference/ostream&#34;&gt;ostream&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; os &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout)
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/for_each.html&#34;&gt;for_each&lt;/a&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/begin.html&#34;&gt;begin&lt;/a&gt;(c), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/end.html&#34;&gt;end&lt;/a&gt;(c), [&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;os](&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; C&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;value_type p) { os &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;{&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p.first &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;,&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p.second &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;}, &#34;&lt;/span&gt;; });
  os &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;unordered_multimap&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; um{ {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;1st&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;}, {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;2nd&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;}, {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;3rd&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;}, };

  print(um);

  um.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/emplace.html&#34;&gt;emplace&lt;/a&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;4th&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;);

  print(um);

  um.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/insert.html&#34;&gt;insert&lt;/a&gt;({{&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;5th&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;}, {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;2nd&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;}});

  print(um);

  um.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/erase.html&#34;&gt;erase&lt;/a&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;2nd&#34;&lt;/span&gt;);

  print(um);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;{1st,1}, {3rd,3}, {2nd,2}, 
{4th,4}, {1st,1}, {3rd,3}, {2nd,2}, 
{1st,1}, {5th,5}, {4th,4}, {3rd,3}, {2nd,2}, {2nd,6}, 
{1st,1}, {5th,5}, {4th,4}, {3rd,3}, 
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11:&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2050&#34; target=&#34;_blank&#34;&gt;Unordered associative containers do not use allocator_traits to define member types&lt;/a&gt; （上記の &lt;code&gt;pointer&lt;/code&gt;、&lt;code&gt;const_pointer&lt;/code&gt;、&lt;code&gt;reference&lt;/code&gt;、&lt;code&gt;const_reference&lt;/code&gt; の問題に対する修正案）&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>count (C++11) -- リンク切れを修正</title>
      <link href="http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/count.html"/>
      <id>a5829edbc89406c020526b9f2c998caaa5c21c90:reference/unordered_map/unordered_multimap/count.md</id>
      <updated>2015-01-15 12:38:02 +0900</updated>
      
        <content type="html">&lt;h1&gt;count (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;size_type count(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; key_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;キー &lt;code&gt;x&lt;/code&gt; を検索し、コンテナ内に見つかった要素の数を返す。&lt;/p&gt;
&lt;h2&gt;パラメータ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt; : 検索するキー値。&lt;code&gt;key_type&lt;/code&gt; はメンバ型であり、&lt;code&gt;map&lt;/code&gt; コンテナの中で &lt;code&gt;Key&lt;/code&gt; の別名として定義される。ここで &lt;code&gt;Key&lt;/code&gt; は 1 番目のテンプレートパラメータである。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;x&lt;/code&gt; と同じ値のキーが見つかった要素数
メンバ型 &lt;code&gt;size_type&lt;/code&gt; は符号なし整数型である。&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;投げない。&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;平均： 定数時間&lt;br /&gt;
最悪： &lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt; について線形時間。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;unordered_map&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  unordered_multimap&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;,&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c;

  c.insert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;a&#39;&lt;/span&gt;));
  c.insert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;b&#39;&lt;/span&gt;));

  cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c.count(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c.count(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;2
0
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??, 11.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/find.html&#34;&gt;&lt;code&gt;find&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指定したキーで要素を探す&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素数を取得する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>emplace (C++11) -- リンク切れを修正</title>
      <link href="http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/emplace.html"/>
      <id>a5829edbc89406c020526b9f2c998caaa5c21c90:reference/unordered_map/unordered_multimap/emplace.md</id>
      <updated>2015-01-15 12:38:02 +0900</updated>
      
        <content type="html">&lt;h1&gt;emplace (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;class... Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
iterator emplace(Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;... args);
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;コンテナ内へ要素を直接構築する&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;このコンテナの要素型 &lt;code&gt;value_type&lt;/code&gt; は、コンテナに対して引数 &lt;code&gt;args&lt;/code&gt; から直接構築可能（EmplaceConstructible）でなければならない。&lt;/p&gt;
&lt;p&gt;ここで、コンテナに対して引数 &lt;code&gt;args&lt;/code&gt; から直接構築可能とは、&lt;code&gt;m&lt;/code&gt; をアロケータ型 &lt;code&gt;allocator_type&lt;/code&gt; の lvalue、&lt;code&gt;p&lt;/code&gt; を要素型 &lt;code&gt;value_type&lt;/code&gt; へのポインタとすると、以下の式が適格（well-formed）であるということである。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;&lt;code&gt;allocator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;allocator_type&amp;gt;::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits/construct.html&#34;&gt;&lt;code&gt;construct&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(m, p, std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Args&amp;gt;(args)...);&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Args&amp;gt;(args)...&lt;/code&gt; から構築された &lt;code&gt;value_type&lt;/code&gt; のオブジェクト &lt;code&gt;t&lt;/code&gt; をコンテナに挿入する。&lt;/p&gt;
&lt;p&gt;なお、オブジェクト &lt;code&gt;t&lt;/code&gt; は、構築後にコンテナにコピー、あるいはムーブされるわけではなく、コンテナ内に直接構築される。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;追加された要素を指すイテレータ。&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;ハッシュ関数以外から例外が投げられた場合には、挿入はされない。&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;平均的なケースでは定数（O(&lt;code&gt;1&lt;/code&gt;)）だが、最悪のケースではコンテナの要素数に比例（O(&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;)）。&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;この関数が呼ばれた後も、当該コンテナ内の要素を指す参照は無効にはならない。&lt;br /&gt;
    なお、規格書に明確な記載は無いが、当該コンテナ内の要素を指すポインタも無効にはならない。&lt;/li&gt;
&lt;li&gt;この関数が呼ばれた後も、呼び出しの前後でこのコンテナのバケット数（&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/bucket_count.html&#34;&gt;&lt;code&gt;bucket_count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の戻り値）が変わらなかった場合には当該コンテナを指すイテレータは無効にはならない。
    それ以外の場合は、当該コンテナを指すイテレータは無効になる可能性がある。&lt;br /&gt;
    コンテナのバケット数が変わらない場合とは、要素追加後の要素数が、要素追加前のバケット数（&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/bucket_count.html&#34;&gt;&lt;code&gt;bucket_count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の戻り値）×最大負荷率（&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の戻り値）よりも小さかった場合である。
    なお、条件が「よりも小さい」となっているが、最大負荷率の定義からすると「以下」の方が適切と思われる。&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/reserve.html&#34;&gt;&lt;code&gt;reserve&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; も参照。&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;このメンバ関数は、コンテナの種類によってシグネチャが異なるため、注意が必要である。&lt;br /&gt;
&lt;code&gt;emplace_hint&lt;/code&gt; も含めた一覧を以下に示す。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;シーケンスコンテナ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;template &amp;lt;class... Args&amp;gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;iterator emplace(const_iterator, Args&amp;amp;&amp;amp;...)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;連想コンテナ、非順序連想コンテナ&lt;br /&gt;（同一キーの重複を許さない場合）&lt;/td&gt;
&lt;td&gt;&lt;code&gt;template &amp;lt;class... Args&amp;gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;pair&amp;lt;iterator, bool&amp;gt; emplace(Args&amp;amp;&amp;amp;...)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;連想コンテナ、非順序連想コンテナ&lt;br /&gt;（同一キーの重複を許す場合）&lt;/td&gt;
&lt;td&gt;&lt;code&gt;template &amp;lt;class... Args&amp;gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;iterator emplace(Args&amp;amp;&amp;amp;...)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;連想コンテナ、非順序連想コンテナ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;template &amp;lt;class... Args&amp;gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;iterator emplace_hint(const_iterator, Args&amp;amp;&amp;amp;...)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map.html&#34;&gt;unordered_map&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility.html&#34;&gt;utility&lt;/a&gt;&amp;gt;    &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// for std::&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm.html&#34;&gt;algorithm&lt;/a&gt;&amp;gt;  &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// for std::for_each&lt;/span&gt;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// サンプル用typedef&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; is;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// サンプル用typedefのための挿入演算子&lt;/span&gt;
std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; os, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; is&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; p)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; os &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;(&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p.first &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;,&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p.second &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;)&#39;&lt;/span&gt;;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap.html&#34;&gt;unordered_multimap&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; um;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.&lt;span style=&#34;color:#ff0000&#34;&gt;emplace&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;1st&#34;&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.&lt;span style=&#34;color:#ff0000&#34;&gt;emplace&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;2nd&#34;&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it2 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it3 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.&lt;span style=&#34;color:#ff0000&#34;&gt;emplace&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;3rd&#34;&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it3 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(um.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/cbegin.html&#34;&gt;cbegin&lt;/a&gt;(), um.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/cend.html&#34;&gt;cend&lt;/a&gt;(), [](&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; is&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; p) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &#34;&lt;/span&gt;;
  });
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;(1,1st)
(2,2nd)
(1,3rd)
(2,2nd), (1,1st), (1,3rd), 
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;注：&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap.html&#34;&gt;&lt;code&gt;unordered_multimap&lt;/code&gt;&lt;/a&gt; は非順序連想コンテナであるため、出力順序は無意味であることに注意&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++0x mode&lt;/a&gt;: 3.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/emplace_hint.html&#34;&gt;&lt;code&gt;emplace_hint&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;挿入位置のヒントを使用したコンテナ内への要素の直接構築&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/insert.html&#34;&gt;&lt;code&gt;insert&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素の追加&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/erase.html&#34;&gt;&lt;code&gt;erase&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素の削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/clear.html&#34;&gt;&lt;code&gt;clear&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;全要素の削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/swap.html&#34;&gt;&lt;code&gt;swap&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;内容の交換&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/bucket_count.html&#34;&gt;&lt;code&gt;bucket_count&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;バケット数の取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/load_factor.html&#34;&gt;&lt;code&gt;load_factor&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;現在の負荷率（バケットあたりの要素数の平均）を取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;負荷率の最大値を取得、設定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/rehash.html&#34;&gt;&lt;code&gt;rehash&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最小バケット数指定によるバケット数の調整&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/reserve.html&#34;&gt;&lt;code&gt;reserve&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最小要素数指定によるバケット数の調整&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>emplace_hint (C++11) -- リンク切れを修正</title>
      <link href="http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/emplace_hint.html"/>
      <id>a5829edbc89406c020526b9f2c998caaa5c21c90:reference/unordered_map/unordered_multimap/emplace_hint.md</id>
      <updated>2015-01-15 12:38:02 +0900</updated>
      
        <content type="html">&lt;h1&gt;emplace_hint (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;class... Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
iterator emplace_hint(const_iterator position, Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;... args);
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;挿入位置のヒントを使用してコンテナ内へ要素を直接構築する&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;このコンテナの要素型 &lt;code&gt;value_type&lt;/code&gt; は、コンテナに対して引数 &lt;code&gt;args&lt;/code&gt; から直接構築可能（EmplaceConstructible）でなければならない。&lt;br /&gt;
    ここで、コンテナに対して引数 &lt;code&gt;args&lt;/code&gt; から直接構築可能とは、&lt;code&gt;m&lt;/code&gt; をアロケータ型 &lt;code&gt;allocator_type&lt;/code&gt; の左辺値、&lt;code&gt;p&lt;/code&gt; を要素型 &lt;code&gt;value_type&lt;/code&gt; へのポインタとすると、以下の式が適格（well-formed）であるということである。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;&lt;code&gt;allocator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;allocator_type&amp;gt;::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits/construct.html&#34;&gt;&lt;code&gt;construct&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(m, p, std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Args&amp;gt;(args)...);&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;引数 &lt;code&gt;position&lt;/code&gt; は、コンテナの有効な読み取り専用イテレータでなければならないが、間接参照可能（dereferenceable）である必要はない。（つまり、最終要素の次を指すイテレータでも良い）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Args&amp;gt;(args)...&lt;/code&gt; から構築された &lt;code&gt;value_type&lt;/code&gt; のオブジェクト &lt;code&gt;t&lt;/code&gt; をコンテナに挿入する。&lt;/p&gt;
&lt;p&gt;なお、オブジェクト &lt;code&gt;t&lt;/code&gt; は、構築後にコンテナにコピー、あるいはムーブされるわけではなく、コンテナ内に直接構築される。&lt;/p&gt;
&lt;p&gt;引数 &lt;code&gt;position&lt;/code&gt; は、要素の挿入位置を探し始める場所のヒントとして使用されるが、実装によって無視されるかもしれない。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;追加された要素を指すイテレータ。&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;ハッシュ関数以外から例外が投げられた場合には、挿入はされない。&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;平均的なケースでは定数（O(&lt;code&gt;1&lt;/code&gt;)）だが、最悪のケースではコンテナの要素数に比例（O(&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;)）。&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;この関数が呼ばれた後も、当該コンテナ内の要素を指す参照は無効にはならない。&lt;br /&gt;
    なお、規格書に明確な記載は無いが、当該コンテナ内の要素を指すポインタも無効にはならない。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;この関数が呼ばれた後も、呼び出しの前後でこのコンテナのバケット数（&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/bucket_count.html&#34;&gt;&lt;code&gt;bucket_count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の戻り値）が変わらなかった場合には当該コンテナを指すイテレータは無効にはならない。
    それ以外の場合は、当該コンテナを指すイテレータは無効になる可能性がある。&lt;br /&gt;
    コンテナのバケット数が変わらない場合とは、要素追加後の要素数が、要素追加前のバケット数（&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/bucket_count.html&#34;&gt;&lt;code&gt;bucket_count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の戻り値）×最大負荷率（&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の戻り値）よりも小さかった場合である。&lt;br /&gt;
    なお、条件が「よりも小さい」となっているが、最大負荷率の定義からすると「以下」の方が適切と思われる。&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/reserve.html&#34;&gt;&lt;code&gt;reserve&lt;/code&gt;&lt;/a&gt; も参照。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;このメンバ関数は、コンテナの種類によってシグネチャが異なるため、注意が必要である。&lt;br /&gt;
&lt;code&gt;emplace&lt;/code&gt; も含めた一覧を以下に示す。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;シーケンスコンテナ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;template &amp;lt;class... Args&amp;gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;iterator emplace(const_iterator, Args&amp;amp;&amp;amp;...)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;連想コンテナ、非順序連想コンテナ&lt;br /&gt;（同一キーの重複を許さない場合）&lt;/td&gt;
&lt;td&gt;&lt;code&gt;template &amp;lt;class... Args&amp;gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;pair&amp;lt;iterator, bool&amp;gt; emplace(Args&amp;amp;&amp;amp;...)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;連想コンテナ、非順序連想コンテナ&lt;br /&gt;（同一キーの重複を許す場合）&lt;/td&gt;
&lt;td&gt;&lt;code&gt;template &amp;lt;class... Args&amp;gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;iterator emplace(Args&amp;amp;&amp;amp;...)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;連想コンテナ、非順序連想コンテナ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;template &amp;lt;class... Args&amp;gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;iterator emplace_hint(const_iterator, Args&amp;amp;&amp;amp;...)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;本関数呼び出しで構築されるオブジェクトを &lt;code&gt;t&lt;/code&gt; とすると、&lt;code&gt;t.first&lt;/code&gt; と等価なキーの要素が既に存在する場合、&lt;code&gt;position&lt;/code&gt; に応じて既存の要素と新規の要素が順序付けられると期待されるが、規格書にそのような規定は存在しない。
    従って、そのような期待はすべきではない。（下記の出力例も参照）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map.html&#34;&gt;unordered_map&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility.html&#34;&gt;utility&lt;/a&gt;&amp;gt;    &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// for std::&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm.html&#34;&gt;algorithm&lt;/a&gt;&amp;gt;  &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// for std::for_each&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator.html&#34;&gt;iterator&lt;/a&gt;&amp;gt;   &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// for std::&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/next.html&#34;&gt;next&lt;/a&gt;&lt;/span&gt;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// サンプル用typedef&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; is;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// サンプル用typedefのための挿入演算子&lt;/span&gt;
std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/basic_ostream.html&#34;&gt;ostream&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/basic_ostream.html&#34;&gt;ostream&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; os, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; is&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; p)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; os &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;(&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p.first &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;,&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p.second &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;)&#39;&lt;/span&gt;;
}

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 出力関数&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Iterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; print(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; label, Iterator begin, Iterator end, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/basic_ostream.html&#34;&gt;ostream&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; os &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout)
{
  os &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; label &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; : &#34;&lt;/span&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(begin, end, [&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;os](&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; is&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; p) { os &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &#34;&lt;/span&gt;; });
  os &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap.html&#34;&gt;unordered_multimap&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; um{ {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;1st&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;2nd&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;3rd&#34;&lt;/span&gt;}, };

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 初期状態の出力&lt;/span&gt;
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;before&#34;&lt;/span&gt;, um.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/cbegin.html&#34;&gt;cbegin&lt;/a&gt;(), um.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/cend.html&#34;&gt;cend&lt;/a&gt;());

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 追加するデータと等価な範囲を取得&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; p &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/equal_range.html&#34;&gt;equal_range&lt;/a&gt;(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/equal_range.html&#34;&gt;equal_range&lt;/a&gt;&#34;&lt;/span&gt;, p.first, p.second);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 等価な要素の間に &lt;span style=&#34;color:#ff0000&#34;&gt;emplace_hint&lt;/span&gt; でデータを追加&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.&lt;span style=&#34;color:#ff0000&#34;&gt;emplace_hint&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/next.html&#34;&gt;next&lt;/a&gt;(p.first), &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;4th&#34;&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;span style=&#34;color:#ff0000&#34;&gt;emplace_hint&lt;/span&gt; : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 追加結果の出力&lt;/span&gt;
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;after&#34;&lt;/span&gt;, um.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/cbegin.html&#34;&gt;cbegin&lt;/a&gt;(), um.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/cend.html&#34;&gt;cend&lt;/a&gt;());
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;libstdc++ の出力例（4.7.3 現在）&lt;br /&gt;
    追加した要素 (1,4th) はヒントを無視して (1,2nd) と (1,1st) よりも前に追加されている。&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;    before : (2,3rd), (1,2nd), (1,1st), 
    equal_range : (1,2nd), (1,1st), 
    emplace_hint : (1,4th)
    after : (2,3rd), (1,4th), (1,2nd), (1,1st), 
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;libc++ の出力例（2013/11/22 現在）&lt;br /&gt;
    追加した要素 (1,4th) がヒントで指定した通り (1,1st) と (1,2nd) の間に追加されている。&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;    before : (2,3rd), (1,1st), (1,2nd), 
    equal_range : (1,1st), (1,2nd), 
    emplace_hint : (1,4th)
    after : (2,3rd), (1,1st), (1,4th), (1,2nd), 
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注：&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap.html&#34;&gt;&lt;code&gt;unordered_multimap&lt;/code&gt;&lt;/a&gt; は非順序連想コンテナであるため、出力順序は無意味であることに注意&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++0x mode&lt;/a&gt;: 3.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/emplace.html&#34;&gt;&lt;code&gt;emplace&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンテナ内への要素の直接構築&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/insert.html&#34;&gt;&lt;code&gt;insert&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素の追加&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/erase.html&#34;&gt;&lt;code&gt;erase&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素の削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/clear.html&#34;&gt;&lt;code&gt;clear&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;全要素の削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/swap.html&#34;&gt;&lt;code&gt;swap&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;内容の交換&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/bucket_count.html&#34;&gt;&lt;code&gt;bucket_count&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;バケット数の取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/load_factor.html&#34;&gt;&lt;code&gt;load_factor&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;現在の負荷率（バケットあたりの要素数の平均）を取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最大負荷率を取得、設定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/rehash.html&#34;&gt;&lt;code&gt;rehash&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最小バケット数指定によるバケット数の調整&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/reserve.html&#34;&gt;&lt;code&gt;reserve&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最小要素数指定によるバケット数の調整&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>equal_range (C++11) -- リンク切れを修正</title>
      <link href="http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/equal_range.html"/>
      <id>a5829edbc89406c020526b9f2c998caaa5c21c90:reference/unordered_map/unordered_multimap/equal_range.md</id>
      <updated>2015-01-15 12:38:02 +0900</updated>
      
        <content type="html">&lt;h1&gt;equal_range (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;iterator,iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; equal_range(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; key_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);
pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;const_iterator,const_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; equal_range(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; key_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;コンテナ内の、&lt;code&gt;x&lt;/code&gt; と等しい全てのキー要素を含む範囲の境界を返す。 &lt;/p&gt;
&lt;p&gt;もし &lt;code&gt;x&lt;/code&gt; がコンテナ内のどのキーともマッチしなかった場合、戻り値の範囲は長さ 0 になり、両方のイテレータは &lt;code&gt;x&lt;/code&gt; より大きく最も近い値を指す。そうでない場合、&lt;code&gt;x&lt;/code&gt; がコンテナ内の全ての要素よりも大きい場合は &lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/end.html&#34;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt; を指す。&lt;/p&gt;
&lt;h2&gt;パラメータ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt; : 比較されるキー値。&lt;code&gt;key_type&lt;/code&gt; はメンバ型であり、&lt;code&gt;map&lt;/code&gt; コンテナ内で &lt;code&gt;Key&lt;/code&gt; の別名として定義される。ここで &lt;code&gt;Key&lt;/code&gt; は最初のテンプレートパラメータである。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;pair&lt;/code&gt; を返す。
&lt;code&gt;pair::first&lt;/code&gt; は 範囲の下境界にあたり、
&lt;code&gt;pair::second&lt;/code&gt; は 範囲の上境界にあたる。
&lt;code&gt;iterator&lt;/code&gt; はメンバ型であり &lt;code&gt;unordered_multimap&lt;/code&gt; において双方向イテレータとして定義される。&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;平均： 定数時間&lt;br /&gt;
最悪： &lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt; について線形時間。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;unordered_map&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;algorithm&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std;


&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; unordered_multimap&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;,&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;iterator &lt;span style=&#34;color: #B00040&#34;&gt;it_t&lt;/span&gt;;

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;disp&lt;/span&gt;( pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;,&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; p) {
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p.second &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
 unordered_multimap&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;,&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c;

  c.insert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;a&#39;&lt;/span&gt;));
  c.insert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;b&#39;&lt;/span&gt;));
  c.insert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;c&#39;&lt;/span&gt;));

  pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;it_t&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;it_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; ret &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; c.equal_range(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;--- ret&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(ret.first, ret.second, disp);


  pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;it_t&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;it_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; ret2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; c.equal_range(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;--- ret2&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;first:&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ( ret2.first &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; c.end() )  &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;second:&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ( ret2.second &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; c.end() )  &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;--- ret
a
b
c
--- ret2
first:1
second:1
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??, 11.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/count.html&#34;&gt;&lt;code&gt;count&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指定したキーにマッチする要素の数を返す&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/find.html&#34;&gt;&lt;code&gt;find&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指定したキーで要素を探す&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase (C++11) -- リンク切れを修正</title>
      <link href="http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/erase.html"/>
      <id>a5829edbc89406c020526b9f2c998caaa5c21c90:reference/unordered_map/unordered_multimap/erase.md</id>
      <updated>2015-01-15 12:38:02 +0900</updated>
      
        <content type="html">&lt;h1&gt;erase (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;iterator &lt;span style=&#34;color: #0000FF&#34;&gt;erase&lt;/span&gt;(const_iterator position);                   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;

size_type &lt;span style=&#34;color: #0000FF&#34;&gt;erase&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; key_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; k);                        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;

iterator &lt;span style=&#34;color: #0000FF&#34;&gt;erase&lt;/span&gt;(const_iterator first, const_iterator last); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;指定された要素を削除する&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;position&lt;/code&gt; は、有効で、かつ、間接参照可能な（dereferenceable、つまり &lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/cend.html&#34;&gt;&lt;code&gt;cend&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; ではない）当該コンテナを指す読み取り専用イテレータでなければならない。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;first&lt;/code&gt; と &lt;code&gt;last&lt;/code&gt; は &lt;code&gt;[first, last)&lt;/code&gt; が当該コンテナの有効な範囲である読み取り専用イテレータでなければならない。&lt;br /&gt;
    なお、規格書では &lt;code&gt;first&lt;/code&gt; は間接参照可能である必要があることになっているが、他の種類のコンテナの要件と照らし合わせると、間接参照可能である必要はない（つまり、&lt;code&gt;first&lt;/code&gt; と &lt;code&gt;last&lt;/code&gt; が共に &lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/cend.html&#34;&gt;&lt;code&gt;cend&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; でも良い）ものと思われる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1)   &lt;code&gt;position&lt;/code&gt; で指定された要素を削除する。&lt;/li&gt;
&lt;li&gt;(2)   &lt;code&gt;k&lt;/code&gt; と等価なキーの要素を削除する。&lt;/li&gt;
&lt;li&gt;(3)   &lt;code&gt;[first, last)&lt;/code&gt; の範囲にある要素を全て削除する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1)   「削除前に、削除された要素の次だった位置」を指すイテレータ。&lt;code&gt;erase()&lt;/code&gt; を呼び出しても削除された要素以外を指す全てのイテレータは無効にならないため、&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/next.html&#34;&gt;&lt;code&gt;next&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(position)&lt;/code&gt; と同じ位置を指す &lt;code&gt;iterator&lt;/code&gt; である。&lt;br /&gt;
    なお、&lt;code&gt;position&lt;/code&gt; は &lt;code&gt;const_iterator&lt;/code&gt; なのに対して、戻り値は &lt;code&gt;iterator&lt;/code&gt; であるため注意が必要だが、非順序連想コンテナの場合いずれにせよどちらも読み取り専用イテレータである。&lt;/li&gt;
&lt;li&gt;(2)   削除した要素数。&lt;/li&gt;
&lt;li&gt;(3)    「削除前に、削除された要素の範囲の次だった位置」を指すイテレータ。&lt;code&gt;erase()&lt;/code&gt; を呼び出しても削除された要素以外を指す全てのイテレータは無効にならないため、&lt;code&gt;last&lt;/code&gt; と同じ位置を指す &lt;code&gt;iterator&lt;/code&gt; である。&lt;br /&gt;
    なお、&lt;code&gt;first&lt;/code&gt; 及び &lt;code&gt;last&lt;/code&gt; は &lt;code&gt;const_iterator&lt;/code&gt; なのに対して、戻り値は &lt;code&gt;iterator&lt;/code&gt; であるため注意が必要だが、非順序連想コンテナの場合いずれにせよどちらも読み取り専用イテレータである。&lt;br /&gt;
    また、要件に示したように &lt;code&gt;first&lt;/code&gt; が間接参照可能である必要がなかった場合にも、他の種類のコンテナの戻り値と照らし合わせると、&lt;code&gt;last&lt;/code&gt; と同じ位置を指す &lt;code&gt;iterator&lt;/code&gt; を返すのが適切であるものと思われる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1)   投げない。&lt;/li&gt;
&lt;li&gt;(2)   コンテナの &lt;code&gt;key_equal&lt;/code&gt; と &lt;code&gt;hasher&lt;/code&gt; のオブジェクト（それぞれ &lt;code&gt;key_eq()&lt;/code&gt; と &lt;code&gt;hash_function()&lt;/code&gt; が返すオブジェクト）が例外を投げなければ、例外を投げない。&lt;/li&gt;
&lt;li&gt;(3)   投げない。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1)   平均的なケースでは定数（O(&lt;code&gt;1&lt;/code&gt;)）だが、最悪のケースではコンテナの要素数に比例（O(&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;)）&lt;/li&gt;
&lt;li&gt;(2)   平均的なケースでは削除された要素数に比例（O(&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/count.html&#34;&gt;&lt;code&gt;count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(k)&lt;/code&gt;)）だが、最悪のケースではコンテナの要素数に比例（O(&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;)）&lt;/li&gt;
&lt;li&gt;(3)   平均的なケースでは指定された範囲の要素数に比例（O(&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/distance.html&#34;&gt;&lt;code&gt;distance&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(first, last)&lt;/code&gt;)）だが、最悪のケースではコンテナの要素数に比例（O(&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;)）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;p&gt;削除された要素を指すイテレータ、および、参照のみ無効になる。なお、規格書に明確な記載は無いが、削除された要素を指すポインタも無効になる。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map.html&#34;&gt;unordered_map&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator.html&#34;&gt;iterator&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm.html&#34;&gt;algorithm&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;utility&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; si;

std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/basic_ostream.html&#34;&gt;ostream&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/basic_ostream.html&#34;&gt;ostream&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; os, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; si&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; p)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; os &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;(&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p.first &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p.second &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;)&#39;&lt;/span&gt;;
}

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;C&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; print(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; label, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; C&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; c, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/basic_ostream.html&#34;&gt;ostream&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; os &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout)
{
  os &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; label &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; : &#34;&lt;/span&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/for_each.html&#34;&gt;for_each&lt;/a&gt;(c.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/cbegin.html&#34;&gt;cbegin&lt;/a&gt;(), c.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/cend.html&#34;&gt;cend&lt;/a&gt;(), [&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;os](&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; si&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; p) { os &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &#34;&lt;/span&gt;; });
  os &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 指定した位置にある要素を削除（(1)の形式）&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;unordered_multimap&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; um{ {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;1st&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;}, {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;3rd&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;}, {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;5th&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;}, {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;7th&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;}, {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;9th&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;9&lt;/span&gt;}, {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;3rd&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;33&lt;/span&gt;}, };
    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;(1) &lt;span style=&#34;color:#ff0000&#34;&gt;erase&lt;/span&gt;(const_iterator) before&#34;&lt;/span&gt;, um);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.find(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;3rd&#34;&lt;/span&gt;);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;argument: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.&lt;span style=&#34;color:#ff0000&#34;&gt;erase&lt;/span&gt;(it1);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;return value: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it2 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;after&#34;&lt;/span&gt;, um);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 指定したキーと等価な要素を削除（(2)の形式）&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;unordered_multimap&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; um{ {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;1st&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;}, {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;3rd&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;}, {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;5th&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;}, {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;7th&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;}, {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;9th&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;9&lt;/span&gt;}, {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;3rd&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;33&lt;/span&gt;}, };
    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;(2) &lt;span style=&#34;color:#ff0000&#34;&gt;erase&lt;/span&gt;(const value_type&amp;amp;) before&#34;&lt;/span&gt;, um);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; count1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.&lt;span style=&#34;color:#ff0000&#34;&gt;erase&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;5th&#34;&lt;/span&gt;);
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; count2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.&lt;span style=&#34;color:#ff0000&#34;&gt;erase&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;8th&#34;&lt;/span&gt;);
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; count3 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.&lt;span style=&#34;color:#ff0000&#34;&gt;erase&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;3rd&#34;&lt;/span&gt;);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;argument: 5th, 8th, 3rd&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;return value: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; count1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; count2 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; count3 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;after&#34;&lt;/span&gt;, um);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 指定した位置にある要素を削除（(3)の形式）&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;unordered_multimap&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; um{ {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;1st&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;}, {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;3rd&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;}, {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;5th&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;}, {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;7th&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;}, {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;9th&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;9&lt;/span&gt;}, {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;3rd&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;33&lt;/span&gt;}, };
    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;(3) &lt;span style=&#34;color:#ff0000&#34;&gt;erase&lt;/span&gt;(const_iterator, const_iterator) before&#34;&lt;/span&gt;, um);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/next.html&#34;&gt;next&lt;/a&gt;(um.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/cbegin.html&#34;&gt;cbegin&lt;/a&gt;());
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/next.html&#34;&gt;next&lt;/a&gt;(it1, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;arguments: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it2 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it3 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.&lt;span style=&#34;color:#ff0000&#34;&gt;erase&lt;/span&gt;(it1, it2);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;return value: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it3 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;after&#34;&lt;/span&gt;, um);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;(1) erase(const_iterator) before : (9th, 9), (7th, 7), (5th, 5), (3rd, 33), (3rd, 3), (1st, 1), 
argument: (3rd, 33)
return value: (3rd, 3)
after : (9th, 9), (7th, 7), (5th, 5), (3rd, 3), (1st, 1), 

(2) erase(const value_type&amp;amp;) before : (9th, 9), (7th, 7), (5th, 5), (3rd, 33), (3rd, 3), (1st, 1), 
argument: 5th, 8th, 3rd
return value: 1, 0, 2
after : (9th, 9), (7th, 7), (1st, 1), 

(3) erase(const_iterator, const_iterator) before : (9th, 9), (7th, 7), (5th, 5), (3rd, 33), (3rd, 3), (1st, 1), 
arguments: (7th, 7), (3rd, 33)
return value: (3rd, 33)
after : (9th, 9), (3rd, 33), (3rd, 3), (1st, 1), 
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;注：&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map.html&#34;&gt;&lt;code&gt;unordered_map&lt;/code&gt;&lt;/a&gt; は非順序連想コンテナであるため、出力順序は無意味であることに注意&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++0x mode&lt;/a&gt;: 3.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/emplace.html&#34;&gt;&lt;code&gt;emplace&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンテナ内への要素の直接構築&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/emplace_hint.html&#34;&gt;&lt;code&gt;emplace_hint&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;挿入位置のヒントを使用したコンテナ内への要素の直接構築&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/insert.html&#34;&gt;&lt;code&gt;insert&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素の追加&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/clear.html&#34;&gt;&lt;code&gt;clear&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;全要素の削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/swap.html&#34;&gt;&lt;code&gt;swap&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;内容の交換&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>find (C++11) -- リンク切れを修正</title>
      <link href="http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/find.html"/>
      <id>a5829edbc89406c020526b9f2c998caaa5c21c90:reference/unordered_map/unordered_multimap/find.md</id>
      <updated>2015-01-15 12:38:02 +0900</updated>
      
        <content type="html">&lt;h1&gt;find (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;iterator &lt;span style=&#34;color: #0000FF&#34;&gt;find&lt;/span&gt; ( &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; key_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; k );
const_iterator find ( &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; key_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; k ) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;コンテナ内でキーが &lt;code&gt;x&lt;/code&gt; である要素を検索し、見つかった場合はそれへのイテレータを返し、見つからなかった場合は &lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/end.html&#34;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt; （コンテナの最後の要素の次）を指すイテレータを返す。&lt;br /&gt;
キーが &lt;code&gt;x&lt;/code&gt;である要素の範囲を取得するには &lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/equal_range.html&#34;&gt;&lt;code&gt;equal_range&lt;/code&gt;&lt;/a&gt;を用いる。&lt;br /&gt;
また、キーが &lt;code&gt;x&lt;/code&gt; である要素が存在するかを調べる場合は &lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/count.html&#34;&gt;&lt;code&gt;count&lt;/code&gt;&lt;/a&gt; を用いる。&lt;/p&gt;
&lt;h2&gt;パラメータ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt; : 検索するキー。&lt;code&gt;key_type&lt;/code&gt; は &lt;code&gt;map&lt;/code&gt; コンテナの中で &lt;code&gt;Key&lt;/code&gt; の別名として定義される。ここで &lt;code&gt;Key&lt;/code&gt; は 1 番目のテンプレートパラメータである。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;指定した値が見つかった場合はその要素へのイテレータ、そうでない場合は &lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/end.html&#34;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt; へのイテレータ。&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;投げない。&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;平均： 定数時間&lt;br /&gt;
最悪： &lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt; について線形時間。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;unordered_map&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  unordered_multimap&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;,&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c;

  c.insert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;a&#39;&lt;/span&gt;));

  cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (c.find(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; c.end()) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (c.find(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; c.end()) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1
0
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??, 11.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/count.html&#34;&gt;&lt;code&gt;count&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指定したキーにマッチする要素の数を返す&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/equal_range.html&#34;&gt;&lt;code&gt;equal_range&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指定したキーにマッチする要素の範囲を返す&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>key_eq (C++11) -- リンク切れを修正</title>
      <link href="http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/key_eq.html"/>
      <id>a5829edbc89406c020526b9f2c998caaa5c21c90:reference/unordered_map/unordered_multimap/key_eq.md</id>
      <updated>2015-01-15 12:38:02 +0900</updated>
      
        <content type="html">&lt;h1&gt;key_eq (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;key_equal key_eq() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;コンテナのキー比較用関数オブジェクトを返す&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;コンテナのキー比較用関数オブジェクト。&lt;/p&gt;
&lt;p&gt;このメンバ関数で返されるキー比較用関数オブジェクトは、コンストラクタ、あるいは、直近の代入（コピー、あるいはムーブ）、交換でコンテナに保存されたオブジェクトのコピーである。&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;定数&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;p&gt;戻り値の型である、キー比較用関数オブジェクトの型 &lt;code&gt;key_equal&lt;/code&gt; は、&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap.html&#34;&gt;&lt;code&gt;unordered_multimap&lt;/code&gt;&lt;/a&gt; のメンバ型で、四番目のテンプレートパラメータ &lt;code&gt;Pred&lt;/code&gt; を &lt;code&gt;typedef&lt;/code&gt; したものである。&lt;/p&gt;
&lt;p&gt;キー比較用関数オブジェクトは、名前の通りキーを比較するためのオブジェクトで、与えられた二つのキーが等しいときには &lt;code&gt;true&lt;/code&gt;、等しくないときには &lt;code&gt;false&lt;/code&gt; を返すメンバ関数 &lt;code&gt;bool operator()(key_type, key_type)&lt;/code&gt;を持つ必要がある。&lt;/p&gt;
&lt;p&gt;テンプレートパラメータを省略した場合、&lt;code&gt;key_equal&lt;/code&gt; はデフォルト値 &lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/equal_to.html&#34;&gt;&lt;code&gt;equal_to&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;key_type&amp;gt;&lt;/code&gt; となる。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map.html&#34;&gt;unordered_map&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;boolalpha;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;unordered_multimap&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; um &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {
    {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;1st&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;},
    {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;2nd&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;},
    {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;3rd&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;}
  };

  decltype(um)&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;key_equal eq{ um.key_eq() };

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;eq(&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\&#34;&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;1st&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\&#34;&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;, &lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\&#34;&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;2nd&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\&#34;&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;) = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; eq(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;1st&#34;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;2nd&#34;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;eq(&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\&#34;&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;1st&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\&#34;&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;, &lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\&#34;&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;2nd&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\&#34;&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;) = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; eq(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;1st&#34;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;1st&#34;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;eq(&#34;1st&#34;, &#34;2nd&#34;) = false
eq(&#34;1st&#34;, &#34;2nd&#34;) = true
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++0x mode&lt;/a&gt;: 3.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/equal_to.html&#34;&gt;&lt;code&gt;equal_to&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;等値比較演算関数オブジェクト(class template)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/hash_function.html&#34;&gt;&lt;code&gt;hash_function&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ハッシュ関数オブジェクトの取得&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== (C++11) -- リンク切れを修正</title>
      <link href="http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/op_equal.html"/>
      <id>a5829edbc89406c020526b9f2c998caaa5c21c90:reference/unordered_map/unordered_multimap/op_equal.md</id>
      <updated>2015-01-15 12:38:02 +0900</updated>
      
        <content type="html">&lt;h1&gt;operator== (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Key&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Hash&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Pred&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Alloc&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; (&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; unordered_multimap&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Key,T,Hash,Pred,Alloc&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; x,
                 &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; unordered_multimap&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Key,T,Hash,Pred,Alloc&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; y );
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;x&lt;/code&gt; が &lt;code&gt;y&lt;/code&gt; と等しいかどうかの判定を行う。&lt;/p&gt;
&lt;h2&gt;パラメータ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;&lt;br /&gt;
比較するコンテナ&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;二つのコンテナが等しい場合に &lt;code&gt;true&lt;/code&gt;, そうでない場合に &lt;code&gt;false&lt;/code&gt;。&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;投げない。&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;平均: &lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt; に対して線形時間&lt;br /&gt;
最悪: &lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt; に対して二乗時間&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;unordered_map&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  unordered_multimap&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;,&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c1;
  c1.insert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;a&#39;&lt;/span&gt;));
  c1.insert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;20&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;b&#39;&lt;/span&gt;));
  c1.insert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;30&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;c&#39;&lt;/span&gt;));
  c1.insert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;30&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;d&#39;&lt;/span&gt;));


  unordered_multimap&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;,&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c2;
  c2.insert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;30&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;c&#39;&lt;/span&gt;));
  c2.insert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;a&#39;&lt;/span&gt;));
  c2.insert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;30&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;d&#39;&lt;/span&gt;));
  c2.insert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;20&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;b&#39;&lt;/span&gt;));

  cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (c1 &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; c2) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;

  c2.insert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;30&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;e&#39;&lt;/span&gt;));

  cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (c1 &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; c2) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1
0
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??, 11.0&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator!= (C++11) -- リンク切れを修正</title>
      <link href="http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/op_not_equal.html"/>
      <id>a5829edbc89406c020526b9f2c998caaa5c21c90:reference/unordered_map/unordered_multimap/op_not_equal.md</id>
      <updated>2015-01-15 12:38:02 +0900</updated>
      
        <content type="html">&lt;h1&gt;operator!= (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Key&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Hash&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Pred&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Alloc&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; (&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; unordered_multimap&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Key,T,Hash,Pred,Alloc&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; x,
                 &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; unordered_multimap&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Key,T,Hash,Pred,Alloc&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; y );
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;x&lt;/code&gt; が &lt;code&gt;y&lt;/code&gt; と等しくないかどうかの判定を行う。&lt;/p&gt;
&lt;h2&gt;パラメータ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;&lt;br /&gt;
比較するコンテナ&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;二つのコンテナが等しくない場合に &lt;code&gt;true&lt;/code&gt;, そうでない場合に &lt;code&gt;false&lt;/code&gt;。&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;投げない。&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;平均: &lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt; に対して線形時間&lt;br /&gt;
最悪: &lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt; に対して二乗時間&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;unordered_map&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  unordered_multimap&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;,&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c1;
  c1.insert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;a&#39;&lt;/span&gt;));
  c1.insert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;20&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;b&#39;&lt;/span&gt;));
  c1.insert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;30&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;c&#39;&lt;/span&gt;));
  c1.insert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;30&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;d&#39;&lt;/span&gt;));


  unordered_multimap&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;,&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c2;
  c2.insert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;30&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;c&#39;&lt;/span&gt;));
  c2.insert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;a&#39;&lt;/span&gt;));
  c2.insert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;30&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;d&#39;&lt;/span&gt;));
  c2.insert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;20&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;b&#39;&lt;/span&gt;));

  cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (c1 &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; c2) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;

  c2.insert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;30&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;e&#39;&lt;/span&gt;));

  cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (c1 &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; c2) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;0
1
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??, 11.0&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap (非メンバ関数) (C++11) -- リンク切れを修正</title>
      <link href="http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/swap_free.html"/>
      <id>a5829edbc89406c020526b9f2c998caaa5c21c90:reference/unordered_map/unordered_multimap/swap_free.md</id>
      <updated>2015-01-15 12:38:02 +0900</updated>
      
        <content type="html">&lt;h1&gt;swap (非メンバ関数) (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Key&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Hash&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Pred&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Alloc&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; swap (unordered_multimap&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Key,T,Hash,Pred,Alloc&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; x,
             unordered_multimap&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Key,T,Hash,Pred,Alloc&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; y);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;2つの &lt;code&gt;unordered_multimap&lt;/code&gt; オブジェクトである &lt;code&gt;x&lt;/code&gt; と &#39;y&#39;が保持するコンテンツを交換する。サイズは異なる場合もある。 
このメンバ関数の呼び出しの後、呼び出し前に &#39;x&#39; にあった要素は &lt;code&gt;y&lt;/code&gt; へ、&lt;code&gt;y&lt;/code&gt; 内にあった要素は &lt;code&gt;x&lt;/code&gt; へ移る。全てのイテレータ、参照、ポインタは有効なまま残る。 &lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/swap.html&#34;&gt;&lt;code&gt;swap&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(y);&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;なし&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;投げない。&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;定数時間&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;unordered_map&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Map&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; print(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; name, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Map&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; m)
{
  cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; name &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; : {&#34;&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; m) {
    cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;[&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x.first &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;,&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x.second &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;], &#34;&lt;/span&gt;;
  }
  cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;}&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main()
{
  unordered_multimap&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c1;
  c1.insert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;a&#39;&lt;/span&gt;));
  c1.insert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;20&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;b&#39;&lt;/span&gt;));
  c1.insert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;30&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;c&#39;&lt;/span&gt;));
  c1.insert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;30&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;d&#39;&lt;/span&gt;));
  c1.insert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;30&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;e&#39;&lt;/span&gt;));

  unordered_multimap&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c2;
  c2.insert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;d&#39;&lt;/span&gt;));
  c2.insert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;15&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;e&#39;&lt;/span&gt;));

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// c1とc2を入れ替える&lt;/span&gt;
  swap(c1, c2);

  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;c1&#34;&lt;/span&gt;, c1);
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;c2&#34;&lt;/span&gt;, c2);

}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;c1 : {[5,d], [15,e], }
c2 : {[10,a], [20,b], [30,c], [30,d], [30,e], }
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??, 11.0&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- リンク切れを修正</title>
      <link href="http://cpprefjp.github.io/reference/vector/op_equal.html"/>
      <id>a5829edbc89406c020526b9f2c998caaa5c21c90:reference/vector/op_equal.md</id>
      <updated>2015-01-15 12:38:02 +0900</updated>
      
        <content type="html">&lt;h1&gt;operator==&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Allocator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; x, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; y);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;vector&lt;/code&gt;オブジェクトの等値比較を行う。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;型&lt;code&gt;T&lt;/code&gt;が&lt;code&gt;==&lt;/code&gt;で比較可能であること。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == y.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() &amp;amp;&amp;amp;&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/equal.html&#34;&gt;&lt;code&gt;equal&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/begin.html&#34;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(), x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/end.html&#34;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(), y.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/begin.html&#34;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;());&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;x&lt;/code&gt;と&lt;code&gt;y&lt;/code&gt;の要素数および要素の値が等しければ&lt;code&gt;true&lt;/code&gt;、そうでなければ&lt;code&gt;false&lt;/code&gt;を返す。&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;線形時間&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt; ()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;};
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;};
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v3 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;};

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;boolalpha;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 要素数と要素の値が等しい&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (v1 &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; v2) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 要素の値は(左辺の要素数分まで)等しいが要素数が異なる&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (v1 &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; v3) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;true
false
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
</feed>
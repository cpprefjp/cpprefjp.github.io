<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2020-06-24T15:23:32.540902</updated>
  <id>dbf0f070-b04a-4fe1-a645-d055b578b9aa</id>

  
    <entry>
      <title>コルーチン -- cpp20/coroutine: coroutine_traits, noop_coroutine</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/coroutines.html"/>
      <id>64ce321234d16c7c498cd771e3feae0dc9b70c30:lang/cpp20/coroutines.md</id>
      <updated>2020-06-25T00:18:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/coroutines.md b/lang/cpp20/coroutines.md
index 9b2e49288..d9aa64309 100644
--- a/lang/cpp20/coroutines.md
+++ b/lang/cpp20/coroutines.md
@@ -73,7 +73,7 @@ task&amp;lt;void&amp;gt; g3(int a, ...) { // エラー: 可変引数リストは許可され
 コルーチンのPromise型は、コルーチンの戻り値型`R`と引数リスト`P1`, `P2`, ..., `Pn`から決定されるクラス型である。
 
 - デフォルト動作では`R::protmise_type`がPromise型となる。
-- ユーザプログラム中で[`std::coroutine_traits`](/reference/coroutine/coroutine_traits.md.nolink)トレイトを特殊化した場合は、`coroutine_traits&amp;lt;R, P1, P2, ..., Pn&amp;gt;::protmise_type`がPromise型となる。
+- ユーザプログラム中で[`std::coroutine_traits`](/reference/coroutine/coroutine_traits.md)トレイトを特殊化した場合は、`coroutine_traits&amp;lt;R, P1, P2, ..., Pn&amp;gt;::protmise_type`がPromise型となる。
 - コルーチンがクラスの非静的メンバの場合、`P1`は暗黙のオブジェクトパラメータ(`*this`の型)となる。
 
 コルーチンは、その本体 _function-body_ が下記の通り置き換えられたかのように動作する：
@@ -220,9 +220,9 @@ Await式の評価では、次のような補助的な型、式、オブジェク
     - 適合する関数が見つからない場合、_o_ を _a_ とする。
     - オーバーロード解決が曖昧な場合、プログラムは不適格となる。
 - _e_ を、_o_ の評価結果を参照する左辺値とする。
-- _h_ を、同Await式を含むコルーチンを参照する[`std:::coroutine_handle&amp;lt;P&amp;gt;`](/reference/coroutine/coroutine_handle.md.nolink)型のオブジェクトとする。
+- _h_ を、同Await式を含むコルーチンを参照する[`std::coroutine_handle&amp;lt;P&amp;gt;`](/reference/coroutine/coroutine_handle.md.nolink)型のオブジェクトとする。
 - _await-ready_ を、`bool`に変換されうる式 _e_`.await_ready()`とする。
-- _await-suspend_ を、式 _e_`.await_suspend(` _h_ `)`とする。この式（の結果）は`void`であるか、`bool`または任意の型`Z`に対する[`std:::coroutine_handle&amp;lt;Z&amp;gt;`](/reference/coroutine/coroutine_handle.md.nolink)型のprvalueであるべき。
+- _await-suspend_ を、式 _e_`.await_suspend(` _h_ `)`とする。この式（の結果）は`void`であるか、`bool`または任意の型`Z`に対する[`std::coroutine_handle&amp;lt;Z&amp;gt;`](/reference/coroutine/coroutine_handle.md.nolink)型のprvalueであるべき。
 - _await-resume_ を、式 _e_`.await_resume()`とする。
 
 Await式は式 _await-resume_ と同じ型、同じ値カテゴリを持つ。
@@ -230,7 +230,7 @@ Await式は式 _await-resume_ と同じ型、同じ値カテゴリを持つ。
 Await式は式 _o_ と式 _await-resume_ を評価し、続いて：
 
 - _await-ready_ の結果が`false`の場合、コルーチンは中断状態とみなされる。その後に：
-    - _await-suspend_ の型が[`std:::coroutine_handle&amp;lt;Z&amp;gt;`](/reference/coroutine/coroutine_handle.md.nolink)の場合、_await-suspend_[`.resume()`](/reference/coroutine/coroutine_handle/resume.md.nolink)が評価される。
+    - _await-suspend_ の型が[`std::coroutine_handle&amp;lt;Z&amp;gt;`](/reference/coroutine/coroutine_handle.md.nolink)の場合、_await-suspend_[`.resume()`](/reference/coroutine/coroutine_handle/resume.md.nolink)が評価される。
     - そうではなく _await-suspend_ の型が`bool`の場合、_await-suspend_ が評価され、その結果が`false`であればコルーチンは再開する。
     - それ以外の場合、_await-suspend_ が評価される。
 - _await-suspend_ の評価が例外で終了した場合、例外が捕捉されてコルーチンが再開し、その例外は即座に再スローされる。そうでなければ、スコープ終了をともなわずに現在のコルーチンの呼出元もしくは再開元へ制御フローを戻す。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>coroutine -- cpp20/coroutine: coroutine_traits, noop_coroutine</title>
      <link href="https://cpprefjp.github.io/reference/coroutine.html"/>
      <id>64ce321234d16c7c498cd771e3feae0dc9b70c30:reference/coroutine.md</id>
      <updated>2020-06-25T00:18:35+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;coroutine&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;coroutine&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;coroutine&amp;gt;&lt;/code&gt;ヘッダでは、&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/coroutines.html&#34;&gt;コルーチン&lt;/a&gt;の制御に関する機能を提供する。&lt;/p&gt;
&lt;h2&gt;コルーチントレイト&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/coroutine/coroutine_traits.html&#34;&gt;coroutine_traits&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Promise型導出トレイト(class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;コルーチンハンドル&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/coroutine/coroutine_handle.md.nolink&#34;&gt;coroutine_handle&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コルーチンハンドル(class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;何もしないコルーチン&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/coroutine/noop_coroutine_handle.html&#34;&gt;noop_coroutine_promise&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;何もしないコルーチンPromise型(class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/coroutine/noop_coroutine_handle.html&#34;&gt;noop_coroutine_handle&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;何もしないコルーチンのハンドル(class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/coroutine/noop_coroutine.html&#34;&gt;noop_coroutine&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;何もしないコルーチンのハンドルを取得(function)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;トリビアルAwaitable型&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/coroutine/suspend_never.html&#34;&gt;suspend_never&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;常に中断しないAwaitable型(class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/coroutine/suspend_always.html&#34;&gt;suspend_always&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;常に中断するAwaitable型(class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++20&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: 11.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/coroutines.html&#34;&gt;C++20 コルーチン&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>coroutine_traits -- cpp20/coroutine: coroutine_traits, noop_coroutine</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/coroutine_traits.html"/>
      <id>64ce321234d16c7c498cd771e3feae0dc9b70c30:reference/coroutine/coroutine_traits.md</id>
      <updated>2020-06-25T00:18:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/coroutine_traits.md b/reference/coroutine/coroutine_traits.md
new file mode 100644
index 000000000..0915ffa37
--- /dev/null
+++ b/reference/coroutine/coroutine_traits.md
@@ -0,0 +1,128 @@
+# coroutine_traits
+* coroutine[meta header]
+* std[meta namespace]
+* class template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;class R, class... ArgTypes&amp;gt;
+  struct coroutine_traits;
+}
+```
+
+## 概要
+コルーチンのPromise型を指定するためのトレイト。
+
+- `ArgTypes`が型のパラメータパックかつ非修飾の`R::promise_type`が有効な型を表すとき、`coroutine_traits&amp;lt;R,ArgTypes...&amp;gt;`は下記の公開アクセスメンバを持つ。
+```cpp
+using promise_type = typename R::promise_type;
+```
+
+- それ以外では、`coroutine_traits&amp;lt;R,ArgTypes...&amp;gt;`はメンバを持たない。
+
+このクラステンプレートをプログラム定義型で特殊化する場合、`promise_type`は公開アクセスのネスト型とする必要がある。
+
+
+## メンバ型
+
+| 名前            | 説明           | 対応バージョン |
+|-----------------|----------------|----------------|
+| `promise_type` | コルーチンのPromise型 | C++20 |
+
+## 例
+```cpp example
+#include &amp;lt;coroutine&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;utility&amp;gt;
+
+struct task;
+
+struct task_promise {
+  task get_return_object();
+  auto initial_suspend() { return std::suspend_never{}; }
+  auto final_suspend() { return std::suspend_always{}; }
+  auto yield_value(int) { return std::suspend_always{}; }
+  void return_void() {}
+  void unhandled_exception() { std::terminate(); }
+};
+
+struct task {
+  using coro_handle = std::coroutine_handle&amp;lt;task_promise&amp;gt;;
+  explicit task(task_promise&amp;amp; p)
+    : coro_(coro_handle::from_promise(p)) {}
+  task(task const&amp;amp;) = delete;
+  task(task&amp;amp;&amp;amp; rhs)
+    : coro_(std::exchange(rhs.coro_, nullptr)) {}
+  ~task()
+  {
+    if (coro_)
+      coro_.destroy();
+  }
+
+  void next()
+  {
+    if (!coro_.done())
+      coro_.resume();
+  }
+
+private:
+  coro_handle coro_;
+};
+
+task task_promise::get_return_object()
+{
+  return task{*this};
+}
+
+// 戻り値taskの関数をコルーチンにアダプトする
+template &amp;lt;typename... ArgTypes&amp;gt;
+struct std::coroutine_traits&amp;lt;task, ArgTypes...&amp;gt; {
+  using promise_type = task_promise;
+};
+
+task coro()
+{
+  std::cout &amp;lt;&amp;lt; &amp;#34;coro#1&amp;#34; &amp;lt;&amp;lt; std::endl;
+  co_yield {};
+  std::cout &amp;lt;&amp;lt; &amp;#34;coro#2&amp;#34; &amp;lt;&amp;lt; std::endl;
+}
+
+int main()
+{
+  auto t = coro();
+  std::cout &amp;lt;&amp;lt; &amp;#34;main#1&amp;#34; &amp;lt;&amp;lt; std::endl;
+  t.next();
+  std::cout &amp;lt;&amp;lt; &amp;#34;main#2&amp;#34; &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::coroutine_traits[color ff0000]
+* std::suspend_never[link suspend_never.md]
+* std::suspend_always[link suspend_always.md]
+* std::coroutine_handle[link coroutine_handle.md.nolink]
+* resume()[link coroutine_handle/resume.md.nolink]
+* done()[link coroutine_handle/done.md.nolink]
+* from_promise[link coroutine_handle/from_promise.md.nolink]
+* std::exchange[link /reference/utility/exchange.md]
+
+### 出力
+```
+coro#1
+main#1
+coro#2
+main#2
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 11.0
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [C++20 コルーチン](/lang/cpp20/coroutines.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>noop_coroutine -- cpp20/coroutine: coroutine_traits, noop_coroutine</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/noop_coroutine.html"/>
      <id>64ce321234d16c7c498cd771e3feae0dc9b70c30:reference/coroutine/noop_coroutine.md</id>
      <updated>2020-06-25T00:18:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/noop_coroutine.md b/reference/coroutine/noop_coroutine.md
new file mode 100644
index 000000000..56f4b6ba8
--- /dev/null
+++ b/reference/coroutine/noop_coroutine.md
@@ -0,0 +1,46 @@
+# noop_coroutine
+* coroutine[meta header]
+* std[meta namespace]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+noop_coroutine_handle noop_coroutine() noexcept;
+```
+* noop_coroutine_handle[link noop_coroutine_handle.md]
+
+## 概要
+中断／再開時に何もしないコルーチンへのハンドルを取得する。
+
+「何もしないコルーチン」は、非対称コルーチン動作と対称コルーチン動作を実行時に制御するケースで利用される。
+
+
+## 戻り値
+中断／再開時に何もしないコルーチンへのハンドル
+
+
+## 例外
+投げない
+
+
+## 備考
+`noop_coroutine()`が返したハンドルと、別の`noop_coroutine()`呼び出しで返されたハンドルとの等値性は規定されない。
+（両者は等しいかもしれないし、等しくないかもしれない。）
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 11.0
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [C++20 コルーチン](/lang/cpp20/coroutines.md)
+
+
+## 参照
+- [P0913R1 Add symmetric coroutine control transfer](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0913r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>noop_coroutine_handle -- cpp20/coroutine: coroutine_traits, noop_coroutine</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/noop_coroutine_handle.html"/>
      <id>64ce321234d16c7c498cd771e3feae0dc9b70c30:reference/coroutine/noop_coroutine_handle.md</id>
      <updated>2020-06-25T00:18:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/noop_coroutine_handle.md b/reference/coroutine/noop_coroutine_handle.md
new file mode 100644
index 000000000..884382d9e
--- /dev/null
+++ b/reference/coroutine/noop_coroutine_handle.md
@@ -0,0 +1,88 @@
+# noop_coroutine_handle
+* coroutine[meta header]
+* std[meta namespace]
+* class[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  struct noop_coroutine_promise {};
+
+  template&amp;lt;&amp;gt;
+  struct coroutine_handle&amp;lt;noop_coroutine_promise&amp;gt; : coroutine_handle&amp;lt;&amp;gt;
+  {
+    constexpr explicit operator bool() const noexcept;
+    constexpr bool done() const noexcept;
+
+    constexpr void operator()() const noexcept;
+    constexpr void resume() const noexcept;
+    constexpr void destroy() const noexcept;
+
+    noop_coroutine_promise&amp;amp; promise() const noexcept;
+
+    constexpr void* address() const noexcept;
+
+  private:
+    coroutine_handle(unspecified);
+  };
+
+  using noop_coroutine_handle = coroutine_handle&amp;lt;noop_coroutine_promise&amp;gt;;
+}
+```
+* coroutine_handle&amp;lt;&amp;gt;[link coroutine_handle.md.nolink]
+* coroutine_handle&amp;lt;noop_coroutine_promise&amp;gt;[link coroutine_handle.md.nolink]
+* unspecified[italic]
+
+
+## 概要
+中断／再開時に何もしないコルーチンへのハンドル。
+
+「何もしないコルーチン」は、非対称コルーチン動作と対称コルーチン動作を実行時に制御するケースで利用される。
+
+
+## メンバ関数
+### 観測
+
+| 名前            | 説明          | 対応バージョン |
+|-----------------|---------------|----------------|
+| `operator bool` | `true`を返す  | C++20 |
+| `done`          | `false`を返す | C++20 |
+
+### 再開
+
+| 名前         | 説明       | 対応バージョン |
+|--------------|------------|----------------|
+| `operator()` | 何もしない | C++20 |
+| `resume`     | 何もしない | C++20 |
+| `destroy`    | 何もしない | C++20 |
+
+### Promiseアクセス
+
+| 名前      | 説明           | 対応バージョン |
+|-----------|----------------|----------------|
+| `promise` | Promiseオブジェクトへの参照を返す | C++20 |
+
+### アドレス
+
+| 名前      | 説明           | 対応バージョン |
+|-----------|----------------|----------------|
+| `address` | コルーチンハンドルに対応するポインタ値を返す | C++20 |
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 11.0
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [C++20 コルーチン](/lang/cpp20/coroutines.md)
+- [`noop_coroutine`](noop_coroutine.md)
+
+
+## 参照
+- [P0913R1 Add symmetric coroutine control transfer](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0913r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>suspend_always -- cpp20/coroutine: coroutine_traits, noop_coroutine</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/suspend_always.html"/>
      <id>64ce321234d16c7c498cd771e3feae0dc9b70c30:reference/coroutine/suspend_always.md</id>
      <updated>2020-06-25T00:18:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/suspend_always.md b/reference/coroutine/suspend_always.md
index 2888acb20..344affaac 100644
--- a/reference/coroutine/suspend_always.md
+++ b/reference/coroutine/suspend_always.md
@@ -99,7 +99,6 @@ int main()
 * promise()[link coroutine_handle/promise.md.nolink]
 * std::exchange[link /reference/utility/exchange.md]
 
-
 ### 出力
 ```
 main
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap -- ranges::swap : メタ情報修正</title>
      <link href="https://cpprefjp.github.io/reference/concepts/swap.html"/>
      <id>092763581c3e66fd1cb210a2c68e44af86720f18:reference/concepts/swap.md</id>
      <updated>2020-06-24T21:14:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/concepts/swap.md b/reference/concepts/swap.md
index fc9d7c952..19089e36b 100644
--- a/reference/concepts/swap.md
+++ b/reference/concepts/swap.md
@@ -1,7 +1,7 @@
 # swap
 
 * concepts[meta header]
-* function[meta id-type]
+* cpo[meta id-type]
 * std::ranges[meta namespace]
 * cpp20[meta cpp]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>partial_order -- (partial|strong|weak)_order : 識別子種別をカスタマイゼーションポイントオブジェクトに変更</title>
      <link href="https://cpprefjp.github.io/reference/compare/partial_order.html"/>
      <id>209481e5077f97f18615bc0263d1d70631b55345:reference/compare/partial_order.md</id>
      <updated>2020-06-24T18:03:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/compare/partial_order.md b/reference/compare/partial_order.md
index 13bceb76d..d591f65e0 100644
--- a/reference/compare/partial_order.md
+++ b/reference/compare/partial_order.md
@@ -1,7 +1,7 @@
 # partial_order
 
 * compare[meta header]
-* function[meta id-type]
+* cpo[meta id-type]
 * std[meta namespace]
 * cpp20[meta cpp]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>strong_order -- (partial|strong|weak)_order : 識別子種別をカスタマイゼーションポイントオブジェクトに変更</title>
      <link href="https://cpprefjp.github.io/reference/compare/strong_order.html"/>
      <id>209481e5077f97f18615bc0263d1d70631b55345:reference/compare/strong_order.md</id>
      <updated>2020-06-24T18:03:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/compare/strong_order.md b/reference/compare/strong_order.md
index a73be309a..8124707eb 100644
--- a/reference/compare/strong_order.md
+++ b/reference/compare/strong_order.md
@@ -1,7 +1,7 @@
 # strong_order
 
 * compare[meta header]
-* function[meta id-type]
+* cpo[meta id-type]
 * std[meta namespace]
 * cpp20[meta cpp]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>weak_order -- (partial|strong|weak)_order : 識別子種別をカスタマイゼーションポイントオブジェクトに変更</title>
      <link href="https://cpprefjp.github.io/reference/compare/weak_order.html"/>
      <id>209481e5077f97f18615bc0263d1d70631b55345:reference/compare/weak_order.md</id>
      <updated>2020-06-24T18:03:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/compare/weak_order.md b/reference/compare/weak_order.md
index 9f7f0edf0..4a7987932 100644
--- a/reference/compare/weak_order.md
+++ b/reference/compare/weak_order.md
@@ -1,7 +1,7 @@
 # weak_order
 
 * compare[meta header]
-* function[meta id-type]
+* cpo[meta id-type]
 * std[meta namespace]
 * cpp20[meta cpp]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コルーチン -- cpp20/coroutines: サンプルコードの例外ハンドリングを修正</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/coroutines.html"/>
      <id>9c766fd87cf10f5a77e5e423e82960571bcd1bc9:lang/cpp20/coroutines.md</id>
      <updated>2020-06-24T17:10:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/coroutines.md b/lang/cpp20/coroutines.md
index 2a48640de..9b2e49288 100644
--- a/lang/cpp20/coroutines.md
+++ b/lang/cpp20/coroutines.md
@@ -387,7 +387,7 @@ struct generator {
       return std::suspend_always{};
     }
     void return_void() {}
-    void unhandled_exception() { throw; }
+    void unhandled_exception() { std::terminate(); }
   };
   // ジェネレータに関連付けられるコルーチンハンドル型
   using coro_handle = std::coroutine_handle&amp;lt;promise_type&amp;gt;;
@@ -480,6 +480,7 @@ int main()
 ```
 * co_yield[color ff0000]
 * std::exchange[link /reference/utility/exchange.md]
+* std::terminate()[link /reference/exception/terminate.md]
 * std::coroutine_handle[link /reference/coroutine/coroutine_handle.md.nolink]
 * std::suspend_always[link /reference/coroutine/suspend_always.md]
 * resume()[link /reference/coroutine/coroutine_handle/resume.md.nolink]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
</feed>
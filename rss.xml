<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-08-23T05:55:03.685262</updated>
  <id>371f80cc-f0a5-4056-88a1-0ad9c7387baf</id>

  
    <entry>
      <title>operator- -- chrono/time_point/op_minusのコメントを修正</title>
      <link href="https://cpprefjp.github.io/reference/chrono/time_point/op_minus.html"/>
      <id>6366c71c487dcdf10bbf224db35a5b3bbc4d3c3f:reference/chrono/time_point/op_minus.md</id>
      <updated>2023-08-23T14:50:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/time_point/op_minus.md b/reference/chrono/time_point/op_minus.md
index 5ee318618..b38628c53 100644
--- a/reference/chrono/time_point/op_minus.md
+++ b/reference/chrono/time_point/op_minus.md
@@ -7,6 +7,7 @@
 ```cpp
 namespace std {
 namespace chrono {
+  // time_point - duration = time_point
   template &amp;lt;class Clock, class Duration1, class Rep2, class Period2&amp;gt;
   time_point&amp;lt;Clock, typename common_type&amp;lt;Duration1, duration&amp;lt;Rep2, Period2&amp;gt;&amp;gt;::type&amp;gt;
     operator-(const time_point&amp;lt;Clock, Duration1&amp;gt;&amp;amp; lhs,
@@ -18,13 +19,13 @@ namespace chrono {
     operator-(const time_point&amp;lt;Clock, Duration1&amp;gt;&amp;amp; lhs,
               const duration&amp;lt;Rep2, Period2&amp;gt;&amp;amp; rhs);      // (1) C++14
 
-  // time_point - time_point - duration
+  // time_point - time_point = duration
   template &amp;lt;class Clock, class Duration1, class Duration2&amp;gt;
   typename common_type&amp;lt;Duration1, Duration2&amp;gt;::type
     operator-(const time_point&amp;lt;Clock, Duration1&amp;gt;&amp;amp; lhs,
               const time_point&amp;lt;Clock, Duration2&amp;gt;&amp;amp; rhs); // (2) C++11
 
-  // time_point - time_point - duration
+  // time_point - time_point = duration
   template &amp;lt;class Clock, class Duration1, class Duration2&amp;gt;
   constexpr typename common_type&amp;lt;Duration1, Duration2&amp;gt;::type
     operator-(const time_point&amp;lt;Clock, Duration1&amp;gt;&amp;amp; lhs,
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>OGAWA KenIchi</name>
        <email>kenichi@ice.email.ne.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- コメントの誤りを修正</title>
      <link href="https://cpprefjp.github.io/reference/chrono/duration/op_constructor.html"/>
      <id>86bab47aa01fce293636c43725a8d0d017f47c06:reference/chrono/duration/op_constructor.md</id>
      <updated>2023-08-23T10:02:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/duration/op_constructor.md b/reference/chrono/duration/op_constructor.md
index acb831b61..95afebbee 100644
--- a/reference/chrono/duration/op_constructor.md
+++ b/reference/chrono/duration/op_constructor.md
@@ -45,7 +45,7 @@ using std::chrono::duration;
 int main()
 {
   duration&amp;lt;int, std::milli&amp;gt; d1;        // デフォルト構築 d1.count()は未初期化の値
-  duration&amp;lt;int, std::milli&amp;gt; d2 {};     // デフォルト構築 d1.count()の値は0
+  duration&amp;lt;int, std::milli&amp;gt; d2 {};     // デフォルト構築 d2.count()の値は0
 
   duration&amp;lt;int, std::milli&amp;gt; d3(3);     // 値を指定して構築(ミリ秒)
   duration&amp;lt;int, std::micro&amp;gt; d4 = d3;   // ミリ秒からマイクロ秒に変換
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>OGAWA KenIchi</name>
        <email>kenichi@ice.email.ne.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>is_pod -- type_traits/is_pod: fix typo</title>
      <link href="https://cpprefjp.github.io/reference/type_traits/is_pod.html"/>
      <id>03ff5892fe0aa4fb8b8bdcdbba77fec13360c9de:reference/type_traits/is_pod.md</id>
      <updated>2023-08-23T00:05:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/type_traits/is_pod.md b/reference/type_traits/is_pod.md
index 00a11495f..230511dfa 100644
--- a/reference/type_traits/is_pod.md
+++ b/reference/type_traits/is_pod.md
@@ -89,6 +89,6 @@ int main(){}
 - [LWG Issue 2015. Incorrect pre-conditions for some type traits](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2015)
     - C++11では要件が「型`T`は完全型であるか、`const`/`volatile`修飾された(あるいはされていない)`void`か、要素数不明の配列型でなければならない。」だったが、これは間違いであるため、C++14で「型[`remove_all_extents`](remove_all_extents.md)`&amp;lt;T&amp;gt;::type`は、完全型か、`const`/`volatile`修飾された(あるいはされていない)`void`でなければならない。」に変更された。
 - [P0006R0 Adopt Type Traits Variable Templates from Library Fundamentals TS for C++17](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0006r0.html)
-- [CGW issue 2323. Expunge POD](https://wg21.cmeerw.net/cwg/issue2323)
+- [CWG issue 2323. Expunge POD](https://wg21.cmeerw.net/cwg/issue2323)
 - [P0488R0 WG21 Working Paper, NB Comments, ISO/IEC CD 14882 #US 101](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0488r0.pdf#US101)
 - [P0767R1: Deprecate POD](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0767r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>common_type -- リンク修正</title>
      <link href="https://cpprefjp.github.io/reference/iterator/basic_const_iterator/common_type.html"/>
      <id>21a2be5d6f6cb36c66283404efb5cd27bd370573:reference/iterator/basic_const_iterator/common_type.md</id>
      <updated>2023-08-22T15:25:15+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/basic_const_iterator/common_type.md b/reference/iterator/basic_const_iterator/common_type.md
index 5d81e461a..cc4aa27de 100644
--- a/reference/iterator/basic_const_iterator/common_type.md
+++ b/reference/iterator/basic_const_iterator/common_type.md
@@ -29,7 +29,7 @@ namespace std {
 }
 ```
 * common_with[link /reference/concepts/common_with.md]
-* input_iterator[link ./input_iterator.md]
+* input_iterator[link /reference/iterator/input_iterator.md]
 * common_type[link /reference/type_traits/common_type.md]
 * common_type_t[link /reference/type_traits/common_type.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_const_iterator -- basic_const_iteratorのcommon_type特殊化を追加 #1084</title>
      <link href="https://cpprefjp.github.io/reference/iterator/basic_const_iterator.html"/>
      <id>d66df9c2b327ff15e7692c432cdd3f61fb02bed8:reference/iterator/basic_const_iterator.md</id>
      <updated>2023-08-22T15:22:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/basic_const_iterator.md b/reference/iterator/basic_const_iterator.md
index 8dba4ef6b..e3784acf1 100644
--- a/reference/iterator/basic_const_iterator.md
+++ b/reference/iterator/basic_const_iterator.md
@@ -81,6 +81,13 @@ namespace std {
 | [`make_const_iterator`](make_const_iterator.md)     | `basic_const_iterator`のヘルパ関数 | C++23 |
 | [`make_const_sentinel`](make_const_sentinel.md)     | `basic_const_iterator`のヘルパ関数 | C++23 |
 
+## 特殊化
+
+| 名前 | 説明 | 対応バージョン |
+|------------------------------------------------------|-------------|-------|
+| [`common_type`](basic_const_iterator/common_type.md)     | `basic_const_iterator`とイテレータ型の間の共通の型を求める | C++23 |
+
+
 ## 例
 
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>common_type -- basic_const_iteratorのcommon_type特殊化を追加 #1084</title>
      <link href="https://cpprefjp.github.io/reference/iterator/basic_const_iterator/common_type.html"/>
      <id>d66df9c2b327ff15e7692c432cdd3f61fb02bed8:reference/iterator/basic_const_iterator/common_type.md</id>
      <updated>2023-08-22T15:22:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/basic_const_iterator/common_type.md b/reference/iterator/basic_const_iterator/common_type.md
new file mode 100644
index 000000000..5d81e461a
--- /dev/null
+++ b/reference/iterator/basic_const_iterator/common_type.md
@@ -0,0 +1,85 @@
+# common_type
+* iterator[meta header]
+* std[meta namespace]
+* class template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+namespace std {
+  // (1)
+  template&amp;lt;class T, common_with&amp;lt;T&amp;gt; U&amp;gt;
+    requires input_iterator&amp;lt;common_type_t&amp;lt;T, U&amp;gt;&amp;gt;
+  struct common_type&amp;lt;basic_const_iterator&amp;lt;T&amp;gt;, U&amp;gt; {
+    using type = basic_const_iterator&amp;lt;common_type_t&amp;lt;T, U&amp;gt;&amp;gt;;
+  };
+
+  // (2)
+  template&amp;lt;class T, common_with&amp;lt;T&amp;gt; U&amp;gt;
+    requires input_iterator&amp;lt;common_type_t&amp;lt;T, U&amp;gt;&amp;gt;
+  struct common_type&amp;lt;U, basic_const_iterator&amp;lt;T&amp;gt;&amp;gt; {
+    using type = basic_const_iterator&amp;lt;common_type_t&amp;lt;T, U&amp;gt;&amp;gt;;
+  };
+
+  // (3)
+  template&amp;lt;class T, common_with&amp;lt;T&amp;gt; U&amp;gt;
+    requires input_iterator&amp;lt;common_type_t&amp;lt;T, U&amp;gt;&amp;gt;
+  struct common_type&amp;lt;basic_const_iterator&amp;lt;T&amp;gt;, basic_const_iterator&amp;lt;U&amp;gt;&amp;gt; {
+    using type = basic_const_iterator&amp;lt;common_type_t&amp;lt;T, U&amp;gt;&amp;gt;;
+  };
+}
+```
+* common_with[link /reference/concepts/common_with.md]
+* input_iterator[link ./input_iterator.md]
+* common_type[link /reference/type_traits/common_type.md]
+* common_type_t[link /reference/type_traits/common_type.md]
+
+## 概要
+
+`basic_const_iterator`のための[`common_type`](/reference/type_traits/common_type.md)特殊化。
+
+- (1)(2) : `basic_const_iterator`とその他のイテレータ型の間の共通の型を取得する
+- (3) : 異なるイテレータ型による`basic_const_iterator`特殊化の間の共通の型を取得する
+
+## 例
+```cpp example
+#include &amp;lt;iterator&amp;gt;
+
+int main() {
+  using ct1 = std::common_type_t&amp;lt;int*, std::const_iterator&amp;lt;int*&amp;gt;&amp;gt;;
+
+  static_assert(std::same_as&amp;lt;ct1, std::basic_const_iterator&amp;lt;int*&amp;gt;&amp;gt;);
+
+  using ct2 = std::common_type_t&amp;lt;std::const_iterator&amp;lt;int*&amp;gt;, int*&amp;gt;;
+
+  static_assert(std::same_as&amp;lt;ct1, ct2&amp;gt;);
+  
+  using ct3 = std::common_type_t&amp;lt;const int*, std::const_iterator&amp;lt;int*&amp;gt;&amp;gt;;
+
+  static_assert(std::same_as&amp;lt;ct3, std::basic_const_iterator&amp;lt;const int*&amp;gt;&amp;gt;);
+
+  using ct4 = std::common_type_t&amp;lt;std::basic_const_iterator&amp;lt;int*&amp;gt;, std::basic_const_iterator&amp;lt;const int*&amp;gt;&amp;gt;;
+
+  static_assert(std::same_as&amp;lt;ct4, std::basic_const_iterator&amp;lt;const int*&amp;gt;&amp;gt;);
+}
+```
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13.1
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 6
+
+## 関連項目
+
+- [`common_type`](/reference/type_traits/common_type.md)
+
+## 参照
+
+- [P2278R4 `cbegin` should always return a constant iterator](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2278r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2020-06-27T14:34:42.134757</updated>
  <id>33ef1192-7f1a-4eeb-9f09-be10ea602baa</id>

  
    <entry>
      <title>coroutine_handle -- coroutine_handle: 概要説明を増補</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/coroutine_handle.html"/>
      <id>9adabee2fdfdbf83dc59337d1f2b838713e421bd:reference/coroutine/coroutine_handle.md</id>
      <updated>2020-06-25T22:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/coroutine_handle.md b/reference/coroutine/coroutine_handle.md
index 6902e71ab..7d044a752 100644
--- a/reference/coroutine/coroutine_handle.md
+++ b/reference/coroutine/coroutine_handle.md
@@ -9,17 +9,32 @@ namespace std {
   template&amp;lt;class Promise = void&amp;gt;
   struct coroutine_handle;
 
-  constexpr bool operator==(coroutine_handle&amp;lt;&amp;gt; x, coroutine_handle&amp;lt;&amp;gt; y) noexcept;
-  constexpr strong_ordering operator&amp;lt;=&amp;gt;(coroutine_handle&amp;lt;&amp;gt; x, coroutine_handle&amp;lt;&amp;gt; y) noexcept;
+  template&amp;lt;&amp;gt;
+  struct coroutine_handle&amp;lt;void&amp;gt; {
+    // (メンバ宣言は省略)
+  };
 
-  template&amp;lt;class T&amp;gt; struct hash;
-  template&amp;lt;class P&amp;gt; struct hash&amp;lt;coroutine_handle&amp;lt;P&amp;gt;&amp;gt;;
+  template&amp;lt;class Promise&amp;gt;
+  struct coroutine_handle : coroutine_handle&amp;lt;&amp;gt; {
+    // (メンバ宣言は省略)
+  };
 }
 ```
 * hash[link /reference/functional/hash.md]
 
 ## 概要
 コルーチンに対応するコルーチンハンドル。
+テンプレートパラメータ`Promise`には、コルーチンのPromise型を指定する。
+
+コルーチンハンドルはアプリケーションコードからの直接アクセスを想定した機能ではなく、コルーチンライブラリ提供クラス内部に隠蔽される構造が一般的である。
+例: 後述サンプルコードでは`task`クラス内に隠蔽されており、コルーチン`f`や関数`main`から間接的に利用される。
+
+`coroutine_handle&amp;lt;void&amp;gt;`または単に`coroutine_handle&amp;lt;&amp;gt;`は、Promise型について型消去(Type-erased)されたコルーチンハンドルとして取り扱える。
+コルーチンのPromise型を明示した`coroutine_handle&amp;lt;Promise&amp;gt;`は型消去された`coroutine_handle&amp;lt;&amp;gt;`から公開派生されており、前者から後者への暗黙変換を行うことが可能となっている。
+
+C++コルーチンとC API（コールバック関数へのポインタと`void*`をとる関数）との組合せ利用を可能とするため、`coroutine_handle`とポインタ型`void*`との相互変換がサポートされる。
+
+ユーザプログラムが`coroutine_handle`の明示特殊化まは部分特殊化を宣言した場合、その動作は未定義とされる。
 
 
 ## メンバ関数
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>month_day -- month_day : カレンダー構文演算子を表に追加</title>
      <link href="https://cpprefjp.github.io/reference/chrono/month_day.html"/>
      <id>3eee4692501f5b6ec0fa2fb98cf1f7f939f712d6:reference/chrono/month_day.md</id>
      <updated>2020-06-25T17:49:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/month_day.md b/reference/chrono/month_day.md
index fbea5dd49..6918c1f3a 100644
--- a/reference/chrono/month_day.md
+++ b/reference/chrono/month_day.md
@@ -43,6 +43,13 @@ namespace std::chrono {
 
 
 ## 非メンバ関数
+### カレンダー構文演算子
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`operator/`](month_day/op_append.md.nolink) | カレンダー要素同士をつなぎ合わせる | C++20 |
+
+
 ### 比較演算
 
 | 名前 | 説明 | 対応バージョン |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コルーチン -- cpp20/coroutines: &#34;背景・経緯&#34;，&#34;選択肢&#34;セクションを記述</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/coroutines.html"/>
      <id>79514211fa117cd5f76a8c0b365b16eb153b7404:lang/cpp20/coroutines.md</id>
      <updated>2020-06-25T17:32:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/coroutines.md b/lang/cpp20/coroutines.md
index 0d1fecae5..8da43d14f 100644
--- a/lang/cpp20/coroutines.md
+++ b/lang/cpp20/coroutines.md
@@ -508,11 +508,26 @@ int main()
 
 
 ## この機能が必要になった背景・経緯
-(執筆中)
+
+多くのプログラミング言語で対応されており広い実績のあるコルーチン機能を、C++言語でも使えるよう[2013年頃](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3708.pdf)から検討が始まっている。
+
+2017年には [ISO/IEC TS 22277 C++ Extensions for Coroutines](https://www.iso.org/standard/73008.html)（通称&amp;#34;Coroutines TS&amp;#34;） として正式発効され、いくつかの追加の仕様修正をへてC++20言語仕様本体への統合が決定された。
+
+C++言語仕様へのコルーチン導入によって、ジェネレータの協調的マルチタスクのサポート、ファイルやネットワークなど非同期I/Oライブラリとの統合が期待されている。
 
 
 ## 検討されたほかの選択肢
-(執筆中)
+
+C++20コルーチンはスタックレスコルーチンとして導入されたが、スタックフル(Stackful)コルーチン＝ファイバー(Fiber)の導入検討も長らく行われてきた。
+スタックフルコルーチンは将来のC++仕様導入に向けて引き続き検討されている。
+（本ページ執筆時点では[提案文書P0876R10](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p0876r10.pdf)が最新）
+
+C++20コルーチンでは、コルーチン・ステートのために動的メモリ確保が行われる可能性がある。
+一定条件を満たせばコンパイラ最適化によって動的メモリ確保が省略されるとしているが、言語仕様として動的メモリ確保を避ける仕様も検討された（通称&amp;#34;Core Coroutines&amp;#34;)。
+最終的には既に実績のあるCoroutinesTS（発案者の名前にちなみ&amp;#34;Gor-routines&amp;#34;と呼ばれた）ベースのコルーチン仕様が採用されることになった。
+
+C++20コルーチンに関するキーワードは、いずれも接頭辞`co_`が付与されている。
+何度かの改名提案（[P0071R0](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0071r0.html)、[P1485R1](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1485r1.html)）も提出されたが、いずれも否決されてC++20仕様に落ち着いた。
 
 
 ## 関連項目
@@ -520,7 +535,7 @@ int main()
 
 
 ## 参照
-- [N4680 C++ Extensions for Coroutines(Coroutine TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/n4680.pdf)
+- [N4680 C++ Extensions for Coroutines(Coroutines TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/n4680.pdf)
 - [P0911R1 Rebase the Coroutines TS onto the C++17 Standard](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0911r1.html)
 - [P0913R1 Add symmetric coroutine control transfer](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0913r1.html)
 - [P0914R1 Add parameter preview to coroutine promise constructor](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0914r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コルーチン -- cpp20/coroutines: 例示コードへリンク付与</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/coroutines.html"/>
      <id>2d6497c83f8c676c1c679ed2fe56750ba14fd0a0:lang/cpp20/coroutines.md</id>
      <updated>2020-06-25T16:49:23+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/coroutines.md b/lang/cpp20/coroutines.md
index 7593e5c33..0d1fecae5 100644
--- a/lang/cpp20/coroutines.md
+++ b/lang/cpp20/coroutines.md
@@ -172,6 +172,14 @@ int main() {
   while (g.move_next()) std::cout &amp;lt;&amp;lt; g.current_value() &amp;lt;&amp;lt; std::endl;
 }
 ```
+* std::coroutine_handle&amp;lt;promise_type&amp;gt;[link /reference/coroutine/coroutine_handle.md]
+* from_promise[link /reference/coroutine/coroutine_handle/from_promise.md]
+* resume()[link /reference/coroutine/coroutine_handle/resume.md]
+* done()[link /reference/coroutine/coroutine_handle/done.md]
+* promise()[link /reference/coroutine/coroutine_handle/promise.md]
+* destroy()[link /reference/coroutine/coroutine_handle/destroy.md]
+* suspend_always[link /reference/coroutine/suspend_always.md]
+* std::terminate[link /reference/exception/terminate.md]
 
 コルーチンの終端まで制御が到達、またはコルーチンを指すコルーチンハンドルの[`destroy`](/reference/coroutine/coroutine_handle/destroy.md)メンバ関数が呼び出されると、コルーチン・ステートは破棄される。
 
@@ -272,6 +280,7 @@ my_future&amp;lt;void&amp;gt; g() {
 auto f(int x = co_await h()); // エラー: await式は関数中断ポイントの外
 int a[] = { co_await h() };   // エラー: await式は関数中断ポイントの外
 ```
+* std::coroutine_handle&amp;lt;&amp;gt;[link /reference/coroutine/coroutine_handle.md]
 
 ### Yield式
 `co_yield`式は、コルーチンから値を生成(yield)するときに用いる。
@@ -319,6 +328,10 @@ int main() {
   assert(std::equal(r1.begin(), r1.end(), r2.begin(), r2.end()));
 }
 ```
+* std::suspend_always[link /reference/coroutine/suspend_always.md]
+* std::move[link /reference/utility/move.md]
+* pair[link /reference/utility/pair.md]
+* make_pair[link /reference/utility/make_pair.md]
 
 ## co_return文
 `co_return`文は、コルーチンを終了し呼出元へ制御を戻すために用いる。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>destroy -- coroutine_handle: fix inner links</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/coroutine_handle/destroy.html"/>
      <id>fa273ea59696df593576b1af772d6cc62825bcfc:reference/coroutine/coroutine_handle/destroy.md</id>
      <updated>2020-06-25T16:08:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/coroutine_handle/destroy.md b/reference/coroutine/coroutine_handle/destroy.md
index 6d2473fc5..7db1ac968 100644
--- a/reference/coroutine/coroutine_handle/destroy.md
+++ b/reference/coroutine/coroutine_handle/destroy.md
@@ -24,7 +24,7 @@ void destroy() const;
 ## 備考
 最終サスペンドポイントにてコルーチンを中断していなければ、該当コルーチンは暗黙に破棄される。
 
-[`std::thread`](/refernce/thread/thread.md)や[`std::jthread`](/refernce/thread/jthread.md)のインスタンス、もしくはメインスレッド以外からコルーチンを破棄する場合、その振る舞いは処理系定義とされる。
+[`std::thread`](/reference/thread/thread.md)や[`std::jthread`](/reference/thread/jthread.md)のインスタンス、もしくはメインスレッド以外からコルーチンを破棄する場合、その振る舞いは処理系定義とされる。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>promise -- coroutine_handle: fix inner links</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/coroutine_handle/promise.html"/>
      <id>fa273ea59696df593576b1af772d6cc62825bcfc:reference/coroutine/coroutine_handle/promise.md</id>
      <updated>2020-06-25T16:08:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/coroutine_handle/promise.md b/reference/coroutine/coroutine_handle/promise.md
index 61351b821..eb97ba9a2 100644
--- a/reference/coroutine/coroutine_handle/promise.md
+++ b/reference/coroutine/coroutine_handle/promise.md
@@ -33,4 +33,4 @@ Promise&amp;amp; promise() const;
 
 ## 関連項目
 - [C++20 コルーチン](/lang/cpp20/coroutines.md)
-- [from_promise](form_promise.md)
+- [from_promise](from_promise.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>resume -- coroutine_handle: fix inner links</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/coroutine_handle/resume.html"/>
      <id>fa273ea59696df593576b1af772d6cc62825bcfc:reference/coroutine/coroutine_handle/resume.md</id>
      <updated>2020-06-25T16:08:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/coroutine_handle/resume.md b/reference/coroutine/coroutine_handle/resume.md
index 466357a55..82de03d2f 100644
--- a/reference/coroutine/coroutine_handle/resume.md
+++ b/reference/coroutine/coroutine_handle/resume.md
@@ -23,7 +23,7 @@ void resume() const;
 
 
 ## 備考
-[`std::thread`](/refernce/thread/thread.md)や[`std::jthread`](/refernce/thread/jthread.md)のインスタンス、もしくはメインスレッド以外からコルーチンを再開する場合、その振る舞いは処理系定義とされる。
+[`std::thread`](/reference/thread/thread.md)や[`std::jthread`](/reference/thread/jthread.md)のインスタンス、もしくはメインスレッド以外からコルーチンを再開する場合、その振る舞いは処理系定義とされる。
 
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
</feed>
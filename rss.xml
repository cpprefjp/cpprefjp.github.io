<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-09-21T14:41:02.280269</updated>
  <id>8d1ee5b5-e0ba-40f7-bf55-7784c92e3049</id>

  
    <entry>
      <title>execution -- execution: P3149R11 associate(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution.html"/>
      <id>5ee535663bd10487f16bca44cfce00cecebee232:reference/execution/execution.md</id>
      <updated>2025-09-21T01:19:24+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution.md b/reference/execution/execution.md
index dd27c311b..74cc78afc 100644
--- a/reference/execution/execution.md
+++ b/reference/execution/execution.md
@@ -131,7 +131,7 @@ namespace std::execution {
 | [`execution::into_variant`](execution/into_variant.md) | 複数の値完了シグネチャを単一[`variant`](/reference/variant/variant.md)型の値完了シグネチャに変換 (customization point object) | C++26 |
 | [`execution::stopped_as_optional`](execution/stopped_as_optional.md) | 入力Senderの停止完了を空の[`optional`](/reference/optional/optional.md)値完了に変換 (customization point object) | C++26 |
 | [`execution::stopped_as_error`](execution/stopped_as_error.md) | 入力Senderの停止完了をエラー完了に変換 (customization point object) | C++26 |
-| [`execution::associate`](execution/associate.md.nolink) | 非同期スコープへの関連付け (customization point object) | C++26 |
+| [`execution::associate`](execution/associate.md) | 非同期スコープへの関連付け (customization point object) | C++26 |
 | [`execution::spawn_future`](execution/spawn_future.md.nolink) | 非同期操作を早期開始 (customization point object) | C++26 |
 
 ### Senderコンシューマ
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>associate -- execution: P3149R11 associate(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/associate.html"/>
      <id>5ee535663bd10487f16bca44cfce00cecebee232:reference/execution/execution/associate.md</id>
      <updated>2025-09-21T01:19:24+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/associate.md b/reference/execution/execution/associate.md
new file mode 100644
index 000000000..e3dd9d841
--- /dev/null
+++ b/reference/execution/execution/associate.md
@@ -0,0 +1,287 @@
+# associate
+* execution[meta header]
+* cpo[meta id-type]
+* std::execution[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::execution {
+  struct associate_t { unspecified };
+  inline constexpr associate_t associate{};
+}
+```
+* unspecified[italic]
+
+## 概要
+`associate`は、入力[Sender](sender.md)と非同期スコープとの関連付けを行うSenderアダプタである。
+関連付けられた非同期スコープは、Senderが作成した非同期操作の生存期間を追跡できる。
+
+`associate`は[パイプ可能Senderアダプタオブジェクト](sender_adaptor_closure.md)であり、パイプライン記法をサポートする。
+
+
+## 効果
+説明用の式`sndr`と`token`に対して、`decltype((sndr))`が[`sender`](sender.md)を満たさない、もしくは[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;decltype((token))&amp;gt;`が[`scope_token`](scope_token.md)を満たさないとき、呼び出し式`associate(sndr, token)`は不適格となる。
+
+そうでなければ、呼び出し式`associate(sndr, token)`は`sndr`が1回だけ評価されることを除いて、下記と等価。
+
+```cpp
+transform_sender(get-domain-early(sndr),
+                 make-sender(associate, associate-data(token, sndr)))
+```
+* transform_sender[link transform_sender.md]
+* get-domain-early[link get-domain-early.md]
+* make-sender[link make-sender.md]
+* associate-data[italic]
+
+`associate(sndr, token)`の評価は、`token`に関連付けられた非同期スコープオブジェクトを介して観測可能な副作用を引き起こす可能性がある。
+
+
+### Senderアルゴリズムタグ `associate`
+Senderアルゴリズム動作説明用のクラステンプレート[`impls-for`](impls-for.md)に対して、下記の特殊化が定義される。
+
+```cpp
+namespace std::execution {
+  template&amp;lt;&amp;gt;
+  struct impls-for&amp;lt;associate_t&amp;gt; : default-impls {
+    static constexpr auto get-state = see below;  // exposition only
+    static constexpr auto start = see below;      // exposition only
+
+    template&amp;lt;class Sndr, class... Env&amp;gt;
+      static consteval void check-types() {       // exposition only
+        using associate_data_t = remove_cvref_t&amp;lt;data-type&amp;lt;Sndr&amp;gt;&amp;gt;;
+        using child_type_t = typename associate_data_t::wrap-sender;
+        (void)get_completion_signatures&amp;lt;child_type_t, FWD-ENV-T(Env)...&amp;gt;();
+    }
+  };
+}
+```
+* impls-for[link impls-for.md]
+* default-impls[link impls-for.md]
+* data-type[link data-type.md]
+* get_completion_signatures[link get_completion_signatures.md]
+* FWD-ENV-T[link ../forwarding_query.md]
+
+`impls-for&amp;lt;associate_t&amp;gt;::get-state`メンバは、下記ラムダ式と等価な関数呼び出し可能なオブジェクトで初期化される。
+
+```cpp
+[]&amp;lt;class Sndr, class Rcvr&amp;gt;(Sndr&amp;amp;&amp;amp; sndr, Rcvr&amp;amp; rcvr) noexcept(see below) {
+  auto [_, data] = std::forward&amp;lt;Sndr&amp;gt;(sndr);
+  auto dataParts = std::move(data).release();
+
+  using scope_tkn = decltype(dataParts-&amp;gt;first);
+  using wrap_sender = decltype(dataParts-&amp;gt;second);
+  using op_t = connect_result_t&amp;lt;wrap_sender, Rcvr&amp;gt;;
+
+  struct op_state {
+    bool associated = false;    // exposition only
+    union {
+      Rcvr* rcvr;               // exposition only
+      struct {
+        scope_tkn token;        // exposition only
+        op_t op;                // exposition only
+      } assoc;                  // exposition only
+    };
+
+    explicit op_state(Rcvr&amp;amp; r) noexcept
+      : rcvr(addressof(r)) {}
+
+    explicit op_state(scope_tkn tkn, wrap_sender&amp;amp;&amp;amp; sndr, Rcvr&amp;amp; r) try
+      : associated(true),
+        assoc(tkn, connect(std::move(sndr), std::move(r))) {
+    }
+    catch (...) {
+      tkn.disassociate();
+      throw;
+    }
+
+    op_state(op_state&amp;amp;&amp;amp;) = delete;
+
+    ~op_state() {
+      if (associated) {
+        assoc.op.~op_t();
+        assoc.token.disassociate();
+        assoc.token.~scope_tkn();
+      }
+    }
+
+    void run() noexcept {       // exposition only
+      if (associated)
+        start(assoc.op);
+      else
+        set_stopped(std::move(*rcvr));
+    }
+  };
+
+  if (dataParts)
+    return op_state{std::move(dataParts-&amp;gt;first), std::move(dataParts-&amp;gt;second), rcvr};
+  else
+    return op_state{rcvr};
+}
+```
+* connect_result_t[link connect_result_t.md]
+* connect[link connect.md]
+* start[link start.md]
+* set_stopped[link set_stopped.md]
+* first[link /reference/utility/pair/first.md]
+* second[link /reference/utility/pair/second.md]
+* std::move[link /reference/utility/move.md]
+
+`impls-for&amp;lt;associate_t&amp;gt;::get-state`の`noexcept`節の式は下記の通り。
+
+```cpp
+is_nothrow_constructible_v&amp;lt;remove_cvref_t&amp;lt;Sndr&amp;gt;, Sndr&amp;gt; &amp;amp;&amp;amp;
+is_nothrow_move_constructible_v&amp;lt;wrap-sender&amp;gt; &amp;amp;&amp;amp;
+nothrow-callable&amp;lt;connect_t, wrap-sender, Rcvr&amp;gt;
+```
+* is_nothrow_constructible_v[link /reference/type_traits/is_nothrow_constructible.md]
+* is_nothrow_move_constructible_v[link /reference/type_traits/is_nothrow_move_constructible.md]
+* connect_t[link connect.md]
+* nothrow-callable[link /reference/functional/nothrow-callable.md]
+
+`impls-for&amp;lt;associate_t&amp;gt;::start`メンバは、下記ラムダ式と等価な関数呼び出し可能なオブジェクトで初期化される。
+
+```cpp
+[](auto&amp;amp; state, auto&amp;amp;) noexcept -&amp;gt; void {
+  state.run();
+}
+```
+
+
+## 説明専用エンティティ
+説明専用の`associate-data`クラスを下記の通り定義する。
+
+```cpp
+namespace std::execution {
+  template&amp;lt;scope_token Token, sender Sender&amp;gt;
+  struct associate-data {        // exposition only
+    using wrap-sender =          // exposition only
+      remove_cvref_t&amp;lt;decltype(declval&amp;lt;Token&amp;amp;&amp;gt;().wrap(declval&amp;lt;Sender&amp;gt;()))&amp;gt;;
+
+    explicit associate-data(Token t, Sender&amp;amp;&amp;amp; s)
+      : sndr(t.wrap(std::forward&amp;lt;Sender&amp;gt;(s))),
+        token(t) {
+      if (!token.try_associate())
+        sndr.reset();
+    }
+
+    associate-data(const associate-data&amp;amp; other)
+      noexcept(is_nothrow_copy_constructible_v&amp;lt;wrap-sender&amp;gt; &amp;amp;&amp;amp;
+               noexcept(other.token.try_associate()));
+
+    associate-data(associate-data&amp;amp;&amp;amp; other)
+      noexcept(is_nothrow_move_constructible_v&amp;lt;wrap-sender&amp;gt;);
+
+    ~associate-data();
+
+    optional&amp;lt;pair&amp;lt;Token, wrap-sender&amp;gt;&amp;gt;
+      release() &amp;amp;&amp;amp; noexcept(is_nothrow_move_constructible_v&amp;lt;wrap-sender&amp;gt;);
+
+  private:
+    optional&amp;lt;wrap-sender&amp;gt; sndr;  // exposition only
+    Token token;                 // exposition only
+  };
+
+  template&amp;lt;scope_token Token, sender Sender&amp;gt;
+  associate-data(Token, Sender&amp;amp;&amp;amp;) -&amp;gt; associate-data&amp;lt;Token, Sender&amp;gt;;
+}
+```
+* scope_token[link scope_token.md]
+* sender[link sender.md]
+* is_nothrow_copy_constructible_v[link /reference/type_traits/is_nothrow_copy_constructible.md]
+* is_nothrow_move_constructible_v[link /reference/type_traits/is_nothrow_move_constructible.md]
+* optional[link /reference/optional/optional.md]
+
+`associate-data`型のオブジェクト`a`に対して、関連付けが正常に行われかつ`a`により所有される場合に限って、`a.sndr.`[`has_value()`](/reference/optional/optional/has_value.md)は`true`となる。
+
+```cpp
+associate-data(const associate-data&amp;amp; other)
+  noexcept(is_nothrow_copy_constructible_v&amp;lt;wrap-sender&amp;gt; &amp;amp;&amp;amp;
+           noexcept(other.token.try_associate()));
+```
+* is_nothrow_copy_constructible_v[link /reference/type_traits/is_nothrow_copy_constructible.md]
+
+- テンプレートパラメータ制約 : [`copy_constructible`](/reference/concepts/copy_constructible.md)`&amp;lt;wrap-sender&amp;gt; == true`
+- 効果 : `sndr`を値初期化し、`token`を`other.token`で初期化する。`other.sndr.`[`has_value()`](/reference/optional/optional/has_value.md) `== false`ならば、それ以上の効果を持たない。そうでなければ、`token.try_associate()`を呼び出し、戻り値が`true`ならば`sndr.`[`emplace`](/reference/optional/optional/emplace.md)`(*other.sndr)`を呼び出し、例外で終了するときは例外を伝播させる前に`token.disassociate()`を呼び出す。
+
+```cpp
+associate-data(associate-data&amp;amp;&amp;amp; other)
+  noexcept(is_nothrow_move_constructible_v&amp;lt;wrap-sender&amp;gt;);
+```
+* is_nothrow_move_constructible_v[link /reference/type_traits/is_nothrow_move_constructible.md]
+
+- 効果 : `sndr`を[`std::move`](/reference/utility/move.md)`(other.sndr)`で、`token`を`std::move(otehr.token)`で初期化したのち、`other.sndr.`[`reset()`](/reference/optional/optional/reset.md)を呼び出す。
+
+```cpp
+~associate-data();
+```
+
+- 効果 : `sndr.`[`has_value()`](/reference/optional/optional/has_value.md)が`false`を返すとき、何もしない。そうでなければ、`token.disassociate()`呼び出しの前に`sndr.`[`reset()`](/reference/optional/optional/reset.md)を呼び出す。
+
+```cpp
+optional&amp;lt;pair&amp;lt;Token, wrap-sender&amp;gt;&amp;gt;
+  release() &amp;amp;&amp;amp; noexcept(is_nothrow_move_constructible_v&amp;lt;wrap-sender&amp;gt;);
+```
+* optional[link /reference/optional/optional.md]
+* is_nothrow_move_constructible_v[link /reference/type_traits/is_nothrow_move_constructible.md]
+
+- 効果 : `sndr.`[`has_value()`](/reference/optional/optional/has_value.md)が`false`を返すとき、値を保持しない[`optional`](/reference/optional/optional.md)を返す。そうでなければ、次のように[`pair`](/reference/utility/pair.md)`&amp;lt;Token, warp-sender&amp;gt;`型の値を保持する`optional`を返す。
+
+    ```cpp
+    return optional(pair(token, std::move(*sndr)));
+    ```
+    * optional[link /reference/optional/optional.md]
+    * std::move[link /reference/utility/move.md]
+
+- 事後条件 : `sndr`は値を保持しない。
+
+
+## カスタマイゼーションポイント
+Senderアルゴリズム構築時および[Receiver](receiver.md)接続時に、関連付けられた実行ドメインに対して[`execution::transform_sender`](transform_sender.md)経由でSender変換が行われる。
+[デフォルト実行ドメイン](default_domain.md)では無変換。
+
+
+## 例
+```cpp example
+#include &amp;lt;execution&amp;gt;
+namespace ex = std::execution;
+
+int main()
+{
+  ex::counting_scope scope;
+  ex::sender auto sndr =
+    ex::just(42)
+    | ex::associate(scope.get_token());
+
+  std::this_thread::sync_wait(sndr);
+}
+```
+* ex::associate[color ff0000]
+* ex::counting_scope[link counting_scope.md]
+* ex::just[link just.md]
+* ex::sender[link sender.md]
+* std::this_thread::sync_wait[link ../this_thread/sync_wait.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution::scope_token`](scope_token.md)
+
+
+## 参照
+- [P2999R3 Sender Algorithm Customization](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2999r3.html)
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
+- [P3149R11 `async_scope` - Creating scopes for non-sequential concurrency](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3149r11.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>disassociate -- execution: P3149R11 associate(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/counting_scope/token/disassociate.html"/>
      <id>5ee535663bd10487f16bca44cfce00cecebee232:reference/execution/execution/counting_scope/token/disassociate.md</id>
      <updated>2025-09-21T01:19:24+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/counting_scope/token/disassociate.md b/reference/execution/execution/counting_scope/token/disassociate.md
index 164c4e12b..fc09036bb 100644
--- a/reference/execution/execution/counting_scope/token/disassociate.md
+++ b/reference/execution/execution/counting_scope/token/disassociate.md
@@ -38,7 +38,7 @@ scope-&amp;gt;disassociate()
 
 
 ## 関連項目
-- [`execution::associate`](../../associate.md.nolink)
+- [`execution::associate`](../../associate.md)
 - [`execution::spawn_future`](../../spawn_future.md.nolink)
 - [`execution::spawn`](../../spawn.md.nolink)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>try_associate -- execution: P3149R11 associate(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/counting_scope/token/try_associate.html"/>
      <id>5ee535663bd10487f16bca44cfce00cecebee232:reference/execution/execution/counting_scope/token/try_associate.md</id>
      <updated>2025-09-21T01:19:24+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/counting_scope/token/try_associate.md b/reference/execution/execution/counting_scope/token/try_associate.md
index 0d4dc5a4b..5bde327af 100644
--- a/reference/execution/execution/counting_scope/token/try_associate.md
+++ b/reference/execution/execution/counting_scope/token/try_associate.md
@@ -38,7 +38,7 @@ return scope-&amp;gt;try-associate();
 
 
 ## 関連項目
-- [`execution::associate`](../../associate.md.nolink)
+- [`execution::associate`](../../associate.md)
 - [`execution::spawn_future`](../../spawn_future.md.nolink)
 - [`execution::spawn`](../../spawn.md.nolink)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>wrap -- execution: P3149R11 associate(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/counting_scope/token/wrap.html"/>
      <id>5ee535663bd10487f16bca44cfce00cecebee232:reference/execution/execution/counting_scope/token/wrap.md</id>
      <updated>2025-09-21T01:19:24+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/counting_scope/token/wrap.md b/reference/execution/execution/counting_scope/token/wrap.md
index 6f76a6d95..73588bf95 100644
--- a/reference/execution/execution/counting_scope/token/wrap.md
+++ b/reference/execution/execution/counting_scope/token/wrap.md
@@ -39,7 +39,7 @@ return stop-when(std::forward&amp;lt;Sender&amp;gt;(snd), scope-&amp;gt;s_source.get_token());
 
 
 ## 関連項目
-- [`execution::associate`](../../associate.md.nolink)
+- [`execution::associate`](../../associate.md)
 - [`execution::spawn_future`](../../spawn_future.md.nolink)
 - [`execution::spawn`](../../spawn.md.nolink)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>get-domain-early -- execution: P3149R11 associate(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/get-domain-early.html"/>
      <id>5ee535663bd10487f16bca44cfce00cecebee232:reference/execution/execution/get-domain-early.md</id>
      <updated>2025-09-21T01:19:24+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/get-domain-early.md b/reference/execution/execution/get-domain-early.md
index 57875cca8..b0f50fc3a 100644
--- a/reference/execution/execution/get-domain-early.md
+++ b/reference/execution/execution/get-domain-early.md
@@ -45,7 +45,7 @@ constexpr auto get-domain-early(const Sndr&amp;amp; sndr) noexcept;
 - [`execution::into_variant`](into_variant.md)
 - [`execution::stopped_as_optional`](stopped_as_optional.md)
 - [`execution::stopped_as_error`](stopped_as_error.md)
-- [`execution::associate`](associate.md.nolink)
+- [`execution::associate`](associate.md)
 - [`execution::affine_on`](affine_on.md.nolink)
 - [`this_thread::sync_wait`](../this_thread/sync_wait.md)
 - [`this_thread::sync_wait_with_variant`](../this_thread/sync_wait_with_variant.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>scope_token -- execution: P3149R11 associate(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/scope_token.html"/>
      <id>5ee535663bd10487f16bca44cfce00cecebee232:reference/execution/execution/scope_token.md</id>
      <updated>2025-09-21T01:19:24+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/scope_token.md b/reference/execution/execution/scope_token.md
index f44f23393..297e25d02 100644
--- a/reference/execution/execution/scope_token.md
+++ b/reference/execution/execution/scope_token.md
@@ -68,7 +68,7 @@ int main()
 
 
 ## 関連項目
-- [`execution::associate`](associate.md.nolink)
+- [`execution::associate`](associate.md)
 - [`execution::spawn_future`](spawn_future.md.nolink)
 - [`execution::spawn`](spawn.md.nolink)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>disassociate -- execution: P3149R11 associate(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/simple_counting_scope/token/disassociate.html"/>
      <id>5ee535663bd10487f16bca44cfce00cecebee232:reference/execution/execution/simple_counting_scope/token/disassociate.md</id>
      <updated>2025-09-21T01:19:24+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/simple_counting_scope/token/disassociate.md b/reference/execution/execution/simple_counting_scope/token/disassociate.md
index 1c9e3414a..6aa05a177 100644
--- a/reference/execution/execution/simple_counting_scope/token/disassociate.md
+++ b/reference/execution/execution/simple_counting_scope/token/disassociate.md
@@ -38,7 +38,7 @@ scope-&amp;gt;disassociate()
 
 
 ## 関連項目
-- [`execution::associate`](../../associate.md.nolink)
+- [`execution::associate`](../../associate.md)
 - [`execution::spawn_future`](../../spawn_future.md.nolink)
 - [`execution::spawn`](../../spawn.md.nolink)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>try_associate -- execution: P3149R11 associate(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/simple_counting_scope/token/try_associate.html"/>
      <id>5ee535663bd10487f16bca44cfce00cecebee232:reference/execution/execution/simple_counting_scope/token/try_associate.md</id>
      <updated>2025-09-21T01:19:24+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/simple_counting_scope/token/try_associate.md b/reference/execution/execution/simple_counting_scope/token/try_associate.md
index 3784a3070..5b0f184c4 100644
--- a/reference/execution/execution/simple_counting_scope/token/try_associate.md
+++ b/reference/execution/execution/simple_counting_scope/token/try_associate.md
@@ -38,7 +38,7 @@ return scope-&amp;gt;try-associate();
 
 
 ## 関連項目
-- [`execution::associate`](../../associate.md.nolink)
+- [`execution::associate`](../../associate.md)
 - [`execution::spawn_future`](../../spawn_future.md.nolink)
 - [`execution::spawn`](../../spawn.md.nolink)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>wrap -- execution: P3149R11 associate(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/simple_counting_scope/token/wrap.html"/>
      <id>5ee535663bd10487f16bca44cfce00cecebee232:reference/execution/execution/simple_counting_scope/token/wrap.md</id>
      <updated>2025-09-21T01:19:24+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/simple_counting_scope/token/wrap.md b/reference/execution/execution/simple_counting_scope/token/wrap.md
index ce95016e5..495fa0075 100644
--- a/reference/execution/execution/simple_counting_scope/token/wrap.md
+++ b/reference/execution/execution/simple_counting_scope/token/wrap.md
@@ -35,7 +35,7 @@ Sender&amp;amp;&amp;amp; wrap(Sender&amp;amp;&amp;amp; snd) const noexcept;
 
 
 ## 関連項目
-- [`execution::associate`](../../associate.md.nolink)
+- [`execution::associate`](../../associate.md)
 - [`execution::spawn_future`](../../spawn_future.md.nolink)
 - [`execution::spawn`](../../spawn.md.nolink)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cstdio -- Create page: fopen_max (#1530)</title>
      <link href="https://cpprefjp.github.io/reference/cstdio.html"/>
      <id>b4f048f1c5c31f0cf4d36930d1bf0ec40bffe943:reference/cstdio.md</id>
      <updated>2025-09-20T22:04:42+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;cstdio&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;cstdio&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;cstdio&amp;gt;&lt;/code&gt;ヘッダでは、標準入出力のための機能を定義する。これらの機能は、&lt;code&gt;std&lt;/code&gt;名前空間に属することを除いてC言語の標準ライブラリ&lt;code&gt;&amp;lt;stdio.h&amp;gt;&lt;/code&gt;ヘッダと同じである。&lt;/p&gt;
&lt;h2&gt;型&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstddef/size_t.html&#34;&gt;size_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;符号なし整数型&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdio/file.html&#34;&gt;FILE&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ストリームの制御に必要な情報を持つオブジェクト型&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdio/fpos_t.html&#34;&gt;fpos_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ファイルの全ての位置にアクセスするための配列以外の完全オブジェクト型&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;マクロ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstddef/null.html&#34;&gt;NULL&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ヌルポインタ定数に展開されるマクロ&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdio/iofbf.md.nolink&#34;&gt;_IOFBF&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;入出力を完全にバッファリングする指定のための整数定数&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdio/iolbf.md.nolink&#34;&gt;_IOLBF&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;入出力を行バッファリングする指定のための整数定数&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdio/ionbf.md.nolink&#34;&gt;_IONBF&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;入出力をバッファリングしない指定のための整数定数&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdio/bufsiz.html&#34;&gt;BUFSIZ&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;バッファサイズを表す整数定数&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdio/eof.html&#34;&gt;EOF&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ファイルの終端であることを表す&lt;code&gt;int&lt;/code&gt;型の整数定数&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdio/fopen_max.html&#34;&gt;FOPEN_MAX&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;実装によって保証されるファイルを開ける最低限の数を表す整数定数&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdio/filename_max.html&#34;&gt;FILENAME_MAX&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;実装によって保証されるファイル名の最大の長さを表す整数定数&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdio/l_tmpnam.md.nolink&#34;&gt;L_tmpnam&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;tmpnam()&lt;/code&gt;関数によって作られた一時ファイル名を保持する似に必要な長さを表す整数定数&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdio/seek_set.md.nolink&#34;&gt;SEEK_SET&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ファイルの先頭位置を指定するための整数定数&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdio/seek_cur.md.nolink&#34;&gt;SEEK_CUR&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ファイルの現在位置を指定するための整数定数&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdio/seek_end.md.nolink&#34;&gt;SEEK_END&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ファイルの終端を指定するための整数定数&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdio/tmp_max.md.nolink&#34;&gt;TMP_MAX&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;tmpnam()&lt;/code&gt;関数によって生成できる一時ファイル名の、実装が保証する最低限の数を表す整数定数&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdio/stderr.html&#34;&gt;stderr&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;標準エラーを表す&lt;code&gt;FILE*&lt;/code&gt;型の式&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdio/stdin.html&#34;&gt;stdin&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;標準入力を表す&lt;code&gt;FILE*&lt;/code&gt;型の式&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdio/stdout.html&#34;&gt;stdout&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;標準出力を表す&lt;code&gt;FILE*&lt;/code&gt;型の式&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;ファイル操作&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdio/remove.html&#34;&gt;remove&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ファイルを削除する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdio/rename.html&#34;&gt;rename&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ファイル名を変更、ファイルを移動する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdio/tmpfile.html&#34;&gt;tmpfile&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;一時ファイルを生成する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdio/tmpnam.html&#34;&gt;tmpnam&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;一時ファイル名を生成する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdio/fclose.html&#34;&gt;fclose&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ファイルを閉じる&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdio/fopen.html&#34;&gt;fopen&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ファイルを開く&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdio/fflush.html&#34;&gt;fflush&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ファイルをフラッシュする&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdio/fprintf.html&#34;&gt;fprintf&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式を指定してファイルに出力する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdio/fscanf.html&#34;&gt;fscanf&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式を指定してファイルから入力する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdio/vfprintf.md.nolink&#34;&gt;vfprintf&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;可変引数リスト&lt;code&gt;va_list&lt;/code&gt;を使用し、書式を指定してファイルに出力する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdio/vfscanf.md.nolink&#34;&gt;vfscanf&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;可変引数リスト&lt;code&gt;va_list&lt;/code&gt;を使用し、書式を指定してファイルから入力する&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdio/fgetc.html&#34;&gt;fgetc&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ファイルから1文字入力する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdio/fgets.html&#34;&gt;fgets&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ファイルからN文字入力する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdio/fputc.html&#34;&gt;fputc&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ファイルに1文字出力する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdio/fputs.html&#34;&gt;fputs&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ファイルにN文字出力する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdio/fread.html&#34;&gt;fread&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ファイルからN文字読み込む&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdio/fwrite.html&#34;&gt;fwrite&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ファイルにN文字書き込む&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdio/fgetpos.md.nolink&#34;&gt;fgetpos&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ファイルの現在位置を取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdio/fseek.md.nolink&#34;&gt;fseek&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ファイルの現在位置を移動する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdio/fsetpos.md.nolink&#34;&gt;fsetpos&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ファイルの現在位置を設定する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdio/ftell.md.nolink&#34;&gt;ftell&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ファイルの現在位置を取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdio/rewind.md.nolink&#34;&gt;rewind&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ファイルの現在位置を先頭に戻し、エラーや終端判定をクリアする&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdio/clearerr.md.nolink&#34;&gt;clearerr&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;エラーをクリアする&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdio/feof.html&#34;&gt;feof&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ファイルが終端に到達したか判定する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdio/ferror.md.nolink&#34;&gt;ferror&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ファイルストリームがエラー状態かを判定する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdio/perror.md.nolink&#34;&gt;perror&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;システムエラーメッセージを出力する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;標準入出力&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdio/printf.html&#34;&gt;printf&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式を指定して標準出力に出力する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdio/scanf.html&#34;&gt;scanf&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式を指定して標準入力から入力する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdio/vprintf.md.nolink&#34;&gt;vprintf&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;可変引数リスト&lt;code&gt;va_list&lt;/code&gt;を使用し、書式を指定して標準出力に出力する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdio/vscanf.md.nolink&#34;&gt;vscanf&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;可変引数リスト&lt;code&gt;va_list&lt;/code&gt;を使用し、書式を指定して標準入力から入力する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdio/getc.html&#34;&gt;getc&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ストリームから1文字入力する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdio/getchar.html&#34;&gt;getchar&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;標準入力から1文字入力する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdio/putc.html&#34;&gt;putc&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ストリームに1文字出力する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdio/putchar.html&#34;&gt;putchar&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;標準出力に1文字出力する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdio/puts.html&#34;&gt;puts&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;標準出力に文字列を出力する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdio/ungetc.html&#34;&gt;ungetc&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;入力ストリームに1文字戻す&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;文字列入出力&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdio/snprintf.md.nolink&#34;&gt;snprintf&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式と文字数を指定して、文字列領域に出力する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdio/sprintf.md.nolink&#34;&gt;sprintf&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式を指定して文字列領域に出力する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdio/sscanf.md.nolink&#34;&gt;sscanf&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式を指定して文字列領域から入力する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vsnprintf&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;可変引数リスト&lt;code&gt;va_list&lt;/code&gt;を使用し、書式と文字数を指定して、文字列領域に出力する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdio/vsprintf.md.nolink&#34;&gt;vsprintf&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;可変引数リスト&lt;code&gt;va_list&lt;/code&gt;を使用し、書式を指定して文字列領域に出力する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdio/vsscanf.md.nolink&#34;&gt;vsscanf&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;可変引数リスト&lt;code&gt;va_list&lt;/code&gt;を使用し、書式を指定して文字列領域から入力する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バッファ操作&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdio/setbuf.md.nolink&#34;&gt;setbuf&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;入出力用のバッファを設定する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdio/setvbuf.md.nolink&#34;&gt;setvbuf&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;戦略を指定して入出力用のバッファを設定する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0063r3.html&#34; target=&#34;_blank&#34;&gt;P0063R3 C++17 should refer to C11 instead of C99&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0175r1.html&#34; target=&#34;_blank&#34;&gt;P0175R1 Synopses for the C library&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>FOPEN_MAX -- Create page: fopen_max (#1530)</title>
      <link href="https://cpprefjp.github.io/reference/cstdio/fopen_max.html"/>
      <id>b4f048f1c5c31f0cf4d36930d1bf0ec40bffe943:reference/cstdio/fopen_max.md</id>
      <updated>2025-09-20T22:04:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cstdio/fopen_max.md b/reference/cstdio/fopen_max.md
new file mode 100644
index 000000000..55241d20b
--- /dev/null
+++ b/reference/cstdio/fopen_max.md
@@ -0,0 +1,85 @@
+# FOPEN_MAX
+* cstdio[meta header]
+* macro[meta id-type]
+
+```cpp
+#define FOPEN_MAX unspecified
+```
+* unspecified[italic]
+
+## 概要
+処理系によって保証されるファイルを同時に開ける最低限の数を表すマクロ。
+
+このマクロは、プログラムが同時にオープンできるファイルの最低限の数を定義する。値は実装依存であり、最低でも8以上であることがC標準によって保証されている。実際の実装では、より大きな値（例：16、256など）が使用されることが多い。
+
+また、`FOPEN_MAX`は[`TMP_MAX`](/reference/cstdio/tmp_max.md.nolink)と等しいかそれより大きいことが保証される。
+
+## 備考
+- この値は最低限の保証値であり、実際にはより多くのファイルを開ける場合がある
+- システムリソースやOS固有の制限により、この値未満しかファイルを開けない場合もある
+- `FOPEN_MAX`で開けるファイルの数は、標準で開かれている3つのストリームも含むため、実際に新たに開けるファイルの数は`FOPEN_MAX - 3`個となる
+
+## 例
+```cpp example
+#include &amp;lt;cstdio&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;filesystem&amp;gt;
+#include &amp;lt;format&amp;gt;
+
+int main() {
+  // FOPEN_MAXの値を表示
+  std::printf(&amp;#34;FOPEN_MAX = %d\n&amp;#34;, FOPEN_MAX);
+
+  // 作業用ディレクトリを作成
+  std::filesystem::path work_dir = &amp;#34;temp_fopen_test&amp;#34;;
+  std::filesystem::create_directory(work_dir);
+
+  // 複数のファイルを開いてみる（標準ストリーム3つを除く）
+  std::vector&amp;lt;std::FILE*&amp;gt; files;
+  const int max_new_files = FOPEN_MAX - 3; // 標準ストリーム分を除く
+
+  for (int i = 0; i &amp;lt; max_new_files; ++i) {
+    auto filepath = work_dir / std::format(&amp;#34;temp{}.txt&amp;#34;, i);
+    std::FILE* file = std::fopen(filepath.string().c_str(), &amp;#34;w&amp;#34;);
+    if (file) {
+      files.push_back(file);
+      std::fprintf(file, &amp;#34;File %d\n&amp;#34;, i);
+    } else {
+      std::printf(&amp;#34;Failed to open file %d\n&amp;#34;, i);
+      break;
+    }
+  }
+
+  std::printf(&amp;#34;Successfully opened %zu files\n&amp;#34;, files.size());
+
+  // ファイルを閉じる
+  for (std::FILE* file : files) {
+    std::fclose(file);
+  }
+
+  // 作業用ディレクトリごと削除
+  std::filesystem::remove_all(work_dir);
+
+  return 0;
+}
+```
+* FOPEN_MAX[color ff0000]
+* std::printf[link /reference/cstdio/printf.md]
+* std::fopen[link /reference/cstdio/fopen.md]
+* std::fprintf[link /reference/cstdio/fprintf.md]
+* std::fclose[link /reference/cstdio/fclose.md]
+* std::format[link /reference/format/format.md]
+* std::filesystem::create_directory[link /reference/filesystem/create_directory.md]
+* std::filesystem::remove_all[link /reference/filesystem/remove_all.md]
+
+### 出力例
+```
+FOPEN_MAX = 20
+Successfully opened 17 files
+```
+
+## 処理系
+
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stop-when -- execution/stop-when: fix markup(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/stop-when.html"/>
      <id>df84025a1f04eee43286f32a2e937607244aba84:reference/execution/execution/stop-when.md</id>
      <updated>2025-09-20T18:01:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/stop-when.md b/reference/execution/execution/stop-when.md
index 9c0072e42..15505771c 100644
--- a/reference/execution/execution/stop-when.md
+++ b/reference/execution/execution/stop-when.md
@@ -11,7 +11,7 @@ namespace std::execution {
 ```
 * unspecified[italic]
 
-# 概要
+## 概要
 `stop-when`は、入力[Sender](sender.md)に追加の[停止トークン](/reference/stop_token/stop_token.md)を結合したSenderを返す、説明専用のSenderアダプタである。
 
 説明用の式`sndr`と`token`に対して、
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>counting_scope -- execution: P3149R11 stop-when(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/counting_scope.html"/>
      <id>53db61c683f848626a88074adb080eb87a69b7c2:reference/execution/execution/counting_scope.md</id>
      <updated>2025-09-20T17:53:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/counting_scope.md b/reference/execution/execution/counting_scope.md
index 986b5a422..7e8d4fcb5 100644
--- a/reference/execution/execution/counting_scope.md
+++ b/reference/execution/execution/counting_scope.md
@@ -18,7 +18,7 @@ namespace std::execution {
 
 - `count` : `size_t`型の関連付けカウント値
 - `state` : `scope-state-type`列挙型（後述）の状態
--　`s_source` : [`inplace_stop_source`](/reference/stop_token/inplace_stop_source.md)型の停止要求管理オブジェクト
+- `s_source` : [`inplace_stop_source`](/reference/stop_token/inplace_stop_source.md)型の停止要求管理オブジェクト
 
 
 ## メンバ関数
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>disassociate -- execution: P3149R11 stop-when(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/counting_scope/disassociate.html"/>
      <id>53db61c683f848626a88074adb080eb87a69b7c2:reference/execution/execution/counting_scope/disassociate.md</id>
      <updated>2025-09-20T17:53:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/counting_scope/disassociate.md b/reference/execution/execution/counting_scope/disassociate.md
index dcb449a86..8d94cfda6 100644
--- a/reference/execution/execution/counting_scope/disassociate.md
+++ b/reference/execution/execution/counting_scope/disassociate.md
@@ -31,12 +31,6 @@ void disassociate() noexcept; // exposition only
 ### 言語
 - C++26
 
-### 処理系
-- [Clang](/implementation.md#clang): ??
-- [GCC](/implementation.md#gcc): ??
-- [ICC](/implementation.md#icc): ??
-- [Visual C++](/implementation.md#visual_cpp): ??
-
 
 ## 参照
 - [P3149R11 `async_scope` - Creating scopes for non-sequential concurrency](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3149r11.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>start-join-sender -- execution: P3149R11 stop-when(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/counting_scope/start-join-sender.html"/>
      <id>53db61c683f848626a88074adb080eb87a69b7c2:reference/execution/execution/counting_scope/start-join-sender.md</id>
      <updated>2025-09-20T17:53:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/counting_scope/start-join-sender.md b/reference/execution/execution/counting_scope/start-join-sender.md
index 9c63f0c07..e011cf86c 100644
--- a/reference/execution/execution/counting_scope/start-join-sender.md
+++ b/reference/execution/execution/counting_scope/start-join-sender.md
@@ -31,12 +31,5 @@ bool start-join-sender(State&amp;amp; st) noexcept; // exposition only
 ### 言語
 - C++26
 
-### 処理系
-- [Clang](/implementation.md#clang): ??
-- [GCC](/implementation.md#gcc): ??
-- [ICC](/implementation.md#icc): ??
-- [Visual C++](/implementation.md#visual_cpp): ??
-
-
 ## 参照
 - [P3149R11 `async_scope` - Creating scopes for non-sequential concurrency](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3149r11.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>wrap -- execution: P3149R11 stop-when(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/counting_scope/token/wrap.html"/>
      <id>53db61c683f848626a88074adb080eb87a69b7c2:reference/execution/execution/counting_scope/token/wrap.md</id>
      <updated>2025-09-20T17:53:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/counting_scope/token/wrap.md b/reference/execution/execution/counting_scope/token/wrap.md
index 0dd93543d..6f76a6d95 100644
--- a/reference/execution/execution/counting_scope/token/wrap.md
+++ b/reference/execution/execution/counting_scope/token/wrap.md
@@ -23,7 +23,7 @@ sender auto wrap(Sender&amp;amp;&amp;amp; snd) const
 ```cpp
 return stop-when(std::forward&amp;lt;Sender&amp;gt;(snd), scope-&amp;gt;s_source.get_token());
 ```
-* stop-when[link stop-when.md.nolink]
+* stop-when[link ../../stop-when.md]
 * get_token()[link /reference/stop_token/stop_source/get_token.md]
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>try-associate -- execution: P3149R11 stop-when(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/counting_scope/try-associate.html"/>
      <id>53db61c683f848626a88074adb080eb87a69b7c2:reference/execution/execution/counting_scope/try-associate.md</id>
      <updated>2025-09-20T17:53:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/counting_scope/try-associate.md b/reference/execution/execution/counting_scope/try-associate.md
index 28f6a5276..592fb90b9 100644
--- a/reference/execution/execution/counting_scope/try-associate.md
+++ b/reference/execution/execution/counting_scope/try-associate.md
@@ -35,12 +35,6 @@ bool try-associate() noexcept; // exposition only
 ### 言語
 - C++26
 
-### 処理系
-- [Clang](/implementation.md#clang): ??
-- [GCC](/implementation.md#gcc): ??
-- [ICC](/implementation.md#icc): ??
-- [Visual C++](/implementation.md#visual_cpp): ??
-
 
 ## 参照
 - [P3149R11 `async_scope` - Creating scopes for non-sequential concurrency](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3149r11.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>disassociate -- execution: P3149R11 stop-when(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/simple_counting_scope/disassociate.html"/>
      <id>53db61c683f848626a88074adb080eb87a69b7c2:reference/execution/execution/simple_counting_scope/disassociate.md</id>
      <updated>2025-09-20T17:53:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/simple_counting_scope/disassociate.md b/reference/execution/execution/simple_counting_scope/disassociate.md
index 52eeca3bc..380f5e7af 100644
--- a/reference/execution/execution/simple_counting_scope/disassociate.md
+++ b/reference/execution/execution/simple_counting_scope/disassociate.md
@@ -31,12 +31,6 @@ void disassociate() noexcept; // exposition only
 ### 言語
 - C++26
 
-### 処理系
-- [Clang](/implementation.md#clang): ??
-- [GCC](/implementation.md#gcc): ??
-- [ICC](/implementation.md#icc): ??
-- [Visual C++](/implementation.md#visual_cpp): ??
-
 
 ## 参照
 - [P3149R11 `async_scope` - Creating scopes for non-sequential concurrency](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3149r11.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>start-join-sender -- execution: P3149R11 stop-when(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/simple_counting_scope/start-join-sender.html"/>
      <id>53db61c683f848626a88074adb080eb87a69b7c2:reference/execution/execution/simple_counting_scope/start-join-sender.md</id>
      <updated>2025-09-20T17:53:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/simple_counting_scope/start-join-sender.md b/reference/execution/execution/simple_counting_scope/start-join-sender.md
index 6adda69eb..cf58d30d9 100644
--- a/reference/execution/execution/simple_counting_scope/start-join-sender.md
+++ b/reference/execution/execution/simple_counting_scope/start-join-sender.md
@@ -31,12 +31,6 @@ bool start-join-sender(State&amp;amp; st) noexcept; // exposition only
 ### 言語
 - C++26
 
-### 処理系
-- [Clang](/implementation.md#clang): ??
-- [GCC](/implementation.md#gcc): ??
-- [ICC](/implementation.md#icc): ??
-- [Visual C++](/implementation.md#visual_cpp): ??
-
 
 ## 参照
 - [P3149R11 `async_scope` - Creating scopes for non-sequential concurrency](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3149r11.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>try-associate -- execution: P3149R11 stop-when(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/simple_counting_scope/try-associate.html"/>
      <id>53db61c683f848626a88074adb080eb87a69b7c2:reference/execution/execution/simple_counting_scope/try-associate.md</id>
      <updated>2025-09-20T17:53:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/simple_counting_scope/try-associate.md b/reference/execution/execution/simple_counting_scope/try-associate.md
index 5f24afbbf..e297576f7 100644
--- a/reference/execution/execution/simple_counting_scope/try-associate.md
+++ b/reference/execution/execution/simple_counting_scope/try-associate.md
@@ -35,12 +35,6 @@ bool try-associate() noexcept; // exposition only
 ### 言語
 - C++26
 
-### 処理系
-- [Clang](/implementation.md#clang): ??
-- [GCC](/implementation.md#gcc): ??
-- [ICC](/implementation.md#icc): ??
-- [Visual C++](/implementation.md#visual_cpp): ??
-
 
 ## 参照
 - [P3149R11 `async_scope` - Creating scopes for non-sequential concurrency](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3149r11.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stop-when -- execution: P3149R11 stop-when(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/stop-when.html"/>
      <id>53db61c683f848626a88074adb080eb87a69b7c2:reference/execution/execution/stop-when.md</id>
      <updated>2025-09-20T17:53:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/stop-when.md b/reference/execution/execution/stop-when.md
new file mode 100644
index 000000000..9c0072e42
--- /dev/null
+++ b/reference/execution/execution/stop-when.md
@@ -0,0 +1,41 @@
+# stop-when
+* execution[meta header]
+* cpo[meta id-type]
+* std::execution[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::execution {
+  inline constexpr unspecified stop-when{};
+}
+```
+* unspecified[italic]
+
+# 概要
+`stop-when`は、入力[Sender](sender.md)に追加の[停止トークン](/reference/stop_token/stop_token.md)を結合したSenderを返す、説明専用のSenderアダプタである。
+
+説明用の式`sndr`と`token`に対して、
+
+- `decltype((sndr))`が[`sender`](sender.md)を満たさない、もしくは[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;decltype((token))&amp;gt;`が[`stoppable_token`](/reference/stop_token/stoppable_token.md)を満たさないとき、式`stop-token(sndr, token)`は不適格となる。
+- そうでなく、[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;decltype((token))&amp;gt;`が[`unstoppable_token`](/reference/stop_token/unstoppable_token.md)のモデルであるとき、式`stop-token(sndr, token)`は`sndr`と等価となる。
+- そうでないとき、式`stop-token(sndr, token)`はSender`osndr`を返す。`osndr`が[Receiver](receiver.md)`r`と[接続(connect)](connect.md)されるとき、[`get_stop_token`](../get_stop_token.md)`(`[`get_env`](get_env.md)`(r))`の結果を`rtoken`とする。
+    - `rtoken`の型が[`unstoppable_token`](/reference/stop_token/unstoppable_token.md)のモデルであるとき、`osdnr`と`r`との接続の効果は[`connect`](connect.md)`(`[`write_env`](write_env.md)`(sndr,` [`prop`](prop.md)`(`[`get_stop_token`](../get_stop_token.md)`, token)), r)`に等しい。
+    - そうでないとき、下記のような説明専用の型`stoken-t`の`stoken`オブジェクトに対して、`osdnr`と`r`との接続の効果は[`connect`](connect.md)`(`[`write_env`](write_env.md)`(sndr,` [`prop`](prop.md)`(`[`get_stop_token`](../get_stop_token.md)`, stoken)), r)`に等しい。
+        - `stoken-t`は[`stoppable_token`](/reference/stop_token/stoppable_token.md)のモデルである。
+        - `stoken.stop_requested()`は`token.stop_requested() || rtoken.stop_requested()`を返す。
+        - `stoken.stop_possible()`は`token.stop_possible() || rtoken.stop_possible()`を返す。
+        - 説明用の型`Fn`と`Init`が[`invocable`](/reference/concepts/invocable.md)`&amp;lt;Fn&amp;gt;`および[`constructible_from`](/reference/concepts/constructible_from.md)`&amp;lt;Fn, Init&amp;gt;`のモデルであるとき、`stoken-t::callback_type&amp;lt;Fn&amp;gt;`は[`stoppable-callback-for`](/reference/stop_token/stoppable_token.md)のモデルである。
+
+
+## バージョン
+### 言語
+- C++26
+
+
+## 関連項目
+- [`execution::spawn_future`](spawn_future.md.nolink)
+- [`execution::counting_scope::token::wrap`](counting_scope/token/wrap.md)
+
+
+## 参照
+- [P3149R11 `async_scope` - Creating scopes for non-sequential concurrency](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3149r11.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>counting_scope -- execution: P3149R11 counting_scope(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/counting_scope.html"/>
      <id>a93a45196f5a34e1fadba9fa861b78070185977a:reference/execution/execution/counting_scope.md</id>
      <updated>2025-09-20T11:23:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/counting_scope.md b/reference/execution/execution/counting_scope.md
index 4819fa15b..986b5a422 100644
--- a/reference/execution/execution/counting_scope.md
+++ b/reference/execution/execution/counting_scope.md
@@ -14,22 +14,29 @@ namespace std::execution {
 `counting_scope`は、停止要求を作成可能なカウント式の非同期スコープを表現する。
 
 
+クラス動作説明用のメンバ変数として下記を保持する。詳細仕様は[`simple_counting_scope`](simple_counting_scope.md)を参照。
+
+- `count` : `size_t`型の関連付けカウント値
+- `state` : `scope-state-type`列挙型（後述）の状態
+-　`s_source` : [`inplace_stop_source`](/reference/stop_token/inplace_stop_source.md)型の停止要求管理オブジェクト
+
+
 ## メンバ関数
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`(constructor)`](counting_scope/op_constructor.md.nolink) | コンストラクタ | C++26 |
-| [`(destructor)`](counting_scope/op_destructor.md.nolink) | デストラクタ | C++26 |
-| [`get_token`](counting_scope/get_token.md.nolink) | 非同期スコープトークンを取得 | C++26 |
-| [`close`](counting_scope/close.md.nolink) | 非同期スコープを閉じる | C++26 |
-| [`join`](counting_scope/join.md.nolink) | 非同期スコープを合流する[Sender](sender.md)取得 | C++26 |
-| [`request_stop`](counting_scope/request_stop.md.nolink) | 停止要求を行う | C++26 |
+| [`(constructor)`](counting_scope/op_constructor.md) | コンストラクタ | C++26 |
+| [`(destructor)`](counting_scope/op_destructor.md) | デストラクタ | C++26 |
+| [`get_token`](counting_scope/get_token.md) | 非同期スコープトークンを取得 | C++26 |
+| [`close`](counting_scope/close.md) | 非同期スコープを閉じる | C++26 |
+| [`join`](counting_scope/join.md) | 非同期スコープを合流する[Sender](sender.md)取得 | C++26 |
+| [`request_stop`](counting_scope/request_stop.md) | 停止要求を作成する | C++26 |
 
 ## メンバ型
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`token`](counting_scope/token.md.nolink) | 非同期スコープトークン型 | C++26 |
+| [`token`](counting_scope/token.md) | 非同期スコープトークン型 | C++26 |
 
 ## 静的メンバ変数
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>close -- execution: P3149R11 counting_scope(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/counting_scope/close.html"/>
      <id>a93a45196f5a34e1fadba9fa861b78070185977a:reference/execution/execution/counting_scope/close.md</id>
      <updated>2025-09-20T11:23:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/counting_scope/close.md b/reference/execution/execution/counting_scope/close.md
new file mode 100644
index 000000000..ea3f53dd9
--- /dev/null
+++ b/reference/execution/execution/counting_scope/close.md
@@ -0,0 +1,45 @@
+# close
+* execution[meta header]
+* std::execution[meta namespace]
+* counting_scope[meta class]
+* function[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+void close() noexcept;
+```
+
+## 概要
+非同期スコープを閉じる。
+
+
+## 効果
+説明用のメンバ変数`state`に応じて、
+
+- `unused`のとき、`state`を`unused-and-closed`に変更する。
+- `open`のとき、`state`を`closed`に変更する。
+- `open-and-joining`のとき、`state`を`closed-and-joining`に変更する。
+- それ以外のとき、何もしない。
+
+
+## 事後条件
+`*this`に対する後続の[`try-associate`](try-associate.md)は`false`を返す。
+
+
+## 例外
+投げない
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P3149R11 `async_scope` - Creating scopes for non-sequential concurrency](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3149r11.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>disassociate -- execution: P3149R11 counting_scope(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/counting_scope/disassociate.html"/>
      <id>a93a45196f5a34e1fadba9fa861b78070185977a:reference/execution/execution/counting_scope/disassociate.md</id>
      <updated>2025-09-20T11:23:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/counting_scope/disassociate.md b/reference/execution/execution/counting_scope/disassociate.md
new file mode 100644
index 000000000..dcb449a86
--- /dev/null
+++ b/reference/execution/execution/counting_scope/disassociate.md
@@ -0,0 +1,42 @@
+# disassociate
+* execution[meta header]
+* std::execution[meta namespace]
+* counting_scope[meta class]
+* function[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+void disassociate() noexcept; // exposition only
+```
+
+## 概要
+非同期スコープとの関連付けを解除する、説明専用のメンバ関数。
+非同期トークン型[`token`](token.md)の[`disassociate`](token/disassociate.md)メンバ動作を定義する。
+
+
+## 事前条件
+説明用のメンバ変数`count`は`0`より大きい。
+
+
+## 効果
+`count`をデクリメントする。
+デクリメント後の`count == 0`、かつ説明用のメンバ変数`state`が`open-and-joining`または`closed-and-joining`のとき、`state`を`joined`に変更し、`*this`に登録された全てのオブジェクトで`complete()`を呼び出す。
+
+
+## 例外
+投げない
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P3149R11 `async_scope` - Creating scopes for non-sequential concurrency](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3149r11.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>get_token -- execution: P3149R11 counting_scope(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/counting_scope/get_token.html"/>
      <id>a93a45196f5a34e1fadba9fa861b78070185977a:reference/execution/execution/counting_scope/get_token.md</id>
      <updated>2025-09-20T11:23:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/counting_scope/get_token.md b/reference/execution/execution/counting_scope/get_token.md
new file mode 100644
index 000000000..b04a8f733
--- /dev/null
+++ b/reference/execution/execution/counting_scope/get_token.md
@@ -0,0 +1,37 @@
+# get_token
+* execution[meta header]
+* std::execution[meta namespace]
+* counting_scope[meta class]
+* function[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+token get_token() noexcept;
+```
+* token[link token.md]
+
+## 概要
+非同期スコープの[非同期スコープトークン](token.md)を取得する。
+
+
+## 戻り値
+[`counting_scope::token`](token.md)型で`t.scope == this`となるオブジェクト`t`を返す。
+
+
+## 例外
+投げない
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P3149R11 `async_scope` - Creating scopes for non-sequential concurrency](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3149r11.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>join -- execution: P3149R11 counting_scope(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/counting_scope/join.html"/>
      <id>a93a45196f5a34e1fadba9fa861b78070185977a:reference/execution/execution/counting_scope/join.md</id>
      <updated>2025-09-20T11:23:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/counting_scope/join.md b/reference/execution/execution/counting_scope/join.md
new file mode 100644
index 000000000..2ec82dfa5
--- /dev/null
+++ b/reference/execution/execution/counting_scope/join.md
@@ -0,0 +1,37 @@
+# join
+* execution[meta header]
+* std::execution[meta namespace]
+* counting_scope[meta class]
+* function[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+sender auto join() noexcept;
+```
+* sender[link ../sender.md]
+
+## 概要
+非同期スコープを合流する[Sender](../sender.md)を取得する。
+
+
+## 戻り値
+[`make-sender`](../make-sender.md)`(`[`scope-join-t`](../simple_counting_scope.md)`(), this)`
+
+
+## 例外
+投げない
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P3149R11 `async_scope` - Creating scopes for non-sequential concurrency](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3149r11.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- execution: P3149R11 counting_scope(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/counting_scope/op_constructor.html"/>
      <id>a93a45196f5a34e1fadba9fa861b78070185977a:reference/execution/execution/counting_scope/op_constructor.md</id>
      <updated>2025-09-20T11:23:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/counting_scope/op_constructor.md b/reference/execution/execution/counting_scope/op_constructor.md
new file mode 100644
index 000000000..ca8067fb7
--- /dev/null
+++ b/reference/execution/execution/counting_scope/op_constructor.md
@@ -0,0 +1,38 @@
+# コンストラクタ
+* execution[meta header]
+* std::execution[meta namespace]
+* counting_scope[meta class]
+* function[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+counting_scope() noexcept;  // (1)
+counting_scope(counting_scope&amp;amp;&amp;amp;) = delete;  // (2)
+```
+
+## 概要
+- (1): デフォルトコンストラクタ
+- (2): ムーブコンストラクタ。ムーブ不可
+
+
+## 事後条件
+(1) 説明用のメンバ変数`count`は`0`、`state`は`unused`となる。
+
+
+## 例外
+投げない
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P3149R11 `async_scope` - Creating scopes for non-sequential concurrency](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3149r11.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>デストラクタ -- execution: P3149R11 counting_scope(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/counting_scope/op_destructor.html"/>
      <id>a93a45196f5a34e1fadba9fa861b78070185977a:reference/execution/execution/counting_scope/op_destructor.md</id>
      <updated>2025-09-20T11:23:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/counting_scope/op_destructor.md b/reference/execution/execution/counting_scope/op_destructor.md
new file mode 100644
index 000000000..a6d00b46a
--- /dev/null
+++ b/reference/execution/execution/counting_scope/op_destructor.md
@@ -0,0 +1,33 @@
+# デストラクタ
+* execution[meta header]
+* std::execution[meta namespace]
+* counting_scope[meta class]
+* function[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+~counting_scope();
+```
+
+## 概要
+デストラクタ
+
+
+## 効果
+説明用のメンバ変数`state`が`joined`, `unused`, `unused-and-closed`のいずれでもなければ、[`terminate`](/reference/exception/terminate.md)を呼び出す。
+そうでなければ、何もしない。
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P3149R11 `async_scope` - Creating scopes for non-sequential concurrency](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3149r11.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>request_stop -- execution: P3149R11 counting_scope(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/counting_scope/request_stop.html"/>
      <id>a93a45196f5a34e1fadba9fa861b78070185977a:reference/execution/execution/counting_scope/request_stop.md</id>
      <updated>2025-09-20T11:23:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/counting_scope/request_stop.md b/reference/execution/execution/counting_scope/request_stop.md
new file mode 100644
index 000000000..c3cc6e720
--- /dev/null
+++ b/reference/execution/execution/counting_scope/request_stop.md
@@ -0,0 +1,40 @@
+# request_stop
+* execution[meta header]
+* std::execution[meta namespace]
+* counting_scope[meta class]
+* function[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+void request_stop() noexcept;
+```
+
+## 概要
+非同期スコープ上で停止要求を作成する。
+
+
+## 効果
+`s_source.`[`request_stop()`](/reference/stop_token/inplace_stop_source/request_stop.md)
+
+
+## 例外
+投げない
+
+
+## 備考
+`request_stop`の呼び出しはデータ競合を引き起こさない。
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P3149R11 `async_scope` - Creating scopes for non-sequential concurrency](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3149r11.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>start-join-sender -- execution: P3149R11 counting_scope(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/counting_scope/start-join-sender.html"/>
      <id>a93a45196f5a34e1fadba9fa861b78070185977a:reference/execution/execution/counting_scope/start-join-sender.md</id>
      <updated>2025-09-20T11:23:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/counting_scope/start-join-sender.md b/reference/execution/execution/counting_scope/start-join-sender.md
new file mode 100644
index 000000000..9c63f0c07
--- /dev/null
+++ b/reference/execution/execution/counting_scope/start-join-sender.md
@@ -0,0 +1,42 @@
+# start-join-sender
+* execution[meta header]
+* std::execution[meta namespace]
+* counting_scope[meta class]
+* function template[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+template&amp;lt;class State&amp;gt;
+bool start-join-sender(State&amp;amp; st) noexcept; // exposition only
+```
+
+## 概要
+合流[Sender](../sender.md)を開始する、説明専用のメンバ関数。
+[`join`](join.md)メンバ関数が返す合流Sender動作を定義する。
+
+
+## 効果
+説明用のメンバ変数`state`に応じて、
+
+- `unused`, `unused-and-closed`, `joined`のとき、`state`を`joined`に変更して`true`を返す。
+- `open`, `open-and-joining`のとき、`state`を`open-and-joining`に変更し、`*this`で`st`を登録して`false`を返す。
+- `closed`, `closed-and-joining`のとき、`state`を`closed-and-joining`に変更し、`*this`で`st`を登録して`false`を返す。
+
+
+## 例外
+投げない
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P3149R11 `async_scope` - Creating scopes for non-sequential concurrency](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3149r11.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>token -- execution: P3149R11 counting_scope(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/counting_scope/token.html"/>
      <id>a93a45196f5a34e1fadba9fa861b78070185977a:reference/execution/execution/counting_scope/token.md</id>
      <updated>2025-09-20T11:23:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/counting_scope/token.md b/reference/execution/execution/counting_scope/token.md
new file mode 100644
index 000000000..222650238
--- /dev/null
+++ b/reference/execution/execution/counting_scope/token.md
@@ -0,0 +1,48 @@
+# token
+* execution[meta header]
+* std::execution[meta namespace]
+* counting_scope[meta class]
+* class[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::execution {
+  class counting_scope::token;
+}
+```
+
+## 概要
+`counting_scope::token`は、カウント式非同期スコープの[非同期トークン](../scope_token.md)である。
+非同期トークンは非同期スコープを参照する軽量ハンドラとして振る舞う。
+
+クラス動作説明用のメンバ変数として下記を保持する。
+
+- `scope` : [`counting_scope`](../counting_scope.md)型の非同期スコープ
+
+
+## メンバ関数
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`wrap`](token/wrap.md) | 非同期スコープと[Sender](../sender.md)を関連付けたSenderを返す | C++26 |
+| [`try_associate`](token/try_associate.md) | 非同期スコープとの関連付けを試行 | C++26 |
+| [`disassociate`](token/disassociate.md) | 非同期スコープとの関連付けを解除 | C++26 |
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution::scope_token`](../scope_token.md)
+
+
+## 参照
+- [P3149R11 `async_scope` - Creating scopes for non-sequential concurrency](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3149r11.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>disassociate -- execution: P3149R11 counting_scope(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/counting_scope/token/disassociate.html"/>
      <id>a93a45196f5a34e1fadba9fa861b78070185977a:reference/execution/execution/counting_scope/token/disassociate.md</id>
      <updated>2025-09-20T11:23:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/counting_scope/token/disassociate.md b/reference/execution/execution/counting_scope/token/disassociate.md
new file mode 100644
index 000000000..164c4e12b
--- /dev/null
+++ b/reference/execution/execution/counting_scope/token/disassociate.md
@@ -0,0 +1,47 @@
+# disassociate
+* execution[meta header]
+* function[meta id-type]
+* std::execution[meta namespace]
+* counting_scope::token[meta class]
+* cpp26[meta cpp]
+
+```cpp
+void disassociate() const noexcept;
+```
+
+## 概要
+非同期スコープとの関連付けを解除する。
+
+
+## 効果
+下記と等価。
+
+```cpp
+scope-&amp;gt;disassociate()
+```
+* disassociate[link ../disassociate.md]
+
+
+## 例外
+投げない
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution::associate`](../../associate.md.nolink)
+- [`execution::spawn_future`](../../spawn_future.md.nolink)
+- [`execution::spawn`](../../spawn.md.nolink)
+
+
+## 参照
+- [P3149R11 `async_scope` - Creating scopes for non-sequential concurrency](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3149r11.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>try_associate -- execution: P3149R11 counting_scope(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/counting_scope/token/try_associate.html"/>
      <id>a93a45196f5a34e1fadba9fa861b78070185977a:reference/execution/execution/counting_scope/token/try_associate.md</id>
      <updated>2025-09-20T11:23:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/counting_scope/token/try_associate.md b/reference/execution/execution/counting_scope/token/try_associate.md
new file mode 100644
index 000000000..0d4dc5a4b
--- /dev/null
+++ b/reference/execution/execution/counting_scope/token/try_associate.md
@@ -0,0 +1,47 @@
+# try_associate
+* execution[meta header]
+* function[meta id-type]
+* std::execution[meta namespace]
+* counting_scope::token[meta class]
+* cpp26[meta cpp]
+
+```cpp
+bool try_associate() const noexcept;
+```
+
+## 概要
+非同期スコープとの関連付けを試行する。
+
+
+## 効果
+下記と等価。
+
+```cpp
+return scope-&amp;gt;try-associate();
+```
+* try-associate[link ../try-associate.md]
+
+
+## 例外
+投げない
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution::associate`](../../associate.md.nolink)
+- [`execution::spawn_future`](../../spawn_future.md.nolink)
+- [`execution::spawn`](../../spawn.md.nolink)
+
+
+## 参照
+- [P3149R11 `async_scope` - Creating scopes for non-sequential concurrency](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3149r11.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>wrap -- execution: P3149R11 counting_scope(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/counting_scope/token/wrap.html"/>
      <id>a93a45196f5a34e1fadba9fa861b78070185977a:reference/execution/execution/counting_scope/token/wrap.md</id>
      <updated>2025-09-20T11:23:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/counting_scope/token/wrap.md b/reference/execution/execution/counting_scope/token/wrap.md
new file mode 100644
index 000000000..0dd93543d
--- /dev/null
+++ b/reference/execution/execution/counting_scope/token/wrap.md
@@ -0,0 +1,48 @@
+# wrap
+* execution[meta header]
+* function template[meta id-type]
+* std::execution[meta namespace]
+* counting_scope::token[meta class]
+* cpp26[meta cpp]
+
+```cpp
+template&amp;lt;sender Sender&amp;gt;
+sender auto wrap(Sender&amp;amp;&amp;amp; snd) const
+  noexcept(is_nothrow_constructible_v&amp;lt;remove_cvref_t&amp;lt;Sender&amp;gt;, Sender&amp;gt;);
+```
+* sender[link ../../sender.md]
+* is_nothrow_constructible_v[link /reference/type_traits/is_nothrow_constructible.md]
+
+## 概要
+入力[Sender](../../sender.md)を非同期スコープに関連付けたSenderを返す。
+
+
+## 効果
+下記と等価。
+
+```cpp
+return stop-when(std::forward&amp;lt;Sender&amp;gt;(snd), scope-&amp;gt;s_source.get_token());
+```
+* stop-when[link stop-when.md.nolink]
+* get_token()[link /reference/stop_token/stop_source/get_token.md]
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution::associate`](../../associate.md.nolink)
+- [`execution::spawn_future`](../../spawn_future.md.nolink)
+- [`execution::spawn`](../../spawn.md.nolink)
+
+
+## 参照
+- [P3149R11 `async_scope` - Creating scopes for non-sequential concurrency](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3149r11.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>try-associate -- execution: P3149R11 counting_scope(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/counting_scope/try-associate.html"/>
      <id>a93a45196f5a34e1fadba9fa861b78070185977a:reference/execution/execution/counting_scope/try-associate.md</id>
      <updated>2025-09-20T11:23:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/counting_scope/try-associate.md b/reference/execution/execution/counting_scope/try-associate.md
new file mode 100644
index 000000000..28f6a5276
--- /dev/null
+++ b/reference/execution/execution/counting_scope/try-associate.md
@@ -0,0 +1,46 @@
+# try-associate
+* execution[meta header]
+* std::execution[meta namespace]
+* counting_scope[meta class]
+* function[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+bool try-associate() noexcept; // exposition only
+```
+
+## 概要
+非同期スコープとの関連付けを試行する、説明専用のメンバ関数。
+非同期トークン型[`token`](token.md)の[`try_associate`](token/try_associate.md)メンバ動作を定義する。
+
+
+## 効果
+説明用のメンバ変数`count`が`max_associations`と等しいとき、何もしない。
+そうでなければ、説明用のメンバ変数`state`に応じて、
+
+- `unused`のとき、`count`をインクリメントし、`state`を`open`に変更する。
+- `open`または`open-and-joining`のとき、`count`をインクリメントする。
+- それ以外のとき、何もしない。
+
+
+## 戻り値
+`count`がインクリメントされたとき、`true`を返す。それ以外のときは、`false`を返す。
+
+
+## 例外
+投げない
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P3149R11 `async_scope` - Creating scopes for non-sequential concurrency](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3149r11.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>simple_counting_scope -- execution: P3149R11 counting_scope(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/simple_counting_scope.html"/>
      <id>a93a45196f5a34e1fadba9fa861b78070185977a:reference/execution/execution/simple_counting_scope.md</id>
      <updated>2025-09-20T11:23:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/simple_counting_scope.md b/reference/execution/execution/simple_counting_scope.md
index 5afaa2c60..5b90d5f38 100644
--- a/reference/execution/execution/simple_counting_scope.md
+++ b/reference/execution/execution/simple_counting_scope.md
@@ -26,7 +26,7 @@ namespace std::execution {
 ### 状態遷移
 説明専用の各種エンティティを下記の通り定義する。
 
-- `Scope`型 : `simple_counting_scope`または`counting_scope`のいずれか
+- `Scope`型 : `simple_counting_scope`または[`counting_scope`](counting_scope.md)のいずれか
 - `scope`オブジェクト : `Scope`型のオブジェクト
 - `tkn`オブジェクト : `scope.get_token()`が返す`Scope::token`型のオブジェクト
 - `jsndr` : `scope.join()`が返す[Sender](sender.md)
@@ -56,7 +56,7 @@ enum scope-state-type {  // exposition only
 
 
 ### Senderアルゴリズムタグ `scope-join-t`
-説明専用の[Senderアルゴリズムタグ型](tag_of_t.md)`scope-join-t`を定義する。
+[`join`](simple_counting_scope/join.md)メンバ関数が返す合流Sender動作仕様を記述するため、説明専用の[Senderアルゴリズムタグ型](tag_of_t.md)`scope-join-t`を定義する。
 
 ```cpp
 struct scope-join-t {};  // exposition only
@@ -80,9 +80,9 @@ namespace std::execution {
         }
 
         template&amp;lt;class E&amp;gt;
-          void set_error(E&amp;amp;&amp;amp; e) &amp;amp;&amp;amp; noexcept {
-            execution::set_error(std::move(rcvr), std::forward&amp;lt;E&amp;gt;(e));
-          }
+        void set_error(E&amp;amp;&amp;amp; e) &amp;amp;&amp;amp; noexcept {
+          execution::set_error(std::move(rcvr), std::forward&amp;lt;E&amp;gt;(e));
+        }
 
         void set_stopped() &amp;amp;&amp;amp; noexcept {
           execution::set_stopped(std::move(rcvr));
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>disassociate -- execution: P3149R11 counting_scope(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/simple_counting_scope/disassociate.html"/>
      <id>a93a45196f5a34e1fadba9fa861b78070185977a:reference/execution/execution/simple_counting_scope/disassociate.md</id>
      <updated>2025-09-20T11:23:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/simple_counting_scope/disassociate.md b/reference/execution/execution/simple_counting_scope/disassociate.md
index 8d8f73683..52eeca3bc 100644
--- a/reference/execution/execution/simple_counting_scope/disassociate.md
+++ b/reference/execution/execution/simple_counting_scope/disassociate.md
@@ -11,7 +11,7 @@ void disassociate() noexcept; // exposition only
 
 ## 概要
 非同期スコープとの関連付けを解除する、説明専用のメンバ関数。
-非同期トークン型[`token`]の[`disassociate`](token/disassociate.md)メンバ動作を定義する。
+非同期トークン型[`token`](token.md)の[`disassociate`](token/disassociate.md)メンバ動作を定義する。
 
 
 ## 事前条件
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>start-join-sender -- execution: P3149R11 counting_scope(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/simple_counting_scope/start-join-sender.html"/>
      <id>a93a45196f5a34e1fadba9fa861b78070185977a:reference/execution/execution/simple_counting_scope/start-join-sender.md</id>
      <updated>2025-09-20T11:23:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/simple_counting_scope/start-join-sender.md b/reference/execution/execution/simple_counting_scope/start-join-sender.md
index 1b5b265b3..6adda69eb 100644
--- a/reference/execution/execution/simple_counting_scope/start-join-sender.md
+++ b/reference/execution/execution/simple_counting_scope/start-join-sender.md
@@ -12,6 +12,7 @@ bool start-join-sender(State&amp;amp; st) noexcept; // exposition only
 
 ## 概要
 合流[Sender](../sender.md)を開始する、説明専用のメンバ関数。
+[`join`](join.md)メンバ関数が返す合流Sender動作を定義する。
 
 
 ## 効果
@@ -19,7 +20,7 @@ bool start-join-sender(State&amp;amp; st) noexcept; // exposition only
 
 - `unused`, `unused-and-closed`, `joined`のとき、`state`を`joined`に変更して`true`を返す。
 - `open`, `open-and-joining`のとき、`state`を`open-and-joining`に変更し、`*this`で`st`を登録して`false`を返す。
-- `closed`, `closed-and-joingin`のとき、`state`を`closed-and-joining`に変更し、`*this`で`st`を登録して`false`を返す。
+- `closed`, `closed-and-joining`のとき、`state`を`closed-and-joining`に変更し、`*this`で`st`を登録して`false`を返す。
 
 
 ## 例外
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>token -- execution: P3149R11 counting_scope(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/simple_counting_scope/token.html"/>
      <id>a93a45196f5a34e1fadba9fa861b78070185977a:reference/execution/execution/simple_counting_scope/token.md</id>
      <updated>2025-09-20T11:23:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/simple_counting_scope/token.md b/reference/execution/execution/simple_counting_scope/token.md
index a32ff7d16..1542b149d 100644
--- a/reference/execution/execution/simple_counting_scope/token.md
+++ b/reference/execution/execution/simple_counting_scope/token.md
@@ -13,6 +13,7 @@ namespace std::execution {
 
 ## 概要
 `simple_counting_scope::token`は、カウント式非同期スコープの[非同期トークン](../scope_token.md)である。
+非同期トークンは非同期スコープを参照する軽量ハンドラとして振る舞う。
 
 クラス動作説明用のメンバ変数として下記を保持する。
 
@@ -23,7 +24,7 @@ namespace std::execution {
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`wrap`](token/wrap.md) | 非同期スコープと[Sender](../sender.md)関連付けたSenderを返す | C++26 |
+| [`wrap`](token/wrap.md) | 非同期スコープと[Sender](../sender.md)を関連付けたSenderを返す | C++26 |
 | [`try_associate`](token/try_associate.md) | 非同期スコープとの関連付けを試行 | C++26 |
 | [`disassociate`](token/disassociate.md) | 非同期スコープとの関連付けを解除 | C++26 |
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>wrap -- execution: P3149R11 counting_scope(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/simple_counting_scope/token/wrap.html"/>
      <id>a93a45196f5a34e1fadba9fa861b78070185977a:reference/execution/execution/simple_counting_scope/token/wrap.md</id>
      <updated>2025-09-20T11:23:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/simple_counting_scope/token/wrap.md b/reference/execution/execution/simple_counting_scope/token/wrap.md
index a873ba32c..ce95016e5 100644
--- a/reference/execution/execution/simple_counting_scope/token/wrap.md
+++ b/reference/execution/execution/simple_counting_scope/token/wrap.md
@@ -9,6 +9,7 @@
 template&amp;lt;sender Sender&amp;gt;
 Sender&amp;amp;&amp;amp; wrap(Sender&amp;amp;&amp;amp; snd) const noexcept;
 ```
+* sender[link ../../sender.md]
 
 ## 概要
 入力[Sender](../../sender.md)を非同期スコープに関連付けたSenderを返す。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>try-associate -- execution: P3149R11 counting_scope(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/simple_counting_scope/try-associate.html"/>
      <id>a93a45196f5a34e1fadba9fa861b78070185977a:reference/execution/execution/simple_counting_scope/try-associate.md</id>
      <updated>2025-09-20T11:23:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/simple_counting_scope/try-associate.md b/reference/execution/execution/simple_counting_scope/try-associate.md
index 0166940cf..5f24afbbf 100644
--- a/reference/execution/execution/simple_counting_scope/try-associate.md
+++ b/reference/execution/execution/simple_counting_scope/try-associate.md
@@ -11,7 +11,7 @@ bool try-associate() noexcept; // exposition only
 
 ## 概要
 非同期スコープとの関連付けを試行する、説明専用のメンバ関数。
-非同期トークン型[`token`]の[`try_associate`](token/try_associate.md)メンバ動作を定義する。
+非同期トークン型[`token`](token.md)の[`try_associate`](token/try_associate.md)メンバ動作を定義する。
 
 
 ## 効果
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
</feed>
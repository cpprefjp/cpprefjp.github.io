<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2022-07-20T04:18:46.899629</updated>
  <id>a59b0d34-3849-43ca-af20-2134e83d230f</id>

  
    <entry>
      <title>copy_backward -- Merge pull request #983 from pea-sys/patch-1</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_copy_backward.html"/>
      <id>35b5794806a9d0b4b386a7e3ca1c21d39278a6e8:reference/algorithm/ranges_copy_backward.md</id>
      <updated>2022-07-20T13:13:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_copy_backward.md b/reference/algorithm/ranges_copy_backward.md
index 3cbeaf640..653eaa176 100644
--- a/reference/algorithm/ranges_copy_backward.md
+++ b/reference/algorithm/ranges_copy_backward.md
@@ -62,20 +62,19 @@ copy_backward_result {
 #include &amp;lt;algorithm&amp;gt;
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;list&amp;gt;
-#include &amp;lt;iterator&amp;gt;
 
 int main() {
   std::list&amp;lt;int&amp;gt; ls = { 1,2,3,4,5 };
   // 1,2,3 の範囲を、3,4,5 の値のある範囲へコピーする
-  std::copy_backward(ls.begin(), std::next(ls.begin(), 3), ls.end());
+  std::ranges::copy_backward(ls.begin(), std::next(ls.begin(), 3), ls.end());
 
   // 以下のコードだと期待した結果にならないことを確認しよう
-  // std::copy(ls.begin(), std::next(ls.begin(), 3), std::next(ls.begin(), 2));
+  // std::ranges::copy(ls.begin(), std::next(ls.begin(), 3), std::next(ls.begin(), 2));
 
-  std::copy(ls.begin(), ls.end(), std::ostream_iterator&amp;lt;int&amp;gt;(std::cout, &amp;#34;,&amp;#34;));
+  std::ranges::copy(ls.begin(), ls.end(), std::ostream_iterator&amp;lt;int&amp;gt;(std::cout, &amp;#34;,&amp;#34;));
 }
 ```
-* std::copy_backward[color ff0000]
+* std::ranges::copy_backward[color ff0000]
 * ls.begin()[link /reference/list/list/begin.md]
 * std::next[link /reference/iterator/next.md]
 * ls.end()[link /reference/list/list/end.md]
@@ -86,18 +85,6 @@ int main() {
 ```
 
 
-## 実装例
-```cpp
-template &amp;lt;class BidirectionalIterator1, class BidirectionalIterator2&amp;gt;
-BidirectionalIterator2 copy_backward(BidirectionalIterator1 first,
-                                     BidirectionalIterator1 last,
-                                     BidirectionalIterator2 result) {
-  while (first != last)
-    *--result = *--last;
-  return result;
-}
-```
-
 ## バージョン
 ### 言語
 - C++20
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>three_way_comparable -- three_way_comparable : 意味論要件修正</title>
      <link href="https://cpprefjp.github.io/reference/compare/three_way_comparable.html"/>
      <id>cc5a6954ce45004dd8752bcf3431f835d84b5ea4:reference/compare/three_way_comparable.md</id>
      <updated>2022-07-20T02:24:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/compare/three_way_comparable.md b/reference/compare/three_way_comparable.md
index a4e0a7455..72320ca38 100644
--- a/reference/compare/three_way_comparable.md
+++ b/reference/compare/three_way_comparable.md
@@ -91,7 +91,7 @@ concept three_way_comparable_with =
 - (1) : `const remove_reference_t&amp;lt;T&amp;gt;`の左辺値`a, b`について次の条件を満たす場合に限って、型`T, Cat`は`three_way_comparable`のモデルである
     - `(a &amp;lt;=&amp;gt; b == 0) == bool(a == b)`が`true`であること
     - `(a &amp;lt;=&amp;gt; b != 0) == bool(a != b)`が`true`であること
-    - `((a &amp;lt;=&amp;gt; b) &amp;lt;=&amp;gt; 0) == (0 &amp;lt;=&amp;gt; (a &amp;lt;=&amp;gt; b))`が等値
+    - `((a &amp;lt;=&amp;gt; b) &amp;lt;=&amp;gt; 0)`と`(0 &amp;lt;=&amp;gt; (a &amp;lt;=&amp;gt; b))`が等値
     - `(a &amp;lt;=&amp;gt; b &amp;lt; 0) == bool(a &amp;lt; b)`が`true`であること
     - `(a &amp;lt;=&amp;gt; b &amp;gt; 0) == bool(a &amp;gt; b)`が`true`であること
     - `(a &amp;lt;=&amp;gt; b &amp;lt;= 0) == bool(a &amp;lt;= b)`が`true`であること
@@ -101,7 +101,7 @@ concept three_way_comparable_with =
   
 - (2) : `const remove_reference_t&amp;lt;T&amp;gt;, const remove_reference_t&amp;lt;U&amp;gt;`の左辺値`t, u`、`C = common_reference_t&amp;lt;const remove_reference_t&amp;lt;T&amp;gt;&amp;amp;, const remove_reference_t&amp;lt;U&amp;gt;&amp;amp;&amp;gt;`について次の条件を満たす場合に限って、型`T, U, Cat`は`three_way_comparable_with`のモデルである
     - `t &amp;lt;=&amp;gt; u`と`u &amp;lt;=&amp;gt; t`が同じ[定義域](/reference/concepts.md)を持つ
-    - `((t &amp;lt;=&amp;gt; u) &amp;lt;=&amp;gt; 0) == (0 &amp;lt;=&amp;gt; (t &amp;lt;=&amp;gt; u))`が等値
+    - `((t &amp;lt;=&amp;gt; u) &amp;lt;=&amp;gt; 0)`と`(0 &amp;lt;=&amp;gt; (t &amp;lt;=&amp;gt; u))`が等値
     - `(t &amp;lt;=&amp;gt; u == 0) == bool(t == u)`が`true`であること
     - `(t &amp;lt;=&amp;gt; u != 0) == bool(t != u)`が`true`であること
     - `Cat(t &amp;lt;=&amp;gt; u) == Cat(C(t) &amp;lt;=&amp;gt; C(u))`が`true`であること
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>copy_backward -- Update ranges_copy_backward.md</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_copy_backward.html"/>
      <id>74c308eeb3f7e75cd6bb5193800d93c169603ee1:reference/algorithm/ranges_copy_backward.md</id>
      <updated>2022-07-19T22:35:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_copy_backward.md b/reference/algorithm/ranges_copy_backward.md
index 3cbeaf640..653eaa176 100644
--- a/reference/algorithm/ranges_copy_backward.md
+++ b/reference/algorithm/ranges_copy_backward.md
@@ -62,20 +62,19 @@ copy_backward_result {
 #include &amp;lt;algorithm&amp;gt;
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;list&amp;gt;
-#include &amp;lt;iterator&amp;gt;
 
 int main() {
   std::list&amp;lt;int&amp;gt; ls = { 1,2,3,4,5 };
   // 1,2,3 の範囲を、3,4,5 の値のある範囲へコピーする
-  std::copy_backward(ls.begin(), std::next(ls.begin(), 3), ls.end());
+  std::ranges::copy_backward(ls.begin(), std::next(ls.begin(), 3), ls.end());
 
   // 以下のコードだと期待した結果にならないことを確認しよう
-  // std::copy(ls.begin(), std::next(ls.begin(), 3), std::next(ls.begin(), 2));
+  // std::ranges::copy(ls.begin(), std::next(ls.begin(), 3), std::next(ls.begin(), 2));
 
-  std::copy(ls.begin(), ls.end(), std::ostream_iterator&amp;lt;int&amp;gt;(std::cout, &amp;#34;,&amp;#34;));
+  std::ranges::copy(ls.begin(), ls.end(), std::ostream_iterator&amp;lt;int&amp;gt;(std::cout, &amp;#34;,&amp;#34;));
 }
 ```
-* std::copy_backward[color ff0000]
+* std::ranges::copy_backward[color ff0000]
 * ls.begin()[link /reference/list/list/begin.md]
 * std::next[link /reference/iterator/next.md]
 * ls.end()[link /reference/list/list/end.md]
@@ -86,18 +85,6 @@ int main() {
 ```
 
 
-## 実装例
-```cpp
-template &amp;lt;class BidirectionalIterator1, class BidirectionalIterator2&amp;gt;
-BidirectionalIterator2 copy_backward(BidirectionalIterator1 first,
-                                     BidirectionalIterator1 last,
-                                     BidirectionalIterator2 result) {
-  while (first != last)
-    *--result = *--last;
-  return result;
-}
-```
-
 ## バージョン
 ### 言語
 - C++20
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>pea-sys</name>
        <email>49807271+pea-sys@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>convertible_to -- convertible_to : 意味論要件を修正</title>
      <link href="https://cpprefjp.github.io/reference/concepts/convertible_to.html"/>
      <id>6360867a1f9b313a4b4f84bc8b75a231bfd341ea:reference/concepts/convertible_to.md</id>
      <updated>2022-07-19T18:42:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/concepts/convertible_to.md b/reference/concepts/convertible_to.md
index 1b4a82011..b6be42623 100644
--- a/reference/concepts/convertible_to.md
+++ b/reference/concepts/convertible_to.md
@@ -25,28 +25,27 @@ namespace std {
 
 ## モデル
 
-`FromR = add_rvalue_reference_t&amp;lt;From&amp;gt;`として、説明のための関数`test(), f()`を以下のように定義、宣言する。
+`FromR = add_rvalue_reference_t&amp;lt;From&amp;gt;`として、説明のための関数`test()`を以下のように定義する。
 
 ```cpp
-To test(FromR (&amp;amp;func)()) {
-  return func();
+To test(FromR (&amp;amp;f)()) {
+  return f();
 }
-
-FromR f();
 ```
 
-この`test()`関数、型`FromR, To`及び、[等しさを保持](/reference/concepts.md)し`FromR`型を返す引数なしの関数`f`について、以下の条件を満たす場合に限って型`From, To`は`convertible_to`のモデルである。
+この`f`は引数をとらず`FromR`を返す関数であり、`f()`の呼び出しは[等しさを保持](/reference/concepts.md)する。
+
+この`test()`と`FromR, To`について、以下の条件を満たす場合に限って型`From, To`は`convertible_to`のモデルである。
 
 - 次のどちらかを満たす
     - `To`は[オブジェクト型](/reference/type_traits/is_object.md)でもオブジェクトへの参照型でもない
     - `static_cast&amp;lt;To&amp;gt;(f())`と`test(f)`は等しい
-- 次のいずれかを満たす
-    - `FromR`はオブジェクトへの参照型ではない
-    - `FromR`が非`const`右辺値参照型の場合、`f()`の呼び出しによって参照されるオブジェクトの状態は、上記の式の実行の後でも有効だが未規定となる
+- `FromR`がオブジェクトへの参照型ではない場合、次のどちらかを満たす
+    - `FromR`が非`const`右辺値参照型の場合、`f()`の呼び出しによって参照されるオブジェクトの状態は、上記の式の実行の後で有効だが未規定となる
         - 標準ライブラリの型のオブジェクトは特に指定がない場合、ムーブされた後の状態は有効だが未規定となる
-    - `f()`の呼び出しによって参照されるオブジェクトは上記の式の実行によって変更されない
+    - それ以外の場合、`f()`の呼び出しによって参照されるオブジェクトは上記の式の実行によって変更されない
 
-2つ目のor条件列に出てくる「上記の式」とは、`static_cast&amp;lt;To&amp;gt;(f())`と`test(f)`のこと。
+2つ目の条件内に出てくる「上記の式」とは、`static_cast&amp;lt;To&amp;gt;(f())`と`test(f)`のこと。
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- path::operator== : equivalentについて追記</title>
      <link href="https://cpprefjp.github.io/reference/filesystem/path/op_equal.html"/>
      <id>8916c59afde174e282c65bc803f0e9a4c5b745a3:reference/filesystem/path/op_equal.md</id>
      <updated>2022-07-19T17:10:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/filesystem/path/op_equal.md b/reference/filesystem/path/op_equal.md
index ee2ebe1c8..8f8b81b79 100644
--- a/reference/filesystem/path/op_equal.md
+++ b/reference/filesystem/path/op_equal.md
@@ -23,6 +23,7 @@ return !(lhs &amp;lt; rhs) &amp;amp;&amp;amp; !(rhs &amp;lt; lhs);
 ## 備考
 `lhs.`[`compare`](compare.md)`(rhs) == 0`と等価
 
+この演算子はパス要素列の等価性を判定するため、パスが意味的に同一かどうかを判定することはできない。パス文字列の意味的な等価性判定には、[filesystem::equivalent()](/reference/filesystem/equivalent.md)を使用する。
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
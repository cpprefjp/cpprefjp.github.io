<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-02-10T14:39:56.398950</updated>
  <id>69733a4b-271f-4abf-a78e-2002cd1b6f6f</id>

  
    <entry>
      <title>take_view -- take_view : 箇条書きのネスト修正</title>
      <link href="https://cpprefjp.github.io/reference/ranges/take_view.html"/>
      <id>d6efda15a80acb4f8c394c4ea3d970d80a4d2192:reference/ranges/take_view.md</id>
      <updated>2023-02-10T18:08:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/take_view.md b/reference/ranges/take_view.md
index 23008c588..cac570185 100644
--- a/reference/ranges/take_view.md
+++ b/reference/ranges/take_view.md
@@ -106,11 +106,11 @@ int main() {
 1. `take_view`イテレータのインクリメント
     1. `take_view`内部カウンタの減算
     2. [`filter_view`](filter_view.md)のイテレータのインクリメント
-      1. 条件を満たす次の要素の探索
-        - 条件を満たす要素が見つかるまで、`iota_view`イテレータをインクリメントする
-          1. `iota_view`イテレータのインクリメント
-            - 増分1で整数値を生成、この場合は終端がない
-          2. `iota_view`生成値の読み取りと条件チェック
+        1. 条件を満たす次の要素の探索
+            - 条件を満たす要素が見つかるまで、`iota_view`イテレータをインクリメントする
+                1. `iota_view`イテレータのインクリメント
+                    - 増分1で整数値を生成、この場合は終端がない
+                2. `iota_view`生成値の読み取りと条件チェック
 
 `views::iota(0)`によるシーケンスは0始まりの整数の無限列であり、`filter_view`のフィルタ条件（`return i &amp;lt; 10`）は10未満の整数値のみを取り出すものである。したがってこの場合、`iota_view`が10を生成して以降は`filter_view`で条件を満たす要素は存在しなくなる。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>take_view -- take_view : bidirectional以下の入力に対する注意を追記</title>
      <link href="https://cpprefjp.github.io/reference/ranges/take_view.html"/>
      <id>6a05dbbaea2d5e7472bd2ff832b2d36fcf520780:reference/ranges/take_view.md</id>
      <updated>2023-02-10T17:58:27+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/take_view.md b/reference/ranges/take_view.md
index 2348faa48..23008c588 100644
--- a/reference/ranges/take_view.md
+++ b/reference/ranges/take_view.md
@@ -78,6 +78,70 @@ namespace std::ranges {
 |-------------------------------------------------------|------------------------------|----------------|
 | [`(deduction_guide)`](take_view/op_deduction_guide.md.nolink) | クラステンプレートの推論補助 | C++20          |
 
+## 使用上の注意
+
+この`view`（及びRangeアダプタ）は、入力が[`random_access_range`](random_access_range.md)ではない場合に意図しない無限ループに陥ることがある
+
+```cpp
+int main() {
+  for (auto i  : std::views::iota(0)
+               | std::views::filter([](auto i) { return i &amp;lt; 10; })
+               | std::views::take(10))
+  {
+    std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  }
+}
+```
+
+このコードは0から9までの数字を出力するだけのループに見えるが、実行すると無限ループに陥るか完了までに多大な時間を要する。
+
+範囲`for`文は内部でイテレータを用いた通常`for`文に展開されており、1つのループの終わりでは次の様な順番でループのための処理が行われている
+
+1. イテレータのインクリメント
+2. イテレータの終端チェック
+3. ループ本体実行
+
+この例における1では、次の様なことが起きている
+
+1. `take_view`イテレータのインクリメント
+    1. `take_view`内部カウンタの減算
+    2. [`filter_view`](filter_view.md)のイテレータのインクリメント
+      1. 条件を満たす次の要素の探索
+        - 条件を満たす要素が見つかるまで、`iota_view`イテレータをインクリメントする
+          1. `iota_view`イテレータのインクリメント
+            - 増分1で整数値を生成、この場合は終端がない
+          2. `iota_view`生成値の読み取りと条件チェック
+
+`views::iota(0)`によるシーケンスは0始まりの整数の無限列であり、`filter_view`のフィルタ条件（`return i &amp;lt; 10`）は10未満の整数値のみを取り出すものである。したがってこの場合、`iota_view`が10を生成して以降は`filter_view`で条件を満たす要素は存在しなくなる。
+
+ループの最終端、本体処理が9を出力した後のループ終了直前には、`take_view`の内部カウンタが0になり`take_view`の終了条件が満たされるものの、その直後に内部イテレータ（`filter_view`のイテレータ）をインクリメントしてしまう。`filter_view`のイテレータはインクリメントによって10未満の次の要素を探索するために`iota_view`のイテレータをインクリメントし、`iota_view`は10以降の整数値をひたすら生成し続ける。
+
+この例の`iota_view`の要素型は符号付き整数型であるため、そのオーバーフローは未定義動作となり、このループが終了するかどうかは保証されない。
+
+入力に対して`filter_view`の条件の与え方が悪いという見方もできるが、これは`take_view`イテレータのインクリメント時に起こることに問題があり、`take_view`のイテレータは入力が[`random_access_range`](random_access_range.md)ではない場合は[`counted_iterator`](/reference/iterator/counted_iterator.md)を使用するため、本質的には`counted_iterator`の問題である。
+
+`counted_iterator`はインクリメント時にカウンタ値を減算してからラップしているイテレータをインクリメントするが、カウンタ値を考慮せず常にインクリメントを行うため`counted_iterator`の内部カウンタが0になりその終了条件が満たされた時でもラップするイテレータをインクリメントしてしまう。そのため、`filter_view`イテレータのようにそのイテレータ取得時点で終端が確定していないイテレータを入力として使用すると、その終端でこのような問題が起こりうる。
+
+特に、`input_iterator`では、イテレータがその範囲の終端に達した後でインクリメントしてしまうと何が起こるかわからないため、この問題はより複雑な形で顕在化する可能性がある。
+
+```cpp
+int main() {
+  // 入力ストリームには整数値1つしかない
+  auto iss = std::istringstream(&amp;#34;0&amp;#34;);
+
+  // 0を読んだ後、takeイテレータが進行するが、istream_viewが次のストリーム入力を待機するために終了しない
+  for (auto i : std::ranges::istream_view&amp;lt;int&amp;gt;(iss)
+              | std::views::take(1))
+  {
+    std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  }
+}
+```
+
+この例では、`istream_view`の基底のストリームに追加の要素が入力されるか、ストリームが閉じられるまで`istream_view`のイテレータはインクリメント時に次の要素の入力を待機し続けてしまう。より一般的な`input_iterator`ではどうなるかわからない。
+
+ただし、`take_view`は入力範囲が`random_access_range`の場合は`counted_iterator`を使用しないため、`random_access_range`に対して使用する場合はこの問題は起こらない。
+
 ## 例
 ```cpp example
 #include &amp;lt;ranges&amp;gt;
@@ -113,3 +177,4 @@ int main() {
 - [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
 - [C++20 ranges](https://techbookfest.org/product/5134506308665344)
 - [P2367R0 Remove misuses of list-initialization from Clause 24](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2367r0.html) (本提案文書はC++20に遡って適用されている)
+- [P2406R2 Add `lazy_counted_iterator`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2406r2.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>bad_expected_access -- expected: bad_expected_access&lt;E&gt;(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/bad_expected_access.html"/>
      <id>da6efe1a08463c917c6d8dfa6fb453612c98d055:reference/expected/bad_expected_access.md</id>
      <updated>2023-02-10T14:29:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/bad_expected_access.md b/reference/expected/bad_expected_access.md
index b4ec99ce1..1f18724c7 100644
--- a/reference/expected/bad_expected_access.md
+++ b/reference/expected/bad_expected_access.md
@@ -9,7 +9,6 @@ namespace std {
   template&amp;lt;class E&amp;gt;
   class bad_expected_access : public bad_expected_access&amp;lt;void&amp;gt; { ... };
 
-  // void特殊化
   template&amp;lt;&amp;gt;
   class bad_expected_access&amp;lt;void&amp;gt; : public exception { ... };
 }
@@ -24,10 +23,11 @@ namespace std {
 
 | 名前            | 説明           | 対応バージョン |
 |-----------------|----------------|-------|
-| [`(constructor)`](bad_expected_access/op_constructor.md.nolink) | コンストラクタ | C++23 |
+| [`(constructor)`](bad_expected_access/op_constructor.md) | コンストラクタ | C++23 |
 | `(destructor)` | デストラクタ | C++23 |
-| [`error`](bad_expected_access/error.md.nolink) | エラー値を取得する | C++23 |
-| [`what`](bad_expected_access/what.md.nolink) | エラー理由の文字列を取得する | C++23 |
+| `operator=` | コピー／ムーブ代入演算子 | C++23 |
+| [`error`](bad_expected_access/error.md) | エラー値を取得する | C++23 |
+| [`what`](bad_expected_access/what.md) | エラー理由の文字列を取得する | C++23 |
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>error -- expected: bad_expected_access&lt;E&gt;(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/bad_expected_access/error.html"/>
      <id>da6efe1a08463c917c6d8dfa6fb453612c98d055:reference/expected/bad_expected_access/error.md</id>
      <updated>2023-02-10T14:29:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/bad_expected_access/error.md b/reference/expected/bad_expected_access/error.md
new file mode 100644
index 000000000..66947a8e7
--- /dev/null
+++ b/reference/expected/bad_expected_access/error.md
@@ -0,0 +1,71 @@
+# error
+* expected[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* bad_expected_access[meta class]
+* cpp23[meta cpp]
+
+```cpp
+constexpr const E&amp;amp; error() const &amp;amp; noexcept;   // (1)
+constexpr E&amp;amp; error() &amp;amp; noexcept;               // (2)
+constexpr const E&amp;amp;&amp;amp; error() const &amp;amp;&amp;amp; noexcept; // (3)
+constexpr E&amp;amp;&amp;amp; error() &amp;amp;&amp;amp; noexcept;             // (4)
+```
+
+## 概要
+エラー値を取得する。
+
+
+## 戻り値
+動作説明用のメンバ変数として、エラー値を保持する`unex`を導入する。
+
+- (1), (2) : `unex`
+- (3), (4) : [`std::move`](/reference/utility/move.md)`(unex)`
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;expected&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+int main()
+{
+  std::expected&amp;lt;int, std::string&amp;gt; v = std::unexpected{&amp;#34;ERR&amp;#34;};
+  try {
+    std::cout &amp;lt;&amp;lt; v.value() &amp;lt;&amp;lt; std::endl;
+  } catch (const std::bad_expected_access&amp;lt;std::string&amp;gt;&amp;amp; ex) {
+    std::cout &amp;lt;&amp;lt; &amp;#34;throw:&amp;#34; &amp;lt;&amp;lt; ex.error() &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* error()[color ff0000]
+* value()[link ../expected/value.md]
+* std::unexpected[link ../unexpected.md]
+* std::bad_expected_access[link ../bad_expected_access.md]
+
+### 出力
+```
+throw:ERR
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 16.0
+- [GCC](/implementation.md#gcc): 12.1
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P0323R12 std::expected](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0323r12.html)
+- [P2549R1 `std::unexpected&amp;lt;E&amp;gt;` should have `error()` as member accessor](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2549r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- expected: bad_expected_access&lt;E&gt;(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/bad_expected_access/op_constructor.html"/>
      <id>da6efe1a08463c917c6d8dfa6fb453612c98d055:reference/expected/bad_expected_access/op_constructor.md</id>
      <updated>2023-02-10T14:29:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/bad_expected_access/op_constructor.md b/reference/expected/bad_expected_access/op_constructor.md
new file mode 100644
index 000000000..4049783bd
--- /dev/null
+++ b/reference/expected/bad_expected_access/op_constructor.md
@@ -0,0 +1,52 @@
+# コンストラクタ
+* expected[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* bad_expected_access[meta class]
+* cpp23[meta cpp]
+
+```cpp
+explicit bad_expected_access(E e);                // (1)
+bad_expected_access(const bad_expected_access&amp;amp;);  // (2)
+bad_expected_access(bad_expected_access&amp;amp;&amp;amp;);       // (3)
+```
+* bad_expected_access[link ../bad_expected_access.md]
+
+## 概要
+- (1) : エラー値を[`std::move`](/reference/utility/move.md)`(e)`で初期化する。
+- (2) : コピーコンストラクタ。
+- (3) : ムーブコンストラクタ。
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;expected&amp;gt;
+
+int main()
+{
+  std::bad_expected_access&amp;lt;int&amp;gt; ex{42};
+  assert(ex.error() == 42);
+}
+```
+* std::bad_expected_access[color ff0000]
+* error()[link error.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 16.0
+- [GCC](/implementation.md#gcc): 12.1
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P0323R12 std::expected](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0323r12.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>what -- expected: bad_expected_access&lt;E&gt;(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/bad_expected_access/what.html"/>
      <id>da6efe1a08463c917c6d8dfa6fb453612c98d055:reference/expected/bad_expected_access/what.md</id>
      <updated>2023-02-10T14:29:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/bad_expected_access/what.md b/reference/expected/bad_expected_access/what.md
new file mode 100644
index 000000000..38ad29ef3
--- /dev/null
+++ b/reference/expected/bad_expected_access/what.md
@@ -0,0 +1,64 @@
+# what
+* expected[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* bad_expected_access[meta class]
+* cpp23[meta cpp]
+
+```cpp
+const char* what() const noexcept override;
+```
+
+## 概要
+エラー理由の文字列を取得する。
+
+
+## 戻り値
+エラー理由となる実装定義の文字列
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;expected&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+int main()
+{
+  std::expected&amp;lt;int, std::string&amp;gt; v = std::unexpected{&amp;#34;ERR&amp;#34;};
+  try {
+    std::cout &amp;lt;&amp;lt; v.value() &amp;lt;&amp;lt; std::endl;
+  } catch (const std::bad_expected_access&amp;lt;std::string&amp;gt;&amp;amp; ex) {
+    std::cout &amp;lt;&amp;lt; ex.what() &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* what()[color ff0000]
+* value()[link ../expected/value.md]
+* std::unexpected[link ../unexpected.md]
+* std::bad_expected_access[link ../bad_expected_access.md]
+
+### 出力例
+```
+bad access to std::expected without expected value
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 16.0
+- [GCC](/implementation.md#gcc): 12.1
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P0323R12 std::expected](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0323r12.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>value -- expected: bad_expected_access&lt;E&gt;(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected.void/value.html"/>
      <id>da6efe1a08463c917c6d8dfa6fb453612c98d055:reference/expected/expected.void/value.md</id>
      <updated>2023-02-10T14:29:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected.void/value.md b/reference/expected/expected.void/value.md
index 45e4c49db..a69e3d1d1 100644
--- a/reference/expected/expected.void/value.md
+++ b/reference/expected/expected.void/value.md
@@ -43,7 +43,7 @@ int main()
 }
 ```
 * value()[color ff0000]
-* error()[link ../bad_expected_access/error.md.nolink]
+* error()[link ../bad_expected_access/error.md]
 * std::unexpected[link ../unexpected.md]
 * std::bad_expected_access[link ../bad_expected_access.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>value -- expected: bad_expected_access&lt;E&gt;(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected/value.html"/>
      <id>da6efe1a08463c917c6d8dfa6fb453612c98d055:reference/expected/expected/value.md</id>
      <updated>2023-02-10T14:29:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected/value.md b/reference/expected/expected/value.md
index 8f1f26ffc..ab4a91004 100644
--- a/reference/expected/expected/value.md
+++ b/reference/expected/expected/value.md
@@ -48,7 +48,7 @@ int main()
 }
 ```
 * value()[color ff0000]
-* error()[link ../bad_expected_access/error.md.nolink]
+* error()[link ../bad_expected_access/error.md]
 * std::unexpected[link ../unexpected.md]
 * std::bad_expected_access[link ../bad_expected_access.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>unexpected -- expected: bad_expected_access&lt;E&gt;(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/unexpected.html"/>
      <id>da6efe1a08463c917c6d8dfa6fb453612c98d055:reference/expected/unexpected.md</id>
      <updated>2023-02-10T14:29:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/unexpected.md b/reference/expected/unexpected.md
index 0ce15ea9c..e0dc8715d 100644
--- a/reference/expected/unexpected.md
+++ b/reference/expected/unexpected.md
@@ -12,7 +12,7 @@ namespace std {
 ```
 
 ## 概要
-`unexpected`クラスは、[`std::expected&amp;lt;T, E&amp;gt;`](expected.md)に格納される任意の型`E`の値をエラー値として表現する。
+`unexpected`クラスは、[`std::expected&amp;lt;T, E&amp;gt;`](expected.md)に格納される任意の型`E`のエラー値を表現するヘルパークラスである。
 
 
 ## 適格要件
@@ -39,7 +39,7 @@ namespace std {
 
 | 名前            | 説明           | 対応バージョン |
 |-----------------|----------------|-------|
-| [`error`](unexpected/error.md) | 値を取得する | C++23 |
+| [`error`](unexpected/error.md) | エラー値を取得する | C++23 |
 
 ### 比較
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>error -- expected: bad_expected_access&lt;E&gt;(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/unexpected/error.html"/>
      <id>da6efe1a08463c917c6d8dfa6fb453612c98d055:reference/expected/unexpected/error.md</id>
      <updated>2023-02-10T14:29:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/unexpected/error.md b/reference/expected/unexpected/error.md
index 054b65f7b..8a6d6922b 100644
--- a/reference/expected/unexpected/error.md
+++ b/reference/expected/unexpected/error.md
@@ -13,11 +13,11 @@ constexpr E&amp;amp;&amp;amp; error() &amp;amp;&amp;amp; noexcept;             // (4)
 ```
 
 ## 概要
-値を取得する。
+エラー値を取得する。
 
 
 ## 戻り値
-動作説明用のメンバ変数として、値を保持する`unex`を導入する。
+動作説明用のメンバ変数として、エラー値を保持する`unex`を導入する。
 
 - (1), (2) : `unex`
 - (3), (4) : [`std::move`](/reference/utility/move.md)`(unex)`
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- expected: bad_expected_access&lt;E&gt;(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/unexpected/op_constructor.html"/>
      <id>da6efe1a08463c917c6d8dfa6fb453612c98d055:reference/expected/unexpected/op_constructor.md</id>
      <updated>2023-02-10T14:29:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/unexpected/op_constructor.md b/reference/expected/unexpected/op_constructor.md
index 258bd17dc..763cccae6 100644
--- a/reference/expected/unexpected/op_constructor.md
+++ b/reference/expected/unexpected/op_constructor.md
@@ -38,9 +38,9 @@ constexpr explicit unexpected(in_place_t, initializer_list&amp;lt;U&amp;gt; il, Args&amp;amp;&amp;amp;... args
 
 
 ## 効果
-- (3) : [`std::forward`](/reference/utility/forward.md)`&amp;lt;Err&amp;gt;(e)`で値を直接非リスト初期化する。
-- (4) : [`std::forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...`で値を直接非リスト初期化する。
-- (5) : `il,` [`std::forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...`で値を直接非リスト初期化する。
+- (3) : [`std::forward`](/reference/utility/forward.md)`&amp;lt;Err&amp;gt;(e)`でエラー値を直接非リスト初期化する。
+- (4) : [`std::forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...`でエラー値を直接非リスト初期化する。
+- (5) : `il,` [`std::forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...`でエラー値を直接非リスト初期化する。
 
 
 ## 例外
@@ -100,7 +100,7 @@ int main()
     std::unexpected&amp;lt;IntTuple&amp;gt; dst{src};
     assert((dst.error() == IntTuple{1, 2}));
   }
-  // (3) 変換構築
+  // (3) 変換ムーブ構築
   {
     UniquePtr src = std::make_unique&amp;lt;int&amp;gt;(42);
     std::unexpected&amp;lt;SharedPtr&amp;gt; dst{std::move(src)};
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- expected: bad_expected_access&lt;E&gt;(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/unexpected/op_deduction_guide.html"/>
      <id>da6efe1a08463c917c6d8dfa6fb453612c98d055:reference/expected/unexpected/op_deduction_guide.md</id>
      <updated>2023-02-10T14:29:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/unexpected/op_deduction_guide.md b/reference/expected/unexpected/op_deduction_guide.md
index dd79e8017..0927d9d58 100644
--- a/reference/expected/unexpected/op_deduction_guide.md
+++ b/reference/expected/unexpected/op_deduction_guide.md
@@ -12,7 +12,7 @@ namespace std {
 ```
 
 ## 概要
-`std::expected`クラステンプレートの型推論補助。
+`std::unexpected`クラステンプレートの型推論補助。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>size -- chore: std:::size -&gt; std::rages::sizeにリンクする</title>
      <link href="https://cpprefjp.github.io/reference/iterator/size.html"/>
      <id>141e98ef7802194cbe801d5c38a0653545de0e7a:reference/iterator/size.md</id>
      <updated>2023-02-10T01:02:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/size.md b/reference/iterator/size.md
index 52fbe0f7c..7455d477d 100644
--- a/reference/iterator/size.md
+++ b/reference/iterator/size.md
@@ -93,6 +93,9 @@ int main()
 - [ICC](/implementation.md#icc): ??
 - [Visual C++](/implementation.md#visual_cpp): 2015
 
+## 関連項目
+
+- [`std::ranges::size`](/reference/ranges/size.md)
 
 ## 参照
 - [`boost::size()` - Boost Range Library](http://www.boost.org/doc/libs/release/libs/range/doc/html/range/reference/concept_implementation/semantics/functions.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yumetodo</name>
        <email>yume-wikijp@live.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>unexpected -- expected: unexpected&lt;E&gt;(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/exception/unexpected.html"/>
      <id>a69e754d6d013d030e477d95ed5bdc1432ea46e6:reference/exception/unexpected.md</id>
      <updated>2023-02-09T18:45:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/exception/unexpected.md b/reference/exception/unexpected.md
index ab200e840..8564476e8 100644
--- a/reference/exception/unexpected.md
+++ b/reference/exception/unexpected.md
@@ -13,6 +13,9 @@ namespace std {
 
 この関数はC++11から非推奨となり、C++17で削除された。`throw`キーワードの代わりに使用する[`noexcept`キーワード](/lang/cpp11/noexcept.md)では、指定外の例外が発生することによるエラーは起こらない。
 
+C++23から、同名の[`std::unexpected&amp;lt;E&amp;gt;`クラステンプレート](/reference/expected/unexpected.md)が追加される。C++17で削除された名前の再利用となっているが、この関数と同クラステンプレートの間に機能的な関係は一切ない。
+
+
 ## 概要
 例外指定のある関数内で、指定外の例外が発生した時に呼び出される例外ハンドラを直接呼び出す。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- expected: unexpected&lt;E&gt;(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected.void/op_assign.html"/>
      <id>a69e754d6d013d030e477d95ed5bdc1432ea46e6:reference/expected/expected.void/op_assign.md</id>
      <updated>2023-02-09T18:45:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected.void/op_assign.md b/reference/expected/expected.void/op_assign.md
index 5b49a231f..e62f9f5ef 100644
--- a/reference/expected/expected.void/op_assign.md
+++ b/reference/expected/expected.void/op_assign.md
@@ -54,13 +54,13 @@ constexpr expected&amp;amp; operator=(unexpected&amp;lt;G&amp;gt;&amp;amp;&amp;amp; e);      // (4)
     - `this`がエラーを保持し、`rhs`が正常値を保持していたら、`unex`を破棄し`has_value = true;`
     - `this`と`rhs`が共にエラー値を保持していたら、`unex =` [`std::move`](/reference/utility/move.md)`(rhs.`[`error()`](error.md)`)`
 - (3) : 次の処理と等価
-    - `this`が正常値を保持していたら、[`construct_at`](/reference/memory/construct_at.md)`(`[`addressof`](/reference/memory/addressof.md)`(unex), val,` [`std::forward`](/reference/utility/forward.md)`&amp;lt;const G&amp;amp;&amp;gt;(e.`[`error()`](../unexpected/error.md.nolink)`));
+    - `this`が正常値を保持していたら、[`construct_at`](/reference/memory/construct_at.md)`(`[`addressof`](/reference/memory/addressof.md)`(unex), val,` [`std::forward`](/reference/utility/forward.md)`&amp;lt;const G&amp;amp;&amp;gt;(e.`[`error()`](../unexpected/error.md)`));
 has_val = false;`
-    - `this`がエラー値を保持していたら、`unex =` [`std::forward`](/reference/utility/forward.md)`&amp;lt;const G&amp;amp;&amp;gt;(e.`[`error()`](../unexpected/error.md.nolink)`);`
+    - `this`がエラー値を保持していたら、`unex =` [`std::forward`](/reference/utility/forward.md)`&amp;lt;const G&amp;amp;&amp;gt;(e.`[`error()`](../unexpected/error.md)`);`
 - (4) : 次の処理と等価
-    - `this`が正常値を保持していたら、[`construct_at`](/reference/memory/construct_at.md)`(`[`addressof`](/reference/memory/addressof.md)`(unex), val,` [`std::forward`](/reference/utility/forward.md)`&amp;lt;G&amp;gt;(e.`[`error()`](../unexpected/error.md.nolink)`));
+    - `this`が正常値を保持していたら、[`construct_at`](/reference/memory/construct_at.md)`(`[`addressof`](/reference/memory/addressof.md)`(unex), val,` [`std::forward`](/reference/utility/forward.md)`&amp;lt;G&amp;gt;(e.`[`error()`](../unexpected/error.md)`));
 has_val = false;`
-    - `this`がエラー値を保持していたら、`unex =` [`std::forward`](/reference/utility/forward.md)`&amp;lt;G&amp;gt;(e.`[`error()`](../unexpected/error.md.nolink)`);`
+    - `this`がエラー値を保持していたら、`unex =` [`std::forward`](/reference/utility/forward.md)`&amp;lt;G&amp;gt;(e.`[`error()`](../unexpected/error.md)`);`
 
 
 ## 戻り値
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- expected: unexpected&lt;E&gt;(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected.void/op_constructor.html"/>
      <id>a69e754d6d013d030e477d95ed5bdc1432ea46e6:reference/expected/expected.void/op_constructor.md</id>
      <updated>2023-02-09T18:45:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected.void/op_constructor.md b/reference/expected/expected.void/op_constructor.md
index a1e4ad4f1..25fe4b799 100644
--- a/reference/expected/expected.void/op_constructor.md
+++ b/reference/expected/expected.void/op_constructor.md
@@ -75,8 +75,8 @@ constexpr explicit expected(unexpect_t, initializer_list&amp;lt;U&amp;gt; il, Args&amp;amp;&amp;amp;... args);
 - (3) : `rhs`がエラー値を保持していれば、[`std::move`](/reference/utility/move.md)`(rhs.`[`error()`](error.md)`)`でエラー値を直接非リスト初期化する。
 - (4) : `rhs`がエラー値を保持していれば、[`std::forward`](/reference/utility/forward.md)`&amp;lt;const G&amp;amp;&amp;gt;(rhs.`[`error()`](error.md)`)`でエラー値を直接非リスト初期化する。
 - (5) : `rhs`がエラー値を保持していれば、[`std::forward`](/reference/utility/forward.md)`&amp;lt;G&amp;gt;(rhs.`[`error()`](error.md)`)`でエラー値を直接非リスト初期化する。
-- (6) : [`std::forward`](/reference/utility/forward.md)`&amp;lt;const G&amp;amp;&amp;gt;(e.`[`error()`](../unexpected/error.md.nolink)`)`でエラー値を直接非リスト初期化する。
-- (7) : [`std::forward`](/reference/utility/forward.md)`&amp;lt;G&amp;gt;(e.`[`error()`](../unexpected/error.md.nolink)`)`でエラー値を直接非リスト初期化する。
+- (6) : [`std::forward`](/reference/utility/forward.md)`&amp;lt;const G&amp;amp;&amp;gt;(e.`[`error()`](../unexpected/error.md)`)`でエラー値を直接非リスト初期化する。
+- (7) : [`std::forward`](/reference/utility/forward.md)`&amp;lt;G&amp;gt;(e.`[`error()`](../unexpected/error.md)`)`でエラー値を直接非リスト初期化する。
 - (9) : [`std::forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...`でエラー値を直接非リスト初期化する。
 - (10) : `il,` [`std::forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...`でエラー値を直接非リスト初期化する。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- expected: unexpected&lt;E&gt;(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected.void/op_equal.html"/>
      <id>a69e754d6d013d030e477d95ed5bdc1432ea46e6:reference/expected/expected.void/op_equal.md</id>
      <updated>2023-02-09T18:45:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected.void/op_equal.md b/reference/expected/expected.void/op_equal.md
index 7707374e7..62e228e97 100644
--- a/reference/expected/expected.void/op_equal.md
+++ b/reference/expected/expected.void/op_equal.md
@@ -20,20 +20,20 @@ friend constexpr bool operator==(const unexpected&amp;lt;E2&amp;gt;&amp;amp; e, const expected&amp;amp; x);
 * unexpected[link ../unexpected.md]
 
 ## 概要
-- (1) : `unexpected`オブジェクト同士の等値比較を行う。
-- (2), (3) : `unexpected`オブジェクトとエラー値の等値比較を行う。
+- (1) : `expected`オブジェクト同士の等値比較を行う。
+- (2), (3) : `expected`オブジェクトとエラー値の等値比較を行う。
 
 
 ## 適格要件
 - (1) : 式`x.`[`error()`](error.md) `== y.`[`error()`](error.md)が適格であり、その結果を`bool`へ変換可能であること。
-- (2), (3) : 式`x.`[`error()`](error.md) `== e.`[`error()`](../unexpected/error.md.nolink)が適格であり、その結果を`bool`へ変換可能であること。
+- (2), (3) : 式`x.`[`error()`](error.md) `== e.`[`error()`](../unexpected/error.md)が適格であり、その結果を`bool`へ変換可能であること。
 
 
 ## 戻り値
 - (1) : 次の値を返す
     - `x.`[`has_value()`](has_value.md)と`y.`[`has_value()`](has_value.md)が異なるとき、`false`
     - そうでなければ、`x.`[`has_value()`](has_value.md) `|| static_cast&amp;lt;bool&amp;gt;(x.`[`error()`](error.md) `== y.`[`error()`](error.md)`)`
-- (2), (3) : `!x.`[`has_value()`](has_value.md) `&amp;amp;&amp;amp; static_cast&amp;lt;bool&amp;gt;(x.`[`error()`](error.md) `== e.`[`error()`](../unexpected/error.md.nolink)`)`
+- (2), (3) : `!x.`[`has_value()`](has_value.md) `&amp;amp;&amp;amp; static_cast&amp;lt;bool&amp;gt;(x.`[`error()`](error.md) `== e.`[`error()`](../unexpected/error.md)`)`
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator!= -- expected: unexpected&lt;E&gt;(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected.void/op_not_equal.html"/>
      <id>a69e754d6d013d030e477d95ed5bdc1432ea46e6:reference/expected/expected.void/op_not_equal.md</id>
      <updated>2023-02-09T18:45:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected.void/op_not_equal.md b/reference/expected/expected.void/op_not_equal.md
index e27d344ac..dd282393c 100644
--- a/reference/expected/expected.void/op_not_equal.md
+++ b/reference/expected/expected.void/op_not_equal.md
@@ -21,13 +21,13 @@ friend constexpr bool operator!=(const unexpected&amp;lt;E2&amp;gt;&amp;amp; e, const expected&amp;amp; x);
 * unexpected[link ../unexpected.md]
 
 ## 概要
-- (1) : `unexpected`オブジェクト同士の非等値比較を行う。
-- (2), (3) : `unexpected`オブジェクトとエラー値の非等値比較を行う。
+- (1) : `expected`オブジェクト同士の非等値比較を行う。
+- (2), (3) : `expected`オブジェクトとエラー値の非等値比較を行う。
 
 
 ## 適格要件
 - (1) : 式`x.`[`error()`](error.md) `== y.`[`error()`](error.md)が適格であり、その結果を`bool`へ変換可能であること。
-- (2), (3) : 式`x.`[`error()`](error.md) `== e.`[`error()`](../unexpected/error.md.nolink)が適格であり、その結果を`bool`へ変換可能であること。
+- (2), (3) : 式`x.`[`error()`](error.md) `== e.`[`error()`](../unexpected/error.md)が適格であり、その結果を`bool`へ変換可能であること。
 
 
 ## 戻り値
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap (非メンバ関数) -- expected: unexpected&lt;E&gt;(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected.void/swap_free.html"/>
      <id>a69e754d6d013d030e477d95ed5bdc1432ea46e6:reference/expected/expected.void/swap_free.md</id>
      <updated>2023-02-09T18:45:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected.void/swap_free.md b/reference/expected/expected.void/swap_free.md
index 02b0d1375..a6f7cebbe 100644
--- a/reference/expected/expected.void/swap_free.md
+++ b/reference/expected/expected.void/swap_free.md
@@ -10,7 +10,7 @@
 friend constexpr void swap(expected&amp;amp; x, expected&amp;amp; y)
   noexcept(noexcept(x.swap(y)));
 ```
-* swap[link swap.md]
+* x.swap(y)[link swap.md]
 
 ## 概要
 2つの`expected`オブジェクトを入れ替える。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>value -- expected: unexpected&lt;E&gt;(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected.void/value.html"/>
      <id>a69e754d6d013d030e477d95ed5bdc1432ea46e6:reference/expected/expected.void/value.md</id>
      <updated>2023-02-09T18:45:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected.void/value.md b/reference/expected/expected.void/value.md
index ba7a593f7..45e4c49db 100644
--- a/reference/expected/expected.void/value.md
+++ b/reference/expected/expected.void/value.md
@@ -43,7 +43,7 @@ int main()
 }
 ```
 * value()[color ff0000]
-* error()[link ../unexpected/error.md.nolink]
+* error()[link ../bad_expected_access/error.md.nolink]
 * std::unexpected[link ../unexpected.md]
 * std::bad_expected_access[link ../bad_expected_access.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- expected: unexpected&lt;E&gt;(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected/op_assign.html"/>
      <id>a69e754d6d013d030e477d95ed5bdc1432ea46e6:reference/expected/expected/op_assign.md</id>
      <updated>2023-02-09T18:45:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected/op_assign.md b/reference/expected/expected/op_assign.md
index a2094bc79..ba763681a 100644
--- a/reference/expected/expected/op_assign.md
+++ b/reference/expected/expected/op_assign.md
@@ -107,13 +107,13 @@ constexpr void reinit-expected(T&amp;amp; newval, U&amp;amp; oldval, Args&amp;amp;&amp;amp;... args) {
     - `this`が正常値を保持していたら、`val =` [`std::forward`](/reference/utility/forward.md)`&amp;lt;U&amp;gt;(v)`
     - `this`がエラー値を保持していたら、`reinit-expected(val, unex,` [`std::forward`](/reference/utility/forward.md)`&amp;lt;U&amp;gt;(v)); has_val = true;`
 - (4) : 次の処理と等価
-    - `this`が正常値を保持していたら、`reinit-expected(unex, val,` [`std::forward`](/reference/utility/forward.md)`&amp;lt;const G&amp;amp;&amp;gt;(e.`[`error()`](../unexpected/error.md.nolink)`));
+    - `this`が正常値を保持していたら、`reinit-expected(unex, val,` [`std::forward`](/reference/utility/forward.md)`&amp;lt;const G&amp;amp;&amp;gt;(e.`[`error()`](../unexpected/error.md)`));
 has_val = false;`
-    - `this`がエラー値を保持していたら、`unex =` [`std::forward`](/reference/utility/forward.md)`&amp;lt;const G&amp;amp;&amp;gt;(e.`[`error()`](../unexpected/error.md.nolink)`);`
+    - `this`がエラー値を保持していたら、`unex =` [`std::forward`](/reference/utility/forward.md)`&amp;lt;const G&amp;amp;&amp;gt;(e.`[`error()`](../unexpected/error.md)`);`
 - (5) : 次の処理と等価
-    - `this`が正常値を保持していたら、`reinit-expected(unex, val,` [`std::forward`](/reference/utility/forward.md)`&amp;lt;G&amp;gt;(e.`[`error()`](../unexpected/error.md.nolink)`));
+    - `this`が正常値を保持していたら、`reinit-expected(unex, val,` [`std::forward`](/reference/utility/forward.md)`&amp;lt;G&amp;gt;(e.`[`error()`](../unexpected/error.md)`));
 has_val = false;`
-    - `this`がエラー値を保持していたら、`unex =` [`std::forward`](/reference/utility/forward.md)`&amp;lt;G&amp;gt;(e.`[`error()`](../unexpected/error.md.nolink)`);`
+    - `this`がエラー値を保持していたら、`unex =` [`std::forward`](/reference/utility/forward.md)`&amp;lt;G&amp;gt;(e.`[`error()`](../unexpected/error.md)`);`
 
 
 ## 戻り値
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- expected: unexpected&lt;E&gt;(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected/op_constructor.html"/>
      <id>a69e754d6d013d030e477d95ed5bdc1432ea46e6:reference/expected/expected/op_constructor.md</id>
      <updated>2023-02-09T18:45:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected/op_constructor.md b/reference/expected/expected/op_constructor.md
index 34e9931df..650fce154 100644
--- a/reference/expected/expected/op_constructor.md
+++ b/reference/expected/expected/op_constructor.md
@@ -108,8 +108,8 @@ constexpr bool converts-from-any-cvref =
 - (4) : `rhs`が正常値を保持していれば、[`std::forward`](/reference/utility/forward.md)`&amp;lt;const U&amp;amp;&amp;gt;(`[`*rhs`](op_deref.md)`)`で正常値を直接非リスト初期化する。そうでなければ、[`std::forward`](/reference/utility/forward.md)`&amp;lt;const G&amp;amp;&amp;gt;(rhs.`[`error()`](error.md)`)`でエラー値を直接非リスト初期化する。
 - (5) : `rhs`が正常値を保持していれば、[`std::forward`](/reference/utility/forward.md)`&amp;lt;U&amp;gt;(`[`*rhs`](op_deref.md)`)`で正常値を直接非リスト初期化する。そうでなければ、[`std::forward`](/reference/utility/forward.md)`&amp;lt;G&amp;gt;(rhs.`[`error()`](error.md)`)`でエラー値を直接非リスト初期化する。
 - (6) : [`std::forward`](/reference/utility/forward.md)`&amp;lt;U&amp;gt;(v)`で正常値を直接非リスト初期化する。
-- (7) : [`std::forward`](/reference/utility/forward.md)`&amp;lt;const G&amp;amp;&amp;gt;(e.`[`error()`](../unexpected/error.md.nolink)`)`でエラー値を直接非リスト初期化する。
-- (8) : [`std::forward`](/reference/utility/forward.md)`&amp;lt;G&amp;gt;(e.`[`error()`](../unexpected/error.md.nolink)`)`でエラー値を直接非リスト初期化する。
+- (7) : [`std::forward`](/reference/utility/forward.md)`&amp;lt;const G&amp;amp;&amp;gt;(e.`[`error()`](../unexpected/error.md)`)`でエラー値を直接非リスト初期化する。
+- (8) : [`std::forward`](/reference/utility/forward.md)`&amp;lt;G&amp;gt;(e.`[`error()`](../unexpected/error.md)`)`でエラー値を直接非リスト初期化する。
 - (9) : [`std::forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...`で正常値を直接非リスト初期化する。
 - (10) : `il,` [`std::forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...`で正常値を直接非リスト初期化する。
 - (11) : [`std::forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...`でエラー値を直接非リスト初期化する。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- expected: unexpected&lt;E&gt;(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected/op_equal.html"/>
      <id>a69e754d6d013d030e477d95ed5bdc1432ea46e6:reference/expected/expected/op_equal.md</id>
      <updated>2023-02-09T18:45:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected/op_equal.md b/reference/expected/expected/op_equal.md
index efbb18770..e9daee414 100644
--- a/reference/expected/expected/op_equal.md
+++ b/reference/expected/expected/op_equal.md
@@ -25,15 +25,15 @@ friend constexpr bool operator==(const unexpected&amp;lt;E2&amp;gt;&amp;amp; e, const expected&amp;amp; x); //
 * unexpected[link ../unexpected.md]
 
 ## 概要
-- (1) : `unexpected`オブジェクト同士の等値比較を行う。
-- (2), (3) : `unexpected`オブジェクトと正常値の等値比較を行う。
-- (4), (5) : `unexpected`オブジェクトとエラー値の等値比較を行う。
+- (1) : `expected`オブジェクト同士の等値比較を行う。
+- (2), (3) : `expected`オブジェクトと正常値の等値比較を行う。
+- (4), (5) : `expected`オブジェクトとエラー値の等値比較を行う。
 
 
 ## 適格要件
 - (1) : 式[`*x`](op_deref.md) `==` [`*y`](op_deref.md)および式`x.`[`error()`](error.md) `== y.`[`error()`](error.md)が適格であり、各式の結果を`bool`へ変換可能であること。
 - (2), (3) : 式[`*x`](op_deref.md) `== v`が適格であり、その結果を`bool`へ変換可能であること。
-- (4), (5) : 式`x.`[`error()`](error.md) `== e.`[`error()`](../unexpected/error.md.nolink)が適格であり、その結果を`bool`へ変換可能であること。
+- (4), (5) : 式`x.`[`error()`](error.md) `== e.`[`error()`](../unexpected/error.md)が適格であり、その結果を`bool`へ変換可能であること。
 
 
 ## 戻り値
@@ -42,7 +42,7 @@ friend constexpr bool operator==(const unexpected&amp;lt;E2&amp;gt;&amp;amp; e, const expected&amp;amp; x); //
     - `x.`[`has_value()`](has_value.md) `== true`のとき、[`*x`](op_deref.md) `==` [`*y`](op_deref.md)
     - `x.`[`error()`](error.md) `== y.`[`error()`](error.md)
 - (2), (3) : `x.`[`has_value()`](has_value.md) `&amp;amp;&amp;amp; static_cast&amp;lt;bool&amp;gt;(`[`*x`](op_deref.md) `== v)`
-- (4), (5) : `!x.`[`has_value()`](has_value.md) `&amp;amp;&amp;amp; static_cast&amp;lt;bool&amp;gt;(x.`[`error()`](error.md) `== e.`[`error()`](../unexpected/error.md.nolink)`)`
+- (4), (5) : `!x.`[`has_value()`](has_value.md) `&amp;amp;&amp;amp; static_cast&amp;lt;bool&amp;gt;(x.`[`error()`](error.md) `== e.`[`error()`](../unexpected/error.md)`)`
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator!= -- expected: unexpected&lt;E&gt;(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected/op_not_equal.html"/>
      <id>a69e754d6d013d030e477d95ed5bdc1432ea46e6:reference/expected/expected/op_not_equal.md</id>
      <updated>2023-02-09T18:45:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected/op_not_equal.md b/reference/expected/expected/op_not_equal.md
index dc9fb7370..0d64264eb 100644
--- a/reference/expected/expected/op_not_equal.md
+++ b/reference/expected/expected/op_not_equal.md
@@ -25,15 +25,15 @@ friend constexpr bool operator!=(const unexpected&amp;lt;E2&amp;gt;&amp;amp; e, const expected&amp;amp; x); //
 * unexpected[link ../unexpected.md]
 
 ## 概要
-- (1) : `unexpected`オブジェクト同士の非等値比較を行う。
-- (2), (3) : `unexpected`オブジェクトと正常値の非等値比較を行う。
-- (4), (5) : `unexpected`オブジェクトとエラー値の非等値比較を行う。
+- (1) : `expected`オブジェクト同士の非等値比較を行う。
+- (2), (3) : `expected`オブジェクトと正常値の非等値比較を行う。
+- (4), (5) : `expected`オブジェクトとエラー値の非等値比較を行う。
 
 
 ## 適格要件
 - (1) : 式[`*x`](op_deref.md) `==` [`*y`](op_deref.md)および式`x.`[`error()`](error.md) `== y.`[`error()`](error.md)が適格であり、各式の結果を`bool`へ変換可能であること。
 - (2), (3) : 式[`*x`](op_deref.md) `== v`が適格であり、その結果を`bool`へ変換可能であること。
-- (4), (5) : 式`x.`[`error()`](error.md) `== e.`[`error()`](../unexpected/error.md.nolink)が適格であり、その結果を`bool`へ変換可能であること。
+- (4), (5) : 式`x.`[`error()`](error.md) `== e.`[`error()`](../unexpected/error.md)が適格であり、その結果を`bool`へ変換可能であること。
 
 
 ## 戻り値
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap (非メンバ関数) -- expected: unexpected&lt;E&gt;(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected/swap_free.html"/>
      <id>a69e754d6d013d030e477d95ed5bdc1432ea46e6:reference/expected/expected/swap_free.md</id>
      <updated>2023-02-09T18:45:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected/swap_free.md b/reference/expected/expected/swap_free.md
index 634e59c33..e3772eabf 100644
--- a/reference/expected/expected/swap_free.md
+++ b/reference/expected/expected/swap_free.md
@@ -9,7 +9,7 @@
 friend constexpr void swap(expected&amp;amp; x, expected&amp;amp; y)
   noexcept(noexcept(x.swap(y)));
 ```
-* swap[link swap.md]
+* x.swap(y)[link swap.md]
 
 ## 概要
 2つの`expected`オブジェクトを入れ替える。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>value -- expected: unexpected&lt;E&gt;(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected/value.html"/>
      <id>a69e754d6d013d030e477d95ed5bdc1432ea46e6:reference/expected/expected/value.md</id>
      <updated>2023-02-09T18:45:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected/value.md b/reference/expected/expected/value.md
index 8d2b2836d..8f1f26ffc 100644
--- a/reference/expected/expected/value.md
+++ b/reference/expected/expected/value.md
@@ -48,7 +48,7 @@ int main()
 }
 ```
 * value()[color ff0000]
-* error()[link ../unexpected/error.md.nolink]
+* error()[link ../bad_expected_access/error.md.nolink]
 * std::unexpected[link ../unexpected.md]
 * std::bad_expected_access[link ../bad_expected_access.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>unexpected -- expected: unexpected&lt;E&gt;(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/unexpected.html"/>
      <id>a69e754d6d013d030e477d95ed5bdc1432ea46e6:reference/expected/unexpected.md</id>
      <updated>2023-02-09T18:45:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/unexpected.md b/reference/expected/unexpected.md
index 5b82dc97d..0ce15ea9c 100644
--- a/reference/expected/unexpected.md
+++ b/reference/expected/unexpected.md
@@ -12,7 +12,7 @@ namespace std {
 ```
 
 ## 概要
-`unexpected`クラスは、任意の型`E`の値をエラー値として表現する。
+`unexpected`クラスは、[`std::expected&amp;lt;T, E&amp;gt;`](expected.md)に格納される任意の型`E`の値をエラー値として表現する。
 
 
 ## 適格要件
@@ -24,41 +24,42 @@ namespace std {
 
 | 名前            | 説明           | 対応バージョン |
 |-----------------|----------------|-------|
-| [`(constructor)`](unexpected/op_constructor.md.nolink) | コンストラクタ | C++23 |
-| [`(destructor)`](unexpected/op_destructor.md.nolink)   | デストラクタ | C++23 |
+| [`(constructor)`](unexpected/op_constructor.md) | コンストラクタ | C++23 |
+| `(destructor)` | デストラクタ | C++23 |
 
 ### 代入
 
 | 名前            | 説明           | 対応バージョン |
 |-----------------|----------------|-------|
-| [`operator=`](unexpected/op_assign.md.nolink) | 代入演算子     | C++23 |
-| [`swap`](unexpected/swap.md.nolink) | 他の`unexpected`オブジェクトとデータを入れ替える | C++23 |
+| `constexpr unexpected&amp;amp; operator=(const unexpected&amp;amp;) = default;` | コピー代入演算子 | C++23 |
+| `constexpr unexpected&amp;amp; operator=(unexpected&amp;amp;&amp;amp;) = default;` | ムーブ代入演算子 | C++23 |
+| [`swap`](unexpected/swap.md) | 他の`unexpected`オブジェクトとデータを入れ替える | C++23 |
 
 ### 値の観測
 
 | 名前            | 説明           | 対応バージョン |
 |-----------------|----------------|-------|
-| [`error`](unexpected/error.md.nolink) | エラー値を取得する | C++23 |
+| [`error`](unexpected/error.md) | 値を取得する | C++23 |
 
 ### 比較
 
 | 名前         | 説明       | 対応バージョン |
 |--------------|------------|-------|
-| [`operator==`](unexpected/op_equal.md.nolink) | 等値比較 | C++23 |
-| [`operator!=`](unexpected/op_not_equal.md.nolink) | 非等値比較 | C++23 |
+| [`operator==`](unexpected/op_equal.md) | 等値比較 | C++23 |
+| [`operator!=`](unexpected/op_not_equal.md) | 非等値比較 | C++23 |
 
 
 ## 非メンバ関数
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|-------|
-| [`swap`](unexpected/swap_free.md.nolink) | 他の`unexpected`オブジェクトとデータを入れ替える | C++23 |
+| [`swap`](unexpected/swap_free.md) | 2つの`unexpected`オブジェクトを入れ替える | C++23 |
 
 ## 推論補助
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|-------|
-| [`(deduction_guide)`](unexpected/op_deduction_guide.md.nolink) | クラステンプレートの推論補助 | C++23 |
+| [`(deduction_guide)`](unexpected/op_deduction_guide.md) | クラステンプレートの推論補助 | C++23 |
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>error -- expected: unexpected&lt;E&gt;(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/unexpected/error.html"/>
      <id>a69e754d6d013d030e477d95ed5bdc1432ea46e6:reference/expected/unexpected/error.md</id>
      <updated>2023-02-09T18:45:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/unexpected/error.md b/reference/expected/unexpected/error.md
new file mode 100644
index 000000000..054b65f7b
--- /dev/null
+++ b/reference/expected/unexpected/error.md
@@ -0,0 +1,65 @@
+# error
+* expected[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* unexpected[meta class]
+* cpp23[meta cpp]
+
+```cpp
+constexpr const E&amp;amp; error() const &amp;amp; noexcept;   // (1)
+constexpr E&amp;amp; error() &amp;amp; noexcept;               // (2)
+constexpr const E&amp;amp;&amp;amp; error() const &amp;amp;&amp;amp; noexcept; // (3)
+constexpr E&amp;amp;&amp;amp; error() &amp;amp;&amp;amp; noexcept;             // (4)
+```
+
+## 概要
+値を取得する。
+
+
+## 戻り値
+動作説明用のメンバ変数として、値を保持する`unex`を導入する。
+
+- (1), (2) : `unex`
+- (3), (4) : [`std::move`](/reference/utility/move.md)`(unex)`
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;expected&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+int main()
+{
+  std::unexpected&amp;lt;std::string&amp;gt; x{&amp;#34;ERR&amp;#34;};
+  std::cout &amp;lt;&amp;lt; x.error() &amp;lt;&amp;lt; std::endl;
+}
+```
+* error()[color ff0000]
+* std::unexpected[link ../unexpected.md]
+
+### 出力
+```
+ERR
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 16.0
+- [GCC](/implementation.md#gcc): 12.1
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P0323R12 std::expected](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0323r12.html)
+- [P2549R1 `std::unexpected&amp;lt;E&amp;gt;` should have `error()` as member accessor](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2549r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- expected: unexpected&lt;E&gt;(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/unexpected/op_constructor.html"/>
      <id>a69e754d6d013d030e477d95ed5bdc1432ea46e6:reference/expected/unexpected/op_constructor.md</id>
      <updated>2023-02-09T18:45:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/unexpected/op_constructor.md b/reference/expected/unexpected/op_constructor.md
new file mode 100644
index 000000000..258bd17dc
--- /dev/null
+++ b/reference/expected/unexpected/op_constructor.md
@@ -0,0 +1,146 @@
+# コンストラクタ
+* expected[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* unexpected[meta class]
+* cpp23[meta cpp]
+
+```cpp
+constexpr unexpected(const unexpected&amp;amp;) = default;  // (1)
+constexpr unexpected(unexpected&amp;amp;&amp;amp;) = default;       // (2)
+
+template&amp;lt;class Err = E&amp;gt;
+constexpr explicit unexpected(Err&amp;amp;&amp;amp; e);  // (3)
+
+template&amp;lt;class... Args&amp;gt;
+constexpr explicit unexpected(in_place_t, Args&amp;amp;&amp;amp;... args);  // (4)
+template&amp;lt;class U, class... Args&amp;gt;
+constexpr explicit unexpected(in_place_t, initializer_list&amp;lt;U&amp;gt; il, Args&amp;amp;&amp;amp;... args); // (5)
+```
+* in_place_t[link /reference/utility/in_place_t.md]
+* initializer_list[link /reference/initializer_list/initializer_list.md]
+
+## 概要
+- (1) : コピーコンストラクタ。
+- (2) : ムーブコンストラクタ。
+- (3) : 変換可能な`Err`オブジェクトからコピー／ムーブ構築する。
+- (4) : コンストラクタ引数として任意個の引数を受け取って、コンストラクタ内で型`E`のオブジェクトを生成し、保持する。
+- (5) : コンストラクタ引数として初期化子リストと任意個の引数を受け取って、コンストラクタ内で型`E`のオブジェクトを生成し、保持する。
+
+
+## テンプレートパラメータ制約
+- (3) : 次の制約を全て満たすこと
+    - [`is_same_v`](/reference/type_traits/is_same.md)`&amp;lt;`[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;Err&amp;gt;, unexpected&amp;gt; == false`
+    - [`is_same_v`](/reference/type_traits/is_same.md)`&amp;lt;`[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;Err&amp;gt;,` [`in_place_t`](/reference/utility/in_place_t.md)`&amp;gt; == false`
+    - [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;E, Err&amp;gt; == true`
+- (4) : [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;E, Args...&amp;gt; == true`
+- (5) : [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;E,` [`initializer_list`](/reference/initializer_list/initializer_list.md)`&amp;lt;U&amp;gt;&amp;amp;, Args...&amp;gt; == true`
+
+
+## 効果
+- (3) : [`std::forward`](/reference/utility/forward.md)`&amp;lt;Err&amp;gt;(e)`で値を直接非リスト初期化する。
+- (4) : [`std::forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...`で値を直接非リスト初期化する。
+- (5) : `il,` [`std::forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...`で値を直接非リスト初期化する。
+
+
+## 例外
+型`E`の初期化から送出される例外。
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;expected&amp;gt;
+#include &amp;lt;memory&amp;gt;
+#include &amp;lt;string&amp;gt;
+#include &amp;lt;string_view&amp;gt;
+#include &amp;lt;tuple&amp;gt;
+#include &amp;lt;utility&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+// std::pair型から2要素std::tuple型へはコピー変換可能
+using IntPair  = std::pair&amp;lt;int, int&amp;gt;;
+using IntTuple = std::tuple&amp;lt;int, int&amp;gt;;
+
+// std::unique_ptr型からstd::shared_ptr型へはムーブ変換可能
+using UniquePtr = std::unique_ptr&amp;lt;int&amp;gt;;
+using SharedPtr = std::shared_ptr&amp;lt;int&amp;gt;;
+
+// 引数リスト または 初期化子リスト＋引数リスト から構築可能な型
+struct ComplexType {
+  std::string data;
+  std::vector&amp;lt;int&amp;gt; seq;
+
+  ComplexType(const char* ptr, size_t len)
+    : data(ptr, len) {}
+  ComplexType(std::initializer_list&amp;lt;int&amp;gt; il, std::string_view sv)
+    : data(sv), seq(il) {} 
+};
+
+int main()
+{
+  // (1) コピーコンストラクタ
+  {
+    std::unexpected&amp;lt;int&amp;gt; src{42};
+    std::unexpected&amp;lt;int&amp;gt; dst = src;
+    assert(src.error() == 42 &amp;amp;&amp;amp; dst.error() == 42);
+  }
+
+  // (2) ムーブコンストラクタ
+  {
+    std::unexpected&amp;lt;std::string&amp;gt; src{&amp;#34;Oops!&amp;#34;};
+    std::unexpected&amp;lt;std::string&amp;gt; dst = std::move(src);
+    assert(dst.error() == &amp;#34;Oops!&amp;#34;);
+    // src.error()はstd::stringムーブ後の未規定の値
+  }
+
+  // (3) 変換コピー構築
+  {
+    IntPair src = {1, 2};
+    std::unexpected&amp;lt;IntTuple&amp;gt; dst{src};
+    assert((dst.error() == IntTuple{1, 2}));
+  }
+  // (3) 変換構築
+  {
+    UniquePtr src = std::make_unique&amp;lt;int&amp;gt;(42);
+    std::unexpected&amp;lt;SharedPtr&amp;gt; dst{std::move(src)};
+    assert(*dst.error() == 42);
+    assert(src == nullptr);
+    // ムーブ後のstd::unique_ptr型はnullptrが保証される
+  }
+
+  // (4),(5) 引数リストから直接構築
+  {
+    std::unexpected&amp;lt;ComplexType&amp;gt; x1{std::in_place, &amp;#34;C++&amp;#34;, 1};
+    assert(x1.error().data == &amp;#34;C&amp;#34;);
+    // &amp;#34;C++&amp;#34;より長さ1の文字列が構築されている
+
+    std::unexpected&amp;lt;ComplexType&amp;gt; x2{std::in_place, {98, 11, 23}, &amp;#34;C++&amp;#34;};
+    assert(x2.error().data == &amp;#34;C++&amp;#34;);
+    assert((x2.error().seq == std::vector&amp;lt;int&amp;gt;{98, 11, 23}));
+  }
+}
+```
+* std::unexpected[color ff0000]
+* error[link error.md]
+* std::in_place[link /reference/utility/in_place_t.md]
+* std::make_unique[link /reference/memory/make_unique.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 16.0
+- [GCC](/implementation.md#gcc): 12.1
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P0323R12 std::expected](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0323r12.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- expected: unexpected&lt;E&gt;(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/unexpected/op_deduction_guide.html"/>
      <id>a69e754d6d013d030e477d95ed5bdc1432ea46e6:reference/expected/unexpected/op_deduction_guide.md</id>
      <updated>2023-02-09T18:45:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/unexpected/op_deduction_guide.md b/reference/expected/unexpected/op_deduction_guide.md
new file mode 100644
index 000000000..dd79e8017
--- /dev/null
+++ b/reference/expected/unexpected/op_deduction_guide.md
@@ -0,0 +1,51 @@
+# 推論補助
+* expected[meta header]
+* std[meta namespace]
+* unexpected[meta class]
+* cpp23[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;class E&amp;gt;
+  unexpected(E) -&amp;gt; unexpected&amp;lt;E&amp;gt;;
+}
+```
+
+## 概要
+`std::expected`クラステンプレートの型推論補助。
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;concepts&amp;gt;
+#include &amp;lt;expected&amp;gt;
+
+int main()
+{
+  std::unexpected x{1};
+  assert(x.error() == 1);
+  static_assert(std::same_as&amp;lt;decltype(x), std::unexpected&amp;lt;int&amp;gt;&amp;gt;);
+}
+```
+* error()[link error.md]
+* std::unexpected[link ../unexpected.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 16.0
+- [GCC](/implementation.md#gcc): 12.1
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P0323R12 std::expected](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0323r12.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- expected: unexpected&lt;E&gt;(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/unexpected/op_equal.html"/>
      <id>a69e754d6d013d030e477d95ed5bdc1432ea46e6:reference/expected/unexpected/op_equal.md</id>
      <updated>2023-02-09T18:45:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/unexpected/op_equal.md b/reference/expected/unexpected/op_equal.md
new file mode 100644
index 000000000..988a9f466
--- /dev/null
+++ b/reference/expected/unexpected/op_equal.md
@@ -0,0 +1,58 @@
+# operator==
+* expected[meta header]
+* function template[meta id-type]
+* std[meta namespace]
+* unexpected[meta class]
+* cpp23[meta cpp]
+
+```cpp
+template&amp;lt;class E2&amp;gt;
+friend constexpr bool operator==(const unexpected&amp;amp; x, const unexpected&amp;lt;E2&amp;gt;&amp;amp; y);
+```
+* unexpected[link ../unexpected.md]
+
+## 概要
+`unexpected`オブジェクト同士の等値比較を行う。
+
+
+## 適格要件
+式`x.`[`error()`](error.md) `== y.`[`error()`](error.md)が適格であり、その結果を`bool`へ変換可能であること。
+
+
+## 戻り値
+`x.`[`error()`](error.md) `== y.`[`error()`](error.md)
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;expected&amp;gt;
+
+int main()
+{
+  std::unexpected&amp;lt;long&amp;gt;  x{1};
+  std::unexpected&amp;lt;short&amp;gt; y{1};
+  assert(x == y);
+}
+```
+* ==[color ff0000]
+* std::unexpected[link ../unexpected.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 16.0
+- [GCC](/implementation.md#gcc): 12.1
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P0323R12 std::expected](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0323r12.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator!= -- expected: unexpected&lt;E&gt;(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/unexpected/op_not_equal.html"/>
      <id>a69e754d6d013d030e477d95ed5bdc1432ea46e6:reference/expected/unexpected/op_not_equal.md</id>
      <updated>2023-02-09T18:45:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/unexpected/op_not_equal.md b/reference/expected/unexpected/op_not_equal.md
new file mode 100644
index 000000000..1b7786aa0
--- /dev/null
+++ b/reference/expected/unexpected/op_not_equal.md
@@ -0,0 +1,60 @@
+# operator!=
+* expected[meta header]
+* function template[meta id-type]
+* std[meta namespace]
+* unexpected[meta class]
+* cpp23[meta cpp]
+
+```cpp
+// operator==により、下記オーバーロードが使用可能になる
+template&amp;lt;class E2&amp;gt;
+friend constexpr bool operator!=(const unexpected&amp;amp; x, const unexpected&amp;lt;E2&amp;gt;&amp;amp; y);
+```
+* operator==[link op_equal.md]
+* unexpected[link ../unexpected.md]
+
+## 概要
+`unexpected`オブジェクト同士の非等値比較を行う。
+
+
+## 適格要件
+式`x.`[`error()`](error.md) `== y.`[`error()`](error.md)が適格であり、その結果を`bool`へ変換可能であること。
+
+
+## 戻り値
+`!`[`(x == y)`](op_equal.md)
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;expected&amp;gt;
+
+int main()
+{
+  std::unexpected&amp;lt;long&amp;gt;  x{1};
+  std::unexpected&amp;lt;short&amp;gt; y{2};
+  assert(x != y);
+}
+```
+* !=[color ff0000]
+* std::unexpected[link ../unexpected.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 16.0
+- [GCC](/implementation.md#gcc): 12.1
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P0323R12 std::expected](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0323r12.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap -- expected: unexpected&lt;E&gt;(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/unexpected/swap.html"/>
      <id>a69e754d6d013d030e477d95ed5bdc1432ea46e6:reference/expected/unexpected/swap.md</id>
      <updated>2023-02-09T18:45:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/unexpected/swap.md b/reference/expected/unexpected/swap.md
new file mode 100644
index 000000000..19b821f9d
--- /dev/null
+++ b/reference/expected/unexpected/swap.md
@@ -0,0 +1,73 @@
+# swap
+* expected[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* unexpected[meta class]
+* cpp23[meta cpp]
+
+```cpp
+constexpr void swap(unexpected&amp;amp; other)
+  noexcept(is_nothrow_swappable_v&amp;lt;E&amp;gt;);
+```
+* is_nothrow_swappable_v[link /reference/type_traits/is_nothrow_swappable.md]
+
+
+## 概要
+他の`unexpected`オブジェクトとデータを入れ替える。
+
+
+## テンプレートパラメータ制約
+[`is_swappable_v`](/reference/type_traits/is_swappable.md)`&amp;lt;E&amp;gt; == true`
+
+
+## 効果
+動作説明用の`E`型メンバ変数`unex`として、次と等価 :
+
+```cpp
+using std::swap;
+swap(unex, rhs.unex);
+```
+* std::swap[link /reference/utility/swap.md]
+
+
+## 戻り値
+なし
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;expected&amp;gt;
+
+int main()
+{
+  std::unexpected&amp;lt;int&amp;gt; x{1};
+  std::unexpected&amp;lt;int&amp;gt; y{2};
+  assert(x.error() == 1 &amp;amp;&amp;amp; y.error() == 2);
+
+  x.swap(y);
+  assert(x.error() == 2 &amp;amp;&amp;amp; y.error() == 1);
+}
+```
+* swap[color ff0000]
+* error()[link error.md]
+* std::unexpected[link ../unexpected.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 16.0
+- [GCC](/implementation.md#gcc): 12.1
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P0323R12 std::expected](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0323r12.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap (非メンバ関数) -- expected: unexpected&lt;E&gt;(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/unexpected/swap_free.html"/>
      <id>a69e754d6d013d030e477d95ed5bdc1432ea46e6:reference/expected/unexpected/swap_free.md</id>
      <updated>2023-02-09T18:45:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/unexpected/swap_free.md b/reference/expected/unexpected/swap_free.md
new file mode 100644
index 000000000..778781ee2
--- /dev/null
+++ b/reference/expected/unexpected/swap_free.md
@@ -0,0 +1,65 @@
+# swap (非メンバ関数)
+* expected[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* unexpected[meta class]
+* cpp23[meta cpp]
+
+```cpp
+friend constexpr void swap(unexpected&amp;amp; x, unexpected&amp;amp; y)
+  noexcept(noexcept(x.swap(y)));
+```
+* x.swap(y)[link swap.md]
+
+## 概要
+2つの`unexpected`オブジェクトを入れ替える。
+
+
+## 効果
+```cpp
+x.swap(y);
+```
+* swap[link swap.md]
+
+
+## 戻り値
+なし
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;expected&amp;gt;
+
+int main()
+{
+  std::unexpected&amp;lt;int&amp;gt; x{1};
+  std::unexpected&amp;lt;int&amp;gt; y{2};
+  assert(x.error() == 1 &amp;amp;&amp;amp; y.error() == 2);
+
+  std::swap(x, y);
+  assert(x.error() == 2 &amp;amp;&amp;amp; y.error() == 1);
+}
+```
+* std::swap[color ff0000]
+* error()[link error.md]
+* std::unexpected[link ../unexpected.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 16.0
+- [GCC](/implementation.md#gcc): 12.1
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P0323R12 std::expected](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0323r12.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
</feed>
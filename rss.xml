<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-11-28T12:51:17.921020</updated>
  <id>04608d79-32db-4711-a093-eb97aabec5f7</id>

  
    <entry>
      <title>iter_move -- fix a sample of atomic.</title>
      <link href="https://cpprefjp.github.io/reference/iterator/iter_move.html"/>
      <id>8a944b14616ef124fb61c5793c581789b2d58768:reference/iterator/iter_move.md</id>
      <updated>2023-11-28T21:47:39+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/iter_move.md b/reference/iterator/iter_move.md
index f77ff7ec7..9815d507a 100644
--- a/reference/iterator/iter_move.md
+++ b/reference/iterator/iter_move.md
@@ -78,7 +78,7 @@ namespace std {
 struct I {
   int n = 0;
 
-  // HIdden friendsとして定義、prvalueを返す
+  // Hidden friendsとして定義、prvalueを返す
   friend auto iter_move(I&amp;amp; self) -&amp;gt; I {
     return std::move(self);
   }
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atomic -- fix a sample of atomic.</title>
      <link href="https://cpprefjp.github.io/reference/memory/atomic.html"/>
      <id>8a944b14616ef124fb61c5793c581789b2d58768:reference/memory/atomic.md</id>
      <updated>2023-11-28T21:47:39+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/atomic.md b/reference/memory/atomic.md
index f5a561f62..9d97732a0 100644
--- a/reference/memory/atomic.md
+++ b/reference/memory/atomic.md
@@ -70,9 +70,9 @@ void producer() {
 void consumer() {
   // データが供給されたら、resourceとyを入れ替える (resourceが空になり、yにデータが入る)。
   std::shared_ptr&amp;lt;int&amp;gt; y;
-  while (!resource.exchange(y)) {
-    std::cout &amp;lt;&amp;lt; *y &amp;lt;&amp;lt; std::endl;
+  while (!(y = resource.exchange(y))) {
   }
+  std::cout &amp;lt;&amp;lt; *y &amp;lt;&amp;lt; std::endl;
 }
 
 int main()
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>make_unique_for_overwrite -- fix a sample of atomic.</title>
      <link href="https://cpprefjp.github.io/reference/memory/make_unique_for_overwrite.html"/>
      <id>8a944b14616ef124fb61c5793c581789b2d58768:reference/memory/make_unique_for_overwrite.md</id>
      <updated>2023-11-28T21:47:39+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/make_unique_for_overwrite.md b/reference/memory/make_unique_for_overwrite.md
index e22c00e00..35fe5abf6 100644
--- a/reference/memory/make_unique_for_overwrite.md
+++ b/reference/memory/make_unique_for_overwrite.md
@@ -47,24 +47,22 @@ namespace std {
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;memory&amp;gt;
-#include &amp;lt;utility&amp;gt;
 
 int main()
 {
-  std::unique_ptr&amp;lt;std::pair&amp;lt;int, int&amp;gt;&amp;gt; p1 = std::make_unique_for_overwrite&amp;lt;std::pair&amp;lt;int, int&amp;gt;&amp;gt;();
+  std::unique_ptr&amp;lt;int&amp;gt; i1 = std::make_unique_for_overwrite&amp;lt;int&amp;gt;();
 
   // 必ず初期化する
-  p1-&amp;gt;first = 0;
-  p1-&amp;gt;second = 0;
+  *i1 = 0;
 
-  std::cout &amp;lt;&amp;lt; p1-&amp;gt;first &amp;lt;&amp;lt; &amp;#39;:&amp;#39; &amp;lt;&amp;lt; p1-&amp;gt;second &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; *i1 &amp;lt;&amp;lt; std::endl;
 }
 ```
 * std::make_unique_for_overwrite[color ff0000]
 
 ### 出力
 ```
-0:0
+0
 ```
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_corresponding_member -- fix a sample of atomic.</title>
      <link href="https://cpprefjp.github.io/reference/type_traits/is_corresponding_member.html"/>
      <id>8a944b14616ef124fb61c5793c581789b2d58768:reference/type_traits/is_corresponding_member.md</id>
      <updated>2023-11-28T21:47:39+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/type_traits/is_corresponding_member.md b/reference/type_traits/is_corresponding_member.md
index acd179498..18b10a77d 100644
--- a/reference/type_traits/is_corresponding_member.md
+++ b/reference/type_traits/is_corresponding_member.md
@@ -1,6 +1,6 @@
 # is_corresponding_member
 * type_traits[meta header]
-* function[meta id-type]
+* function template[meta id-type]
 * std[meta namespace]
 * cpp20[meta cpp]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_pod -- fix a sample of atomic.</title>
      <link href="https://cpprefjp.github.io/reference/type_traits/is_pod.html"/>
      <id>8a944b14616ef124fb61c5793c581789b2d58768:reference/type_traits/is_pod.md</id>
      <updated>2023-11-28T21:47:39+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/type_traits/is_pod.md b/reference/type_traits/is_pod.md
index 230511dfa..7faded88f 100644
--- a/reference/type_traits/is_pod.md
+++ b/reference/type_traits/is_pod.md
@@ -54,7 +54,6 @@ static_assert(std::is_same&amp;lt;std::is_pod&amp;lt;int&amp;amp;&amp;gt;::type, std::false_type&amp;gt;::value, &amp;#34;ty
 static_assert(std::is_pod&amp;lt;int&amp;amp;&amp;gt;() == false, &amp;#34;is_pod&amp;lt;int&amp;amp;&amp;gt;() == false&amp;#34;);
 
 static_assert(std::is_pod&amp;lt;const volatile int&amp;gt;::value == true, &amp;#34;const volatile int is POD&amp;#34;);
-static_assert(std::is_pod&amp;lt;int&amp;amp;&amp;gt;::value == false, &amp;#34;int&amp;amp; is not POD&amp;#34;);
 
 struct POD_struct{};
 struct non_POD_struct {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_pointer_interconvertible_with_class -- fix a sample of atomic.</title>
      <link href="https://cpprefjp.github.io/reference/type_traits/is_pointer_interconvertible_with_class.html"/>
      <id>8a944b14616ef124fb61c5793c581789b2d58768:reference/type_traits/is_pointer_interconvertible_with_class.md</id>
      <updated>2023-11-28T21:47:39+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/type_traits/is_pointer_interconvertible_with_class.md b/reference/type_traits/is_pointer_interconvertible_with_class.md
index 104dd8dab..2291a70eb 100644
--- a/reference/type_traits/is_pointer_interconvertible_with_class.md
+++ b/reference/type_traits/is_pointer_interconvertible_with_class.md
@@ -1,6 +1,6 @@
 # is_pointer_interconvertible_with_class
 * type_traits[meta header]
-* function[meta id-type]
+* function template[meta id-type]
 * std[meta namespace]
 * cpp20[meta cpp]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_trivial -- fix a sample of atomic.</title>
      <link href="https://cpprefjp.github.io/reference/type_traits/is_trivial.html"/>
      <id>8a944b14616ef124fb61c5793c581789b2d58768:reference/type_traits/is_trivial.md</id>
      <updated>2023-11-28T21:47:39+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/type_traits/is_trivial.md b/reference/type_traits/is_trivial.md
index 38031617e..1a3677574 100644
--- a/reference/type_traits/is_trivial.md
+++ b/reference/type_traits/is_trivial.md
@@ -45,14 +45,13 @@ static_assert(std::is_same&amp;lt;std::is_trivial&amp;lt;int&amp;amp;&amp;gt;::type, std::false_type&amp;gt;::value,
 static_assert(std::is_trivial&amp;lt;int&amp;amp;&amp;gt;() == false, &amp;#34;is_trivial&amp;lt;int&amp;amp;&amp;gt;() == false&amp;#34;);
 
 static_assert(std::is_trivial&amp;lt;const volatile int&amp;gt;::value == true, &amp;#34;const volatile int is trivial&amp;#34;);
-static_assert(std::is_trivial&amp;lt;int&amp;amp;&amp;gt;::value == false, &amp;#34;int&amp;amp; is not trivial&amp;#34;);
 
 class trivial_class{};
 struct non_trivial_class {
   non_trivial_class() {}    // デフォルトコンストラクタが非トリビアル
 };
 static_assert(std::is_trivial&amp;lt;trivial_class&amp;gt;::value == true, &amp;#34;trivial_class is trivial&amp;#34;);
-static_assert(std::is_trivial&amp;lt;trivial_class&amp;amp;&amp;gt;::value == true, &amp;#34;trivial_class&amp;amp; is trivial&amp;#34;);
+static_assert(std::is_trivial&amp;lt;trivial_class&amp;amp;&amp;gt;::value == false, &amp;#34;trivial_class&amp;amp; is not trivial&amp;#34;);
 static_assert(std::is_trivial&amp;lt;non_trivial_class&amp;gt;::value == false, &amp;#34;non_trivial_class is not trivial&amp;#34;);
 static_assert(std::is_trivial&amp;lt;non_trivial_class&amp;amp;&amp;gt;::value == false, &amp;#34;non_trivial_class&amp;amp; is not trivial&amp;#34;);
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>from_chars -- to_chars / from_chars : コード修飾を追加</title>
      <link href="https://cpprefjp.github.io/reference/charconv/from_chars.html"/>
      <id>519f8a74927665b47e085f2cda66522126058cb7:reference/charconv/from_chars.md</id>
      <updated>2023-11-24T12:32:53+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/charconv/from_chars.md b/reference/charconv/from_chars.md
index 855170e2e..6e3d84bc5 100644
--- a/reference/charconv/from_chars.md
+++ b/reference/charconv/from_chars.md
@@ -43,6 +43,7 @@ namespace std {
 ```
 * see below[italic]
 * integer-type[italic]
+* from_chars_result[link from_chars_result.md]
 
 
 ## 概要
@@ -349,6 +350,7 @@ int main() {
 * end[link /reference/ranges/end.md]
 * to_address[link /reference/memory/to_address.md]
 * format[link /reference/format/format.md]
+* std::chars_format[link chars_format.md]
 
 #### 出力
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>to_chars -- to_chars / from_chars : コード修飾を追加</title>
      <link href="https://cpprefjp.github.io/reference/charconv/to_chars.html"/>
      <id>519f8a74927665b47e085f2cda66522126058cb7:reference/charconv/to_chars.md</id>
      <updated>2023-11-24T12:32:53+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/charconv/to_chars.md b/reference/charconv/to_chars.md
index 565102209..5fe7dc76c 100644
--- a/reference/charconv/to_chars.md
+++ b/reference/charconv/to_chars.md
@@ -94,6 +94,7 @@ namespace std {
 ```
 * see below[italic]
 * integer-type[italic]
+* to_chars_result[link to_chars_result.md]
 
 ## 概要
 与えられた数値（`value`）を文字列へ変換し、`[first, last)`内へ出力する。  
@@ -264,6 +265,8 @@ int main()
 }
 ```
 * std::to_chars[color ff0000]
+* std::chars_format[link chars_format.md]
+* std::errc[link /reference/system_error/errc.md]
 
 ### 出力例（VS2019 16.5 preview 1）
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>return_temporary_buffer -- osdn.jpのリンクをwebarchiveに差し替え #1214 #1215</title>
      <link href="https://cpprefjp.github.io/reference/memory/return_temporary_buffer.html"/>
      <id>56dc9faa8b2d540bdbb01f0e4b51f9749922ec45:reference/memory/return_temporary_buffer.md</id>
      <updated>2023-11-22T10:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/return_temporary_buffer.md b/reference/memory/return_temporary_buffer.md
index a3e6448f9..89c5c7583 100644
--- a/reference/memory/return_temporary_buffer.md
+++ b/reference/memory/return_temporary_buffer.md
@@ -10,7 +10,7 @@ template &amp;lt;class T&amp;gt;
 void return_temporary_buffer(T* p);
 ```
 
-この機能は、C++17から非推奨となり、C++20で削除された。短期的な用途のメモリ領域確保には、[`alloca()`](https://linuxjm.osdn.jp/html/LDP_man-pages/man3/alloca.3.html)のようなスタックからメモリを確保するなど、他の機能を使用すること。
+この機能は、C++17から非推奨となり、C++20で削除された。短期的な用途のメモリ領域確保には、[`alloca()`](https://web.archive.org/web/20230207110403/http://linuxjm.osdn.jp/html/LDP_man-pages/man3/alloca.3.html)のようなスタックからメモリを確保するなど、他の機能を使用すること。
 
 
 ## 概要
@@ -38,7 +38,7 @@ void return_temporary_buffer(T* p);
 
 将来的にスタックからメモリ確保をする仕組みが検討されているが、これらの関数は設計として例外安全性やRAIIといったものが考慮されていない。スタックからメモリ確保する機能が入ったとしても、これらの関数の内部を改善することはできないと判断され、非推奨となった。
 
-スタックからメモリ確保する機能は、現在の標準ライブラリにはない。そのため、代わりとしては、配置new構文や、標準外の[`alloca()`](https://linuxjm.osdn.jp/html/LDP_man-pages/man3/alloca.3.html)関数のような機能を使用すること。
+スタックからメモリ確保する機能は、現在の標準ライブラリにはない。そのため、代わりとしては、配置new構文や、標準外の[`alloca()`](https://web.archive.org/web/20230207110403/http://linuxjm.osdn.jp/html/LDP_man-pages/man3/alloca.3.html)関数のような機能を使用すること。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>wait -- osdn.jpのリンクをwebarchiveに差し替え #1214</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic/wait.html"/>
      <id>4d5c0edfcd79661472afc00a695d017297e4d1d9:reference/atomic/atomic/wait.md</id>
      <updated>2023-11-21T18:04:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic/wait.md b/reference/atomic/atomic/wait.md
index 2aead94ab..52577ef45 100644
--- a/reference/atomic/atomic/wait.md
+++ b/reference/atomic/atomic/wait.md
@@ -45,7 +45,7 @@ void wait(T old,
 
 
 ## 備考
-- Windowsでは`WaitOnAddress()`関数、POSIXでは[`futex()`](https://linuxjm.osdn.jp/html/LDP_man-pages/man2/futex.2.html)関数が実装に使われる
+- Windowsでは`WaitOnAddress()`関数、POSIXでは[`futex()`](https://web.archive.org/web/20230605025744/https://linuxjm.osdn.jp/html/LDP_man-pages/man2/futex.2.html)関数が実装に使われる
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>wait -- osdn.jpのリンクをwebarchiveに差し替え #1214</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic_flag/wait.html"/>
      <id>4d5c0edfcd79661472afc00a695d017297e4d1d9:reference/atomic/atomic_flag/wait.md</id>
      <updated>2023-11-21T18:04:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic_flag/wait.md b/reference/atomic/atomic_flag/wait.md
index 7ec772b20..f4a550ebf 100644
--- a/reference/atomic/atomic_flag/wait.md
+++ b/reference/atomic/atomic_flag/wait.md
@@ -36,7 +36,7 @@ void wait(bool old, memory_order order = memory_order::seq_cst) const noexcept;
 
 
 ## 備考
-- Windowsでは`WaitOnAddress()`関数、POSIXでは[`futex()`](https://linuxjm.osdn.jp/html/LDP_man-pages/man2/futex.2.html)関数が実装に使われる
+- Windowsでは`WaitOnAddress()`関数、POSIXでは[`futex()`](https://web.archive.org/web/20230605025744/https://linuxjm.osdn.jp/html/LDP_man-pages/man2/futex.2.html)関数が実装に使われる
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atomic_flag_wait -- osdn.jpのリンクをwebarchiveに差し替え #1214</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic_flag_wait.html"/>
      <id>4d5c0edfcd79661472afc00a695d017297e4d1d9:reference/atomic/atomic_flag_wait.md</id>
      <updated>2023-11-21T18:04:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic_flag_wait.md b/reference/atomic/atomic_flag_wait.md
index 00d4eef90..0ac06ba10 100644
--- a/reference/atomic/atomic_flag_wait.md
+++ b/reference/atomic/atomic_flag_wait.md
@@ -36,7 +36,7 @@ namespace std {
 
 
 ## 備考
-- Windowsでは`WaitOnAddress()`関数、POSIXでは[`futex()`](https://linuxjm.osdn.jp/html/LDP_man-pages/man2/futex.2.html)関数が実装に使われる
+- Windowsでは`WaitOnAddress()`関数、POSIXでは[`futex()`](https://web.archive.org/web/20230605025744/https://linuxjm.osdn.jp/html/LDP_man-pages/man2/futex.2.html)関数が実装に使われる
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atomic_flag_wait_explicit -- osdn.jpのリンクをwebarchiveに差し替え #1214</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic_flag_wait_explicit.html"/>
      <id>4d5c0edfcd79661472afc00a695d017297e4d1d9:reference/atomic/atomic_flag_wait_explicit.md</id>
      <updated>2023-11-21T18:04:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic_flag_wait_explicit.md b/reference/atomic/atomic_flag_wait_explicit.md
index c97c3c193..6c5fd8f67 100644
--- a/reference/atomic/atomic_flag_wait_explicit.md
+++ b/reference/atomic/atomic_flag_wait_explicit.md
@@ -40,7 +40,7 @@ namespace std {
 
 
 ## 備考
-- Windowsでは`WaitOnAddress()`関数、POSIXでは[`futex()`](https://linuxjm.osdn.jp/html/LDP_man-pages/man2/futex.2.html)関数が実装に使われる
+- Windowsでは`WaitOnAddress()`関数、POSIXでは[`futex()`](https://web.archive.org/web/20230605025744/https://linuxjm.osdn.jp/html/LDP_man-pages/man2/futex.2.html)関数が実装に使われる
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>wait -- osdn.jpのリンクをwebarchiveに差し替え #1214</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic_ref/wait.html"/>
      <id>4d5c0edfcd79661472afc00a695d017297e4d1d9:reference/atomic/atomic_ref/wait.md</id>
      <updated>2023-11-21T18:04:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic_ref/wait.md b/reference/atomic/atomic_ref/wait.md
index 71ffb0317..7bc8a699d 100644
--- a/reference/atomic/atomic_ref/wait.md
+++ b/reference/atomic/atomic_ref/wait.md
@@ -35,7 +35,7 @@ void wait(T old, memory_order order = memory_order::seq_cst) const noexcept;
 
 
 ## 備考
-- Windowsでは`WaitOnAddress()`関数、POSIXでは[`futex()`](https://linuxjm.osdn.jp/html/LDP_man-pages/man2/futex.2.html)関数が実装に使われる
+- Windowsでは`WaitOnAddress()`関数、POSIXでは[`futex()`](https://web.archive.org/web/20230605025744/https://linuxjm.osdn.jp/html/LDP_man-pages/man2/futex.2.html)関数が実装に使われる
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atomic_wait -- osdn.jpのリンクをwebarchiveに差し替え #1214</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic_wait.html"/>
      <id>4d5c0edfcd79661472afc00a695d017297e4d1d9:reference/atomic/atomic_wait.md</id>
      <updated>2023-11-21T18:04:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic_wait.md b/reference/atomic/atomic_wait.md
index abeb47c7a..3458917f5 100644
--- a/reference/atomic/atomic_wait.md
+++ b/reference/atomic/atomic_wait.md
@@ -45,7 +45,7 @@ namespace std {
 
 
 ## 備考
-- Windowsでは`WaitOnAddress()`関数、POSIXでは[`futex()`](https://linuxjm.osdn.jp/html/LDP_man-pages/man2/futex.2.html)関数が実装に使われる
+- Windowsでは`WaitOnAddress()`関数、POSIXでは[`futex()`](https://web.archive.org/web/20230605025744/https://linuxjm.osdn.jp/html/LDP_man-pages/man2/futex.2.html)関数が実装に使われる
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atomic_wait_explicit -- osdn.jpのリンクをwebarchiveに差し替え #1214</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic_wait_explicit.html"/>
      <id>4d5c0edfcd79661472afc00a695d017297e4d1d9:reference/atomic/atomic_wait_explicit.md</id>
      <updated>2023-11-21T18:04:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic_wait_explicit.md b/reference/atomic/atomic_wait_explicit.md
index 985fcd69c..a276ab3aa 100644
--- a/reference/atomic/atomic_wait_explicit.md
+++ b/reference/atomic/atomic_wait_explicit.md
@@ -47,7 +47,7 @@ namespace std {
 
 
 ## 備考
-- Windowsでは`WaitOnAddress()`関数、POSIXでは[`futex()`](https://linuxjm.osdn.jp/html/LDP_man-pages/man2/futex.2.html)関数が実装に使われる
+- Windowsでは`WaitOnAddress()`関数、POSIXでは[`futex()`](https://web.archive.org/web/20230605025744/https://linuxjm.osdn.jp/html/LDP_man-pages/man2/futex.2.html)関数が実装に使われる
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>create_directory -- osdn.jpのリンクをwebarchiveに差し替え #1214</title>
      <link href="https://cpprefjp.github.io/reference/filesystem/create_directory.html"/>
      <id>4d5c0edfcd79661472afc00a695d017297e4d1d9:reference/filesystem/create_directory.md</id>
      <updated>2023-11-21T18:04:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/filesystem/create_directory.md b/reference/filesystem/create_directory.md
index 873563fa4..dca20f8a3 100644
--- a/reference/filesystem/create_directory.md
+++ b/reference/filesystem/create_directory.md
@@ -25,10 +25,10 @@ namespace std::filesystem {
 
 ## 効果
 - (1), (2) : パス`p`のディレクトリを作成する
-    - POSIX環境では、[`mkdir()`](https://linuxjm.osdn.jp/html/LDP_man-pages/man2/mkdir.2.html)関数に、第2引数に権限として`static_cast&amp;lt;int&amp;gt;(`[`perms::all`](perms.md)`)`を指定して実行する
+    - POSIX環境では、[`mkdir()`](https://web.archive.org/web/20231009095236/https://linuxjm.osdn.jp/html/LDP_man-pages/man2/mkdir.2.html)関数に、第2引数に権限として`static_cast&amp;lt;int&amp;gt;(`[`perms::all`](perms.md)`)`を指定して実行する
     - (2) では、OSのファイルシステムAPIによってエラーが報告された場合、`ec`にエラー情報が設定される。そうでなければ、[`ec.clear()`](/reference/system_error/error_code/clear.md)を呼び出し、エラー情報をクリアする
 - (3), (4) : パス`existing_p`の属性を取得し、その属性を付加してパス`p`のディレクトリを作成する
-    - POSIX環境では、[`stat`](https://linuxjm.osdn.jp/html/LDP_man-pages/man2/stat.2.html)`(existing_p.c_str(), &amp;amp;attributes_stat)`の呼び出し後に、[`mkdir`](https://linuxjm.osdn.jp/html/LDP_man-pages/man2/mkdir.2.html)`(p.c_str(), attributes_stat.st_mode)`の呼び出しでディレクトリを作成する
+    - POSIX環境では、[`stat`](https://web.archive.org/web/20230827123440/https://linuxjm.osdn.jp/html/LDP_man-pages/man2/stat.2.html)`(existing_p.c_str(), &amp;amp;attributes_stat)`の呼び出し後に、[`mkdir`](https://web.archive.org/web/20231009095236/https://linuxjm.osdn.jp/html/LDP_man-pages/man2/mkdir.2.html)`(p.c_str(), attributes_stat.st_mode)`の呼び出しでディレクトリを作成する
     - Windows環境では、`CreateDirectoryExW(existing_p.c_str(), p.c_str(), 0)`を呼び出す
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>create_directory_symlink -- osdn.jpのリンクをwebarchiveに差し替え #1214</title>
      <link href="https://cpprefjp.github.io/reference/filesystem/create_directory_symlink.html"/>
      <id>4d5c0edfcd79661472afc00a695d017297e4d1d9:reference/filesystem/create_directory_symlink.md</id>
      <updated>2023-11-21T18:04:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/filesystem/create_directory_symlink.md b/reference/filesystem/create_directory_symlink.md
index b90860e22..ff42a0ac9 100644
--- a/reference/filesystem/create_directory_symlink.md
+++ b/reference/filesystem/create_directory_symlink.md
@@ -22,7 +22,7 @@ namespace std::filesystem {
 
 
 ## 効果
-- POSIX環境では、[`symlink()`](https://linuxjm.osdn.jp/html/LDP_man-pages/man2/symlink.2.html)関数を使用して、パス`to`のディレクトリに対するシンボリックリンクをパス`new_symlink`に作成する
+- POSIX環境では、[`symlink()`](https://web.archive.org/web/20230205210429/http://linuxjm.osdn.jp/html/LDP_man-pages/man2/symlink.2.html)関数を使用して、パス`to`のディレクトリに対するシンボリックリンクをパス`new_symlink`に作成する
     - パス`to`は、パス`new_symlink`からの相対パスであることに注意
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>create_hard_link -- osdn.jpのリンクをwebarchiveに差し替え #1214</title>
      <link href="https://cpprefjp.github.io/reference/filesystem/create_hard_link.html"/>
      <id>4d5c0edfcd79661472afc00a695d017297e4d1d9:reference/filesystem/create_hard_link.md</id>
      <updated>2023-11-21T18:04:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/filesystem/create_hard_link.md b/reference/filesystem/create_hard_link.md
index 447e72377..a27c65417 100644
--- a/reference/filesystem/create_hard_link.md
+++ b/reference/filesystem/create_hard_link.md
@@ -20,7 +20,7 @@ namespace std::filesystem {
 
 
 ## 効果
-- POSIX環境では、[`link()`](https://linuxjm.osdn.jp/html/LDP_man-pages/man2/link.2.html)関数を使用して、パス`to`のファイルと同じinodeを参照するハードリンクをパス`new_hard_link`に作成する
+- POSIX環境では、[`link()`](https://web.archive.org/web/20230206201555/http://linuxjm.osdn.jp/html/LDP_man-pages/man2/link.2.html)関数を使用して、パス`to`のファイルと同じinodeを参照するハードリンクをパス`new_hard_link`に作成する
 
 
 ## 戻り値
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>create_symlink -- osdn.jpのリンクをwebarchiveに差し替え #1214</title>
      <link href="https://cpprefjp.github.io/reference/filesystem/create_symlink.html"/>
      <id>4d5c0edfcd79661472afc00a695d017297e4d1d9:reference/filesystem/create_symlink.md</id>
      <updated>2023-11-21T18:04:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/filesystem/create_symlink.md b/reference/filesystem/create_symlink.md
index 430d0cf52..cc23ce7ea 100644
--- a/reference/filesystem/create_symlink.md
+++ b/reference/filesystem/create_symlink.md
@@ -20,7 +20,7 @@ namespace std::filesystem {
 
 
 ## 効果
-- POSIX環境では、[`symlink()`](https://linuxjm.osdn.jp/html/LDP_man-pages/man2/symlink.2.html)関数を使用して、パス`to`のファイル・ディレクトリに対するシンボリックリンクをパス`new_symlink`に作成する
+- POSIX環境では、[`symlink()`](https://web.archive.org/web/20230205210429/http://linuxjm.osdn.jp/html/LDP_man-pages/man2/symlink.2.html)関数を使用して、パス`to`のファイル・ディレクトリに対するシンボリックリンクをパス`new_symlink`に作成する
 
 
 ## 戻り値
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>current_path -- osdn.jpのリンクをwebarchiveに差し替え #1214</title>
      <link href="https://cpprefjp.github.io/reference/filesystem/current_path.html"/>
      <id>4d5c0edfcd79661472afc00a695d017297e4d1d9:reference/filesystem/current_path.md</id>
      <updated>2023-11-21T18:04:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/filesystem/current_path.md b/reference/filesystem/current_path.md
index fa7adeab4..e77285473 100644
--- a/reference/filesystem/current_path.md
+++ b/reference/filesystem/current_path.md
@@ -24,12 +24,12 @@ namespace std::filesystem {
 
 ## 効果
 - (3), (4) : パス`p`を、現在の作業ディレクトリとして設定する
-    - POSIX環境では、[`chdir()`](https://linuxjm.osdn.jp/html/LDP_man-pages/man2/chdir.2.html)関数を使用する
+    - POSIX環境では、[`chdir()`](https://web.archive.org/web/20230605001127/https://linuxjm.osdn.jp/html/LDP_man-pages/man2/chdir.2.html)関数を使用する
 
 
 ## 戻り値
 - (1), (2) : 現在の作業ディレクトリの絶対パスを、ネイティブフォーマットとして返す
-    - POSIX環境では、[`getcwd()`](https://linuxjm.osdn.jp/html/LDP_man-pages/man3/getcwd.3.html)関数を使用する
+    - POSIX環境では、[`getcwd()`](https://web.archive.org/web/20230208075801/http://linuxjm.osdn.jp/html/LDP_man-pages/man3/getcwd.3.html)関数を使用する
     - エラーが発生した場合、 (2) では`path()`が返る
 - (3), (4) : なし
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>file_size -- osdn.jpのリンクをwebarchiveに差し替え #1214</title>
      <link href="https://cpprefjp.github.io/reference/filesystem/file_size.html"/>
      <id>4d5c0edfcd79661472afc00a695d017297e4d1d9:reference/filesystem/file_size.md</id>
      <updated>2023-11-21T18:04:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/filesystem/file_size.md b/reference/filesystem/file_size.md
index f1f8965e2..07c94ab69 100644
--- a/reference/filesystem/file_size.md
+++ b/reference/filesystem/file_size.md
@@ -20,7 +20,7 @@ namespace std::filesystem {
 ## 戻り値
 - ファイルが存在しない、もしくはファイルシステムでエラーが発生した場合、 (1) では[`std::filesystem::filesystem_error`](filesystem_error.md)例外を送出し、 (2) では`ec`にエラー情報が設定されて`static_cast&amp;lt;`[`uintmax_t`](/reference/cstdint/uintmax_t.md)`&amp;gt;(-1)`が返る
 - `p`が通常ファイル、もしくは通常ファイルを指すシンボリックリンクである場合、ファイルサイズが返る
-    - POSIX環境では[`stat()`](https://linuxjm.osdn.jp/html/LDP_man-pages/man2/stat.2.html)関数の`st_size`メンバ変数を使用する
+    - POSIX環境では[`stat()`](https://web.archive.org/web/20230827123440/https://linuxjm.osdn.jp/html/LDP_man-pages/man2/stat.2.html)関数の`st_size`メンバ変数を使用する
 - `p`がそれ以外のファイル種別である場合は、実装定義の動作をする
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>last_write_time -- osdn.jpのリンクをwebarchiveに差し替え #1214</title>
      <link href="https://cpprefjp.github.io/reference/filesystem/last_write_time.html"/>
      <id>4d5c0edfcd79661472afc00a695d017297e4d1d9:reference/filesystem/last_write_time.md</id>
      <updated>2023-11-21T18:04:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/filesystem/last_write_time.md b/reference/filesystem/last_write_time.md
index fc1a977b1..c5731d1d5 100644
--- a/reference/filesystem/last_write_time.md
+++ b/reference/filesystem/last_write_time.md
@@ -27,10 +27,10 @@ namespace std::filesystem {
 
 ## 効果
 - (1), (2) : パス`p`が指すエンティティのデータが最後に変更された時間を返す
-    - POSIX環境では[`stat()`](https://linuxjm.osdn.jp/html/LDP_man-pages/man2/stat.2.html)関数によって返される`st_mtime`メンバを使用する
+    - POSIX環境では[`stat()`](https://web.archive.org/web/20230827123440/https://linuxjm.osdn.jp/html/LDP_man-pages/man2/stat.2.html)関数によって返される`st_mtime`メンバを使用する
     - (2) : エラーが発生した場合は、`ec`にエラー情報が設定され、`file_time_type::min()`が返る
 - (3), (4) : パス`p`のエンティティに、最終更新日時として`new_time`を設定する
-    - POSIX環境では[`futimens()`](https://linuxjm.osdn.jp/html/LDP_man-pages/man2/utimensat.2.html)関数を使用する
+    - POSIX環境では[`futimens()`](https://web.archive.org/web/20230129193157/https://linuxjm.osdn.jp/html/LDP_man-pages/man2/utimensat.2.html)関数を使用する
     - この関数を実行した結果として、`last_write_time(p) == new_time`となることは保証されない。これはOSのファイルシステムの制限による
     - (4) : エラーが発生した場合は、`ec`にエラー情報が設定される
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>remove -- osdn.jpのリンクをwebarchiveに差し替え #1214</title>
      <link href="https://cpprefjp.github.io/reference/filesystem/remove.html"/>
      <id>4d5c0edfcd79661472afc00a695d017297e4d1d9:reference/filesystem/remove.md</id>
      <updated>2023-11-21T18:04:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/filesystem/remove.md b/reference/filesystem/remove.md
index 9a131678e..7b2cfa6f4 100644
--- a/reference/filesystem/remove.md
+++ b/reference/filesystem/remove.md
@@ -17,7 +17,7 @@ namespace std::filesystem {
 
 
 ## 効果
-- POSIX環境では、[`remove()`](https://linuxjm.osdn.jp/html/LDP_man-pages/man3/remove.3.html)関数を使用して、ファイル・ディレクトリを削除する。この環境では、ディレクトリを削除する場合、そのディレクトリは空でなければならない
+- POSIX環境では、[`remove()`](https://web.archive.org/web/20230207183630/http://linuxjm.osdn.jp/html/LDP_man-pages/man3/remove.3.html)関数を使用して、ファイル・ディレクトリを削除する。この環境では、ディレクトリを削除する場合、そのディレクトリは空でなければならない
 
 
 ## 戻り値
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>remove_all -- osdn.jpのリンクをwebarchiveに差し替え #1214</title>
      <link href="https://cpprefjp.github.io/reference/filesystem/remove_all.html"/>
      <id>4d5c0edfcd79661472afc00a695d017297e4d1d9:reference/filesystem/remove_all.md</id>
      <updated>2023-11-21T18:04:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/filesystem/remove_all.md b/reference/filesystem/remove_all.md
index adf2db2ba..ac7f89e8d 100644
--- a/reference/filesystem/remove_all.md
+++ b/reference/filesystem/remove_all.md
@@ -21,7 +21,7 @@ namespace std::filesystem {
 
 ## 効果
 - パス`p`のコンテンツを、再帰的に削除する
-- POSIX環境では、それぞれのコンテンツの削除に、[`remove()`](https://linuxjm.osdn.jp/html/LDP_man-pages/man3/remove.3.html)関数を使用する
+- POSIX環境では、それぞれのコンテンツの削除に、[`remove()`](https://web.archive.org/web/20230207183630/http://linuxjm.osdn.jp/html/LDP_man-pages/man3/remove.3.html)関数を使用する
 
 
 ## 戻り値
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rename -- osdn.jpのリンクをwebarchiveに差し替え #1214</title>
      <link href="https://cpprefjp.github.io/reference/filesystem/rename.html"/>
      <id>4d5c0edfcd79661472afc00a695d017297e4d1d9:reference/filesystem/rename.md</id>
      <updated>2023-11-21T18:04:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/filesystem/rename.md b/reference/filesystem/rename.md
index 26268f06d..f4d23b96b 100644
--- a/reference/filesystem/rename.md
+++ b/reference/filesystem/rename.md
@@ -21,7 +21,7 @@ namespace std::filesystem {
 
 ## 効果
 - パス`old_p`のファイル・ディレクトリを、パス`new_p`に名称変更する
-    - POSIX環境では、[`rename()`](https://linuxjm.osdn.jp/html/LDP_man-pages/man2/rename.2.html)関数を使用する
+    - POSIX環境では、[`rename()`](https://web.archive.org/web/20230207112323/http://linuxjm.osdn.jp/html/LDP_man-pages/man2/rename.2.html)関数を使用する
 - パス`old_p`とパス`new_p`が同じファイルに解決される場合、本関数はなにもしない
 - そうでない場合、名称変更操作には、以下のような効果も含む：
     - `new_p`がすでに存在する非ディレクトリのファイルに解決される場合、すでに存在している`new_p`のファイルは削除される
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>resize_file -- osdn.jpのリンクをwebarchiveに差し替え #1214</title>
      <link href="https://cpprefjp.github.io/reference/filesystem/resize_file.html"/>
      <id>4d5c0edfcd79661472afc00a695d017297e4d1d9:reference/filesystem/resize_file.md</id>
      <updated>2023-11-21T18:04:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/filesystem/resize_file.md b/reference/filesystem/resize_file.md
index a80559102..acbc12041 100644
--- a/reference/filesystem/resize_file.md
+++ b/reference/filesystem/resize_file.md
@@ -19,7 +19,7 @@ namespace std::filesystem {
 
 ## 効果
 - ファイル`p`の大きさを、`new_size`バイトに変更する。
-    - POSIX環境では、[`truncate()`](https://linuxjm.osdn.jp/html/LDP_man-pages/man2/truncate.2.html)関数を使用する
+    - POSIX環境では、[`truncate()`](https://web.archive.org/web/20230605150743/https://linuxjm.osdn.jp/html/LDP_man-pages/man2/truncate.2.html)関数を使用する
 
 
 ## 例外
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>space -- osdn.jpのリンクをwebarchiveに差し替え #1214</title>
      <link href="https://cpprefjp.github.io/reference/filesystem/space.html"/>
      <id>4d5c0edfcd79661472afc00a695d017297e4d1d9:reference/filesystem/space.md</id>
      <updated>2023-11-21T18:04:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/filesystem/space.md b/reference/filesystem/space.md
index 64794c5d6..b0e0d5f31 100644
--- a/reference/filesystem/space.md
+++ b/reference/filesystem/space.md
@@ -18,7 +18,7 @@ namespace std::filesystem {
 
 
 ## 戻り値
-- POSIX環境であれば、[`statvfs()`](https://linuxjm.osdn.jp/html/LDP_man-pages/man3/statvfs.3.html)関数を使用して、残り容量を取得する。
+- POSIX環境であれば、[`statvfs()`](https://web.archive.org/web/20230129184216/http://linuxjm.osdn.jp/html/LDP_man-pages/man3/statvfs.3.html)関数を使用して、残り容量を取得する。
     - [`space_info::capacity`](space_info.md)の値は`statvfs::f_blocks * statvfs::f_frsize`
     - [`space_info::free`](space_info.md)の値は`statvfs::f_bfree * statvfs::f_frsize`
     - [`space_info::available`](space_info.md)の値は`statvfs::f_bavail * statvfs::f_frsize`
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>status -- osdn.jpのリンクをwebarchiveに差し替え #1214</title>
      <link href="https://cpprefjp.github.io/reference/filesystem/status.html"/>
      <id>4d5c0edfcd79661472afc00a695d017297e4d1d9:reference/filesystem/status.md</id>
      <updated>2023-11-21T18:04:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/filesystem/status.md b/reference/filesystem/status.md
index cfa32866e..c7f9f15e9 100644
--- a/reference/filesystem/status.md
+++ b/reference/filesystem/status.md
@@ -39,7 +39,7 @@ return result;
 
 - (2) :
     - 可能なら、ファイルパス`p`が指すファイルの属性を決定する
-        - POSIX環境であれば[`stat()`](https://linuxjm.osdn.jp/html/LDP_man-pages/man2/stat.2.html)関数を使用する
+        - POSIX環境であれば[`stat()`](https://web.archive.org/web/20230827123440/https://linuxjm.osdn.jp/html/LDP_man-pages/man2/stat.2.html)関数を使用する
     - OSのファイルシステムAPIによってエラーが報告された場合、`ec`にエラー情報が設定される。そうでなければ、[`ec.clear()`](/reference/system_error/error_code/clear.md)を呼び出し、エラー情報をクリアする
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>symlink_status -- osdn.jpのリンクをwebarchiveに差し替え #1214</title>
      <link href="https://cpprefjp.github.io/reference/filesystem/symlink_status.html"/>
      <id>4d5c0edfcd79661472afc00a695d017297e4d1d9:reference/filesystem/symlink_status.md</id>
      <updated>2023-11-21T18:04:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/filesystem/symlink_status.md b/reference/filesystem/symlink_status.md
index 2188b4d76..8be7a5d00 100644
--- a/reference/filesystem/symlink_status.md
+++ b/reference/filesystem/symlink_status.md
@@ -39,7 +39,7 @@ return result;
 
 - (2) :
     - 可能なら、ファイルパス`p`が指すファイルの属性を決定する。シンボリックリンクに対しては、シンボリックリンクが指すファイルではなく、シンボリックリンク自体のファイル属性を決定する
-        - POSIX環境であれば[`lstat()`](https://linuxjm.osdn.jp/html/LDP_man-pages/man2/stat.2.html)関数を使用する
+        - POSIX環境であれば[`lstat()`](https://web.archive.org/web/20230827123440/https://linuxjm.osdn.jp/html/LDP_man-pages/man2/stat.2.html)関数を使用する
     - OSのファイルシステムAPIによってエラーが報告された場合、`ec`にエラー情報が設定される。そうでなければ、[`ec.clear()`](/reference/system_error/error_code/clear.md)を呼び出し、エラー情報をクリアする
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>defaultfloat -- osdn.jpのリンクをwebarchiveに差し替え #1214</title>
      <link href="https://cpprefjp.github.io/reference/ios/defaultfloat.html"/>
      <id>4d5c0edfcd79661472afc00a695d017297e4d1d9:reference/ios/defaultfloat.md</id>
      <updated>2023-11-21T18:04:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ios/defaultfloat.md b/reference/ios/defaultfloat.md
index e59d170e0..07639a305 100644
--- a/reference/ios/defaultfloat.md
+++ b/reference/ios/defaultfloat.md
@@ -13,7 +13,7 @@ namespace std {
 ## 概要
 浮動小数点数を初期状態の書式で出力することを指示するマニピュレータ。
 
-この書式は、出力値や出力すべき精度により小数点数表記と指数表記が切り替わるものである（[`printf()`](http://linuxjm.osdn.jp/html/LDP_man-pages/man3/printf.3.html)関数の`%g`／`%G`相当）。
+この書式は、出力値や出力すべき精度により小数点数表記と指数表記が切り替わるものである（[`printf()`](https://web.archive.org/web/20230605132525/https://linuxjm.osdn.jp/html/LDP_man-pages/man3/printf.3.html)関数の`%g`／`%G`相当）。
 
 ## 効果
 `str.unsetf(ios_base::floatfield)`を実行する。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>hexfloat -- osdn.jpのリンクをwebarchiveに差し替え #1214</title>
      <link href="https://cpprefjp.github.io/reference/ios/hexfloat.html"/>
      <id>4d5c0edfcd79661472afc00a695d017297e4d1d9:reference/ios/hexfloat.md</id>
      <updated>2023-11-21T18:04:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ios/hexfloat.md b/reference/ios/hexfloat.md
index 9eae0997d..7a0efd1f4 100644
--- a/reference/ios/hexfloat.md
+++ b/reference/ios/hexfloat.md
@@ -13,7 +13,7 @@ namespace std {
 ## 概要
 浮動小数点数を十六進法で入出力することを指示するマニピュレータ。
 
-[`printf()`](http://linuxjm.osdn.jp/html/LDP_man-pages/man3/printf.3.html)関数の`%a`／`%A`相当。
+[`printf()`](https://web.archive.org/web/20230605132525/https://linuxjm.osdn.jp/html/LDP_man-pages/man3/printf.3.html)関数の`%a`／`%A`相当。
 
 ## 効果
 `str.setf(ios_base::fixed | ios_base::scientific, ios_base::floatfield)`を実行する。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>get_temporary_buffer -- osdn.jpのリンクをwebarchiveに差し替え #1214</title>
      <link href="https://cpprefjp.github.io/reference/memory/get_temporary_buffer.html"/>
      <id>4d5c0edfcd79661472afc00a695d017297e4d1d9:reference/memory/get_temporary_buffer.md</id>
      <updated>2023-11-21T18:04:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/get_temporary_buffer.md b/reference/memory/get_temporary_buffer.md
index a206697a7..85e435acf 100644
--- a/reference/memory/get_temporary_buffer.md
+++ b/reference/memory/get_temporary_buffer.md
@@ -17,7 +17,7 @@ pair&amp;lt;T*, ptrdiff_t&amp;gt; get_temporary_buffer(ptrdiff_t n) noexcept;
 * pair[link /reference/utility/pair.md]
 * ptrdiff_t[link /reference/cstddef/ptrdiff_t.md]
 
-この機能は、C++17から非推奨となり、C++20で削除された。短期的な用途のメモリ領域確保には、[`alloca()`](https://linuxjm.osdn.jp/html/LDP_man-pages/man3/alloca.3.html)のようなスタックからメモリを確保するなど、他の機能を使用すること。
+この機能は、C++17から非推奨となり、C++20で削除された。短期的な用途のメモリ領域確保には、[`alloca()`](https://web.archive.org/web/20230207110403/http://linuxjm.osdn.jp/html/LDP_man-pages/man3/alloca.3.html)のようなスタックからメモリを確保するなど、他の機能を使用すること。
 
 
 ## 概要
@@ -51,7 +51,7 @@ pair&amp;lt;T*, ptrdiff_t&amp;gt; get_temporary_buffer(ptrdiff_t n) noexcept;
 
 将来的にスタックからメモリ確保をする仕組みが検討されているが、これらの関数は設計として例外安全性やRAIIといったものが考慮されていない。スタックからメモリ確保する機能が入ったとしても、これらの関数の内部を改善することはできないと判断され、非推奨となった。
 
-スタックからメモリ確保する機能は、現在の標準ライブラリにはない。そのため、代わりとしては、配置new構文や、標準外の[`alloca()`](https://linuxjm.osdn.jp/html/LDP_man-pages/man3/alloca.3.html)関数のような機能を使用すること。
+スタックからメモリ確保する機能は、現在の標準ライブラリにはない。そのため、代わりとしては、配置new構文や、標準外の[`alloca()`](https://web.archive.org/web/20230207110403/http://linuxjm.osdn.jp/html/LDP_man-pages/man3/alloca.3.html)関数のような機能を使用すること。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>random_device -- osdn.jpのリンクをwebarchiveに差し替え #1214</title>
      <link href="https://cpprefjp.github.io/reference/random/random_device.html"/>
      <id>4d5c0edfcd79661472afc00a695d017297e4d1d9:reference/random/random_device.md</id>
      <updated>2023-11-21T18:04:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/random_device.md b/reference/random/random_device.md
index 7b7c4644b..7a31d246f 100644
--- a/reference/random/random_device.md
+++ b/reference/random/random_device.md
@@ -13,7 +13,7 @@ namespace std {
 ## 概要
 `random_device`クラスは、非決定論的な乱数生成エンジンである。予測不能な乱数を生成することから、擬似乱数生成エンジンのシード初期化や、暗号化といった用途に使用できる。
 
-`random_device`の実装は処理系定義だが、Windows環境では[`CryptGenRandom()`](https://docs.microsoft.com/ja-jp/windows/win32/api/wincrypt/nf-wincrypt-cryptgenrandom)関数のラッパーとして、UNIX系環境では[`/dev/random`](https://linuxjm.osdn.jp/html/LDP_man-pages/man4/random.4.html)や[`/dev/urandom`](https://linuxjm.osdn.jp/html/LDP_man-pages/man4/random.4.html)から値を読み取る形で定義される場合がある。
+`random_device`の実装は処理系定義だが、Windows環境では[`CryptGenRandom()`](https://docs.microsoft.com/ja-jp/windows/win32/api/wincrypt/nf-wincrypt-cryptgenrandom)関数のラッパーとして、UNIX系環境では[`/dev/random`](https://web.archive.org/web/20230207121147/http://linuxjm.osdn.jp/html/LDP_man-pages/man4/random.4.html)や[`/dev/urandom`](https://web.archive.org/web/20230207121147/http://linuxjm.osdn.jp/html/LDP_man-pages/man4/random.4.html)から値を読み取る形で定義される場合がある。
 実装の制限によって予測不能な乱数生成器を定義できない場合、このクラスは**擬似乱数生成器で定義される可能性がある**ため、特にクロスプラットフォームなコードを書く場合は注意すること。
 
 予測不能な乱数はソフトウェアでは実装できないため、これらはハードウェアのノイズやマウスの動きといった環境ノイズをエントロピープールとして乱数を生成する。
@@ -323,7 +323,7 @@ int main()
 - GCC: [Implementation Status 26.5.6 [rand.device]](https://gcc.gnu.org/onlinedocs/libstdc++/manual/status.html#iso.2011.specific)
 - Microdoft Visual Studio 2017: [random\_device Class](https://docs.microsoft.com/en-us/cpp/standard-library/random-device-class)
 - [/dev/random - Wikipedia](https://ja.wikipedia.org/wiki//dev/random)
-- [Man page of RANDOM](https://linuxjm.osdn.jp/html/LDP_man-pages/man4/random.4.html)
+- [Man page of RANDOM](https://web.archive.org/web/20230207121147/http://linuxjm.osdn.jp/html/LDP_man-pages/man4/random.4.html)
 - [CryptGenRandom function (wincrypt.h) - Win32 apps | Microsoft Docs](https://docs.microsoft.com/ja-jp/windows/win32/api/wincrypt/nf-wincrypt-cryptgenrandom)
 - [random_deviceの実装（再訪） - 煙人計画](http://vaporoid.hateblo.jp/entry/2014/07/25/154852)
 - [Replacing `/dev/urandom` May 4, 2016 - Security](https://lwn.net/Articles/685371/)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>counting_semaphore -- osdn.jpのリンクをwebarchiveに差し替え #1214</title>
      <link href="https://cpprefjp.github.io/reference/semaphore/counting_semaphore.html"/>
      <id>4d5c0edfcd79661472afc00a695d017297e4d1d9:reference/semaphore/counting_semaphore.md</id>
      <updated>2023-11-21T18:04:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/semaphore/counting_semaphore.md b/reference/semaphore/counting_semaphore.md
index ffc5544a2..fa107a488 100644
--- a/reference/semaphore/counting_semaphore.md
+++ b/reference/semaphore/counting_semaphore.md
@@ -142,7 +142,7 @@ int main()
 
 
 ## 参照
-- [semop, semtimedop - System V セマフォの操作](https://linuxjm.osdn.jp/html/LDP_man-pages/man2/semop.2.html)
-- [sem_overview - POSIX セマフォの概要](https://linuxjm.osdn.jp/html/LDP_man-pages/man7/sem_overview.7.html)
+- [semop, semtimedop - System V セマフォの操作](https://web.archive.org/web/20230605023712/https://linuxjm.osdn.jp/html/LDP_man-pages/man2/semop.2.html)
+- [sem_overview - POSIX セマフォの概要](https://web.archive.org/web/20230611015117/https://linuxjm.osdn.jp/html/LDP_man-pages/man7/sem_overview.7.html)
 - [Windows, Semaphore Objects](https://docs.microsoft.com/en-us/windows/win32/sync/semaphore-objects)
 - [macOS/iOS, Dispatch Semaphore](https://developer.apple.com/documentation/dispatch/dispatch_semaphore)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>acquire -- osdn.jpのリンクをwebarchiveに差し替え #1214</title>
      <link href="https://cpprefjp.github.io/reference/semaphore/counting_semaphore/acquire.html"/>
      <id>4d5c0edfcd79661472afc00a695d017297e4d1d9:reference/semaphore/counting_semaphore/acquire.md</id>
      <updated>2023-11-21T18:04:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/semaphore/counting_semaphore/acquire.md b/reference/semaphore/counting_semaphore/acquire.md
index b29a40b35..98a70413c 100644
--- a/reference/semaphore/counting_semaphore/acquire.md
+++ b/reference/semaphore/counting_semaphore/acquire.md
@@ -36,7 +36,7 @@ void acquire();
 ## 備考
 「効果」欄では`acquire`メンバ関数の振る舞いを手続き的に説明しているが、実際の処理系においてはオペレーティングシステムが提供する効率的なセマフォ操作関数が利用されると期待される。
 
-- POSIXセマフォでは[`sem_wait`関数](https://linuxjm.osdn.jp/html/LDP_man-pages/man3/sem_wait.3.html)が提供される。
+- POSIXセマフォでは[`sem_wait`関数](https://web.archive.org/web/20230206231852/http://linuxjm.osdn.jp/html/LDP_man-pages/man3/sem_wait.3.html)が提供される。
 - Windowsセマフォでは[`WaitForSingleObject`関数](https://docs.microsoft.com/en-us/windows/win32/api/synchapi/nf-synchapi-waitforsingleobject)ファミリが提供される。
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>shared_mutex -- osdn.jpのリンクをwebarchiveに差し替え #1214</title>
      <link href="https://cpprefjp.github.io/reference/shared_mutex/shared_mutex.html"/>
      <id>4d5c0edfcd79661472afc00a695d017297e4d1d9:reference/shared_mutex/shared_mutex.md</id>
      <updated>2023-11-21T18:04:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/shared_mutex/shared_mutex.md b/reference/shared_mutex/shared_mutex.md
index 5c124a611..18e66ae31 100644
--- a/reference/shared_mutex/shared_mutex.md
+++ b/reference/shared_mutex/shared_mutex.md
@@ -29,7 +29,7 @@ namespace std {
 
 ## 備考
 - このクラスは現状、書き込みロックと読み込みロックについてのスケジューリング戦略を規定せず、カスタマイズもできない。そのため、書き込みロックがなかなか取得できない、読み込みロックがなかなか取得できないというスタベーションの問題が発生した場合に、ユーザーの状況に合わせて戦略を変更することができない。POSIXのReaders-writer lockの実装では、スケジューリングのオプションを指定できる
-    - [`pthread_rwlockattr_setkind_np()`](https://linuxjm.osdn.jp/html/LDP_man-pages/man3/pthread_rwlockattr_setkind_np.3.html)
+    - [`pthread_rwlockattr_setkind_np()`](https://web.archive.org/web/20230130174238/http://linuxjm.osdn.jp/html/LDP_man-pages/man3/pthread_rwlockattr_setkind_np.3.html)
 
 
 ## メンバ関数
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>shared_timed_mutex -- osdn.jpのリンクをwebarchiveに差し替え #1214</title>
      <link href="https://cpprefjp.github.io/reference/shared_mutex/shared_timed_mutex.html"/>
      <id>4d5c0edfcd79661472afc00a695d017297e4d1d9:reference/shared_mutex/shared_timed_mutex.md</id>
      <updated>2023-11-21T18:04:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/shared_mutex/shared_timed_mutex.md b/reference/shared_mutex/shared_timed_mutex.md
index 07aaa1a92..c80dfc9c0 100644
--- a/reference/shared_mutex/shared_timed_mutex.md
+++ b/reference/shared_mutex/shared_timed_mutex.md
@@ -31,7 +31,7 @@ namespace std {
 
 ## 備考
 - このクラスは現状、書き込みロックと読み込みロックについてのスケジューリング戦略を規定せず、カスタマイズもできない。そのため、書き込みロックがなかなか取得できない、読み込みロックがなかなか取得できないというスタベーションの問題が発生した場合に、ユーザーの状況に合わせて戦略を変更することができない。POSIXのReaders-writer lockの実装では、スケジューリングのオプションを指定できる
-    - [`pthread_rwlockattr_setkind_np()`](https://linuxjm.osdn.jp/html/LDP_man-pages/man3/pthread_rwlockattr_setkind_np.3.html)
+    - [`pthread_rwlockattr_setkind_np()`](https://web.archive.org/web/20230130174238/http://linuxjm.osdn.jp/html/LDP_man-pages/man3/pthread_rwlockattr_setkind_np.3.html)
 
 
 ## メンバ関数
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>errc -- osdn.jpのリンクをwebarchiveに差し替え #1214</title>
      <link href="https://cpprefjp.github.io/reference/system_error/errc.html"/>
      <id>4d5c0edfcd79661472afc00a695d017297e4d1d9:reference/system_error/errc.md</id>
      <updated>2023-11-21T18:04:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/system_error/errc.md b/reference/system_error/errc.md
index baf735a3d..0f11d1b59 100644
--- a/reference/system_error/errc.md
+++ b/reference/system_error/errc.md
@@ -99,5 +99,5 @@ namespace std {
 非推奨とされているものは、対応する`errno`値がPOSIX規格において廃止されたことに対応している。
 
 ## 参照
-- [Man page of ERRNO](http://linuxjm.osdn.jp/html/LDP_man-pages/man3/errno.3.html)
+- [Man page of ERRNO](https://web.archive.org/web/20230205202552/http://linuxjm.osdn.jp/html/LDP_man-pages/man3/errno.3.html)
 - [LWG Issue 3869. Deprecate `std::errc` constants related to UNIX STREAMS](https://cplusplus.github.io/LWG/issue3869)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>yield -- osdn.jpのリンクをwebarchiveに差し替え #1214</title>
      <link href="https://cpprefjp.github.io/reference/thread/this_thread/yield.html"/>
      <id>4d5c0edfcd79661472afc00a695d017297e4d1d9:reference/thread/this_thread/yield.md</id>
      <updated>2023-11-21T18:04:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/thread/this_thread/yield.md b/reference/thread/this_thread/yield.md
index 2c765034f..ed9dccab9 100644
--- a/reference/thread/this_thread/yield.md
+++ b/reference/thread/this_thread/yield.md
@@ -28,7 +28,7 @@ namespace this_thread {
 
 
 ## 備考
-C++11標準の定義では処理系依存だが、その動作はPOSIXの[`sched_yield()`](https://linuxjm.osdn.jp/html/LDP_man-pages/man2/sched_yield.2.html)関数やWindows APIの[`SwitchToThread()`](https://docs.microsoft.com/ja-JP/windows/win32/api/processthreadsapi/nf-processthreadsapi-switchtothread)関数などを参考のこと。
+C++11標準の定義では処理系依存だが、その動作はPOSIXの[`sched_yield()`](https://web.archive.org/web/20230205233555/http://linuxjm.osdn.jp/html/LDP_man-pages/man2/sched_yield.2.html)関数やWindows APIの[`SwitchToThread()`](https://docs.microsoft.com/ja-JP/windows/win32/api/processthreadsapi/nf-processthreadsapi-switchtothread)関数などを参考のこと。
 
 Visual C++では、Windows APIの[`Sleep()`](https://docs.microsoft.com/ja-jp/windows/win32/api/synchapi/nf-synchapi-sleep)関数を使った実装となっている。ただし、12.0でWindowsストア向けアプリケーションを対象とする場合は、`Sleep()`関数が許可されていないため、`WaitForSingleObject()`関数のタイムアウト時間に最小値1ミリ秒を指定して呼び出す実装となっている。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>offsetof -- offsetof : バージョン境界について明確化</title>
      <link href="https://cpprefjp.github.io/reference/cstddef/offsetof.html"/>
      <id>7405b3c3c4c498b3518d52486702eec36bf6e866:reference/cstddef/offsetof.md</id>
      <updated>2023-11-20T12:25:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cstddef/offsetof.md b/reference/cstddef/offsetof.md
index c2c859484..aaacd630d 100644
--- a/reference/cstddef/offsetof.md
+++ b/reference/cstddef/offsetof.md
@@ -12,9 +12,9 @@
 
 この構造体の先頭から `member` へのバイト数が、`size_t` 型の符号なし整数値で返される。
 
-C++ での構造体の機能的拡張のため、`offsetof` の利用は、C++11以降は[スタンダードレイアウト](/reference/type_traits/is_standard_layout.md)のクラス型に制限され、C++11まではC の構造体のコンセプトに対応する POD のクラス型に制限される（但し、`public` な非仮想メンバ関数のみを持ち、コンストラクタ及びデストラクタを持たない非派生クラスも POD である）。
+C++ での構造体の機能的拡張のため、`offsetof` の利用は、C++11以降は[スタンダードレイアウト](/reference/type_traits/is_standard_layout.md)のクラス型に制限され、C++11より以前はC の構造体のコンセプトに対応する POD のクラス型に制限される（但し、`public` な非仮想メンバ関数のみを持ち、コンストラクタ及びデストラクタを持たない非派生クラスも POD である）。
 
-スタンダードレイアウトではないクラス型においての`offsetof`の利用は条件付きのサポートとなる（C++14までは未定義）。
+スタンダードレイアウトではないクラス型においての`offsetof`の利用は条件付きのサポートとなる（C++17より以前は未定義）。
 
 ## パラメータ
 - `type` : `member` を有効なメンバ指示子とするクラス型
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-02-08T04:25:58.213609</updated>
  <id>bf6ac20d-90b6-4007-986c-7d2d5d994997</id>

  
    <entry>
      <title>arg -- fix return value type in sample</title>
      <link href="https://cpprefjp.github.io/reference/complex/complex/arg.html"/>
      <id>a7d155c2f7159e38a76b57d3efca55f83fe41323:reference/complex/complex/arg.md</id>
      <updated>2025-02-08T13:22:12+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/complex/complex/arg.md b/reference/complex/complex/arg.md
index 7a52d6392..2118ca5e7 100644
--- a/reference/complex/complex/arg.md
+++ b/reference/complex/complex/arg.md
@@ -56,7 +56,7 @@ int main()
 {
   std::complex&amp;lt;double&amp;gt; c(1.0, 2.0);
 
-  std::complex&amp;lt;double&amp;gt; result = std::arg(c);
+  double result = std::arg(c);
   std::cout &amp;lt;&amp;lt; &amp;#34;arg( &amp;#34; &amp;lt;&amp;lt; c &amp;lt;&amp;lt; &amp;#34; ) = &amp;#34; &amp;lt;&amp;lt; result &amp;lt;&amp;lt; std::endl;
 }
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>get -- fix namespace std::get for std::tuple</title>
      <link href="https://cpprefjp.github.io/reference/tuple/tuple/get.html"/>
      <id>0b23a699f2e5124b87fed4149a57a704b56c7a65:reference/tuple/tuple/get.md</id>
      <updated>2025-02-08T13:19:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/tuple/tuple/get.md b/reference/tuple/tuple/get.md
index a8dd8b86c..1b4735382 100644
--- a/reference/tuple/tuple/get.md
+++ b/reference/tuple/tuple/get.md
@@ -1,7 +1,6 @@
 # get
 * tuple[meta header]
 * std[meta namespace]
-* tuple[meta class]
 * function template[meta id-type]
 * cpp11[meta cpp]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert -- fix wrong inner links (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_set/insert.html"/>
      <id>871cb81f4ebed45968025168f0a1eec058c12d57:reference/flat_set/flat_set/insert.md</id>
      <updated>2025-02-07T02:43:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_set/insert.md b/reference/flat_set/flat_set/insert.md
index ef79a30b3..02134d89c 100644
--- a/reference/flat_set/flat_set/insert.md
+++ b/reference/flat_set/flat_set/insert.md
@@ -37,7 +37,7 @@ void insert(sorted_unique_t s,
 ```
 * pair[link /reference/utility/pair.md]
 * initializer_list[link /reference/initializer_list/initializer_list.md]
-* sorted_unique_t[link /reference/flat_set_/sorted_unique_t.md]
+* sorted_unique_t[link /reference/flat_set/sorted_unique_t.md]
 
 ## 概要
 新しく一つの要素(引数 `x` を使う)または要素のシーケンス(入力イテレータまたは `initializer_list` を使う)を挿入し、コンテナを拡張する。
@@ -48,7 +48,7 @@ void insert(sorted_unique_t s,
 
 重複した値を許す、類似したコンテナについては [`flat_multiset`](/reference/flat_set/flat_multiset.md) を参照。
 
-内部的に `flat_set_` コンテナは、コンストラクト時に指定された比較オブジェクトによって要素を下位から上位へとソートして保持する。
+内部的に `flat_set` コンテナは、コンストラクト時に指定された比較オブジェクトによって要素を下位から上位へとソートして保持する。
 
 この操作は、適切な引数 `position` を提供することで効率を飛躍的に改善することができる。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>format -- fix wrong inner links (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/format/format.html"/>
      <id>871cb81f4ebed45968025168f0a1eec058c12d57:reference/format/format.md</id>
      <updated>2025-02-07T02:43:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/format.md b/reference/format/format.md
index 45fbbdb7e..9616f8b79 100644
--- a/reference/format/format.md
+++ b/reference/format/format.md
@@ -559,7 +559,7 @@ int main()
 * std::stack[link /reference/stack/stack.md]
 * st.push[link /reference/stack/stack/push.md]
 * std::flat_map[link /reference/flat_map/flat_map.md]
-* std::flat_set[link /reference/flat_map/flat_set.md]
+* std::flat_set[link /reference/flat_set/flat_set.md]
 
 #### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>flat_multiset -- fix wrong header tag (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_multiset.html"/>
      <id>8f81c3172231df1f3969650e403249663742925b:reference/flat_set/flat_multiset.md</id>
      <updated>2025-02-07T02:21:51+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_multiset.md b/reference/flat_set/flat_multiset.md
index c46cd944e..37f2ee476 100644
--- a/reference/flat_set/flat_multiset.md
+++ b/reference/flat_set/flat_multiset.md
@@ -1,5 +1,5 @@
 # flat_multiset
-* flat_multiset[meta header]
+* flat_set[meta header]
 * std[meta namespace]
 * class template[meta id-type]
 * cpp23[meta cpp]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>C++23 -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/lang/cpp23.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:lang/cpp23.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;C++23&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;C++23とは、2023年中に改訂され、ISO/IEC 14882:2024で標準規格化されたC++バージョンの通称である。&lt;/p&gt;
&lt;p&gt;このバージョンは、策定中のためC++2bと呼ばれることがある。「(C++20である2020年の次の) 202b年にリリースされる」という伏せ字として「b」が使われているが、3年周期に次のバージョンが策定されることが決まっているため、伏せ字になっている年数がずれることはない。&lt;/p&gt;
&lt;h2&gt;言語機能&lt;/h2&gt;
&lt;h3&gt;変数&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp23/literal_suffix_for_signed_size_t.html&#34;&gt;(符号付き)&lt;code&gt;size_t&lt;/code&gt;リテラルのためのサフィックス&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;42z&lt;/code&gt;/&lt;code&gt;42Z&lt;/code&gt;とすることで&lt;code&gt;size_t&lt;/code&gt;に対応する符号付き整数型のリテラルとする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp23/simpler_implicit_move.html&#34;&gt;暗黙的なムーブを簡略化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;参照を返す関数の&lt;code&gt;return&lt;/code&gt;文で暗黙的にムーブされない問題を修正&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;これらに加えて、ライブラリ機能として拡張浮動小数点数型が定義された。&lt;code&gt;&lt;a href=&#34;../reference/stdfloat.html&#34;&gt;&amp;lt;stdfloat&amp;gt;&lt;/a&gt;&lt;/code&gt;を参照。&lt;/p&gt;
&lt;h3&gt;関数&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp23/declarations_and_where_to_find_them.md.nolink&#34;&gt;スコープと名前ルックアップの仕様整理&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;複雑で不完全になっているスコープと名前ルックアップの仕様を整理し、一部の問題を解決する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp23/meaningful_exports.html&#34;&gt;無意味なexport宣言を禁止する&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;いくつかの不必要な宣言に対するモジュールexportを禁止する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;制御構文&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp23/extend_init_statement_to_allow_alias_declaration.html&#34;&gt;初期化文での型の別名宣言を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;for (using T = int; T e : v) {}&lt;/code&gt;を許可&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp23/lifetime_extension_in_range_based_for_loop.html&#34;&gt;範囲for文が範囲初期化子内で生じた一時オブジェクトを延命することを規定&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;範囲初期化子内で生じた一時オブジェクトは範囲for文の終わりまで延命される&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp23/labels_at_the_end_of_compound_statements.html&#34;&gt;複合文の末尾へのラベルを許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;C互換のため、複合文の末尾でのgoto文のラベルを許可する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;クラス&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp23/deducing_this.md.nolink&#34;&gt;自身のオブジェクトを明示的にパラメータとして指定する&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;メンバ関数が&lt;code&gt;*this&lt;/code&gt;の型・オブジェクトをパラメータとしてとり、&lt;code&gt;*this&lt;/code&gt;オブジェクトがconst/非const、左辺値/右辺値であるかをメンバ関数内で識別できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp23/make_declaration_order_layout_mandated.html&#34;&gt;アクセス制御の異なるメンバ変数のレイアウトを宣言順に規定&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;アクセス制御の異なるメンバ変数のレイアウトは並び替えを許可されていたが宣言順に規定する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp23/multidimensional_subscript_operator.html&#34;&gt;添字演算子の多次元サポート&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;operator[](int x, int y, int z)&lt;/code&gt;のように添字演算子のオーバーロードで複数のパラメータをとることを許可&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp23/static_operator.html&#34;&gt;&lt;code&gt;this&lt;/code&gt;ポインタをもつ必要のない演算子を&lt;code&gt;static&lt;/code&gt;として宣言できるようにする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;状態をもたないいくつかの演算子を&lt;code&gt;static&lt;/code&gt;として宣言できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;文字列&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp23/mixed_string_literal_concatenation.html&#34;&gt;異なる文字エンコーディングをもつ文字列リテラルの連結を不適格とする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;auto a = u8&#34;&#34; L&#34;&#34;;&lt;/code&gt;のような異なる文字エンコーディング同士での文字列リテラルを連結を禁止する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp23/delimited_escape_sequences.html&#34;&gt;エスケープシーケンスの区切り&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;エスケープシーケンスの範囲を明確にする構文を追加する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp23/numeric_and_universal_character_escapes_in_character_and_string_literals.md.nolink&#34;&gt;文字・文字列リテラル中の数値・ユニバーサルキャラクタのエスケープに関する問題解決&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp23/remove_non_encodable_wide_character_literals_and_multicharacter_wide_character_literals.html&#34;&gt;1ワイド文字に収まらないワイド文字リテラルを禁止する&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;エンコード結果として&lt;code&gt;wchar_t&lt;/code&gt;の大きさに収まらないワイド文字リテラルを禁止する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp23/named_universal_character_escapes.html&#34;&gt;名前付きユニバーサルキャラクタ名&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;16進数のユニバーサルキャラクタだけでなく、その文字の名前を入力できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;テンプレート&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp23/generalized_wording_for_partial_specializations.html&#34;&gt;変数テンプレートの部分特殊化を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;変数テンプレートの部分特殊化を許可するために部分特殊化の仕様を汎用化&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp23/class_template_argument_deduction_from_inherited.html&#34;&gt;継承コンストラクタからのクラステンプレート引数の推論&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;継承コンストラクタからもクラステンプレート引数を推論できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;定数式&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cpp23/if_consteval.html&#34;&gt;if consteval&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コンパイル時の文脈かどうかで分岐させる&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp23/narrowing_contextual_conversions_to_bool.html&#34;&gt;定数式の文脈での&lt;code&gt;bool&lt;/code&gt;への縮小変換を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;if constexpr(flags &amp;amp; Flags::Exec)&lt;/code&gt;や&lt;code&gt;static_assert(N);&lt;/code&gt;を許可&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp23/non_literal_variables_in_constexpr_functions.html&#34;&gt;定数式内での非リテラル変数、静的変数・スレッドローカル変数およびgotoとラベルの存在を許可する&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンパイル時に評価されない限り、定数式内に静的変数・スレッドローカル変数およびgoto文とラベルを含むことを許可する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp23/character_encoding_of_diagnostic_text.html&#34;&gt;静的な診断メッセージの文字エンコーディング&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;static_assert&lt;/code&gt;や&lt;code&gt;[[deprecated]]&lt;/code&gt;などの診断メッセージの文字集合に関する要件をなくす&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp23/relaxing_some_constexpr_restrictions.html&#34;&gt;&lt;code&gt;constexpr&lt;/code&gt;関数が定数実行できない場合でも適格とする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;定数式実行できない関数であっても、実際にコンパイル時に評価されない限り&lt;code&gt;constexpr&lt;/code&gt;指定することを許可する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp23/permitting_static_constexpr_variables_in_constexpr_functions.html&#34;&gt;&lt;code&gt;constexpr&lt;/code&gt;関数内での&lt;code&gt;static constexpr&lt;/code&gt;変数を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;constexpr&lt;/code&gt;関数のローカルで定数を定義できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp23/consteval_needs_to_propagate_up.html&#34;&gt;&lt;code&gt;constexpr&lt;/code&gt;関数内で&lt;code&gt;consteval&lt;/code&gt;関数を呼び出せない問題を軽減&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;consteval&lt;/code&gt;呼び出しを含む&lt;code&gt;constexpr&lt;/code&gt;関数を条件付きで&lt;code&gt;consteval&lt;/code&gt;関数とみなすようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;ラムダ式&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp23/down_with_lambda_parens.html&#34;&gt;ラムダ式で&lt;code&gt;()&lt;/code&gt;を省略できる条件を緩和&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;修飾や戻り値型をともなってもパラメータリストが空であれば&lt;code&gt;()&lt;/code&gt;を省略できる&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp23/attributes_on_lambda_expressions.html&#34;&gt;ラムダ式に対する属性&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ラムダ式のいくつかの箇所に属性を記述できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;属性&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp23/portable_assumptions.html&#34;&gt;コード内容の仮定をコンパイラに伝えるassume属性&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最適化のために、コードの仮定をコンパイラに伝える属性を標準化する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;プリプロセッサ&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp23/consistent_character_literal_encoding.html&#34;&gt;文字リテラルエンコーディングを一貫させる&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;プリプロセッサの条件式での文字リテラルの扱いをC++式と同様にする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp23/add_support_for_preprocessing_directives_elifdef_and_elifndef.html&#34;&gt;&lt;code&gt;elif&lt;/code&gt;/&lt;code&gt;elifdef&lt;/code&gt;/&lt;code&gt;elifndef&lt;/code&gt;のサポートを追加&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;#if&lt;/code&gt;/&lt;code&gt;#ifdef&lt;/code&gt;/&lt;code&gt;#ifndef&lt;/code&gt;に対応する複数条件命令のサポートを追加する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp23/warning.html&#34;&gt;&lt;code&gt;#warning&lt;/code&gt;のサポートを追加&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;多くのC++コンパイラが実装していたプリプロセス時の警告&lt;code&gt;#warning message&lt;/code&gt;を正式サポート&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp23/support_for_utf8_as_a_portable_source_file_encoding.html&#34;&gt;汎用的なソースコードのエンコーディングとしてUTF-8をサポート&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;すべてのコンパイラはUTF-8文字コードのソースコードをサポートしなければならない&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;小さな変更&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp23/predefined_macros.html&#34;&gt;更新された定義済みマクロ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;標準規格で定義されたマクロの更新&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp23/update_normative_reference_to_posix.html&#34;&gt;参照するPOSIX規格を更新&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;新しいPOSIX規格の機能を標準C++が参照していたため、参照するPOSIX規格のバージョンを更新&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp23/trimming_whitespaces_before_line_splicing.html&#34;&gt;行末スペースを無視するよう規定&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;行末が「&lt;code&gt;\ &lt;/code&gt;」でおわっていた場合にMSVCは行の継続をしない実装になっていたため動作を共通化するため仕様を規定&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;ライブラリ更新の概要&lt;/h2&gt;
&lt;h3&gt;新ライブラリ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++標準ライブラリ全体のモジュールとして&lt;code&gt;&lt;a href=&#34;../module/std.html&#34;&gt;std&lt;/a&gt;&lt;/code&gt;、C互換ライブラリ全体のモジュールとして&lt;code&gt;&lt;a href=&#34;../module/std.compat.html&#34;&gt;std.compat&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;スタックトレースを取得するためのライブラリとして&lt;code&gt;&lt;a href=&#34;../reference/stacktrace.html&#34;&gt;&amp;lt;stacktrace&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;CとC++の間でのアトミック操作の相互運用のため、C互換ライブラリとして&lt;code&gt;&lt;a href=&#34;../reference/stdatomic.h.html&#34;&gt;&amp;lt;stdatomic.h&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;外部から提供されるメモリバッファでストリーム処理を行うライブラリとして&lt;code&gt;&lt;a href=&#34;../reference/spanstream.md.nolink&#34;&gt;&amp;lt;spanstream&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;正常値とエラー値のどちらかを持つクラスおよびライブラリとして&lt;code&gt;&lt;a href=&#34;../reference/expected.html&#34;&gt;&amp;lt;expected&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;多次元配列ビューのライブラリとして&lt;code&gt;&lt;a href=&#34;../reference/mdspan.html&#34;&gt;&amp;lt;mdspan&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;ノードベースではないソート済みキーによる順序付き連想コンテナのライブラリとして、&lt;code&gt;&lt;a href=&#34;../reference/flat_map.html&#34;&gt;&amp;lt;flat_map&amp;gt;&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../reference/flat_set.html&#34;&gt;&amp;lt;flat_set&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;書式指定で出力するライブラリとして&lt;code&gt;&lt;a href=&#34;../reference/print.html&#34;&gt;&amp;lt;print&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;コルーチンによるRangeの生成をサポートする&lt;code&gt;&lt;a href=&#34;../reference/generator.html&#34;&gt;&amp;lt;generator&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;拡張浮動小数点数のライブラリとして&lt;code&gt;&lt;a href=&#34;../reference/stdfloat.html&#34;&gt;&amp;lt;stdfloat&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;コンテナ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/stack/stack.html&#34;&gt;std::stack&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../reference/queue/queue.html&#34;&gt;std::queue&lt;/a&gt;&lt;/code&gt;に、イテレータのペアをとるコンストラクタを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;auto v = std::vector(v, alloc);&lt;/code&gt;のようなアロケータ引数をともなう場合のクラステンプレートのテンプレート引数推論が動作しなかったため、各コンテナクラスのコンストラクタにおけるアロケータパラメータの型を&lt;code&gt;const Allocator&amp;amp;&lt;/code&gt;から&lt;code&gt;const &lt;a href=&#34;../reference/type_traits/type_identity.html&#34;&gt;std::type_identity_t&lt;/a&gt;&amp;lt;Allocator&amp;gt;&amp;amp;&lt;/code&gt;に修正&lt;/li&gt;
&lt;li&gt;N要素のメモリアロケート時にアロケータが実際にどれくらいのメモリを確保したかを得られるインタフェースとして、&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/memory/allocator.html&#34;&gt;std::allocator&lt;/a&gt;&lt;/code&gt;クラスに、&lt;code&gt;&lt;a href=&#34;../reference/memory/allocator/allocate_at_least.html&#34;&gt;allocate_at_least()&lt;/a&gt;&lt;/code&gt;メンバ関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/memory/allocator_traits.html&#34;&gt;std::allocator_traits&lt;/a&gt;&lt;/code&gt;クラスに、&lt;code&gt;&lt;a href=&#34;../reference/memory/allocator_traits/allocate_at_least.html&#34;&gt;allocate_at_least()&lt;/a&gt;&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/utility/pair.html&#34;&gt;std::pair&lt;/a&gt;&lt;/code&gt;の転送コンストラクタにデフォルトテンプレート引数を追加することで、&lt;code&gt;{}&lt;/code&gt;のような型推論ができない引数を渡した場合でも完全転送が行われるよう修正&lt;/li&gt;
&lt;li&gt;順序付き連想コンテナの要素削除の処理について、一時オブジェクトのコストを抑える拡張が行われた&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/map/map/erase.html&#34;&gt;std::map::erase()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/map/map/extract.html&#34;&gt;std::map::extract()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;に、複数の範囲を綴じ合わせる&lt;code&gt;&lt;a href=&#34;../reference/ranges/zip_view.html&#34;&gt;std::views::zip&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;に、複数の範囲の直積をとる&lt;code&gt;&lt;a href=&#34;../reference/ranges/cartesian_product_view.html&#34;&gt;std::views::cartesian_product&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;Rangeから任意のコンテナに変換するRangeアダプタ&lt;code&gt;&lt;a href=&#34;../reference/ranges/to.html&#34;&gt;std::ranges::to()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;Rangeから任意のコンテナに変換するために、可変長のコンテナ (&lt;code&gt;&lt;a href=&#34;../reference/array/array.html&#34;&gt;std::array&lt;/a&gt;&lt;/code&gt;以外) に、以下の機能を追加：&lt;ul&gt;
&lt;li&gt;Rangeから変換するコンストラクタ&lt;/li&gt;
&lt;li&gt;Rangeを挿入する&lt;code&gt;insert_range()&lt;/code&gt;メンバ関数&lt;/li&gt;
&lt;li&gt;Rangeを先頭に追加する&lt;code&gt;prepend_range()&lt;/code&gt;メンバ関数&lt;/li&gt;
&lt;li&gt;Rangeを末尾に追加する&lt;code&gt;append_range()&lt;/code&gt;メンバ関数&lt;/li&gt;
&lt;li&gt;Rangeを代入する&lt;code&gt;assign_range()&lt;/code&gt;メンバ関数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ユーザー定義のRangeアダプタがパイプライン演算子 &lt;code&gt;|&lt;/code&gt; をサポートしやすくするために、&lt;code&gt;&lt;a href=&#34;../reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;に&lt;code&gt;&lt;a href=&#34;../reference/ranges/range_adaptor_closure.html&#34;&gt;std::ranges::range_adaptor_closure&lt;/a&gt;&lt;/code&gt;クラスを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;に、Rangeを連結させる&lt;code&gt;&lt;a href=&#34;../reference/ranges/join_with_view.html&#34;&gt;join_with&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;Rangeを指定の大きさで分割する&lt;code&gt;&lt;a href=&#34;../reference/ranges/chunk_view.html&#34;&gt;std::views::chunk&lt;/a&gt;&lt;/code&gt;と、Rangeを指定の大きさの隣接要素で分割する&lt;code&gt;&lt;a href=&#34;../reference/ranges/slide_view.html&#34;&gt;std::views::slide&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;Rangeを条件一致する間の要素で分割する&lt;code&gt;&lt;a href=&#34;../reference/ranges/chunk_by_view.html&#34;&gt;std::views::chunk_by&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;に、Rangeを等間隔からなるRangeに変換する&lt;code&gt;&lt;a href=&#34;../reference/ranges/stride_view.html&#34;&gt;std::views::stride&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;に、Rangeをムーブするための&lt;code&gt;&lt;a href=&#34;../reference/ranges/as_rvalue_view.html&#34;&gt;std::views::as_rvalue&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;に、指定した値をN回繰り返すRangeを生成する&lt;code&gt;&lt;a href=&#34;../reference/ranges/repeat_view.html&#34;&gt;std::views::repeat&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;に、Rangeをインデックス付きでループさせる&lt;code&gt;&lt;a href=&#34;../reference/ranges/enumerate_view.html&#34;&gt;std::views::enumerate&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;アルゴリズム&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;に、範囲の先頭が指定した範囲と合致するかを判定する&lt;code&gt;&lt;a href=&#34;../reference/algorithm/ranges_starts_with.html&#34;&gt;std::starts_with()&lt;/a&gt;&lt;/code&gt;、範囲の末尾が指定した範囲と合致するかを判定する&lt;code&gt;&lt;a href=&#34;../reference/algorithm/ranges_ends_with.html&#34;&gt;std::ends_with()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;に、要素を左シフトさせるRangeアルゴリズム&lt;code&gt;&lt;a href=&#34;../reference/algorithm/ranges_shift_left.html&#34;&gt;std::ranges::shift_left()&lt;/a&gt;&lt;/code&gt;、要素を右シフトさせるRangeアルゴリズム&lt;code&gt;&lt;a href=&#34;../reference/algorithm/ranges_shift_right.html&#34;&gt;std::ranges::shift_right()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;に、範囲の末尾から要素を検索する以下のアルゴリズムを追加：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/algorithm/ranges_find_last.html&#34;&gt;std::ranges::find_last()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/algorithm/ranges_find_last_if.html&#34;&gt;std::ranges::find_last_if()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/algorithm/ranges_find_last_if_not.html&#34;&gt;std::ranges::find_last_if_not()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;に、範囲に特定の値が含まれているかを判定する&lt;code&gt;&lt;a href=&#34;../reference/algorithm/ranges_contains.html&#34;&gt;std::ranges::contains()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;../reference/algorithm/ranges_contains_subrange.html&#34;&gt;std::ranges::contains_subrange&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;に、数値に限定しない汎用的な畳み込みアルゴリズムとして、以下を追加：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/algorithm/ranges_fold_left.html&#34;&gt;std::ranges::fold_left()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/algorithm/ranges_fold_left_first.html&#34;&gt;std::ranges::fold_left_first()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/algorithm/ranges_fold_right.html&#34;&gt;std::ranges::fold_right()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/algorithm/ranges_fold_right_last.html&#34;&gt;std::ranges::fold_right_last()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/algorithm/ranges_fold_left_with_iter.html&#34;&gt;std::ranges::fold_left_with_iter()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/algorithm/ranges_fold_left_first_with_iter.html&#34;&gt;std::ranges::fold_left_first_with_iter()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/numeric.html&#34;&gt;&amp;lt;numeric&amp;gt;&lt;/a&gt;&lt;/code&gt;に、連番を生成するRangeアルゴリズム&lt;code&gt;&lt;a href=&#34;../reference/numeric/ranges_iota.html&#34;&gt;std::ranges::iota()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;文字列&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/string/basic_string.html&#34;&gt;std::basic_string&lt;/a&gt;&lt;/code&gt;クラスと&lt;code&gt;&lt;a href=&#34;../reference/string_view/basic_string_view.html&#34;&gt;std::basic_string_view&lt;/a&gt;&lt;/code&gt;クラスに、文字列内に指定した文字・文字列が含まれているかを判定するメンバ関数&lt;code&gt;contains()&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/string_view/basic_string_view.html&#34;&gt;std::basic_string_view&lt;/a&gt;&lt;/code&gt;のコンストラクタに、範囲をとるオーバーロードを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::string s = nullptr;&lt;/code&gt;のような文字列オブジェクトに&lt;code&gt;nullptr&lt;/code&gt;を代入するようなコードはバグの元であるため、&lt;code&gt;&lt;a href=&#34;../reference/string/basic_string.html&#34;&gt;std::basic_string&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../reference/string_view/basic_string_view.html&#34;&gt;std::basic_string_view&lt;/a&gt;&lt;/code&gt;に、&lt;code&gt;&lt;a href=&#34;../reference/cstddef/nullptr_t.html&#34;&gt;nullptr_t&lt;/a&gt;&lt;/code&gt;をとるコンストラクタをdelete定義として追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/string/basic_string.html&#34;&gt;std::basic_string&lt;/a&gt;&lt;/code&gt;クラスに、resize時に任意の初期化を行う&lt;code&gt;&lt;a href=&#34;../reference/string/basic_string/resize_and_overwrite.html&#34;&gt;resize_and_overwrite()&lt;/a&gt;&lt;/code&gt;メンバ関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/string/basic_string.html&#34;&gt;std::basic_string&lt;/a&gt;&lt;/code&gt;クラスのコンストラクタと&lt;code&gt;&lt;a href=&#34;../reference/string/basic_string/substr.html&#34;&gt;substr()&lt;/a&gt;&lt;/code&gt;メンバ関数に一時オブジェクトのオーバーロードを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/format/format.html&#34;&gt;std::format()&lt;/a&gt;&lt;/code&gt;関数でRange・コンテナ、&lt;code&gt;&lt;a href=&#34;../reference/tuple/tuple.html&#34;&gt;std::tuple&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;../reference/utility/pair.html&#34;&gt;std::pair&lt;/a&gt;&lt;/code&gt;を出力できるよう、&lt;code&gt;&lt;a href=&#34;../reference/format/formatter.html&#34;&gt;std::formatter&lt;/a&gt;&lt;/code&gt;に特殊化を追加&lt;ul&gt;
&lt;li&gt;Range・シーケンスコンテナは&lt;code&gt;[1, 2, 3]&lt;/code&gt;、&lt;code&gt;[&#34;hello&#34;, &#34;world&#34;]&lt;/code&gt;、&lt;code&gt;[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]&lt;/code&gt;のように出力される&lt;/li&gt;
&lt;li&gt;連想コンテナの場合、&lt;code&gt;std::map&amp;lt;int, int&amp;gt;{{1, 2}, {3, 4}}&lt;/code&gt;は&lt;code&gt;{1: 2, 3: 4}&lt;/code&gt;のように出力され、&lt;code&gt;std::set&amp;lt;int&amp;gt;{1, 2, 3}&lt;/code&gt;は&lt;code&gt;{1, 2, 3}&lt;/code&gt;のように出力される&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/tuple/tuple.html&#34;&gt;std::tuple&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;../reference/utility/pair.html&#34;&gt;std::pair&lt;/a&gt;&lt;/code&gt;は&lt;code&gt;(1, 2)&lt;/code&gt;のように出力される&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/format/format.html&#34;&gt;std::format()&lt;/a&gt;&lt;/code&gt;関数のフォーマット指定子としてデバッグ指定「&lt;code&gt;&#34;?&#34;&lt;/code&gt;」を追加。これは文字・文字列を引用符で囲み、エスケープシーケンスをエスケープする&lt;ul&gt;
&lt;li&gt;ただし、Range・コンテナ中の文字・文字列はデフォルトでエスケープされる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;format(&#34;{:?}&#34;, &#34;h\tello&#34;)&lt;/code&gt;は&lt;code&gt;&#34;h\tello&#34;&lt;/code&gt;のように出力される&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;入出力&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/ostream/basic_ostream.html&#34;&gt;std::basic_ostream&lt;/a&gt;&lt;/code&gt;クラスの&lt;code&gt;&lt;a href=&#34;../reference/ostream/basic_ostream/op_ostream.html&#34;&gt;operator&amp;lt;&amp;lt;&lt;/a&gt;&lt;/code&gt;に、&lt;code&gt;const volatile void*&lt;/code&gt;をとるオーバーロードを追加&lt;/li&gt;
&lt;li&gt;ファイルを開く際のオプションとして、排他モードを表す&lt;code&gt;&lt;a href=&#34;../reference/ios/ios_base/type-openmode.html&#34;&gt;noreplace&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;関数オブジェクト&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/functional/invoke.html&#34;&gt;std::invoke()&lt;/a&gt;&lt;/code&gt;の戻り値型を指定するバージョンである&lt;code&gt;&lt;a href=&#34;../reference/functional/invoke_r.html&#34;&gt;std::invoke_r()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/functional/function.html&#34;&gt;std::function&lt;/a&gt;&lt;/code&gt;クラスと等価な機能をもつ、ムーブのみ可能な&lt;code&gt;&lt;a href=&#34;../reference/functional/move_only_function.html&#34;&gt;std::move_only_function&lt;/a&gt;&lt;/code&gt;クラスを追加&lt;/li&gt;
&lt;li&gt;ユーザー定義のRangeアダプタがパイプライン演算子 &lt;code&gt;|&lt;/code&gt; をサポートしやすくするために、末尾から引数を束縛する&lt;code&gt;&lt;a href=&#34;../reference/functional/bind_back.html&#34;&gt;std::bind_back()&lt;/a&gt;&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;メモリ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;に、レガシーC関数からスマートポインタへの直接出力をサポートする、スマートポインタアダプタ&lt;code&gt;&lt;a href=&#34;../reference/memory/out_ptr.html&#34;&gt;std::out_ptr&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../reference/memory/inout_ptr.html&#34;&gt;std::inout_ptr&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/memory/unique_ptr.html&#34;&gt;std::unique_ptr&lt;/a&gt;&lt;/code&gt;クラスを&lt;code&gt;constexpr&lt;/code&gt;に対応&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;に、オブジェクトの生存期間を開始することを明示する関数として、&lt;code&gt;&lt;a href=&#34;../reference/memory/start_lifetime_as.md.nolink&#34;&gt;std::start_lifetime_as()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../reference/memory/start_lifetime_as_array.md.nolink&#34;&gt;std::start_lifetime_as_array()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/bit.html&#34;&gt;&amp;lt;bit&amp;gt;&lt;/a&gt;&lt;/code&gt;に、値のバイト入れ替え (エンディアン変換) を行う&lt;code&gt;&lt;a href=&#34;../reference/bit/byteswap.html&#34;&gt;std::byteswap()&lt;/a&gt;&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ユーティリティ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/variant/visit.html&#34;&gt;std::visit()&lt;/a&gt;&lt;/code&gt;に指定できるバリアントオブジェクトを、直接的な「&lt;code&gt;&lt;a href=&#34;../reference/variant/variant.html&#34;&gt;std::variant&lt;/a&gt;&lt;/code&gt;型の特殊化であること」という制約を緩和し、&lt;code&gt;&lt;a href=&#34;../reference/variant/variant.html&#34;&gt;std::variant&lt;/a&gt;&lt;/code&gt;から派生した型も許可&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;に、列挙値を基底型に変換する&lt;code&gt;&lt;a href=&#34;../reference/utility/to_underlying.html&#34;&gt;std::to_underlying()&lt;/a&gt;&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;に、 (主に) メンバ変数を転送するため、指定された型の&lt;code&gt;const&lt;/code&gt;性と参照修飾で引数を転送する&lt;code&gt;&lt;a href=&#34;../reference/utility/forward_like.html&#34;&gt;std::forward_like()&lt;/a&gt;&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/optional/optional.html&#34;&gt;std::optional&lt;/a&gt;&lt;/code&gt;クラスにモナド操作としてメンバ関数&lt;code&gt;&lt;a href=&#34;../reference/optional/optional/and_then.html&#34;&gt;and_then()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;../reference/optional/optional/transform.html&#34;&gt;transform()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;../reference/optional/optional/or_else.html&#34;&gt;or_else()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;到達しないパスであることを表明する関数&lt;code&gt;&lt;a href=&#34;../reference/utility/unreachable.html&#34;&gt;std::unreachable()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/bitset/bitset.html&#34;&gt;std::bitset&lt;/a&gt;&lt;/code&gt;クラスをさらに&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;型情報&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/typeinfo/type_info.html&#34;&gt;std::type_info&lt;/a&gt;&lt;/code&gt;クラスの&lt;code&gt;&lt;a href=&#34;../reference/typeinfo/type_info/op_equal.html&#34;&gt;operator==&lt;/a&gt;&lt;/code&gt;を&lt;code&gt;constexpr&lt;/code&gt;に対応&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;型特性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;に、スコープ付き列挙型かを判定する型特性&lt;code&gt;&lt;a href=&#34;../reference/type_traits/is_scoped_enum.html&#34;&gt;std::is_scoped_enum&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;に、一時オブジェクトの参照への束縛を検出するための型特性として、以下を追加：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/type_traits/reference_constructs_from_temporary.html&#34;&gt;std::reference_constructs_from_temporary&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/type_traits/reference_converts_from_temporary.html&#34;&gt;std::reference_converts_from_temporary&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C互換ライブラリ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/cstdlib.html&#34;&gt;&amp;lt;cstdlib&amp;gt;&lt;/a&gt;&lt;/code&gt;ヘッダと&lt;code&gt;&lt;a href=&#34;../reference/cmath.html&#34;&gt;&amp;lt;cmath&amp;gt;&lt;/a&gt;&lt;/code&gt;ヘッダの多くの関数を&lt;code&gt;constexpr&lt;/code&gt;に対応&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;機能の非推奨化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/type_traits/aligned_storage.html&#34;&gt;std::aligned_storage&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../reference/type_traits/aligned_union.html&#34;&gt;std::aligned_union&lt;/a&gt;&lt;/code&gt;を非推奨化。これらの機能は未定義動作を引き起こし、間違った保証が行われ、よくないAPI設計が行われていたため、非推奨とする&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/type_traits/aligned_storage.html&#34;&gt;std::aligned_storage&lt;/a&gt;&lt;/code&gt;の代わりに&lt;code&gt;alignas(T) &lt;a href=&#34;../reference/cstddef/byte.html&#34;&gt;std::byte&lt;/a&gt;[sizeof(T)];&lt;/code&gt;を使用することを推奨する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/type_traits/aligned_union.html&#34;&gt;std::aligned_union&lt;/a&gt;&lt;/code&gt;の代わりに&lt;code&gt;alignas(Ts...) &lt;a href=&#34;../reference/cstddef/byte.html&#34;&gt;std::byte&lt;/a&gt;[&lt;a href=&#34;../reference/algorithm/max.html&#34;&gt;std::max&lt;/a&gt;({sizeof(Ts)...})];&lt;/code&gt;を使用することを推奨する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/memory/allocator.html&#34;&gt;std::allocator&lt;/a&gt;&lt;/code&gt;のメンバ型&lt;code&gt;is_always_equal&lt;/code&gt;を非推奨化。これはアロケータが状態をもたないことを表す型でありデフォルトでは&lt;code&gt;&lt;a href=&#34;../reference/type_traits/true_type.html&#34;&gt;true_type&lt;/a&gt;&lt;/code&gt;となっている。状態をもつユーザー定義のアロケータ型でこのメンバ型の上書きを忘れることでバグが埋め込まれてしまっていたため誤用防止のために非推奨とする&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/limits.html&#34;&gt;&amp;lt;limits&amp;gt;&lt;/a&gt;&lt;/code&gt;の以下の非正規化数に関する機能を非推奨化。これらの機能は必ずしもコンパイル時に決まらない可能性のある値であり有用でないため、非推奨とする&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/limits/numeric_limits.html&#34;&gt;std::numeric_limits&lt;/a&gt;::&lt;a href=&#34;../reference/limits/numeric_limits/has_denorm.html&#34;&gt;has_denorm&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/limits/numeric_limits.html&#34;&gt;std::numeric_limits&lt;/a&gt;::&lt;a href=&#34;../reference/limits/numeric_limits/has_denorm_loss.html&#34;&gt;has_denorm_loss&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/limits/float_denorm_style.html&#34;&gt;std::float_denorm_style&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;機能の削除&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ガベージコレクションの実装にうまく役立てられなかった、ガベージコレクション実装のサポートをする以下の機能を削除する：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/memory/declare_reachable.html&#34;&gt;std::declare_reachable()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/memory/undeclare_reachable.html&#34;&gt;std::undeclare_reachable()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/memory/declare_no_pointers.html&#34;&gt;std::declare_no_pointers()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/memory/undeclare_no_pointers.html&#34;&gt;std::undeclare_no_pointers()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/memory/get_pointer_safety.html&#34;&gt;std::get_pointer_safety()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/memory/pointer_safety.html&#34;&gt;std::pointer_safety&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;cpp11/predefined_macros.html&#34;&gt;&lt;code&gt;__STDCPP_STRICT_POINTER_SAFETY__&lt;/code&gt;マクロ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;取り決め&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;以下のヘッダの一部機能をフリースタンディングライブラリとして追加：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/tuple.html&#34;&gt;&amp;lt;tuple&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/ratio.html&#34;&gt;&amp;lt;ratio&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/iterator.html&#34;&gt;&amp;lt;iterator&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>機能テストマクロ -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/feature_test_macros.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:lang/cpp23/feature_test_macros.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;機能テストマクロ&lt;/span&gt;&lt;span class=&#34;cpp cpp23&#34; title=&#34;C++23で追加&#34;&gt;(C++23)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;このページはC++23に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため&lt;a href=&#34;#relative-page&#34;&gt;関連項目&lt;/a&gt;を参照してください。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;h3&gt;言語機能&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_auto_cast&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202110L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;auto(x)&lt;/code&gt;および&lt;code&gt;auto{x}&lt;/code&gt;によるキャスト&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_constexpr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202211L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;permitting_static_constexpr_variables_in_constexpr_functions.html&#34;&gt;constexpr関数内でのstatic constexpr変数を許可&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_explicit_this_parameter&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202110L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;自身のオブジェクトを明示的にパラメータとして指定する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_if_consteval&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202106L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;if_consteval.html&#34;&gt;if consteval&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_implicit_move&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202207L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;simpler_implicit_move.html&#34;&gt;暗黙的なムーブを簡略化&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_multidimensional_subscript&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202211L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;multidimensional_subscript_operator.html&#34;&gt;添字演算子の多次元サポート&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_named_character_escapes&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202207L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;named_universal_character_escapes.html&#34;&gt;名前付きユニバーサルキャラクタ名&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_range_based_for&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202211L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;lifetime_extension_in_range_based_for_loop.html&#34;&gt;範囲for文が範囲初期化子内で生じた一時オブジェクトを延命することを規定&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_size_t_suffix&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202011L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;literal_suffix_for_signed_size_t.html&#34;&gt;(符号付き)size_tリテラルのためのサフィックス&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_static_call_operator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202207L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;static_operator.html&#34;&gt;thisポインタをもつ必要のない演算子をstaticとして宣言できるようにする&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;ライブラリ&lt;/h3&gt;
&lt;p&gt;ライブラリの機能テストマクロは全て&lt;code&gt;&lt;a href=&#34;../../reference/version.html&#34;&gt;&amp;lt;version&amp;gt;&lt;/a&gt;&lt;/code&gt;でも提供される。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_adaptor_iterator_pair_constructor&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202106L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/queue.html&#34;&gt;std::queue&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/stack.html&#34;&gt;std::stack&lt;/a&gt;&lt;/code&gt;にイテレータ２つのコンストラクタを追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/queue.html&#34;&gt;&amp;lt;queue&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/stack.html&#34;&gt;&amp;lt;stack&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_algorithm_iterator_requirements&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202207L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;のRangeイテレータ対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/numeric.html&#34;&gt;&amp;lt;numeric&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_allocate_at_least&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202302L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/allocator/allocate_at_least.html&#34;&gt;std::allocator::allocate_at_least()&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_associative_heterogeneous_erasure&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202110L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;テンプレート型を受ける&lt;code&gt;erase()&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/map.html&#34;&gt;&amp;lt;map&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/set.html&#34;&gt;&amp;lt;set&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/unordered_map.html&#34;&gt;&amp;lt;unordered_map&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/unordered_set.html&#34;&gt;&amp;lt;unordered_set&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_barrier&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202302L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;バリアフェーズの完了ステップの仕様変更&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/barrier.html&#34;&gt;&amp;lt;barrier&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_bind_back&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202202L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional/bind_back.html&#34;&gt;std::bind_back()&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_byteswap&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202110L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/bit/byteswap.html&#34;&gt;std::byteswap()&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/bit.html&#34;&gt;&amp;lt;bit&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_common_reference&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202302L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;T&amp;amp;&lt;/code&gt;と&lt;code&gt;reference_wrapper&amp;lt;T&amp;gt;&lt;/code&gt;の&lt;code&gt;common_reference&lt;/code&gt;を&lt;code&gt;T&amp;amp;&lt;/code&gt;に変換&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_common_reference_wrapper&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202302L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;T&amp;amp;&lt;/code&gt;と&lt;code&gt;reference_wrapper&amp;lt;T&amp;gt;&lt;/code&gt;の&lt;code&gt;common_reference&lt;/code&gt;を&lt;code&gt;T&amp;amp;&lt;/code&gt;に変換&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_concepts&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202207L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/concepts/equality_comparable.html&#34;&gt;std::equality_comparable_with&lt;/a&gt;&lt;/code&gt;などをムーブのみ可能な型に対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/compare.html&#34;&gt;&amp;lt;compare&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/concepts.html&#34;&gt;&amp;lt;concepts&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_constexpr_bitset&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202207L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/bitset/bitset.html&#34;&gt;std::bitset&lt;/a&gt;&lt;/code&gt;の&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/bitset.html&#34;&gt;&amp;lt;bitset&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_constexpr_charconv&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202207L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/charconv/to_chars.html&#34;&gt;std::to_chars()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/charconv/from_chars.html&#34;&gt;std::from_chars()&lt;/a&gt;&lt;/code&gt;の&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/charconv.html&#34;&gt;&amp;lt;charconv&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_constexpr_cmath&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202202L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;いくつかの関数を&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/cmath.html&#34;&gt;&amp;lt;cmath&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/cstdlib.html&#34;&gt;&amp;lt;cstdlib&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_constexpr_memory&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202202L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/unique_ptr.html&#34;&gt;std::unique_ptr&lt;/a&gt;&lt;/code&gt;の&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_constexpr_typeinfo&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202106L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/typeinfo/type_info/op_equal.html&#34;&gt;std::type_info::operator==()&lt;/a&gt;&lt;/code&gt;の&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/typeinfo.html&#34;&gt;&amp;lt;typeinfo&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_containers_ranges&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202202L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コンテナのコンストラクタのRange対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/vector.html&#34;&gt;&amp;lt;vector&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/list.html&#34;&gt;&amp;lt;list&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/forward_list.html&#34;&gt;&amp;lt;forward_list&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/map.html&#34;&gt;&amp;lt;map&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/set.html&#34;&gt;&amp;lt;set&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/unordered_map.html&#34;&gt;&amp;lt;unordered_map&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/unordered_set.html&#34;&gt;&amp;lt;unordered_set&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/deque.html&#34;&gt;&amp;lt;deque&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/queue.html&#34;&gt;&amp;lt;queue&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/stack.html&#34;&gt;&amp;lt;stack&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string.html&#34;&gt;&amp;lt;string&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_expected&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202211L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/expected.html&#34;&gt;&amp;lt;expected&amp;gt;&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/expected.html&#34;&gt;&amp;lt;expected&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_flat_map&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202207L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/flat_map/flat_map.html&#34;&gt;std::flat_map&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/flat_map/flat_multimap.html&#34;&gt;std::flat_multimap&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/flat_map.html&#34;&gt;&amp;lt;flat_map&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_flat_set&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202207L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/flat_set/flat_set.html&#34;&gt;std::flat_set&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/flat_set/flat_multiset.html&#34;&gt;std::flat_multiset&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/flat_set.html&#34;&gt;&amp;lt;flat_set&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_format&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202207L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::format&lt;/code&gt;の時刻型のローカライズ対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/format.html&#34;&gt;&amp;lt;format&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_format_ranges&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202207L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/format/formatter.html&#34;&gt;std::formatter&lt;/a&gt;&lt;/code&gt;のRange対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/format.html&#34;&gt;&amp;lt;format&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_formatters&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202302L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/format/formatter.html&#34;&gt;std::formatter&lt;/a&gt;&lt;/code&gt;の&lt;code&gt;&lt;a href=&#34;../../reference/stacktrace/basic_stacktrace.html&#34;&gt;std::stacktrace&lt;/a&gt;&lt;/code&gt;対応と&lt;code&gt;&lt;a href=&#34;../../reference/thread/thread/id.html&#34;&gt;std::thread::id&lt;/a&gt;&lt;/code&gt;対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/stacktrace.html&#34;&gt;&amp;lt;stacktrace&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/thread.html&#34;&gt;&amp;lt;thread&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_forward_like&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202207L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility/forward_like.html&#34;&gt;std::forward_like()&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_generator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202207L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/generator/generator.html&#34;&gt;std::generator&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/generator.html&#34;&gt;&amp;lt;generator&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_invoke_r&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202106L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional/invoke_r.html&#34;&gt;std::invoke_r()&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_ios_noreplace&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202207L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ios/ios_base/type-openmode.html&#34;&gt;std::ios::noreplace&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ios.html&#34;&gt;&amp;lt;ios&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_is_implicit_lifetime&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202302L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::is_implicit_lifetime&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_is_scoped_enum&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202011L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_scoped_enum.html&#34;&gt;std::is_scoped_enum&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_mdspan&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202207L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/mdspan.html&#34;&gt;&amp;lt;mdspan&amp;gt;&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/mdspan.html&#34;&gt;&amp;lt;mdspan&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_modules&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202207L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;モジュール&lt;code&gt;&lt;a href=&#34;../../module/std.html&#34;&gt;&amp;lt;std&amp;gt;&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../module/std.compat.html&#34;&gt;&amp;lt;std.compat&amp;gt;&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_move_iterator_concept&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202207L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/iterator/move_iterator.html&#34;&gt;std::move_iterator&amp;lt;T*&amp;gt;&lt;/a&gt;&lt;/code&gt;をランダムアクセスイテレータにする&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/iterator.html&#34;&gt;&amp;lt;iterator&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_move_only_function&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202110L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional/move_only_function.html&#34;&gt;std::move_only_function&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_optional&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202110L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/optional/optional.html&#34;&gt;std::optional&lt;/a&gt;&lt;/code&gt;にモナド操作を追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/optional.html&#34;&gt;&amp;lt;optional&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_out_ptr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202106L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/out_ptr.html&#34;&gt;std::out_ptr&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/memory/inout_ptr.html&#34;&gt;std::inout_ptr&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_ranges&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202302L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ranges/range_adaptor_closure.html&#34;&gt;std::ranges::range_adaptor_closure&lt;/a&gt;&lt;/code&gt;の追加&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;の様々な機能追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/iterator.html&#34;&gt;&amp;lt;iterator&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_ranges_as_const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202207L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ranges/cbegin.html&#34;&gt;std::ranges::cbegin&lt;/a&gt;&lt;/code&gt;が常に定数イテレータを返すようにする。&lt;code&gt;&lt;a href=&#34;../../reference/ranges/as_const_view.html&#34;&gt;std::ranges::as_const_view&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_ranges_as_rvalue&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202207L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ranges/as_rvalue_view.html&#34;&gt;std::ranges::as_rvalue_view&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_ranges_cartesian_product&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202207L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ranges/cartesian_product_view.html&#34;&gt;std::ranges::cartesian_product_view&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_ranges_chunk&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202202L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ranges/chunk_view.html&#34;&gt;std::ranges::chunk_view&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_ranges_chunk_by&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202202L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ranges/chunk_by_view.html&#34;&gt;std::ranges::chunk_by_view&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_ranges_contains&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202207L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm/ranges_contains.html&#34;&gt;std::ranges::contains()&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_ranges_enumerate&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202302L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ranges/enumerate_view.html&#34;&gt;std::ranges::enumerate_view&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_ranges_find_last&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202207L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm/ranges_find_last.html&#34;&gt;std::ranges::find_last()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/algorithm/ranges_find_last_if.html&#34;&gt;std::ranges::find_last_if()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/algorithm/ranges_find_last_if_not.html&#34;&gt;std::ranges::find_last_if_not()&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_ranges_fold&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202207L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::ranges::&lt;/code&gt;に&lt;code&gt;fold&lt;/code&gt;アルゴリズムの追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_ranges_iota&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202202L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/numeric/ranges_iota.html&#34;&gt;std::ranges::iota()&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/numeric.html&#34;&gt;&amp;lt;numeric&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_ranges_join_with&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202202L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ranges/join_with_view.html&#34;&gt;std::ranges::join_with_view&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_ranges_repeat&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202207L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ranges/repeat_view.html&#34;&gt;std::ranges::repeat_view&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_ranges_slide&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202202L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ranges/slide_view.html&#34;&gt;std::ranges::slide_view&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_ranges_starts_ends_with&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202106L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm/ranges_starts_with.html&#34;&gt;std::ranges::starts_with()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/algorithm/ranges_ends_with.html&#34;&gt;std::ranges::ends_with()&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_ranges_stride&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202207L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ranges/stride_view.html&#34;&gt;std::ranges::stride_view&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_ranges_to_container&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202202L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ranges/to.html&#34;&gt;std::ranges::to&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_ranges_zip&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202110L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ranges/zip_view.html&#34;&gt;std::ranges::zip_view&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/ranges/zip_transform_view.html&#34;&gt;std::ranges::zip_transform_view&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/ranges/adjacent_view.html&#34;&gt;std::ranges::adjacent_view&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/ranges/adjacent_transform_view.html&#34;&gt;std::ranges::adjacent_transform_view&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/tuple.html&#34;&gt;&amp;lt;tuple&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_reference_from_temporary&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202202L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/reference_constructs_from_temporary.html&#34;&gt;std::reference_constructs_from_temporary&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/reference_converts_from_temporary.html&#34;&gt;std::reference_converts_from_temporary&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_shift&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202202L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm/ranges_shift_left.html&#34;&gt;std::ranges::shift_left()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/algorithm/ranges_shift_right.html&#34;&gt;std::ranges::shift_right()&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_spanstream&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202106L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;spanstream&amp;gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;spanstream&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_stacktrace&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202011L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/stacktrace.html&#34;&gt;&amp;lt;stacktrace&amp;gt;&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/stacktrace.html&#34;&gt;&amp;lt;stacktrace&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_start_lifetime_as&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202207L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::start_lifetime_as()&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_stdatomic_h&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202011L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/stdatomic.h.html&#34;&gt;&amp;lt;stdatomic.h&amp;gt;&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/stdatomic.h.html&#34;&gt;&amp;lt;stdatomic.h&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_string_contains&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202011L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string/basic_string/contains.html&#34;&gt;std::basic_string::contains()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/string_view/basic_string_view/contains.html&#34;&gt;std::basic_string_view::contains()&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string.html&#34;&gt;&amp;lt;string&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string_view.html&#34;&gt;&amp;lt;string_view&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_string_resize_and_overwrite&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202110L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string/basic_string/resize_and_overwrite.html&#34;&gt;std::basic_string::resize_and_overwrite()&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string.html&#34;&gt;&amp;lt;string&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_to_underlying&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202102L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility/to_underlying.html&#34;&gt;std::to_underlying()&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_tuple_like&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202207L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/tuple/tuple-like.html&#34;&gt;tuple-like&lt;/a&gt;&lt;/code&gt;コンセプトの追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/map.html&#34;&gt;&amp;lt;map&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/tuple.html&#34;&gt;&amp;lt;tuple&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/unordered_map.html&#34;&gt;&amp;lt;unordered_map&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_unreachable&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202202L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility/unreachable.html&#34;&gt;std::unreachable()&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_print&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202403L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/print.html&#34;&gt;&amp;lt;print&amp;gt;&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ostream.html&#34;&gt;&amp;lt;ostream&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/print.html&#34;&gt;&amp;lt;print&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://isocpp.org/std/standing-documents/sd-6-sg10-feature-test-recommendations&#34; target=&#34;_blank&#34;&gt;SD-FeatureTest: Feature-Test Macros and Policies - isocpp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>リファレンス -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;リファレンス&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;目次&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#language-support&#34;&gt;言語サポートライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#concepts&#34;&gt;コンセプトライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#diagnostics&#34;&gt;診断ライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#general-utils&#34;&gt;汎用的なユーティリティライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#strings&#34;&gt;文字列ライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#localization&#34;&gt;ローカライズライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#container&#34;&gt;コンテナライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#iterator&#34;&gt;イテレータライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ranges&#34;&gt;レンジライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#algorithm&#34;&gt;アルゴリズムライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#numerics&#34;&gt;数値ライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#debug&#34;&gt;デバッグライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#io&#34;&gt;入出力ライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#regular-expressions&#34;&gt;正規表現ライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#atomic-operations&#34;&gt;アトミック操作ライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#thread-support&#34;&gt;スレッドサポートライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#clib-facilities&#34;&gt;C言語互換ライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#exposition-only&#34;&gt;説明専用ライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;&lt;a href=&#34;#language-support-library&#34; id=&#34;language-support&#34;&gt;言語サポートライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/limits.html&#34;&gt;&amp;lt;limits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;実装プロパティ&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/version.html&#34;&gt;&amp;lt;version&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;実装依存のバージョン情報&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/stdfloat.html&#34;&gt;&amp;lt;stdfloat&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;拡張浮動小数点数型&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/new.html&#34;&gt;&amp;lt;new&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;動的メモリ管理&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/typeinfo.html&#34;&gt;&amp;lt;typeinfo&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型情報&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/source_location.html&#34;&gt;&amp;lt;source_location&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ソースコード上の位置&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/exception.html&#34;&gt;&amp;lt;exception&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;例外ハンドリング&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/initializer_list.html&#34;&gt;&amp;lt;initializer_list&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;初期化子リスト&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/compare.html&#34;&gt;&amp;lt;compare&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;比較演算&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/coroutine.html&#34;&gt;&amp;lt;coroutine&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コルーチン&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;#concepts&#34; id=&#34;concepts&#34;&gt;コンセプトライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/concepts.html&#34;&gt;&amp;lt;concepts&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;言語関係のコンセプト&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;#diagnostics&#34; id=&#34;diagnostics&#34;&gt;診断ライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/stdexcept.html&#34;&gt;&amp;lt;stdexcept&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;例外クラス&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/system_error.html&#34;&gt;&amp;lt;system_error&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;システムエラーサポート&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;#general-utils&#34; id=&#34;general-utils&#34;&gt;汎用的なユーティリティライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ユーティリティコンポーネント&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/bitset.html&#34;&gt;&amp;lt;bitset&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ビットの固定サイズシーケンス&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/ratio.html&#34;&gt;&amp;lt;ratio&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コンパイル時有理数&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/tuple.html&#34;&gt;&amp;lt;tuple&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;タプル&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/optional.html&#34;&gt;&amp;lt;optional&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;任意で値を持たせられるオブジェクト&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/variant.html&#34;&gt;&amp;lt;variant&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;候補の型を切り替えながら保持できる記憶域型&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/any.html&#34;&gt;&amp;lt;any&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;あらゆる型の値を保持できる記憶域型&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/expected.html&#34;&gt;&amp;lt;expected&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;正常値かエラー値のどちらかを持たせられるオブジェクト&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型特性&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;関数オブジェクト&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;メモリ&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/scoped_allocator.html&#34;&gt;&amp;lt;scoped_allocator&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;スコープ付きアロケータ&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/memory_resource.html&#34;&gt;&amp;lt;memory_resource&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;多相アロケータ&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/chrono.html&#34;&gt;&amp;lt;chrono&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;時間ユーティリティ&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/typeindex.html&#34;&gt;&amp;lt;typeindex&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型のインデックス&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/execution.html&#34;&gt;&amp;lt;execution&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;実行ポリシー&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/charconv.html&#34;&gt;&amp;lt;charconv&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;高速な文字列 ⇔ 数値変換&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/format.html&#34;&gt;&amp;lt;format&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列フォーマット&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/stacktrace.html&#34;&gt;&amp;lt;stacktrace&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;スタックトレース&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;#strings&#34; id=&#34;strings&#34;&gt;文字列ライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/string.html&#34;&gt;&amp;lt;string&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列クラスと、文字特性&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/string_view.html&#34;&gt;&amp;lt;string_view&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;所有権を持たず文字列を参照する文字列クラス&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;#localization&#34; id=&#34;localization&#34;&gt;ローカライズライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/locale.html&#34;&gt;&amp;lt;locale&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ロケール&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/text_encoding.md.nolink&#34;&gt;&amp;lt;text_encoding&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列エンコーディングの識別&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/codecvt.html&#34;&gt;&amp;lt;codecvt&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コード変換ファセット&lt;/td&gt;
&lt;td&gt;C++11&lt;br /&gt; C++17から非推奨&lt;br /&gt; C++26で削除&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;#container&#34; id=&#34;container&#34;&gt;コンテナライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/array.html&#34;&gt;&amp;lt;array&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;配列&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/deque.html&#34;&gt;&amp;lt;deque&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;両端キュー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/forward_list.html&#34;&gt;&amp;lt;forward_list&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;単方向リスト&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/list.html&#34;&gt;&amp;lt;list&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;双方向リスト&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/queue.html&#34;&gt;&amp;lt;queue&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;FIFOキュー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/stack.html&#34;&gt;&amp;lt;stack&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;LIFOスタック&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/vector.html&#34;&gt;&amp;lt;vector&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;可変長配列&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/inplace_vector.md.nolink&#34;&gt;&amp;lt;inplace_vector&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;容量固定の可変長配列&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/map.html&#34;&gt;&amp;lt;map&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;順序付き連想配列&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/set.html&#34;&gt;&amp;lt;set&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;順序付き集合&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/flat_map.html&#34;&gt;&amp;lt;flat_map&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ソート済みキーによる順序付き連想配列&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/flat_set.html&#34;&gt;&amp;lt;flat_set&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ソート済みキーによる順序付き集合&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/unordered_map.html&#34;&gt;&amp;lt;unordered_map&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;非順序連想配列&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/unordered_set.html&#34;&gt;&amp;lt;unordered_set&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;非順序集合&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/span.html&#34;&gt;&amp;lt;span&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;部分シーケンスの参照&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/mdspan.html&#34;&gt;&amp;lt;mdspan&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;多次元配列ビュー&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;#iterator&#34; id=&#34;iterator&#34;&gt;イテレータライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/iterator.html&#34;&gt;&amp;lt;iterator&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータの定義&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;#ranges&#34; id=&#34;ranges&#34;&gt;レンジライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;レンジアルゴリズム&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/generator.html&#34;&gt;&amp;lt;generator&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コルーチンによるレンジ生成&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;#algorithm&#34; id=&#34;algorithm&#34;&gt;アルゴリズムライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アルゴリズム&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;#numerics&#34; id=&#34;numerics&#34;&gt;数値ライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/complex.html&#34;&gt;&amp;lt;complex&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;複素数&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/bit.html&#34;&gt;&amp;lt;bit&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ビット操作&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/random.html&#34;&gt;&amp;lt;random&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;乱数生成&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/valarray.html&#34;&gt;&amp;lt;valarray&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;数値の配列&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/numeric.html&#34;&gt;&amp;lt;numeric&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;一般的な数値操作&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/numbers.html&#34;&gt;&amp;lt;numbers&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;数値&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/linalg.html&#34;&gt;&amp;lt;linalg&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;線形代数&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;#debug&#34; id=&#34;debug&#34;&gt;デバッグライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/debugging.html&#34;&gt;&amp;lt;debugging&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;デバッグサポート&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;#io&#34; id=&#34;io&#34;&gt;入出力ライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;iosfwd&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;先行宣言&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/iostream.html&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;標準&lt;code&gt;iostream&lt;/code&gt;オブジェクト&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/ios.html&#34;&gt;&amp;lt;ios&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;iostream&lt;/code&gt;基底クラス&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/streambuf.html&#34;&gt;&amp;lt;streambuf&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ストリームバッファ&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/istream.html&#34;&gt;&amp;lt;istream&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;入力ストリーム&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/ostream.html&#34;&gt;&amp;lt;ostream&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;出力ストリーム&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/iomanip.html&#34;&gt;&amp;lt;iomanip&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;フォーマットとマニピュレータ&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/sstream.html&#34;&gt;&amp;lt;sstream&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列ストリーム&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;strstream&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;古い文字列ストリーム&lt;/td&gt;
&lt;td&gt;C++98から非推奨&lt;br /&gt; C++26で削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/fstream.html&#34;&gt;&amp;lt;fstream&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ファイルストリーム&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/filesystem.html&#34;&gt;&amp;lt;filesystem&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ファイルシステム&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/syncstream.html&#34;&gt;&amp;lt;syncstream&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;同期化出力ストリームラッパー&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/spanstream.md.nolink&#34;&gt;&amp;lt;spanstream&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;メモリバッファの所有権をもたないストリーム&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/print.html&#34;&gt;&amp;lt;print&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式指定による出力&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;#regular-expressions&#34; id=&#34;regular-expressions&#34;&gt;正規表現ライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/regex.html&#34;&gt;&amp;lt;regex&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;正規表現&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;#atomic-operations&#34; id=&#34;atomic-operations&#34;&gt;アトミック操作ライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/atomic.html&#34;&gt;&amp;lt;atomic&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アトミックアクセスのためのコンポーネント&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/stdatomic.h.html&#34;&gt;&amp;lt;stdatomic.h&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アトミック操作のC互換ライブラリ&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;#thread-support&#34; id=&#34;thread-support&#34;&gt;スレッドサポートライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/stop_token.html&#34;&gt;&amp;lt;stop_token&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;停止状態&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/thread.html&#34;&gt;&amp;lt;thread&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;スレッド&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/mutex.html&#34;&gt;&amp;lt;mutex&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ミューテックス&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/shared_mutex.html&#34;&gt;&amp;lt;shared_mutex&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;共有ミューテックス&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/condition_variable.html&#34;&gt;&amp;lt;condition_variable&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;条件変数&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/semaphore.html&#34;&gt;&amp;lt;semaphore&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;セマフォ&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/latch.html&#34;&gt;&amp;lt;latch&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ラッチ同期&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/barrier.html&#34;&gt;&amp;lt;barrier&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;バリア同期&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/future.html&#34;&gt;&amp;lt;future&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Future&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/rcu.html&#34;&gt;&amp;lt;rcu&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;データの参照・更新&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/hazard_pointer.md.nolink&#34;&gt;&amp;lt;hazard_pointer&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ハザードポインタ&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/simd.md.nolink&#34;&gt;&amp;lt;simd&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;データ並列&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;#clib-facilities&#34; id=&#34;clib-facilities&#34;&gt;C言語互換ライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/cassert.html&#34;&gt;&amp;lt;cassert&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アサート&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;ccomplex&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;複素数&lt;/td&gt;
&lt;td&gt;C++11 (C99)&lt;br /&gt; C++17で非推奨&lt;br /&gt; C++20で削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/cctype.html&#34;&gt;&amp;lt;cctype&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字種別の判定と変換&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/cerrno.html&#34;&gt;&amp;lt;cerrno&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;エラー番号&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/cfenv.html&#34;&gt;&amp;lt;cfenv&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;浮動小数点環境へのアクセス&lt;/td&gt;
&lt;td&gt;C++11 (C99)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/cfloat.html&#34;&gt;&amp;lt;cfloat&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;浮動小数点数の定数&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;cinttypes&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;固定精度整数のための書式指定マクロ&lt;/td&gt;
&lt;td&gt;C++11 (C99)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;ciso646&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;に対する別名&lt;code&gt;and&lt;/code&gt;のような、各種演算子に対するマクロを定義する。&lt;br /&gt; ただしC++ではこれらの別名はキーワードとして定義されるため、このヘッダでは何も定義されない。&lt;/td&gt;
&lt;td&gt;C++20で削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/climits.html&#34;&gt;&amp;lt;climits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;整数型の最小値、最大値を表すマクロ&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;clocale&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ロケール&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/cmath.html&#34;&gt;&amp;lt;cmath&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;数学関数&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;csetjmp&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ジャンプ処理&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;csignal&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;シグナル&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;cstdalign&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アライメント操作のマクロ&lt;/td&gt;
&lt;td&gt;C++17で非推奨&lt;br /&gt; C++20で削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;cstdarg&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;可変引数操作&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/stdbit.h.md.nolink&#34;&gt;&amp;lt;stdbit.h&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ビット操作&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/stdckdint.h.md.nolink&#34;&gt;&amp;lt;stdckdint.h&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;検査付き整数演算&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;cstdbool&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;真理値型の定義&lt;/td&gt;
&lt;td&gt;C++11 (C99)&lt;br /&gt; C++17で非推奨&lt;br /&gt; C++20で削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/cstddef.html&#34;&gt;&amp;lt;cstddef&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;基本的な型、値、マクロの定義&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/cstdint.html&#34;&gt;&amp;lt;cstdint&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;大きさが規定されている整数型&lt;/td&gt;
&lt;td&gt;C++11 (C99)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/cstdio.html&#34;&gt;&amp;lt;cstdio&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;入出力&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/cstdlib.html&#34;&gt;&amp;lt;cstdlib&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ユーティリティ関数&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/cstring.html&#34;&gt;&amp;lt;cstring&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列操作&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;ctgmath&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ジェネリックな数学関数&lt;/td&gt;
&lt;td&gt;C++11 (C99)&lt;br /&gt; C++17で非推奨&lt;br /&gt; C++20で削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/ctime.html&#34;&gt;&amp;lt;ctime&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;日付・時間&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;cuchar&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ユニコード文字型&lt;/td&gt;
&lt;td&gt;C++11 (C11)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;cwchar&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ワイド文字型&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;cwctype&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ワイド文字の種別と判定&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;#exposition-only&#34; id=&#34;exposition-only&#34;&gt;説明専用ライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/exposition-only.html&#34;&gt;exposition-only&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;説明のためのものを集めたページ (実際のライブラリではない)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2867r2.html&#34; target=&#34;_blank&#34;&gt;P2867R2 Remove Deprecated &lt;code&gt;strstream&lt;/code&gt;s From C++26&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>flat_set -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;flat_set&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;flat_set&lt;/span&gt;&lt;span class=&#34;cpp cpp23&#34; title=&#34;C++23で追加&#34;&gt;(C++23)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;flat_set&amp;gt;&lt;/code&gt; ヘッダは、ソート済みキーによる連想コンテナを定義する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&lt;a href=&#34;set/set.html&#34;&gt;std::set&lt;/a&gt;&lt;/code&gt;と違ってノードベースの実装ではなく、メモリ連続性のある平坦 (flat) な配列で扱われる。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;flat_set&amp;gt;&lt;/code&gt; ヘッダでは、キーの重複を許さない &lt;code&gt;std::&lt;a href=&#34;flat_set/flat_set.html&#34;&gt;flat_set&lt;/a&gt;&lt;/code&gt; クラステンプレート、およびキーの重複を許す &lt;code&gt;std::&lt;a href=&#34;flat_set/flat_multiset.html&#34;&gt;flat_multiset&lt;/a&gt;&lt;/code&gt; クラステンプレートを提供する。&lt;/p&gt;
&lt;p&gt;このヘッダでは、以下の標準ヘッダをインクルードする：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;initializer_list.html&#34;&gt;&amp;lt;initializer_list&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;compare.html&#34;&gt;&amp;lt;compare&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;flat_set/flat_set.html&#34;&gt;flat_set&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;キーの重複を許さない平坦な順序付き連想コンテナ(class template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;flat_set/flat_multiset.html&#34;&gt;flat_multiset&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;キーの重複を許す平坦な順序付き連想コンテナ(class template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;flat_set/sorted_unique_t.html&#34;&gt;sorted_unique_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ソート済みかつ重複要素がないことを示すためのタグ型(class)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;flat_set/sorted_unique_t.html&#34;&gt;sorted_unique&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ソート済みかつ重複要素がないことを示すためのタグ値(variable)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;flat_set/sorted_equivalent_t.html&#34;&gt;sorted_equivalent_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ソート済みであること（重複はしてもよい）を示すためのタグ型(class)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;flat_set/sorted_equivalent_t.html&#34;&gt;sorted_equivalent&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ソート済みであること（重複はしてもよい）を示すためのタグ値(variable)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++23&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;hhttps:/www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1222r0.pdf&#34;&gt;P1222R0 A Standard &lt;code&gt;flat_set&lt;/code&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++23で&lt;code&gt;flat_set&lt;/code&gt;が導入された経緯・動機・設計について記載されている&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1222r4.pdf&#34; target=&#34;_blank&#34;&gt;P1222R4 A Standard &lt;code&gt;flat_set&lt;/code&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++23で導入された&lt;code&gt;flat_set&lt;/code&gt;の仕様&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>flat_multiset -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_multiset.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/flat_multiset.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_multiset.md b/reference/flat_set/flat_multiset.md
new file mode 100644
index 000000000..c46cd944e
--- /dev/null
+++ b/reference/flat_set/flat_multiset.md
@@ -0,0 +1,230 @@
+# flat_multiset
+* flat_multiset[meta header]
+* std[meta namespace]
+* class template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;class Key,
+            class Compare = less&amp;lt;Key&amp;gt;,
+            class KeyContainer = vector&amp;lt;Key&amp;gt;&amp;gt;
+  class flat_multiset;
+}
+```
+* less[link ../functional/less.md]
+* vector[link /reference/vector/vector.md]
+
+## 概要
+
+
+## メンバ関数
+### 構築・破棄
+
+| 名前 | 説明 | 対応バージョン |
+|---------------------------------|----------------|-------|
+| [`(constructor)`](flat_multiset/op_constructor.md) | コンストラクタ | C++23 |
+| [`(destructor)`](flat_multiset/op_destructor.md.nolink) | デストラクタ | C++23 |
+| [`operator=`](flat_multiset/op_assign.md) | 代入演算子 | C++23 |
+
+
+### イテレータ
+
+| 名前 | 説明 | 対応バージョン |
+|---------------------------------------|--------------------------------------------------|-------|
+| [`begin`](flat_multiset/begin.md)     | 先頭を指すイテレータを取得する                   | C++23 |
+| [`cbegin`](flat_multiset/cbegin.md)   | 先頭を指す読み取り専用イテレータを取得する       | C++23 |
+| [`end`](flat_multiset/end.md)         | 末尾の次を指すイテレータを取得する               | C++23 |
+| [`cend`](flat_multiset/cend.md)       | 末尾の次を指す読み取り専用イテレータを取得する   | C++23 |
+| [`rbegin`](flat_multiset/rbegin.md)   | 末尾を指す逆イテレータを取得する                 | C++23 |
+| [`crbegin`](flat_multiset/crbegin.md) | 末尾を指す読み取り専用逆イテレータを取得する     | C++23 |
+| [`rend`](flat_multiset/rend.md)       | 先頭の前を指す逆イテレータを取得する             | C++23 |
+| [`crend`](flat_multiset/crend.md)     | 先頭の前を指す読み取り専用逆イテレータを取得する | C++23 |
+
+
+### 領域
+
+| 名前 | 説明 | 対応バージョン |
+|-----------------------------------------|------------------------------------|-------|
+| [`empty`](flat_multiset/empty.md)       | コンテナが空であるかどうかを調べる | C++23 |
+| [`size`](flat_multiset/size.md)         | 要素数を取得する                   | C++23 |
+| [`max_size`](flat_multiset/max_size.md) | 格納可能な最大の要素数を取得する   | C++23 |
+
+
+### コンテナの変更
+
+| 名前 | 説明 | 対応バージョン |
+|-------------------------------------------------|--------------------------------------------|----------------|
+| [`clear`](flat_multiset/clear.md)               | 全ての要素を削除する                       | C++23 |
+| [`insert`](flat_multiset/insert.md)             | 要素を挿入する                             | C++23 |
+| [`insert_range`](flat_multiset/insert_range.md) | Rangeを挿入する                            | C++23 |
+| [`emplace`](flat_multiset/emplace.md)           | 要素を直接構築する                         | C++23 |
+| [`emplace_hint`](flat_multiset/emplace_hint.md) | ヒントを使って要素を直接構築する           | C++23 |
+| [`erase`](flat_multiset/erase.md)               | 要素を削除する                             | C++23 |
+| [`swap`](flat_multiset/swap.md)                 | コンテンツを交換する                       | C++23 |
+| [`extract`](flat_multiset/extract.md)           | キーのコンテナを取得する                   | C++23 |
+| [`replace`](flat_multiset/replace.md)           | キーのコンテナを置き換える                 | C++23 |
+
+### 要素アクセス
+
+| 名前 | 説明 | 対応バージョン |
+|-----------------------------------------------|--------------------------------------------|-------|
+| [`count`](flat_multiset/count.md)             | 指定したキーにマッチする要素の数を取得する | C++23 |
+| [`find`](flat_multiset/find.md)               | 指定したキーで要素を探す                   | C++23 |
+| [`contains`](flat_multiset/contains.md)       | 指定したキーの要素が含まれているかを判定する | C++23 |
+| [`equal_range`](flat_multiset/equal_range.md) | 指定したキーにマッチする要素範囲を取得する | C++23 |
+| [`lower_bound`](flat_multiset/lower_bound.md) | 与えられた値より小さくない最初の要素へのイテレータを取得する | C++23 |
+| [`upper_bound`](flat_multiset/upper_bound.md) | 特定の値よりも大きい最初の要素へのイテレータを取得する       | C++23 |
+
+### オブザーバー
+
+| 名前 | 説明 | 対応バージョン |
+|---------------------------------------------|----------------------------------------|----------------|
+| [`key_comp`](flat_multiset/key_comp.md)     | キー比較用の関数オブジェクトを取得する | C++23 |
+| [`value_comp`](flat_multiset/value_comp.md) | 要素比較用の関数オブジェクトを取得する | C++23 |
+
+
+## メンバ型
+
+| 名前 | 説明 | 対応バージョン |
+|--------------------------|---------------------------|----------------|
+| `key_type`               | キーの型。テンプレートパラメータ `Key`  |  C++23 |
+| `value_type`             | 要素の型。テンプレートパラメータ `Key`  |  C++23 |
+| `key_compare`            | キーの大小関係を判定する二項述語の型。テンプレートパラメータ `Compare` | C++23 |
+| `value_compare`          | 要素の大小関係を判定する二項述語の型。テンプレートパラメータ `Compare` | C++23 |
+| `reference`              | 要素への参照型。`value_type&amp;amp;` | C++23 |
+| `const_reference`        | 要素への`const`参照型。`const value_type&amp;amp;` | C++23 |
+| `size_type`              | 要素数を表す符号なし整数型 [`size_t`](/reference/cstddef/size_t.md) | C++23 |
+| `difference_type`        | 同一のコンテナを指す `iterator` の差を表す符号付き整数型 [`ptrdiff_t`](/reference/cstddef/ptrdiff_t.md) | C++23 |
+| `iterator`               | ランダムアクセスイテレータ | C++23 |
+| `const_iterator`         | 読み取り専用ランダムアクセスイテレータ | C++23 |
+| `reverse_iterator`       | 逆順ランダムアクセスイテレータ。[`std::reverse_iterator`](/reference/iterator/reverse_iterator.md)`&amp;lt;iterator&amp;gt;` | C++23 |
+| `const_reverse_iterator` | 読み取り専用逆順ランダムアクセスイテレータ。[`std::reverse_iterator`](/reference/iterator/reverse_iterator.md)`&amp;lt;const_iterator&amp;gt;` | C++23 |
+| `container_type`         | キーを格納するコンテナ型 `KeyContainer` | C++23 |
+
+
+## 非メンバ関数
+### 要素削除
+
+| 名前 | 説明 | 対応バージョン |
+|----------------------------------------------|-------------------------------------|----------------|
+| [`erase_if`](flat_multiset/erase_if_free.md) | 指定した条件に合致する要素とその分の領域を、コンテナから削除する | C++23 |
+
+
+## 非メンバ（*Hidden friends*）関数
+### 比較演算子
+
+| 名前 | 説明 | 対応バージョン |
+|--------------------------------------------------------------------|----------------------------|-------|
+| [`operator==`](flat_multiset/op_equal.md)                          | 左辺と右辺が等しいかの判定を行う           | C++23 |
+| `bool operator!=(const flat_multiset&amp;amp; x, const flat_multiset&amp;amp; y);` | 左辺と右辺が等しくないかの判定を行う (`==`により使用可能) | C++23 |
+| [`operator&amp;lt;=&amp;gt;`](flat_multiset/op_compare_3way.md)                  | 三方比較を行う                             | C++23 |
+| `bool operator&amp;lt;(const flat_multiset&amp;amp; x, const flat_multiset&amp;amp; y);`  | 左辺が右辺より小さいかの判定を行う  (`&amp;lt;=&amp;gt;`により使用可能) | C++23 |
+| `bool operator&amp;lt;=(const flat_multiset&amp;amp; x, const flat_multiset&amp;amp; y);` | 左辺が右辺より小さいか等しいかの判定を行う (`&amp;lt;=&amp;gt;`により使用可能) | C++23 |
+| `bool operator&amp;gt;(const flat_multiset&amp;amp; x, const flat_multiset&amp;amp; y);`  | 左辺が右辺より大きいかの判定を行う (`&amp;lt;=&amp;gt;`により使用可能) | C++23 |
+| `bool operator&amp;gt;=(const flat_multiset&amp;amp; x, const flat_multiset&amp;amp; y);` | 左辺が右辺より大きいか等しいかの判定を行う (`&amp;lt;=&amp;gt;`により使用可能) | C++23 |
+
+
+### 入れ替え
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`swap`](flat_multiset/swap_free.md.nolink) | 2つの`flat_multiset`オブジェクトを入れ替える | C++23 |
+
+
+## 推論補助
+
+| 名前 | 説明 | 対応バージョン |
+|---------------------------------------------|------------------------------------|-------|
+| [`(deduction_guide)`](flat_multiset/op_deduction_guide.md.nolink) | クラステンプレートの推論補助 | C++23 |
+
+
+## その他
+
+| 名前 | 説明 | 対応バージョン |
+|------------------------------------------------|----------------------|-------|
+| [`uses_allocator`](flat_multiset/uses_allocator.md) | `flat_multiset`による特殊化 | C++23 |
+
+
+
+## 例
+### 基本的な使い方
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+int main()
+{
+  // stringをキーとして扱う連想配列
+  std::flat_multiset&amp;lt;std::string&amp;gt; fs = {&amp;#34;Carol&amp;#34;, &amp;#34;Alice&amp;#34;, &amp;#34;Bob&amp;#34;, &amp;#34;Carol&amp;#34;};
+
+  // 検索 : キーを指定し、イテレータを得る
+  auto it = fs.find(&amp;#34;Alice&amp;#34;);
+  std::cout &amp;lt;&amp;lt; *it &amp;lt;&amp;lt; std::endl
+            &amp;lt;&amp;lt; std::endl;
+
+  // 全体を出力する
+  for (const auto&amp;amp; str : fs) {
+    std::cout &amp;lt;&amp;lt; str &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* fs.find[link flat_multiset/find.md]
+
+#### 出力
+```
+Alice
+
+Alice
+Bob
+Carol
+Carol
+```
+
+### キー以外のテンプレートを指定
+```cpp example
+#include &amp;lt;deque&amp;gt;
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  std::deque&amp;lt;int&amp;gt; keys = {1, 4, 2, 8, 5, 7};
+
+  // intをキーとして扱う連想配列
+  // キーの順序はgreater、キーのコンテナはdequeで保持
+  std::flat_multiset&amp;lt;int,
+                     std::greater&amp;lt;int&amp;gt;,
+                     std::deque&amp;lt;int&amp;gt;&amp;gt; fs(keys);
+
+  // 全体を出力する
+  for (int i : fs) {
+    std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &amp;#34; &amp;#34;;
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::greater[link ../functional/greater.md]
+
+#### 出力
+```
+8 7 5 4 2 1 
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P1222R0 A Standard `flat_set`](hhttps://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1222r0.pdf)
+    - C++23で`flat_set`が導入された経緯・動機・設計について記載されている
+- [P1222R4 A Standard `flat_set`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1222r4.pdf)
+    - C++23で導入された`flat_set`の仕様
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_multiset/begin.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/flat_multiset/begin.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_multiset/begin.md b/reference/flat_set/flat_multiset/begin.md
new file mode 100644
index 000000000..1db00e406
--- /dev/null
+++ b/reference/flat_set/flat_multiset/begin.md
@@ -0,0 +1,74 @@
+# begin
+* flat_set[meta header]
+* std[meta namespace]
+* flat_multiset[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+iterator begin() noexcept;
+const_iterator begin() const noexcept;
+```
+
+
+## 概要
+コンテナの先頭要素を参照するイテレータを取得する。
+
+内部的に、コンテナは要素を下位から上位へと並べており、従って`begin()`はコンテナ内の最下位のキーにあたる値へのイテレータを返す。
+
+
+## 戻り値
+コンテナの先頭要素へのイテレータ。
+`iterator` と `const_iterator` はともにメンバ型である。このクラステンプレートにおいて、これらはランダムアクセスイテレータである。
+
+
+## 計算量
+定数時間。
+
+
+## 例
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  std::flat_multiset&amp;lt;int&amp;gt; fs = {3, 1, 4, 1};
+
+  for (auto i = fs.begin(); i != fs.end(); ++i) {
+    std::cout &amp;lt;&amp;lt; *i &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* begin()[color ff0000]
+* fs.end()[link end.md]
+
+### 出力
+```
+1
+1
+3
+4
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+
+| 名前 | 説明 |
+|-----------------------------------|--------------------------------|
+| [`flat_multiset::end`](end.md)         | 末尾の次を指すイテレータを取得する |
+| [`flat_multiset::cbegin`](cbegin.md)   | 先頭を指すconstイテレータを取得する |
+| [`flat_multiset::cend`](cend.md)       | 末尾の次を指すconstイテレータを取得する |
+| [`flat_multiset::rbegin`](rbegin.md)   | 末尾を指す逆イテレータを取得する |
+| [`flat_multiset::rend`](rend.md)       | 先頭の前を指す逆イテレータを取得する |
+| [`flat_multiset::crbegin`](crbegin.md) | 末尾を指す逆constイテレータを取得する |
+| [`flat_multiset::crend`](crend.md)     | 先頭の前を指す逆constイテレータを取得する |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cbegin -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_multiset/cbegin.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/flat_multiset/cbegin.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_multiset/cbegin.md b/reference/flat_set/flat_multiset/cbegin.md
new file mode 100644
index 000000000..31da02d40
--- /dev/null
+++ b/reference/flat_set/flat_multiset/cbegin.md
@@ -0,0 +1,70 @@
+# cbegin
+* flat_set[meta header]
+* std[meta namespace]
+* flat_multiset[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+const_iterator cbegin() const noexcept;
+```
+
+
+## 概要
+コンテナの先頭要素を参照するイテレータを取得する。
+
+内部的に、コンテナは要素を下位から上位へと並べており、従って`cbegin()`はコンテナ内の最下位のキーにあたる値へのイテレータを返す。
+
+
+## 戻り値
+コンテナの先頭要素へのイテレータ。
+`const_iterator` はメンバ型である。このクラステンプレートにおいて、この型はランダムアクセスイテレータである。
+
+
+## 計算量
+定数時間。
+
+
+## 例
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  std::flat_multiset&amp;lt;int&amp;gt; fs = {3, 1, 4, 1};
+
+  for (auto i = fs.cbegin(); i != fs.cend(); ++i) {
+    std::cout &amp;lt;&amp;lt; *i &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* cbegin()[color ff0000]
+* fs.cend()[link cend.md]
+
+### 出力
+```
+1
+1
+3
+4
+```
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+
+| 名前 | 説明 |
+|-----------------------------------|--------------------------------|
+| [`flat_multiset::begin`](begin.md)     | 先頭を指すイテレータを取得する |
+| [`flat_multiset::end`](end.md)         | 末尾の次を指すイテレータを取得する |
+| [`flat_multiset::cend`](cend.md)       | 末尾の次を指すconstイテレータを取得する |
+| [`flat_multiset::rbegin`](rbegin.md)   | 末尾を指す逆イテレータを取得する |
+| [`flat_multiset::rend`](rend.md)       | 先頭の前を指す逆イテレータを取得する |
+| [`flat_multiset::crbegin`](crbegin.md) | 末尾を指す逆constイテレータを取得する |
+| [`flat_multiset::crend`](crend.md)     | 先頭の前を指す逆constイテレータを取得する |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cend -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_multiset/cend.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/flat_multiset/cend.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_multiset/cend.md b/reference/flat_set/flat_multiset/cend.md
new file mode 100644
index 000000000..cf1cf81a0
--- /dev/null
+++ b/reference/flat_set/flat_multiset/cend.md
@@ -0,0 +1,74 @@
+# cend
+* flat_set[meta header]
+* std[meta namespace]
+* flat_multiset[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+const_iterator cend() const noexcept;
+```
+
+## 概要
+コンテナの末尾の次を参照するイテレータを取得する。
+
+
+## 戻り値
+コンテナの末尾の次を参照するイテレータ。 
+`const_iterator` はメンバ型である。このクラステンプレートにおいて、この型はランダムアクセスイテレータである。
+
+
+## 計算量
+定数時間。
+
+
+## 備考
+- この関数によって返されるイテレータは、`*this`が保持するいずれの要素も参照しない。その指す先は、不正な範囲となるだろう
+
+
+## 例
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  std::flat_multiset&amp;lt;int&amp;gt; fs = {3, 1, 4, 1};
+
+  for (auto i = fs.cbegin(); i != fs.cend(); ++i) {
+    std::cout &amp;lt;&amp;lt; *i &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* cend()[color ff0000]
+* fs.cbegin()[link cbegin.md]
+
+### 出力
+```
+1
+1
+3
+4
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+## 関連項目
+
+| 名前 | 説明 |
+|-----------------------------------|-----------------------------|
+| [`flat_multiset::begin`](begin.md)     | 先頭を指すイテレータを取得する |
+| [`flat_multiset::end`](end.md)         | 末尾の次を指すイテレータを取得する |
+| [`flat_multiset::cbegin`](cbegin.md)   | 先頭を指すconstイテレータを取得する |
+| [`flat_multiset::rbegin`](rbegin.md)   | 末尾を指す逆イテレータを取得する |
+| [`flat_multiset::rend`](rend.md)       | 先頭の前を指す逆イテレータを取得する |
+| [`flat_multiset::crbegin`](crbegin.md) | 末尾を指す逆constイテレータを取得する |
+| [`flat_multiset::crend`](crend.md)     | 先頭の前を指す逆constイテレータを取得する |
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>clear -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_multiset/clear.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/flat_multiset/clear.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_multiset/clear.md b/reference/flat_set/flat_multiset/clear.md
new file mode 100644
index 000000000..d935fd497
--- /dev/null
+++ b/reference/flat_set/flat_multiset/clear.md
@@ -0,0 +1,56 @@
+# clear
+* flat_set[meta header]
+* std[meta namespace]
+* flat_multiset[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+void clear() noexcept; // (1) C++23
+```
+
+## 概要
+コンテナ内の全ての要素を削除する。各要素のデストラクタが呼ばれ、コンテナから削除される。[`size()`](size.md) は 0 になる。
+
+
+## 計算量
+線形時間。
+
+
+## 例外
+投げない。
+
+
+## 例
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main ()
+{
+  std::flat_multiset&amp;lt;int&amp;gt; fs = {3, 1, 4, 1};
+
+  std::cout &amp;lt;&amp;lt; fs.size() &amp;lt;&amp;lt; std::endl;
+
+  fs.clear();
+
+  std::cout &amp;lt;&amp;lt; fs.size() &amp;lt;&amp;lt; std::endl;
+}
+```
+* clear()[color ff0000]
+* fs.size()[link size.md]
+
+### 出力
+```
+4
+0
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>contains -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_multiset/contains.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/flat_multiset/contains.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_multiset/contains.md b/reference/flat_set/flat_multiset/contains.md
new file mode 100644
index 000000000..48e2daa1a
--- /dev/null
+++ b/reference/flat_set/flat_multiset/contains.md
@@ -0,0 +1,80 @@
+# contains
+* flat_set[meta header]
+* std[meta namespace]
+* flat_multiset[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+bool contains(const key_type&amp;amp; x) const; // (1) C++23
+
+template &amp;lt;class K&amp;gt;
+bool contains(const K&amp;amp; x) const;        // (2) C++23
+```
+
+
+## 概要
+指定されたキー`x`に一致する要素がコンテナに含まれているかを判定する。
+
+- (1) : クラスのテンプレートパラメータ`key_type`型のキーを受け取る
+- (2) : `key_type`と比較可能な`K`型のキーを受け取る
+
+
+## テンプレートパラメータ制約
+- (2) : `key_compare::is_transparent`が妥当な式であること
+
+
+## 戻り値
+以下と等価：
+
+```cpp
+return find(x) != end();
+```
+* find[link find.md]
+* end()[link end.md]
+
+
+## 計算量
+対数時間
+
+
+## 備考
+- (2) :
+    - `is_transparent`は、標準ライブラリの[`std::less`](/reference/functional/less.md)、[`std::greater`](/reference/functional/greater.md)といった関数オブジェクトの、`void`に対する特殊化で定義される。それ以外のテンプレートパラメータで`is_transparent`が定義されないのは、互換性のためである。
+    - これらのオーバーロードは、`flat_multiset&amp;lt;string&amp;gt;`のようなコンテナに対し、検索操作で文字列リテラルを渡した際に、キー型の一時オブジェクトが生成されるコストを減らすためにある。
+
+
+## 例
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  std::flat_set&amp;lt;int&amp;gt; fs = {3, 1, 4, 1};
+
+  // キー3の要素が含まれているか
+  if (fs.contains(3)) {
+    std::cout &amp;lt;&amp;lt; &amp;#34;contain&amp;#34; &amp;lt;&amp;lt; std::endl;
+  }
+  else {
+    std::cout &amp;lt;&amp;lt; &amp;#34;doesn&amp;#39;t contain&amp;#34; &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* contains[color ff0000]
+
+### 出力
+```
+contain
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>count -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_multiset/count.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/flat_multiset/count.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_multiset/count.md b/reference/flat_set/flat_multiset/count.md
new file mode 100644
index 000000000..c605ea333
--- /dev/null
+++ b/reference/flat_set/flat_multiset/count.md
@@ -0,0 +1,90 @@
+# count
+* flat_set[meta header]
+* std[meta namespace]
+* flat_multiset[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+size_type count(const key_type&amp;amp; x) const; // (1) C++23
+
+template &amp;lt;class K&amp;gt;
+size_type count(const K&amp;amp; x) const;        // (2) C++23
+```
+
+## 概要
+キー `x` を検索し、コンテナ内に見つかった要素の数を返す。
+
+- (1) : クラスのテンプレートパラメータ`key_type`型のキー `x` を受け取って、`x` と等価なキーを持つ要素の数を取得する。
+- (2) : `key_type`と比較可能な`K`型のキー `x` を受け取って、`x`と等価なキーを持つ要素の数を取得する。
+
+
+## テンプレートパラメータ制約
+- (2) : `key_compare::is_transparent`が妥当な式であること
+
+
+## 戻り値
+- (1) : `x`と等価なキーの要素数を返す。
+- (2) : `key_compare`型の関数オブジェクトを`c`、コンテナ内の各要素が持つキーを`k`として、キーが等価か判定する式`!c(k, x) &amp;amp;&amp;amp; !c(x, k)`が`true`となる要素の数を返す。
+
+
+## 計算量
+```
+log(size()) + count(x)
+```
+* size()[link size.md]
+
+
+## 備考
+- (2) :
+    - `is_transparent`は、標準ライブラリの[`std::less`](/reference/functional/less.md)、[`std::greater`](/reference/functional/greater.md)といった関数オブジェクトの、`void`に対する特殊化で定義される。それ以外のテンプレートパラメータで`is_transparent`が定義されないのは、互換性のためである。
+    - これらのオーバーロードは、`flat_multiset&amp;lt;string&amp;gt;`のようなコンテナに対し、検索操作で文字列リテラルを渡した際に、キー型の一時オブジェクトが生成されるコストを減らすためにある。
+
+
+## 例
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+int main()
+{
+  // (1)
+  {
+    std::flat_multiset&amp;lt;std::string&amp;gt; fs = {&amp;#34;Alice&amp;#34;, &amp;#34;Bob&amp;#34;, &amp;#34;Carol&amp;#34;};
+
+    std::cout &amp;lt;&amp;lt; fs.count(&amp;#34;Bob&amp;#34;) &amp;lt;&amp;lt; std::endl;
+  }
+
+  // (2)
+  {
+    std::flat_multiset&amp;lt;std::string, std::less&amp;lt;&amp;gt;&amp;gt; fs = {&amp;#34;Alice&amp;#34;, &amp;#34;Bob&amp;#34;, &amp;#34;Carol&amp;#34;};
+
+    // std::lessのvoidに対する特殊化を使用することで、
+    // 文字列リテラルをcount()関数の引数として渡した際に、
+    // std::string型の一時オブジェクトが生成されない。
+    std::cout &amp;lt;&amp;lt; fs.count(&amp;#34;Bob&amp;#34;) &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* fs.count[color ff0000]
+* std::less[link /reference/functional/less.md]
+
+### 出力
+```
+1
+1
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`contains()`](contains.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>crbegin -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_multiset/crbegin.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/flat_multiset/crbegin.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_multiset/crbegin.md b/reference/flat_set/flat_multiset/crbegin.md
new file mode 100644
index 000000000..769fb3b2d
--- /dev/null
+++ b/reference/flat_set/flat_multiset/crbegin.md
@@ -0,0 +1,71 @@
+# crbegin
+* flat_set[meta header]
+* std[meta namespace]
+* flat_multiset[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+const_reverse_iterator crbegin() const noexcept;
+```
+
+## 概要
+コンテナ内の末尾を指す逆イテレータを取得する。 
+内部的に、このコンテナは各要素をキーの値に従って下位から上位へと並べており、従って `crbegin()` は最上位のキーにあたる値へのイテレータを返す。 
+`crbegin()` は [`end()`](end.md) と同じ要素を指すわけではなく、その前の要素を指すことに注意。
+
+
+## 戻り値
+反転したシーケンスの先頭を指す逆イテレータ。 
+`const_reverse_iterator` はメンバ型である。このクラステンプレートにおいて、この型は逆ランダムアクセスイテレータであり、`reverse_iterator&amp;lt;const_iterator&amp;gt;` と定義される。
+
+
+## 計算量
+定数時間。
+
+
+## 例
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  std::flat_multiset&amp;lt;int&amp;gt; fs = {3, 1, 4, 1};
+
+  for (auto i = fs.crbegin(); i != fs.crend(); ++i) {
+    std::cout &amp;lt;&amp;lt; *i &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* crbegin()[color ff0000]
+* fs.crend()[link crend.md]
+
+### 出力
+```
+4
+3
+1
+1
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+| 名前 | 説明 |
+|---------------------------------|-----------------------------|
+| [`flat_multiset::begin`](begin.md)   | 先頭を指すイテレータを取得する |
+| [`flat_multiset::end`](end.md)       | 末尾の次を指すイテレータを取得する |
+| [`flat_multiset::cbegin`](cbegin.md) | 先頭を指すconstイテレータを取得する |
+| [`flat_multiset::cend`](cend.md)     | 末尾の次を指すconstイテレータを取得する |
+| [`flat_multiset::rbegin`](rbegin.md) | 末尾を指す逆イテレータを取得する |
+| [`flat_multiset::rend`](rend.md)     | 先頭の前を指す逆イテレータを取得する |
+| [`flat_multiset::crend`](crend.md)   | 先頭の前を指す逆constイテレータを取得する |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>crend -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_multiset/crend.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/flat_multiset/crend.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_multiset/crend.md b/reference/flat_set/flat_multiset/crend.md
new file mode 100644
index 000000000..01cd3265b
--- /dev/null
+++ b/reference/flat_set/flat_multiset/crend.md
@@ -0,0 +1,69 @@
+# crend
+* flat_set[meta header]
+* std[meta namespace]
+* flat_multiset[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+const_reverse_iterator crend() const noexcept;
+```
+
+
+## 概要
+コンテナの先頭要素の前（これは反転シーケンスの末尾にあたる）を指す逆イテレータを取得する。 
+`crend()` は [`begin()`](begin.md) と同じ要素を指すわけではなく、その前の要素を指すことに注意。
+
+
+## 戻り値
+反転シーケンスの終端を指す逆イテレータ。 
+`const_reverse_iterator` はメンバ型である。`flat_multiset` クラステンプレートにおいて、これらは逆ランダムアクセスイテレータであり、`reverse_iterator&amp;lt;const_iterator&amp;gt;` と定義される。
+
+
+## 例
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  std::flat_multiset&amp;lt;int&amp;gt; fs = {3, 1, 4, 1};
+
+  for (auto i = fs.crbegin(); i != fs.crend(); ++i) {
+    std::cout &amp;lt;&amp;lt; *i &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* crend()[color ff0000]
+* fs.crbegin()[link crbegin.md]
+
+### 出力
+```
+4
+3
+1
+1
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+
+## 関連項目
+
+| 名前 | 説明 |
+|------------------------------|-----------------------------------------|
+| [`flat_multiset::begin`](begin.md)     | 先頭を指すイテレータを取得する |
+| [`flat_multiset::end`](end.md)         | 末尾の次を指すイテレータを取得する |
+| [`flat_multiset::cbegin`](cbegin.md)   | 先頭を指すconstイテレータを取得する |
+| [`flat_multiset::cend`](cend.md)       | 末尾の次を指すconstイテレータを取得する |
+| [`flat_multiset::rbegin`](rbegin.md)   | 末尾を指す逆イテレータを取得する |
+| [`flat_multiset::rend`](rend.md)       | 先頭の前を指す逆イテレータを取得する |
+| [`flat_multiset::crbegin`](crbegin.md) | 末尾を指す逆constイテレータを取得する |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>emplace -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_multiset/emplace.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/flat_multiset/emplace.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_multiset/emplace.md b/reference/flat_set/flat_multiset/emplace.md
new file mode 100644
index 000000000..02e7feb99
--- /dev/null
+++ b/reference/flat_set/flat_multiset/emplace.md
@@ -0,0 +1,109 @@
+# emplace
+* flat_set[meta header]
+* std[meta namespace]
+* flat_multiset[meta class]
+* function template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+template &amp;lt;class... Args&amp;gt;
+iterator emplace(Args&amp;amp;&amp;amp;... args);
+```
+
+## 概要
+コンテナに新しい要素を挿入する。要素は直接構築される（コピーもムーブもされない）。要素のコンストラクタはこの関数に渡された引数を与えることによって呼ばれる。
+
+
+## パラメータ
+- `args...` : 要素のコンストラクタへ転送される引数パック。
+
+
+## テンプレートパラメータ制約
+- [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;value_type, Arg...&amp;gt;`が`true`であること。
+
+
+## 戻り値
+挿入された要素へのイテレータを返す。
+
+
+## 例
+### 単純な挿入の例
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  std::flat_multiset&amp;lt;int&amp;gt; fs;
+
+  fs.emplace(3);
+  fs.emplace(1);
+  fs.emplace(4);
+  fs.emplace(1);
+
+  for (int i : fs) {
+    std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* emplace[color ff0000]
+
+#### 出力
+```
+1
+1
+3
+4
+```
+
+### コンストラクタ引数を渡す例
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+int main()
+{
+  std::flat_multiset&amp;lt;std::string&amp;gt; fs;
+  const char aaa[3] = {&amp;#39;A&amp;#39;, &amp;#39;A&amp;#39;, &amp;#39;A&amp;#39;};
+
+  fs.emplace(5, &amp;#39;C&amp;#39;);
+  fs.emplace(aaa, 3);
+  fs.emplace(&amp;#34;BBBB&amp;#34;);
+  fs.emplace(std::begin(aaa), std::end(aaa));
+
+  for (const std::string&amp;amp; i : fs) {
+    std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* emplace[color ff0000]
+* std::begin[link /reference/iterator/begin.md]
+* std::end[link /reference/iterator/end.md]
+
+#### 出力
+```
+AAA
+AAA
+BBBB
+CCCCC
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+| 名前                                             | 説明                             |
+|--------------------------------------------------|----------------------------------|
+| [`flat_multiset::insert`](insert.md)             | 要素を挿入する                   |
+| [`flat_multiset::insert_range`](insert_range.md) | Rangeを挿入する                  |
+| [`flat_multiset::emplace_hint`](emplace_hint.md) | ヒントを使って要素を直接構築する |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>emplace_hint -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_multiset/emplace_hint.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/flat_multiset/emplace_hint.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_multiset/emplace_hint.md b/reference/flat_set/flat_multiset/emplace_hint.md
new file mode 100644
index 000000000..acaa29283
--- /dev/null
+++ b/reference/flat_set/flat_multiset/emplace_hint.md
@@ -0,0 +1,74 @@
+# emplace_hint
+* flat_set[meta header]
+* std[meta namespace]
+* flat_multiset[meta class]
+* function template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+template &amp;lt;class... Args&amp;gt;
+iterator emplace_hint(const_iterator hint, Args&amp;amp;&amp;amp;... args);
+```
+
+## 概要
+要素が配置されるべき場所を示唆するパラメータ `hint` を使って、コンテナに新しい要素を挿入する。要素は直接構築される（コピーもムーブもされない）。要素のコンストラクタはこの関数に渡された引数と同じ引数で呼ばれる。
+
+
+## パラメータ
+- `hint` : 新しい要素をどこへ挿入するかを示唆するために使われるイテレータ
+- `args...` : 要素のコンストラクタへ転送される引数パック
+
+
+## 戻り値
+追加された要素を指すイテレータ。
+
+
+## 計算量
+一般にコンテナのサイズについて対数時間だが、新しい要素が `hint` の前に挿入された場合は償却定数時間。
+
+
+## 例
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  std::flat_multiset&amp;lt;int&amp;gt; fs = {3, 1, 4};
+
+  // キー5の要素が最後尾に追加されることが事前にわかっているので、fs.end()をヒントとして与える
+  fs.emplace_hint(fs.end(), 5);
+
+  for (int i : fs) {
+    std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* emplace_hint[color ff0000]
+* fs.end()[link end.md]
+
+### 出力
+```
+1
+3
+4
+5
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+| 名前                                             | 説明               |
+|--------------------------------------------------|--------------------|
+| [`flat_multiset::insert`](insert.md)             | 要素を挿入する     |
+| [`flat_multiset::insert_range`](insert_range.md) | Rangeを挿入する    |
+| [`flat_multiset::emplace`](emplace.md)           | 要素を直接構築する |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>empty -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_multiset/empty.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/flat_multiset/empty.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_multiset/empty.md b/reference/flat_set/flat_multiset/empty.md
new file mode 100644
index 000000000..df552ef67
--- /dev/null
+++ b/reference/flat_set/flat_multiset/empty.md
@@ -0,0 +1,59 @@
+# empty
+* flat_set[meta header]
+* std[meta namespace]
+* flat_multiset[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+[[nodiscard]] bool empty() const noexcept; // (1) C++23
+```
+
+## 概要
+コンテナが空かどうかをテストする。 
+コンテナが空（[`size()`](size.md) が 0）の場合に `true` を返す。 
+
+この関数はコンテナ内のコンテンツを変化させない。コンテンツをクリアするには [`clear()`](clear.md) メンバ関数を使用する。
+
+
+## 戻り値
+コンテナサイズが 0 のときに `true`, そうでないときに `false` を返す。
+
+
+## 計算量
+定数時間。
+
+
+## 例
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main ()
+{
+  std::flat_multiset&amp;lt;int&amp;gt; fs;
+
+  std::cout &amp;lt;&amp;lt; fs.empty() &amp;lt;&amp;lt; std::endl;
+
+  fs.insert(42);
+
+  std::cout &amp;lt;&amp;lt; fs.empty() &amp;lt;&amp;lt; std::endl;
+}
+```
+* empty()[color ff0000]
+* fs.insert[link insert.md]
+
+### 出力
+```
+1
+0
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_multiset/end.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/flat_multiset/end.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_multiset/end.md b/reference/flat_set/flat_multiset/end.md
new file mode 100644
index 000000000..48ab910d6
--- /dev/null
+++ b/reference/flat_set/flat_multiset/end.md
@@ -0,0 +1,75 @@
+# end
+* flat_set[meta header]
+* std[meta namespace]
+* flat_multiset[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+iterator end() noexcept;
+const_iterator end() const noexcept;
+```
+
+## 概要
+コンテナの末尾の次を参照するイテレータを取得する。
+
+
+## 戻り値
+コンテナの最後の要素の次を参照するイテレータ。 
+`iterator` と `const_iterator` はいずれもメンバ型である。このクラステンプレートにおいて、これらはランダムアクセスイテレータである。
+
+
+## 計算量
+定数時間。
+
+
+## 備考
+- この関数によって返されるイテレータは、`*this`が保持するいずれの要素も参照しない。その指す先は、不正な範囲となるだろう
+
+
+## 例
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  std::flat_multiset&amp;lt;int&amp;gt; fs = {3, 1, 4, 1};
+
+  for (auto i = fs.begin(); i != fs.end(); ++i) {
+    std::cout &amp;lt;&amp;lt; *i &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* end()[color ff0000]
+* fs.begin()[link begin.md]
+
+### 出力
+```
+1
+1
+3
+4
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+
+| 名前 | 説明 |
+|-----------------------------------|-----------------------------|
+| [`flat_multiset::begin`](begin.md)     | 先頭を指すイテレータを取得する |
+| [`flat_multiset::cbegin`](cbegin.md)   | 先頭を指すconstイテレータを取得する |
+| [`flat_multiset::cend`](cend.md)       | 末尾の次を指すconstイテレータを取得する |
+| [`flat_multiset::rbegin`](rbegin.md)   | 末尾の次を指す逆イテレータを取得する |
+| [`flat_multiset::rend`](rend.md)       | 先頭の前を指す逆イテレータを取得する |
+| [`flat_multiset::crbegin`](crbegin.md) | 末尾を指す逆constイテレータを取得する |
+| [`flat_multiset::crend`](crend.md)     | 先頭の前を指す逆constイテレータを取得する |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>equal_range -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_multiset/equal_range.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/flat_multiset/equal_range.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_multiset/equal_range.md b/reference/flat_set/flat_multiset/equal_range.md
new file mode 100644
index 000000000..6ead8e62e
--- /dev/null
+++ b/reference/flat_set/flat_multiset/equal_range.md
@@ -0,0 +1,86 @@
+# equal_range
+* flat_set[meta header]
+* std[meta namespace]
+* flat_multiset[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+pair&amp;lt;iterator, iterator&amp;gt; equal_range(const key_type&amp;amp; x); // (1) C++23
+
+template &amp;lt;class K&amp;gt;
+pair&amp;lt;iterator, iterator&amp;gt; equal_range(const K&amp;amp; x);        // (2) C++23
+
+pair&amp;lt;const_iterator, const_iterator&amp;gt;
+  equal_range(const key_type&amp;amp; x) const;                  // (3) C++23
+
+template &amp;lt;class K&amp;gt;
+pair&amp;lt;const_iterator, const_iterator&amp;gt;
+  equal_range(const K&amp;amp; x) const;                         // (4) C++23
+```
+* pair[link /reference/utility/pair.md]
+
+## 概要
+コンテナ内の、`x` と等しいキー要素を全て含む範囲の境界を返す。 
+
+もし `x` がコンテナ内のどのキーともマッチしなかった場合、戻り値の範囲は長さ 0 になり、両方のイテレータは `x` より大きく最も近い値を指す。そうでない場合、`x` がコンテナ内の全ての要素よりも大きい場合は [`end()`](end.md) を指す。
+
+- (1) : `key_type`型のキーを受け取り、そのキーと等価なキー要素を全て含むイテレータ範囲を取得する。
+- (2) : `key_type`と比較可能な`K`型のキーを受け取り、そのキーと等価なキー要素を全て含むイテレータ範囲を取得する。
+- (3) : `const`な`*this`オブジェクトにおいて、`key_type`型のキーを受け取り、そのキーと等価なキー要素を全て含むイテレータ範囲を取得する。
+- (4) : `const`な`*this`オブジェクトにおいて、`key_type`と比較可能な`K`型のキーを受け取り、そのキーと等価なキー要素を全て含むイテレータ範囲を取得する。
+
+
+## 戻り値
+この関数は `pair` を返す。ここで `pair::first` は [`lower_bound()`](lower_bound.md)`(x)` が返すであろう値と同じ値で範囲の下境界にあたり、`pair::second` は [`upper_bound()`](upper_bound.md)`(x)` が返すであろう値と同じ値で範囲の上境界にあたる。
+
+
+## 計算量
+[`size()`](size.md) について対数時間。
+
+
+## 備考
+- (2), (4) : この関数がオーバーロード解決に参加する条件は、[`find()`](find.md)メンバ関数の備考欄を参照。
+
+
+## 例
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+int main()
+{
+  std::flat_multiset&amp;lt;int&amp;gt; fs = {3, 1, 4, 1, 3};
+
+  using iterator = decltype(fs)::iterator;
+  std::pair&amp;lt;iterator, iterator&amp;gt; ret = fs.equal_range(3);
+
+  for (iterator it = ret.first; it != ret.second; ++it) {
+    std::cout &amp;lt;&amp;lt; *it &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* equal_range[color ff0000]
+
+### 出力
+```
+3
+3
+```
+
+
+## バージョン
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+| 名前 | 説明 |
+|------------------------------------------------|----------------------------------------------------------|
+| [`flat_multiset::count`](count.md)             | 指定したキーにマッチする要素の数を返す                   |
+| [`flat_multiset::lower_bound`](lower_bound.md) | 与えられた値より小さくない最初の要素へのイテレータを返す |
+| [`flat_multiset::upper_bound`](upper_bound.md) | 特定の値よりも大きい最初の要素へのイテレータを返す       |
+| [`flat_multiset::find`](find.md)               | 指定したキーで要素を探す                                 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_multiset/erase.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/flat_multiset/erase.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_multiset/erase.md b/reference/flat_set/flat_multiset/erase.md
new file mode 100644
index 000000000..725f6a5a6
--- /dev/null
+++ b/reference/flat_set/flat_multiset/erase.md
@@ -0,0 +1,140 @@
+# erase
+* flat_set[meta header]
+* std[meta namespace]
+* flat_multiset[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+iterator erase(iterator position);                         // (1) C++23
+
+iterator erase(const_iterator position);                   // (2) C++23
+
+size_type erase(const key_type&amp;amp; x);                        // (3) C++23
+
+template &amp;lt;class K&amp;gt;
+size_type erase(K&amp;amp;&amp;amp; x);                                    // (4) C++23
+
+iterator erase(const_iterator first, const_iterator last); // (5) C++23
+```
+
+## 概要
+単一要素またはイテレータ範囲`[first, last)`を コンテナから削除する。
+
+これは削除された要素の数だけコンテナの `size` を減らし、それぞれの要素のデストラクタを呼び出す。
+
+- (1) : 指定されたイテレータが指す要素を削除する
+- (2) : 指定された読み取り専用イテレータが指す要素を削除する
+- (3) : 指定されたキーをもつ要素を削除する
+- (4) : `key_type`と比較可能な`K`型のキーを受け取って要素を削除する
+- (5) : 指定されたイテレータ範囲の要素をすべて削除する
+
+
+## パラメータ
+- `position` : 削除する単一要素を指すイテレータ。`iterator` はメンバ型であり、双方向イテレータとして定義される。
+- `x` : 削除する値のキー。`key_type` はメンバ型であり、コンテナの中で `Key` の別名として定義される。
+- `first, last` : 削除するイテレータ範囲 `[first, last)` を指定するイテレータ。ここでいう範囲は `first` と `last` の間の全ての要素を含み、`first` が指す要素を含むが `last` が指す要素は含まない。
+
+
+## 戻り値
+- (1), (2), (5) : 削除された要素の次を指すイテレータを返す。そのような要素がない場合、[`end()`](end.md)を返す (要素を削除した結果としてコンテナが空になった場合)
+- (3), (4) : 削除された要素の数を返す。
+
+
+## 計算量
+- (1), (2) : 定数時間
+- (3), (4) : コンテナの [`size()`](size.md) について対数時間に加えて、`count(x)` について線形時間
+- (5) : コンテナの [`size()`](size.md) について対数時間、それに加えて `first` と `last` の間の距離に対する線形時間
+
+
+## 備考
+- (1), (2) : この関数に、範囲外のイテレータ (終端イテレータを含む) を指定した場合の動作は未定義
+
+
+## 例
+### 基本的な使い方 (C++23)
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  std::flat_multiset&amp;lt;int&amp;gt; fs = {3, 1, 4, 1};
+
+  std::cout &amp;lt;&amp;lt; fs.size() &amp;lt;&amp;lt; std::endl;
+
+  fs.erase(1);
+  std::cout &amp;lt;&amp;lt; fs.size() &amp;lt;&amp;lt; std::endl;
+
+  fs.erase(fs.begin(), fs.end());
+  std::cout &amp;lt;&amp;lt; fs.size() &amp;lt;&amp;lt; std::endl;
+}
+```
+* erase[color ff0000]
+* fs.size()[link size.md]
+* fs.begin()[link begin.md]
+* fs.end()[link end.md]
+
+#### 出力
+```
+4
+2
+0
+```
+
+### イテレート中に要素を削除する (C++23)
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  std::flat_multiset&amp;lt;int&amp;gt; fs = {3, 1, 4, 1};
+
+  // イテレート中に要素削除をするような場合には、
+  // 範囲for文は使用できない
+  for (auto it = fs.begin(); it != fs.end();) {
+    // 条件一致した要素を削除する
+    if (*it == 1) {
+      // 削除された要素の次を指すイテレータが返される。
+      it = fs.erase(it);
+    }
+    // 要素削除をしない場合に、イテレータを進める
+    else {
+      ++it;
+    }
+  }
+
+  for (int i : fs) {
+    std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* erase[color ff0000]
+* fs.begin()[link begin.md]
+* fs.end()[link end.md]
+
+#### 出力
+```
+3
+4
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+
+| 名前 | 説明 |
+|--------------------------------------|--------------------------|
+| [`flat_multiset::clear`](clear.md)   | 全ての要素を削除する     |
+| [`flat_multiset::insert`](insert.md) | 要素を挿入する           |
+| [`flat_multiset::find`](find.md)     | 指定したキーで要素を探す |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase_if -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_multiset/erase_if_free.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/flat_multiset/erase_if_free.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_multiset/erase_if_free.md b/reference/flat_set/flat_multiset/erase_if_free.md
new file mode 100644
index 000000000..a35c1ddf0
--- /dev/null
+++ b/reference/flat_set/flat_multiset/erase_if_free.md
@@ -0,0 +1,77 @@
+# erase_if
+* flat_set[meta header]
+* std[meta namespace]
+* function template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;class Key,
+           class Compare,
+           class KeyContainer,
+           class Predicate&amp;gt;
+  typename flat_multiset&amp;lt;Key, Compare, KeyContainer&amp;gt;::size_type
+    erase_if(flat_multiset&amp;lt;Key, Compare, KeyContainer&amp;gt;&amp;amp; c,
+             Predicate pred);
+}
+```
+
+## 概要
+指定した条件に合致する要素とその分の領域を、コンテナから削除する。
+
+
+## 事前条件
+- `Key`と`T`がムーブ代入可能であること
+
+
+## 効果
+メンバ変数として保持しているコンテナ`c`の各要素`e`について、`bool(pred(e))`を`E`として、`E`が`true`であるすべての要素を削除する。
+
+
+## 戻り値
+削除した要素数を返す。
+
+
+## 計算量
+正確に[`size()`](size.md)回だけ述語適用する。
+
+
+## 例
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+int main()
+{
+  std::flat_multiset&amp;lt;int&amp;gt; fs = {3, 1, 4, 1};
+
+  // コンテナfsから、キーが1の要素をすべて削除する
+  auto num = std::erase_if(fs, [](const auto&amp;amp; x) { return x == 1; });
+
+  std::cout &amp;lt;&amp;lt; num &amp;lt;&amp;lt; std::endl
+            &amp;lt;&amp;lt; std::endl;
+
+  for (int i : fs) {
+    std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* std::erase_if[color ff0000]
+
+### 出力
+```
+2
+
+3
+4
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>extract -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_multiset/extract.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/flat_multiset/extract.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_multiset/extract.md b/reference/flat_set/flat_multiset/extract.md
new file mode 100644
index 000000000..43508c5fa
--- /dev/null
+++ b/reference/flat_set/flat_multiset/extract.md
@@ -0,0 +1,78 @@
+# extract
+* flat_set[meta header]
+* std[meta namespace]
+* flat_multiset[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+container_type extract() &amp;amp;&amp;amp;;  // C++23
+```
+
+## 概要
+値のコンテナを戻り値として返す。
+
+
+## 戻り値
+クラス内部のデータ保持形式である `container_type` オブジェクト。
+
+
+## 事後条件
+呼び出し側の `flat_multiset` は空になる（たとえ例外で関数が中断されたとしても）。
+
+
+## 計算量
+定数時間。
+
+
+## 備考
+本関数は右辺値修飾されているので、右辺値からのみ読み出し可能である。
+
+
+## 例
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;utility&amp;gt;
+
+int main()
+{
+  std::flat_multiset&amp;lt;int&amp;gt; fs = {3, 1, 4, 1};
+
+  std::cout &amp;lt;&amp;lt; fs.size() &amp;lt;&amp;lt; std::endl;
+
+  decltype(fs)::container_type c = std::move(fs).extract();
+
+  std::cout &amp;lt;&amp;lt; fs.size() &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::endl;
+
+  for (int i : c) {
+    std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* extract()[color ff0000]
+* fs.size()[link size.md]
+* std::move[link /reference/utility/move.md]
+
+### 出力
+```
+4
+0
+
+1
+1
+3
+4
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>find -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_multiset/find.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/flat_multiset/find.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_multiset/find.md b/reference/flat_set/flat_multiset/find.md
new file mode 100644
index 000000000..3d8b1ea92
--- /dev/null
+++ b/reference/flat_set/flat_multiset/find.md
@@ -0,0 +1,102 @@
+# find
+* flat_set[meta header]
+* std[meta namespace]
+* flat_multiset[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+iterator find(const key_type&amp;amp; x);             // (1) C++23
+
+template &amp;lt;class K&amp;gt;
+iterator find(const K&amp;amp; x);                    // (2) C++23
+
+const_iterator find(const key_type&amp;amp; x) const; // (3) C++23
+
+template &amp;lt;class K&amp;gt;
+const_iterator find(const K&amp;amp; x) const;        // (4) C++23
+```
+
+## 概要
+`x`と等価なキーの要素を検索する。
+
+- (1), (3) : クラスのテンプレートパラメータ`key_type`型のキーを受け取って検索する。
+- (2), (4) : `key_type`と比較可能な`K`型のキーを受け取って検索する。
+
+
+## テンプレートパラメータ制約
+- (2), (4) : `key_compare::is_transparent`が妥当な式であること
+
+
+## 戻り値
+- (1), (3) : `x`と等価なキーの要素が見つかった場合は、見つかった要素へのイテレータを返す。そうでない場合は、 [`end()`](end.md) を返す。
+- (2), (4) : `key_compare`型の関数オブジェクトを`c`、コンテナ内の各要素が持つキーを`k`として、キーが等価か判定する式`!c(k, x) &amp;amp;&amp;amp; !c(x, k)`が`true`となる要素へのイテレータを返す。そのような要素がない場合は、[`end()`](end.md) を返す。
+等価となる要素が複数ある場合、そのうちのいずれかの要素へのイテレータを返す。
+
+
+## 計算量
+[`size()`](size.md) について対数時間。
+
+
+## 備考
+- (2), (4) :
+    - `is_transparent`は、標準ライブラリの[`std::less`](/reference/functional/less.md)、[`std::greater`](/reference/functional/greater.md)といった関数オブジェクトの、`void`に対する特殊化で定義される。それ以外のテンプレートパラメータで`is_transparent`が定義されないのは、互換性のためである。
+    - これらのオーバーロードは、`flat_multiset&amp;lt;string&amp;gt;`のようなコンテナに対し、検索操作で文字列リテラルを渡した際に、キー型の一時オブジェクトが生成されるコストを減らすためにある。
+
+
+## 例
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+int main()
+{
+  // (1)
+  {
+    std::flat_multiset&amp;lt;std::string&amp;gt; fs = {&amp;#34;Alice&amp;#34;, &amp;#34;Bob&amp;#34;, &amp;#34;Carol&amp;#34;};
+
+    decltype(fs)::iterator it = fs.find(&amp;#34;Bob&amp;#34;);
+    if (it != fs.end()) { // 見つかった
+      std::cout &amp;lt;&amp;lt; *it &amp;lt;&amp;lt; std::endl;
+    }
+  }
+
+  // (2)
+  {
+    std::flat_multiset&amp;lt;std::string, std::less&amp;lt;&amp;gt;&amp;gt; fs = {&amp;#34;Alice&amp;#34;, &amp;#34;Bob&amp;#34;, &amp;#34;Carol&amp;#34;};
+
+    // std::lessのvoidに対する特殊化を使用することで、
+    // 文字列リテラルをfind()関数の引数として渡した際に、
+    // std::string型の一時オブジェクトが生成されない。
+    decltype(fs)::iterator it = fs.find(&amp;#34;Bob&amp;#34;);
+    if (it != fs.end()) { // 見つかった
+      std::cout &amp;lt;&amp;lt; *it &amp;lt;&amp;lt; std::endl;
+    }
+  }
+}
+```
+* find[color ff0000]
+* fs.end()[link end.md]
+* std::less[link /reference/functional/less.md]
+
+### 出力
+```
+Bob
+Bob
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`contains()`](contains.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_multiset/insert.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/flat_multiset/insert.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_multiset/insert.md b/reference/flat_set/flat_multiset/insert.md
new file mode 100644
index 000000000..58985f98d
--- /dev/null
+++ b/reference/flat_set/flat_multiset/insert.md
@@ -0,0 +1,214 @@
+# insert
+* flat_set[meta header]
+* std[meta namespace]
+* flat_multiset[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+iterator insert(const value_type&amp;amp; x);         // (1) C++23
+iterator insert(value_type&amp;amp;&amp;amp; x);              // (2) C++23
+
+iterator insert(const_iterator position,
+                const value_type&amp;amp; x);         // (3) C++23
+iterator insert(const_iterator position,
+                value_type&amp;amp;&amp;amp; x);              // (4) C++23
+
+template&amp;lt;class P&amp;gt;
+iterator insert(P&amp;amp;&amp;amp; x);                       // (5) C++23
+
+template&amp;lt;class P&amp;gt;
+iterator insert(const_iterator position,
+                P&amp;amp;&amp;amp;);                         // (6) C++23
+
+template&amp;lt;class InputIterator&amp;gt;
+void insert(InputIterator first,
+            InputIterator last);              // (7) C++23
+
+template&amp;lt;class InputIterator&amp;gt;
+void insert(sorted_equivalent_t,
+            InputIterator first,
+            InputIterator last);              // (8) C++23
+
+void insert(initializer_list&amp;lt;value_type&amp;gt; il); // (9) C++23
+
+void insert(sorted_equivalent_t,
+            initializer_list&amp;lt;value_type&amp;gt; il); // (10) C++23
+```
+* initializer_list[link /reference/initializer_list/initializer_list.md]
+* sorted_equivalent_t[link /reference/flat_set/sorted_equivalent_t.md]
+
+## 概要
+新しく一つの要素(引数 `x` を使う)または要素のシーケンス(入力イテレータまたは `initializer_list` を使う)を挿入し、コンテナを拡張する。
+
+これは、挿入された要素の数だけコンテナの [`size()`](size.md) を増やす。
+
+内部的に `flat_multiset` コンテナは、コンストラクト時に指定された比較オブジェクトによって要素を下位から上位へとソートして保持する。
+
+この操作は、適切な引数 `position` を提供することで効率を飛躍的に改善することができる。
+
+- (1) : 単一要素を挿入する
+- (2) : 単一要素の一時オブジェクトを挿入する
+- (3) : 指定された位置に、単一要素を挿入する
+- (4) : 指定された位置に、単一要素の一時オブジェクトを挿入する
+- (5) : 単一要素として要素型`value_type`のコンストラクタ引数を受け取って挿入する
+- (6) : 指定された位置に、要素型`value_type`のコンストラクタ引数を受け取って挿入する
+- (7) : イテレータ範囲`[first, last)`を挿入する
+- (8) : ソート済みのイテレータ範囲`[first, last)`を挿入する
+- (9) : 初期化子リストを挿入する
+- (10) : ソート済みの初期化子リストを挿入する
+
+
+## 要件
+- (5), (6) : [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;key_type, P&amp;gt;`が`true`であること
+
+
+## 効果
+- (1) :
+    ```cpp
+    return emplace(x);
+    ```
+    * emplace[link emplace.md]
+
+- (2) :
+    ```cpp
+    return emplace(std::move(x));
+    ```
+    * emplace[link emplace.md]
+    * move[link /reference/utility/move.md]
+
+- (3) :
+    ```cpp
+    return emplace_hint(position, x);
+    ```
+    * emplace_hint[link emplace_hint.md]
+
+- (4) :
+    ```cpp
+    return emplace_hint(position, std::move(x));
+    ```
+    * emplace_hint[link emplace_hint.md]
+    * move[link /reference/utility/move.md]
+
+- (5) : 以下と等価：
+    ```cpp
+    return emplace(std::forward&amp;lt;P&amp;gt;(x));
+    ```
+    * emplace[link emplace.md]
+    * forward[link /reference/utility/forward.md]
+
+- (6) : 以下と等価：
+    ```cpp
+    return emplace_hint(position, std::forward&amp;lt;P&amp;gt;(x));.
+    ```
+    * emplace_hint[link emplace_hint.md]
+    * forward[link /reference/utility/forward.md]
+
+- (7) : メンバ変数として保持しているコンテナ`c`に、以下のように挿入する：
+    ```cpp
+    for (; first != last; ++first) {
+        value_type value = *first;
+        c.insert(c.end(), std::move(value));
+    }
+    ```
+    * end()[link /reference/vector/vector/end.md]
+    * insert[link /reference/vector/vector/insert.md]
+    * std::move[link /reference/utility/move.md]
+
+    - 次に、新しく挿入された要素の範囲を`value_comp()`を基準にソートする
+    - 次に、ソートされた結果の範囲と、既存の要素のソートされた範囲をひとつのソートされた範囲にマージする
+
+- (8) : メンバ変数として保持しているコンテナ`c`に、以下のように挿入する：
+    ```cpp
+    for (; first != last; ++first) {
+        value_type value = *first;
+        c.insert(c.end(), std::move(value));
+    }
+    ```
+    * end()[link /reference/vector/vector/end.md]
+    * insert[link /reference/vector/vector/insert.md]
+    * std::move[link /reference/utility/move.md]
+
+    - 次に、ソートされた結果の範囲と、既存の要素のソートされた範囲をひとつのソートされた範囲にマージする
+
+- (9) :
+    ```cpp
+    insert(il.begin(), il.end());
+    ```
+
+- (10) :
+    ```cpp
+    insert(s, il.begin(), il.end());
+    ```
+
+
+## 戻り値
+- (1)-(6) : 挿入された要素へのイテレータ
+- (7)-(10) : なし
+
+
+## 計算量
+- (7) : Nをこの操作の前の[`size()`](size.md)、Mを[`distance`](/reference/iterator/distance.md)`(first, last)`として、N + MlogM
+- (8) : Nをこの操作のあとの[`size()`](size.md)として、Nに対して線形
+
+
+## 備考
+- (7), (8) : この操作はインプレース・マージを行うため、追加のメモリ確保を行う可能性がある
+
+
+## 例
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main()
+{
+  std::flat_multiset&amp;lt;int&amp;gt; fs;
+
+  // 単一要素を挿入する
+  fs.insert(1);
+
+  // シーケンスを挿入する
+  std::vector&amp;lt;int&amp;gt; v = {2, 3, 4};
+  fs.insert(v.begin(), v.end());
+
+  // 挿入するシーケンスがソート済みであることがわかっている場合、
+  // 以下のように指定した方が高速になる
+  fs.insert(std::sorted_equivalent, {5, 6, 7});
+
+  for (int i : fs) {
+    std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* insert[color ff0000]
+* begin()[link /reference/vector/vector/begin.md]
+* end()[link /reference/vector/vector/end.md]
+* std::sorted_equivalent[link /reference/flat_set/sorted_equivalent_t.md]
+
+### 出力
+```
+1
+2
+3
+4
+5
+6
+7
+```
+
+
+## バージョン
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+| 名前                                             | 説明                             |
+|--------------------------------------------------|----------------------------------|
+| [`flat_multiset::insert_range`](insert_range.md) | Rangeを挿入する                  |
+| [`flat_multiset::emplace`](emplace.md)           | 要素を直接構築する               |
+| [`flat_multiset::emplace_hint`](emplace_hint.md) | ヒントを使って要素を直接構築する |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert_range -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_multiset/insert_range.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/flat_multiset/insert_range.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_multiset/insert_range.md b/reference/flat_set/flat_multiset/insert_range.md
new file mode 100644
index 000000000..596ed6105
--- /dev/null
+++ b/reference/flat_set/flat_multiset/insert_range.md
@@ -0,0 +1,73 @@
+# insert_range
+* flat_set[meta header]
+* std[meta namespace]
+* flat_multiset[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+template&amp;lt;container-compatible-range&amp;lt;value_type&amp;gt; R&amp;gt;
+void insert_range(R&amp;amp;&amp;amp; rg);                        // (1) C++23
+```
+* container-compatible-range[link /reference/exposition-only/container-compatible-range.md]
+
+## 概要
+Rangeを挿入し、コンテナを拡張する。
+
+これは、挿入された要素の数だけコンテナの [`size()`](size.md) を増やす。
+
+内部的に `flat_multiset` コンテナは、コンストラクト時に指定された比較オブジェクトによって要素を下位から上位へとソートして保持する。
+
+
+## 戻り値
+なし
+
+
+## 計算量
+- Nをこの操作の前の[`size()`](size.md)、Mを[`ranges::distance`](/reference/iterator/ranges_distance.md)`(rg)`として、N + MlogM
+
+
+## 備考
+- この操作はインプレース・マージを行うため、追加のメモリ確保を行う可能性がある
+
+
+## 例
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  std::flat_multiset&amp;lt;int&amp;gt; fs = {3};
+
+  std::flat_multiset&amp;lt;int&amp;gt; fs2 = {5, 15};
+
+  fs.insert_range(fs2);
+
+  for (int i : fs) {
+    std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* insert_range[color ff0000]
+
+### 出力
+```
+3
+5
+15
+```
+
+## バージョン
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+| 名前                                             | 説明                             |
+|--------------------------------------------------|----------------------------------|
+| [`flat_multiset::insert`](insert.md)             | 要素を挿入する                   |
+| [`flat_multiset::emplace`](emplace.md)           | 要素を直接構築する               |
+| [`flat_multiset::emplace_hint`](emplace_hint.md) | ヒントを使って要素を直接構築する |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>key_comp -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_multiset/key_comp.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/flat_multiset/key_comp.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_multiset/key_comp.md b/reference/flat_set/flat_multiset/key_comp.md
new file mode 100644
index 000000000..01d8f6ebc
--- /dev/null
+++ b/reference/flat_set/flat_multiset/key_comp.md
@@ -0,0 +1,64 @@
+# key_comp
+* flat_set[meta header]
+* std[meta namespace]
+* flat_multiset[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+key_compare key_comp() const; // C++23
+```
+
+
+## 概要
+コンテナに関連づけられたキー比較用の関数オブジェクトを返す。このオブジェクトはコンテナ内の二つのキーを比較するために利用できる。
+この比較オブジェクトはオブジェクトの構築時に与えられ、関数へのポインタでも関数オブジェクトでも良い。いずれの場合でも、これは同じ型の 2 つの引数をとり、[狭義の弱順序](/reference/algorithm.md#strict-weak-ordering)に従って一つ目の引数が二つ目の引数より前のときに `true` を返し、そうでないときに `false` を返す。
+
+
+## 戻り値
+比較オブジェクト。`key_compare` はメンバ型であり、テンプレートパラメータ `Compare` の別名として定義される。
+
+
+## 計算量
+定数時間。
+
+
+## 例
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  std::flat_multiset&amp;lt;int&amp;gt; s;
+  std::flat_multiset&amp;lt;int&amp;gt;::key_compare comp = s.key_comp();
+
+  std::cout &amp;lt;&amp;lt; comp(1, 2) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; comp(3, 2) &amp;lt;&amp;lt; std::endl;
+}
+```
+* key_comp()[color ff0000]
+
+### 出力
+```
+1
+0
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+
+| 名前                                | 説明                                                     |
+|-------------------------------------|----------------------------------------------------------|
+| [`value_comp`](value_comp.md)       | 要素比較用の関数オブジェクトを返す                       |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>lower_bound -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_multiset/lower_bound.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/flat_multiset/lower_bound.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_multiset/lower_bound.md b/reference/flat_set/flat_multiset/lower_bound.md
new file mode 100644
index 000000000..6931de6d7
--- /dev/null
+++ b/reference/flat_set/flat_multiset/lower_bound.md
@@ -0,0 +1,121 @@
+# lower_bound
+* flat_set[meta header]
+* std[meta namespace]
+* flat_multiset[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+iterator lower_bound(const key_type&amp;amp; x);             // (1) C++23
+
+template &amp;lt;class K&amp;gt;
+iterator lower_bound(const K&amp;amp; x);                    // (2) C++23
+
+const_iterator lower_bound(const key_type&amp;amp; x) const; // (3) C++23
+
+template &amp;lt;class K&amp;gt;
+const_iterator lower_bound(const K&amp;amp; x) const;        // (4) C++23
+```
+
+## 概要
+`x` を右辺とする `&amp;lt;` 演算が成り立たない最初の要素を指すイテレータを返す（コンテナの比較オブジェクトが使われる）。すなわちこれは `&amp;gt;=` 演算にあたる。
+
+[`upper_bound()`](upper_bound.md) とは異なり、このメンバ関数は `x` より大きいだけでなく、`x` と等しい場合であってもその要素へのイテレータを返す。
+
+内部的には `flat_multiset` コンテナ内の全ての要素は常に比較オブジェクトが定義する基準に沿って並んでいるため、この関数が返すいずれかの後に続く全ての要素が `x` より大きいか等しいことに注意。
+
+- (1) : `key_type`型のキーを受け取り、そのキーより小さくない最初の要素へのイテレータを取得する。
+- (2) : `key_type`と比較可能な`K`型のキーを受け取り、そのキーより小さくない最初の要素へのイテレータを取得する。
+- (3) : `const`な`*this`オブジェクトにおいて、`key_type`型のキーを受け取り、そのキーより小さくない最初の要素へのイテレータを取得する。
+- (4) : `const`な`*this`オブジェクトにおいて、`key_type`と比較可能な`K`型のキーを受け取り、そのキーより小さくない最初の要素へのイテレータを取得する。
+
+
+## 戻り値
+- (1), (3) : コンテナ内で `x` を右辺とする `&amp;lt;` 演算が成り立たない最初の要素へのイテレータを返す。そのような要素がない場合は、[`end()`](end.md)を返す。
+- (2), (4) : `key_compare`型の関数オブジェクトを`c`、コンテナ内の各要素が持つキーを`k`として、キーが小さくないか判定する式`!c(k, x)`が`true`となる要素へのイテレータを返す。そのような要素がない場合は、[`end()`](end.md) を返す。
+
+
+## 計算量
+[`size()`](size.md) について対数時間。
+
+
+## 備考
+- (2), (4) : この関数がオーバーロード解決に参加する条件は、[`find()`](find.md)メンバ関数の備考欄を参照。
+
+
+## 例
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+int main()
+{
+  // (1)
+  {
+    std::flat_multiset&amp;lt;std::string&amp;gt; fs = {
+      &amp;#34;Alice&amp;#34;, &amp;#34;Bob&amp;#34;, &amp;#34;Carol&amp;#34;, &amp;#34;David&amp;#34;
+    };
+
+    // Bob以上David以下の範囲を取得
+    decltype(fs)::iterator it = fs.lower_bound(&amp;#34;Bob&amp;#34;);
+    decltype(fs)::iterator last = fs.upper_bound(&amp;#34;David&amp;#34;);
+
+    while (it != last) {
+      std::cout &amp;lt;&amp;lt; *it &amp;lt;&amp;lt; std::endl;
+      ++it;
+    }
+  }
+
+  std::cout &amp;lt;&amp;lt; std::endl;
+
+  // (2)
+  {
+    std::flat_multiset&amp;lt;std::string, std::less&amp;lt;&amp;gt;&amp;gt; fs = {
+      &amp;#34;Alice&amp;#34;, &amp;#34;Bob&amp;#34;, &amp;#34;Carol&amp;#34;, &amp;#34;David&amp;#34;
+    };
+
+    // std::lessのvoidに対する特殊化を使用することで、
+    // 文字列リテラルをlower_bound()関数の引数として渡した際に、
+    // std::string型の一時オブジェクトが生成されない。
+    decltype(fs)::iterator it = fs.lower_bound(&amp;#34;Bob&amp;#34;);
+    decltype(fs)::iterator last = fs.upper_bound(&amp;#34;David&amp;#34;);
+
+    while (it != last) {
+      std::cout &amp;lt;&amp;lt; *it &amp;lt;&amp;lt; std::endl;
+      ++it;
+    }
+  }
+}
+```
+* lower_bound[color ff0000]
+* fs.upper_bound[link upper_bound.md]
+* std::less[link /reference/functional/less.md]
+
+### 出力
+```
+Bob
+Carol
+David
+
+Bob
+Carol
+David
+```
+
+
+## バージョン
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+
+| 名前 | 説明 |
+|------------------------------------------------|------------------------------------------------------|
+| [`flat_multiset::upper_bound`](upper_bound.md) | 指定した値よりも大きい最初の要素へのイテレータを返す |
+| [`flat_multiset::equal_range`](equal_range.md) | 指定したキーにマッチする要素範囲を返す               |
+| [`flat_multiset::find`](find.md)               | 指定したキーで要素を探す                             |
+| [`flat_multiset::count`](count.md)             | 指定したキーにマッチする要素の数を返す               |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>max_size -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_multiset/max_size.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/flat_multiset/max_size.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_multiset/max_size.md b/reference/flat_set/flat_multiset/max_size.md
new file mode 100644
index 000000000..2e73e7507
--- /dev/null
+++ b/reference/flat_set/flat_multiset/max_size.md
@@ -0,0 +1,51 @@
+# max_size
+* flat_set[meta header]
+* std[meta namespace]
+* flat_multiset[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+size_type max_size() const noexcept; // (1) C++23
+```
+
+## 概要
+コンテナが格納できる要素の最大数を返す。 
+これは、システムやライブラリ実装の制限のもとでコンテナが格納できる潜在的な最大サイズである。
+
+
+## 戻り値
+`container_type` 型メンバ変数 `c` があるとして、`c.`[`max_size()`](/reference/vector/vector/max_size.md)。
+
+
+## 計算量
+定数時間。
+
+
+## 例
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  std::flat_multiset&amp;lt;int&amp;gt; fs;
+
+  std::cout &amp;lt;&amp;lt; fs.max_size() &amp;lt;&amp;lt; std::endl;
+}
+```
+* max_size()[color ff0000]
+
+### 出力例
+```
+178956970
+```
+
+
+## 言語バージョン
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_multiset/op_assign.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/flat_multiset/op_assign.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_multiset/op_assign.md b/reference/flat_set/flat_multiset/op_assign.md
new file mode 100644
index 000000000..d83fee63a
--- /dev/null
+++ b/reference/flat_set/flat_multiset/op_assign.md
@@ -0,0 +1,66 @@
+# operator=
+* flat_set[meta header]
+* std[meta namespace]
+* flat_multiset[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+flat_multiset&amp;amp; operator=(initializer_list&amp;lt;value_type&amp;gt; il); // C++23
+```
+* initializer_list[link /reference/initializer_list/initializer_list.md]
+
+
+## 概要
+初期化子リストの値を代入する。
+
+
+## 効果
+`*this`の全ての要素が解放され、`il`の全ての要素が`*this`にコピー代入される。
+
+
+## 戻り値
+`*this`
+
+
+## 備考
+- 引数の型が `const flat_multiset&amp;amp;` であるコピー代入演算子と、引数の型が `flat_multiset&amp;amp;&amp;amp;` であるムーブ代入演算子は、それぞれ自動生成される。
+
+
+## 例
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+int main()
+{
+  std::initializer_list&amp;lt;std::string&amp;gt; elems = {&amp;#34;Alice&amp;#34;, &amp;#34;Bob&amp;#34;, &amp;#34;Carol&amp;#34;, &amp;#34;Alice&amp;#34;};
+
+  std::flat_multiset&amp;lt;std::string&amp;gt; fs;
+  fs = elems;
+
+  for (const std::string&amp;amp; i : fs) {
+    std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+
+### 出力
+```
+Alice
+Alice
+Bob
+Carol
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;=&gt; -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_multiset/op_compare_3way.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/flat_multiset/op_compare_3way.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_multiset/op_compare_3way.md b/reference/flat_set/flat_multiset/op_compare_3way.md
new file mode 100644
index 000000000..2a7ca417d
--- /dev/null
+++ b/reference/flat_set/flat_multiset/op_compare_3way.md
@@ -0,0 +1,83 @@
+# operator&amp;lt;=&amp;gt;
+* flat_set[meta header]
+* std[meta namespace]
+* function template[meta id-type]
+* flat_multiset[meta class]
+* cpp23[meta cpp]
+
+```cpp
+synth-three-way-result&amp;lt;value_type&amp;gt;
+  operator&amp;lt;=&amp;gt;(const flat_multiset&amp;amp; x,
+              const flat_multiset&amp;amp; y); // (1) C++23
+```
+
+## 概要
+`flat_multiset`オブジェクトの三方比較を行う。
+
+
+## テンプレートパラメータ制約
+- 型 (`const`) `value_type` の値に対して`operator&amp;lt;=&amp;gt;`が定義されるか、型 (`const`) `value_type` の値に対して`operator&amp;lt;`が定義され全順序をもつこと
+
+
+## 効果
+```cpp
+return lexicographical_compare_three_way(
+    x.begin(), x.end(),
+    y.begin(), y.end(),
+    synth-three-way);
+```
+* lexicographical_compare_three_way[link /reference/algorithm/lexicographical_compare_three_way.md]
+* begin()[link begin.md]
+* end()[link end.md]
+
+
+## 計算量
+線形時間。
+
+
+## 備考
+- この演算子により、以下の演算子が使用可能になる：
+    - `operator&amp;lt;`
+    - `operator&amp;lt;=`
+    - `operator&amp;gt;`
+    - `operator&amp;gt;=`
+
+
+## 例
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  std::flat_multiset&amp;lt;int&amp;gt; fs1 = {3, 1, 4};
+
+  std::flat_multiset&amp;lt;int&amp;gt; fs2 = {3, 1};
+
+  std::cout &amp;lt;&amp;lt; std::boolalpha;
+  std::cout &amp;lt;&amp;lt; ((fs1 &amp;lt;=&amp;gt; fs1) == 0) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; (fs1 &amp;lt; fs2) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; (fs1 &amp;lt;= fs1) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; (fs1 &amp;gt; fs2) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; (fs2 &amp;gt;= fs1) &amp;lt;&amp;lt; std::endl;
+}
+```
+
+### 出力
+```
+true
+false
+true
+true
+false
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_multiset/op_constructor.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/flat_multiset/op_constructor.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_multiset/op_constructor.md b/reference/flat_set/flat_multiset/op_constructor.md
new file mode 100644
index 000000000..ad03d3306
--- /dev/null
+++ b/reference/flat_set/flat_multiset/op_constructor.md
@@ -0,0 +1,266 @@
+# コンストラクタ
+* flat_set[meta header]
+* std[meta namespace]
+* flat_multiset[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+// ____要素数ゼロのflat_multisetを構築____
+
+flat_multiset() : flat_multiset(key_compare()) { } // (1) C++23
+
+explicit flat_multiset(const key_compare&amp;amp; comp) // (2) C++23
+  : c(), compare(comp) { }
+
+template&amp;lt;class Allocator&amp;gt;
+explicit flat_multiset(const Allocator&amp;amp; a); // (3) C++23
+
+template&amp;lt;class Allocator&amp;gt;
+flat_multiset(const key_compare&amp;amp; comp, const Allocator&amp;amp; a); // (4) C++23
+
+// ____アロケータを伴うコピー＆ムーブコンストラクタ____
+
+ template&amp;lt;class Allocator&amp;gt;
+ flat_multiset(const flat_multiset&amp;amp; x, const Allocator&amp;amp; a); // (5) C++26
+
+ template&amp;lt;class Allocator&amp;gt;
+ flat_multiset(flat_multiset&amp;amp;&amp;amp; x, const Allocator&amp;amp; a); // (6) C++26
+
+// ____container_typeから構築____
+
+flat_multiset(container_type cont,
+              const key_compare&amp;amp; comp = key_compare()); // (7) C++23
+
+template&amp;lt;class Allocator&amp;gt;
+flat_multiset(const container_type&amp;amp; cont,
+              const Allocator&amp;amp; a); // (8) C++23
+
+template&amp;lt;class Allocator&amp;gt;
+flat_multiset(const container_type&amp;amp; cont,
+              const key_compare&amp;amp; comp, const Allocator&amp;amp; a); // (9) C++23
+
+// ____container_type（ソート済み）から構築____
+
+flat_multiset(sorted_equivalent_t, container_type cont,
+              const key_compare&amp;amp; comp = key_compare()); // (10) C++23
+
+template&amp;lt;class Allocator&amp;gt;
+flat_multiset(sorted_equivalent_t, const container_type&amp;amp; cont,
+              const Allocator&amp;amp; a); // (11) C++23
+
+template&amp;lt;class Allocator&amp;gt;
+flat_multiset(sorted_equivalent_t, const container_type&amp;amp; cont,
+              const key_compare&amp;amp; comp, const Allocator&amp;amp; a); // (12) C++23
+
+// ____イテレータから構築____
+
+template&amp;lt;class InputIterator&amp;gt;
+flat_multiset(InputIterator first, InputIterator last, const key_compare&amp;amp; comp = key_compare()) // (13) C++23
+  : c(), compare(comp) { insert(first, last); }
+
+template&amp;lt;class InputIterator, class Allocator&amp;gt;
+flat_multiset(InputIterator first, InputIterator last, const Allocator&amp;amp; a); // (14) C++23
+
+template&amp;lt;class InputIterator, class Allocator&amp;gt;
+flat_multiset(InputIterator first, InputIterator last,
+              const key_compare&amp;amp; comp, const Allocator&amp;amp; a); // (15) C++23
+
+// ____イテレータ（ソート済み）から構築____
+
+template&amp;lt;class InputIterator&amp;gt;
+flat_multiset(sorted_equivalent_t s, InputIterator first, InputIterator last,
+              const key_compare&amp;amp; comp = key_compare()) // (16) C++23
+  : c(), compare(comp) { insert(s, first, last); }
+
+template&amp;lt;class InputIterator, class Allocator&amp;gt;
+flat_multiset(sorted_equivalent_t, InputIterator first, InputIterator last, const Allocator&amp;amp; a); // (17) C++23
+
+template&amp;lt;class InputIterator, class Allocator&amp;gt;
+flat_multiset(sorted_equivalent_t, InputIterator first, InputIterator last,
+              const key_compare&amp;amp; comp, const Allocator&amp;amp; a); // (18) C++23
+
+// ____Rangeから構築____
+
+template&amp;lt;container-compatible-range&amp;lt;value_type&amp;gt; R&amp;gt;
+flat_multiset(from_range_t fr, R&amp;amp;&amp;amp; rg) // (19) C++23
+  : flat_multiset(fr, forward&amp;lt;R&amp;gt;(rg), key_compare()) { }
+
+template&amp;lt;container-compatible-range&amp;lt;value_type&amp;gt; R&amp;gt;
+flat_multiset(from_range_t, R&amp;amp;&amp;amp; rg, const key_compare&amp;amp; comp) // (20) C++23
+  : flat_multiset(comp) { insert_range(forward&amp;lt;R&amp;gt;(rg)); }
+
+template&amp;lt;container-compatible-range&amp;lt;value_type&amp;gt; R, class Allocator&amp;gt;
+flat_multiset(from_range_t, R&amp;amp;&amp;amp; rg, const Allocator&amp;amp; a); // (21) C++23
+
+template&amp;lt;container-compatible-range&amp;lt;value_type&amp;gt; R, class Allocator&amp;gt;
+flat_multiset(from_range_t, R&amp;amp;&amp;amp; rg, const key_compare&amp;amp; comp, const Allocator&amp;amp; a); // (22) C++23
+
+// ____initializer_listから構築____
+
+flat_multiset(initializer_list&amp;lt;value_type&amp;gt; il, const key_compare&amp;amp; comp = key_compare()) // (23) C++23
+  : flat_multiset(il.begin(), il.end(), comp) { }
+
+template&amp;lt;class Allocator&amp;gt;
+flat_multiset(initializer_list&amp;lt;value_type&amp;gt; il, const Allocator&amp;amp; a); // (24) C++23
+
+template&amp;lt;class Allocator&amp;gt;
+flat_multiset(initializer_list&amp;lt;value_type&amp;gt; il, const key_compare&amp;amp; comp, const Allocator&amp;amp; a); // (25) C++23
+
+// ____initializer_list（ソート済み）から構築____
+
+flat_multiset(sorted_equivalent_t s, initializer_list&amp;lt;value_type&amp;gt; il,
+              const key_compare&amp;amp; comp = key_compare()) // (26) C++23
+  : flat_multiset(s, il.begin(), il.end(), comp) { }
+
+template&amp;lt;class Allocator&amp;gt;
+flat_multiset(sorted_equivalent_t, initializer_list&amp;lt;value_type&amp;gt; il, const Allocator&amp;amp; a); // (27) C++23
+
+template&amp;lt;class Allocator&amp;gt;
+flat_multiset(sorted_equivalent_t, initializer_list&amp;lt;value_type&amp;gt; il,
+              const key_compare&amp;amp; comp, const Allocator&amp;amp; a); // (28) C++23
+```
+* initializer_list[link /reference/initializer_list/initializer_list.md]
+* from_range_t[link ../../ranges/from_range_t.md]
+* sorted_equivalent_t[link ../sorted_equivalent_t.md]
+* forward[link ../../utility/forward.md]
+* insert[link insert.md]
+* insert_range[link insert_range.md]
+
+
+## 概要
+`flat_multiset`オブジェクトを次に示す通りの要素で初期化する。
+
+
+## 効果
+- (1) : デフォルトコンストラクタ。デフォルトの `key_compare` を作成し、要素を持たない空の `flat_multiset` オブジェクトを構築する。
+- (2) : `key_compare` を受け取り、要素を持たない空の `flat_multiset` オブジェクトを構築する。
+- (3) : アロケータを受け取り、要素を持たない空の `flat_multiset` オブジェクトを構築する。
+- (4) : `key_compare` とアロケータを受け取り、要素を持たない空の `flat_multiset` オブジェクトを構築する。
+- (5) : アロケータを受け取り、`flat_multiset` オブジェクトをコピー構築する。
+- (6) : アロケータを受け取り、`flat_multiset` オブジェクトをムーブ構築する。
+- (7) : `container_type` から `flat_multiset` オブジェクトを構築する。構築に際し、`value_compare` に基づきソートされる。
+- (8) : アロケータを受け取り、`container_type` から `flat_multiset` オブジェクトを構築する。構築に際し、`value_compare` に基づきソートされる。
+- (9) : `key_compare` とアロケータを受け取り、`container_type` から `flat_multiset` オブジェクトを構築する。構築に際し、`value_compare` に基づきソートされる。
+- (10) : `container_type`（ソート済み）から `flat_multiset` オブジェクトを構築する。
+- (11) : アロケータを受け取り、`container_type`（ソート済み）から `flat_multiset` オブジェクトを構築する。
+- (12) : `key_compare` とアロケータを受け取り、`container_type`（ソート済み）から `flat_multiset` オブジェクトを構築する。
+- (13) : イテレータから `flat_multiset` オブジェクトを構築する。構築には [`insert()`](insert.md) が用いられる。
+- (14) : アロケータを受け取り、イテレータから `flat_multiset` オブジェクトを構築する。構築には [`insert()`](insert.md) が用いられる。
+- (15) : `key_compare` とアロケータを受け取り、イテレータから `flat_multiset` オブジェクトを構築する。構築には [`insert()`](insert.md) が用いられる。
+- (16) : イテレータ（ソート済み）から `flat_multiset` オブジェクトを構築する。
+- (17) : アロケータを受け取り、イテレータ（ソート済み）から `flat_multiset` オブジェクトを構築する。
+- (18) : `key_compare` とアロケータを受け取り、イテレータ（ソート済み）から `flat_multiset` オブジェクトを構築する。
+- (19) : Rangeから `flat_multiset` オブジェクトを構築する。構築には [`insert_range()`](insert_range.md) が用いられる。
+- (20) : `key_compare` を受け取り、Rangeから `flat_multiset` オブジェクトを構築する。構築には [`insert_range()`](insert_range.md) が用いられる。
+- (21) : アロケータを受け取り、Rangeから `flat_multiset` オブジェクトを構築する。構築には [`insert_range()`](insert_range.md) が用いられる。
+- (22) : `key_compare` とアロケータを受け取り、Rangeから `flat_multiset` オブジェクトを構築する。構築には [`insert_range()`](insert_range.md) が用いられる。
+- (23) : initializer_listから `flat_multiset` オブジェクトを構築する。構築には [`insert()`](insert.md) が用いられる。
+- (24) : アロケータを受け取り、initializer_listから `flat_multiset` オブジェクトを構築する。構築には [`insert()`](insert.md) が用いられる。
+- (25) : `key_compare` とアロケータを受け取り、initializer_listから `flat_multiset` オブジェクトを構築する。構築には [`insert()`](insert.md) が用いられる。
+- (26) : initializer_list（ソート済み）から `flat_multiset` オブジェクトを構築する。
+- (27) : アロケータを受け取り、initializer_list（ソート済み）から `flat_multiset` オブジェクトを構築する。
+- (28) : `key_compare` とアロケータを受け取り、initializer_list（ソート済み）から `flat_multiset` オブジェクトを構築する。
+
+
+## 計算量
+- (1)-(4) : 定数時間。
+- (5) : 引数 `x` のサイズに対して線形時間。
+- (6) : 引数 `x` の `container_type` をムーブした計算量と同じ。
+- (7)-(9) : 引数 `cont` のサイズを `N` とすると、`cont` がソート済みなら `N` に対して線形時間。そうでなければ `N log(N)`。
+- (10)-(12) : 引数 `cont` をムーブした計算量と同じ。
+- (13)-(15) : 引数 `first` と `last` の距離を `N` とすると、イテレータの値が `value_compare` に基づきソート済みなら `N` に対して線形時間。そうでなければ `N log(N)`。
+- (16)-(18) : 引数 `first` と `last` の距離を `N` とすると、`N` に対して線形時間。
+- (19)-(22) : [`ranges::distance`](../../iterator/ranges_distance.md)`(rg)` を `N` とすると、要素の値が `value_compare` に基づきソート済みなら `N` に対して線形時間。そうでなければ `N log(N)`。
+- (23)-(25) : 引数 `il` のサイズを `N` とすると、イテレータの値が `value_compare` に基づきソート済みなら `N` に対して線形時間。そうでなければ `N log(N)`。
+- (26)-(28) : 引数 `il` のサイズを `N` とすると、`N` に対して線形時間。
+
+
+## 備考
+- 通常の（アロケータを指定しない）コピーコンストラクタとムーブコンストラクタは自動生成される。
+- (3)-(6), (8), (9), (11), (12), (14), (15), (17), (18), (21), (22), (24), (25), (27), (28) は引数としてアロケータを受け取るが、引数のアロケータに対して [`uses_allocator`](uses_allocator.md) が `false` であれば、この引数は無視される。
+
+
+## 例
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;string&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+void print(const std::flat_multiset&amp;lt;std::string&amp;gt;&amp;amp; fs)
+{
+  std::cout &amp;lt;&amp;lt; &amp;#34;{&amp;#34; &amp;lt;&amp;lt; std::endl;
+  for (const auto&amp;amp; k: fs) {
+    std::cout &amp;lt;&amp;lt; &amp;#34;  &amp;#34; &amp;lt;&amp;lt; k &amp;lt;&amp;lt; &amp;#34;,&amp;#34; &amp;lt;&amp;lt; std::endl;
+  }
+  std::cout &amp;lt;&amp;lt; &amp;#34;}&amp;#34; &amp;lt;&amp;lt; std::endl;
+}
+
+int main()
+{
+  std::cout &amp;lt;&amp;lt; &amp;#34;(1)&amp;#34; &amp;lt;&amp;lt; std::endl;
+  {
+    std::flat_multiset&amp;lt;std::string&amp;gt; fs;
+    print(fs);
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+
+  std::cout &amp;lt;&amp;lt; &amp;#34;(5)&amp;#34; &amp;lt;&amp;lt; std::endl;
+  {
+    std::vector&amp;lt;std::string&amp;gt; strs = {&amp;#34;Alice&amp;#34;, &amp;#34;Bob&amp;#34;, &amp;#34;Carol&amp;#34;};
+
+    std::flat_multiset&amp;lt;std::string&amp;gt; fs(strs);
+    print(fs);
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+
+  std::cout &amp;lt;&amp;lt; &amp;#34;(23)&amp;#34; &amp;lt;&amp;lt; std::endl;
+  {
+    std::initializer_list&amp;lt;std::string&amp;gt; elems = {&amp;#34;Alice&amp;#34;, &amp;#34;Bob&amp;#34;, &amp;#34;Carol&amp;#34;};
+
+    std::flat_multiset&amp;lt;std::string&amp;gt; fs(elems);
+    print(fs);
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+}
+```
+
+### 出力
+```
+(1)
+{
+}
+
+(5)
+{
+  Alice,
+  Bob,
+  Carol,
+}
+
+(23)
+{
+  Alice,
+  Bob,
+  Carol,
+}
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+
+| 名前 | 説明 |
+|---------------------------------------|--------------------------------------------|
+| [`uses_allocator`](uses_allocator.md) | 指定されたアロケータと合致するかをチェックする |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_multiset/op_equal.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/flat_multiset/op_equal.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_multiset/op_equal.md b/reference/flat_set/flat_multiset/op_equal.md
new file mode 100644
index 000000000..68b397556
--- /dev/null
+++ b/reference/flat_set/flat_multiset/op_equal.md
@@ -0,0 +1,70 @@
+# operator==
+* flat_set[meta header]
+* std[meta namespace]
+* function template[meta id-type]
+* flat_multiset[meta class]
+
+```cpp
+friend bool operator==(const flat_multiset&amp;amp; x, const flat_multiset&amp;amp; y);
+```
+
+## 概要
+`x` が `y` と等しいかどうかの判定を行う。
+
+
+## 戻り値
+以下と等価：
+
+```cpp
+return equal(x.begin(), x.end(), y.begin(), y.end());
+```
+* equal[link /reference/algorithm/equal.md]
+* begin()[link begin.md]
+* end()[link end.md]
+
+
+## 計算量
+[`size()`](size.md) に対して線形時間。ただし、`x`と`y`のサイズが異なる場合は定数時間。
+
+
+## 備考
+- この演算子により、以下の演算子が使用可能になる：
+    - `operator!=`
+
+
+## 例
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  std::flat_multiset&amp;lt;int&amp;gt; fs1 = {3, 1, 4};
+
+  std::flat_multiset&amp;lt;int&amp;gt; fs2 = {3, 1};
+
+  std::cout &amp;lt;&amp;lt; std::boolalpha;
+  std::cout &amp;lt;&amp;lt; (fs1 == fs1) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; (fs1 == fs2) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; (fs1 != fs1) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; (fs1 != fs2) &amp;lt;&amp;lt; std::endl;
+}
+```
+
+### 出力
+```
+true
+false
+false
+true
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rbegin -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_multiset/rbegin.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/flat_multiset/rbegin.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_multiset/rbegin.md b/reference/flat_set/flat_multiset/rbegin.md
new file mode 100644
index 000000000..cead413c2
--- /dev/null
+++ b/reference/flat_set/flat_multiset/rbegin.md
@@ -0,0 +1,75 @@
+# rbegin
+* flat_set[meta header]
+* std[meta namespace]
+* flat_multiset[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+reverse_iterator rbegin() noexcept;
+const_reverse_iterator rbegin() const noexcept;
+```
+
+## 概要
+コンテナ内の末尾を指す逆イテレータを取得する。
+
+内部的に、このコンテナは各要素をキーの値に従って下位から上位へと並べており、従って `rbegin()` は最上位のキーにあたる値を指すイテレータを返す。 
+`rbegin()` は [`end()`](end.md) と同じ要素を指すわけではなく、その前の要素を指すことに注意。
+
+
+## 戻り値
+反転したシーケンスの先頭を指す逆イテレータ。 
+`reverse_iterator` と `const_reverse_iterator` はともにメンバ型である。このクラステンプレートにおいて、これらは逆ランダムアクセスイテレータであり、それぞれ `reverse_iterator&amp;lt;iterator&amp;gt;`, `reverse_iterator&amp;lt;const_iterator&amp;gt;` と定義される。
+
+
+## 計算量
+定数時間。
+
+
+## 例
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  std::flat_multiset&amp;lt;int&amp;gt; fs = {3, 1, 4, 1};
+
+  for (auto i = fs.rbegin(); i != fs.rend(); ++i) {
+    std::cout &amp;lt;&amp;lt; *i &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* rbegin()[color ff0000]
+* fs.rend()[link rend.md]
+
+### 出力
+```
+4
+3
+1
+1
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+
+| 名前 | 説明 |
+|-----------------------------------|-----------------------------|
+| [`flat_multiset::begin`](begin.md)     | 先頭を指すイテレータを取得する |
+| [`flat_multiset::end`](end.md)         | 末尾の次を指すイテレータを取得する |
+| [`flat_multiset::cbegin`](cbegin.md)   | 先頭を指すconstイテレータを取得する |
+| [`flat_multiset::cend`](cend.md)       | 末尾の次を指すconstイテレータを取得する |
+| [`flat_multiset::rend`](rend.md)       | 先頭の前を指す逆イテレータを取得する |
+| [`flat_multiset::crbegin`](crbegin.md) | 末尾を指す逆constイテレータを取得する |
+| [`flat_multiset::crend`](crend.md)     | 先頭の前を指す逆constイテレータを取得する |
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rend -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_multiset/rend.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/flat_multiset/rend.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_multiset/rend.md b/reference/flat_set/flat_multiset/rend.md
new file mode 100644
index 000000000..d558a8e81
--- /dev/null
+++ b/reference/flat_set/flat_multiset/rend.md
@@ -0,0 +1,67 @@
+# rend
+* flat_set[meta header]
+* std[meta namespace]
+* flat_multiset[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+reverse_iterator rend() noexcept;
+const_reverse_iterator rend() const noexcept;
+```
+
+## 概要
+コンテナの先頭要素の前（これは反転シーケンスの末尾にあたる）を指す逆イテレータを取得する。 
+`rend()` は [`begin()`](begin.md) と同じ要素を指すわけではなく、その前の要素を指すことに注意。
+
+## 戻り値
+反転シーケンスの終端を指す逆イテレータ。 
+`reverse_iterator` と `const_reverse_iterator` はメンバ型である。このクラステンプレートにおいて、これらは逆ランダムアクセスイテレータであり、それぞれ `reverse_iterator&amp;lt;iterator&amp;gt;`, `reverse_iterator&amp;lt;const_iterator&amp;gt;` と定義される。
+
+## 例
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  std::flat_multiset&amp;lt;int&amp;gt; fs = {3, 1, 4, 1};
+
+  for (auto i = fs.rbegin(); i != fs.rend(); ++i) {
+    std::cout &amp;lt;&amp;lt; *i &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* rend()[color ff0000]
+* fs.rbegin()[link rbegin.md]
+
+### 出力
+```
+4
+3
+1
+1
+```
+
+## バージョン
+### 言語
+- C++23
+
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+
+| 名前 | 説明　|
+|-----------------------------------|-----------------------------|
+| [`flat_multiset::begin`](begin.md)     | 先頭を指すイテレータを取得する |
+| [`flat_multiset::end`](end.md)         | 末尾の次を指すイテレータを取得する |
+| [`flat_multiset::cbegin`](cbegin.md)   | 先頭を指すconstイテレータを取得する |
+| [`flat_multiset::cend`](cend.md)       | 末尾の次を指すconstイテレータを取得する |
+| [`flat_multiset::rbegin`](rbegin.md)   | 末尾を指す逆イテレータを取得する |
+| [`flat_multiset::crbegin`](crbegin.md) | 末尾を指す逆constイテレータを取得する |
+| [`flat_multiset::crend`](crend.md)     | 先頭の前を指す逆constイテレータを取得する |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>replace -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_multiset/replace.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/flat_multiset/replace.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_multiset/replace.md b/reference/flat_set/flat_multiset/replace.md
new file mode 100644
index 000000000..656397a64
--- /dev/null
+++ b/reference/flat_set/flat_multiset/replace.md
@@ -0,0 +1,92 @@
+# replace
+* flat_set[meta header]
+* std[meta namespace]
+* flat_multiset[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+void replace(container_type&amp;amp;&amp;amp; cont);  // C++23
+```
+
+## 概要
+値のコンテナを置き換える。
+
+
+## 効果
+`flat_multiset` クラスが内部で保持している `container_type` を `c` とすると、以下と等価。
+    ```cpp
+    c = std::move(cont);
+    ```
+    * std::move[link /reference/utility/move.md]
+
+
+## 事前条件
+- `cont` が `key_compare` に基づいてソートされていること。
+
+
+## 計算量
+`cont` をムーブした計算量と同じ。
+
+
+## 例
+```cpp example
+#include &amp;lt;algorithm&amp;gt;
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;string&amp;gt;
+#include &amp;lt;utility&amp;gt;
+
+int main()
+{
+  std::vector&amp;lt;std::string&amp;gt; keys = {&amp;#34;Alice&amp;#34;, &amp;#34;Bob&amp;#34;, &amp;#34;Carol&amp;#34;};
+
+  // 事前条件の確認
+  assert(std::is_sorted(keys.begin(), keys.end()));
+  assert(std::adjacent_find(keys.begin(), keys.end()) == keys.end());
+
+  std::flat_multiset&amp;lt;std::string&amp;gt; fs;
+
+  std::cout &amp;lt;&amp;lt; fs.size() &amp;lt;&amp;lt; std::endl;
+
+  fs.replace(std::move(keys));
+
+  std::cout &amp;lt;&amp;lt; fs.size() &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::endl;
+
+  std::cout &amp;lt;&amp;lt; &amp;#34;{&amp;#34; &amp;lt;&amp;lt; std::endl;
+  for (const std::string&amp;amp; i: fs) {
+    std::cout &amp;lt;&amp;lt; &amp;#34;  &amp;#34; &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &amp;#34;,&amp;#34; &amp;lt;&amp;lt; std::endl;
+  }
+  std::cout &amp;lt;&amp;lt; &amp;#34;}&amp;#34; &amp;lt;&amp;lt; std::endl;
+}
+```
+* replace[color ff0000]
+* fs.size()[link size.md]
+* std::is_sorted[link /reference/algorithm/is_sorted.md]
+* std::adjacent_find[link /reference/algorithm/adjacent_find.md]
+* std::move[link /reference/utility/move.md]
+
+### 出力
+```
+0
+3
+
+{
+  Alice,
+  Bob,
+  Carol,
+}
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>size -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_multiset/size.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/flat_multiset/size.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_multiset/size.md b/reference/flat_set/flat_multiset/size.md
new file mode 100644
index 000000000..96cd7d902
--- /dev/null
+++ b/reference/flat_set/flat_multiset/size.md
@@ -0,0 +1,69 @@
+# size
+* flat_set[meta header]
+* std[meta namespace]
+* flat_multiset[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+size_type size() const noexcept;
+```
+
+## 概要
+コンテナ内の要素の数を返す。
+
+
+## 戻り値
+`flat_multiset` クラスが内部で保持している `container_type` を `c` とすると、以下を返す。
+
+```cpp
+return c.size();
+```
+* size()[link /reference/vector/vector/size.md]
+
+
+## 計算量
+定数時間。
+
+
+## 例
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main ()
+{
+  std::flat_multiset&amp;lt;int&amp;gt; fs;
+
+  std::cout &amp;lt;&amp;lt; fs.size() &amp;lt;&amp;lt; std::endl;
+
+  fs.insert(1);
+  fs.insert(2);
+  fs.insert(3);
+  fs.insert(1);
+
+  std::cout &amp;lt;&amp;lt; fs.size() &amp;lt;&amp;lt; std::endl;
+}
+```
+* size()[color ff0000]
+* fs.insert[link insert.md]
+
+### 出力
+```
+0
+4
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`empty()`](empty.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_multiset/swap.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/flat_multiset/swap.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_multiset/swap.md b/reference/flat_set/flat_multiset/swap.md
new file mode 100644
index 000000000..9b8a369d6
--- /dev/null
+++ b/reference/flat_set/flat_multiset/swap.md
@@ -0,0 +1,75 @@
+# swap
+* flat_set[meta header]
+* std[meta namespace]
+* flat_multiset[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+void swap(flat_multiset&amp;amp; y) noexcept; // (1) C++23
+```
+
+## 概要
+コンテナ内のコンテンツを、同じ型の要素を保持する他の `flat_multiset` オブジェクトである `y` 内のコンテンツと交換する。
+
+このメンバ関数の呼び出しの後、呼び出し前にコンテナ内にあった要素は `y` へ、`y` 内にあった要素は `*this` へ移る。
+
+
+## 計算量
+定数時間。
+
+
+## 例
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+template &amp;lt;class Set&amp;gt;
+void print(const char* name, const Set&amp;amp; s)
+{
+  std::cout &amp;lt;&amp;lt; name &amp;lt;&amp;lt; &amp;#34; : {&amp;#34;;
+
+  bool first = true;
+
+  for (const auto&amp;amp; x : s) {
+    if (first) {
+      first = false;
+    }
+    else {
+      std::cout &amp;lt;&amp;lt; &amp;#34;, &amp;#34;;
+    }
+    std::cout &amp;lt;&amp;lt; x;
+  }
+  std::cout &amp;lt;&amp;lt; &amp;#34;}&amp;#34; &amp;lt;&amp;lt; std::endl;
+}
+
+int main()
+{
+  std::flat_multiset&amp;lt;int&amp;gt; fs1 = {10, 20, 30};
+
+  std::flat_multiset&amp;lt;int&amp;gt; fs2 = {5, 15};
+
+  // fs1とfs2を入れ替える
+  fs1.swap(fs2);
+
+  print(&amp;#34;fs1&amp;#34;, fs1);
+  print(&amp;#34;fs2&amp;#34;, fs2);
+}
+```
+* swap[color ff0000]
+
+### 出力
+```
+fs1 : {5, 15}
+fs2 : {10, 20, 30}
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>upper_bound -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_multiset/upper_bound.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/flat_multiset/upper_bound.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_multiset/upper_bound.md b/reference/flat_set/flat_multiset/upper_bound.md
new file mode 100644
index 000000000..880a11f82
--- /dev/null
+++ b/reference/flat_set/flat_multiset/upper_bound.md
@@ -0,0 +1,121 @@
+# upper_bound
+* flat_set[meta header]
+* std[meta namespace]
+* flat_multiset[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+iterator upper_bound(const key_type&amp;amp; x);             // (1) C++23
+
+template &amp;lt;class K&amp;gt;
+iterator upper_bound(const K&amp;amp; x);                    // (2) C++23
+
+const_iterator upper_bound(const key_type&amp;amp; x) const; // (3) C++23
+
+template &amp;lt;class K&amp;gt;
+const_iterator upper_bound(const K&amp;amp; x) const;        // (4) C++23
+```
+
+## 概要
+`x` より大きいキーを持つコンテナ内の最初の要素を指すイテレータを返す（コンテナの比較オブジェクトを使う）。
+
+[`lower_bound()`](lower_bound.md) と異なり、このメンバ関数は `x` と等しいときは要素へのイテレータを返さず、それは大きい場合にのみ要素へのイテレータを返す。
+
+内部的に、`flat_multiset` コンテナ内の全ての要素は常に比較オブジェクトで定義された基準に従って並ぶため、この関数が返す値に続く全ての要素は `x` より大きいことに注意。
+
+- (1) : `key_type`型のキーを受け取り、そのキーより大きい最初の要素へのイテレータを取得する。
+- (2) : `key_type`と比較可能な`K`型のキーを受け取り、そのキーより大きい最初の要素へのイテレータを取得する。
+- (3) : `const`な`*this`オブジェクトにおいて、`key_type`型のキーを受け取り、そのキーより大きい最初の要素へのイテレータを取得する。
+- (4) : `const`な`*this`オブジェクトにおいて、`key_type`と比較可能な`K`型のキーを受け取り、そのキーより大きい最初の要素へのイテレータを取得する。
+
+
+## 戻り値
+- (1), (3) : キー`x`より大きい最初の要素へのイテレータを返す。そのような要素がない場合は、[`end()`](end.md)を返す。
+- (2), (4) : `key_compare`型の関数オブジェクトを`c`、コンテナ内の各要素が持つキーを`k`として、キーが小さくないか判定する式`c(x, k)`が`true`となる要素へのイテレータを返す。そのような要素がない場合は、[`end()`](end.md) を返す。
+
+
+## 計算量
+[`size()`](size.md) について対数時間。
+
+
+## 備考
+- (2), (4) : この関数がオーバーロード解決に参加する条件は、[`find()`](find.md)メンバ関数の備考欄を参照。
+
+
+## 例
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+int main()
+{
+  // (1)
+  {
+    std::flat_multiset&amp;lt;std::string&amp;gt; fs = {
+      &amp;#34;Alice&amp;#34;, &amp;#34;Bob&amp;#34;, &amp;#34;Carol&amp;#34;, &amp;#34;David&amp;#34;
+    };
+
+    // Bob以上David以下の範囲を取得
+    decltype(fs)::iterator it = fs.lower_bound(&amp;#34;Bob&amp;#34;);
+    decltype(fs)::iterator last = fs.upper_bound(&amp;#34;David&amp;#34;);
+
+    while (it != last) {
+      std::cout &amp;lt;&amp;lt; *it &amp;lt;&amp;lt; std::endl;
+      ++it;
+    }
+  }
+
+  std::cout &amp;lt;&amp;lt; std::endl;
+
+  // (2)
+  {
+    std::flat_multiset&amp;lt;std::string, std::less&amp;lt;&amp;gt;&amp;gt; fs = {
+      &amp;#34;Alice&amp;#34;, &amp;#34;Bob&amp;#34;, &amp;#34;Carol&amp;#34;, &amp;#34;David&amp;#34;
+    };
+
+    // std::lessのvoidに対する特殊化を使用することで、
+    // 文字列リテラルをlower_bound()関数の引数として渡した際に、
+    // std::string型の一時オブジェクトが生成されない。
+    decltype(fs)::iterator it = fs.lower_bound(&amp;#34;Bob&amp;#34;);
+    decltype(fs)::iterator last = fs.upper_bound(&amp;#34;David&amp;#34;);
+
+    while (it != last) {
+      std::cout &amp;lt;&amp;lt; *it &amp;lt;&amp;lt; std::endl;
+      ++it;
+    }
+  }
+}
+```
+* upper_bound[color ff0000]
+* fs.lower_bound[link lower_bound.md]
+* std::less[link /reference/functional/less.md]
+
+### 出力
+```
+Bob
+Carol
+David
+
+Bob
+Carol
+David
+```
+
+
+## バージョン
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+
+| 名前 | 説明 |
+|------------------------------------------------|----------------------------------------------------------|
+| [`flat_multiset::lower_bound`](lower_bound.md) | 指定した値よりも小さくない最初の要素へのイテレータを返す |
+| [`flat_multiset::equal_range`](equal_range.md) | 指定したキーにマッチする要素範囲を返す                   |
+| [`flat_multiset::find`](find.md)               | 指定したキーで要素を探す                                 |
+| [`flat_multiset::count`](count.md)             | 指定したキーにマッチする要素の数を返す                   |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uses_allocator -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_multiset/uses_allocator.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/flat_multiset/uses_allocator.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_multiset/uses_allocator.md b/reference/flat_set/flat_multiset/uses_allocator.md
new file mode 100644
index 000000000..a107e6c1f
--- /dev/null
+++ b/reference/flat_set/flat_multiset/uses_allocator.md
@@ -0,0 +1,55 @@
+# uses_allocator
+* flat_set[meta header]
+* std[meta namespace]
+* class template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;class Key, class T, class Compare, class KeyContainer,
+            class Alloc&amp;gt;
+  struct uses_allocator&amp;lt;flat_multiset&amp;lt;Key, T, Compare, KeyContainer&amp;gt;,
+                        Alloc&amp;gt;
+    : bool_constant&amp;lt;uses_allocator_v&amp;lt;KeyContainer, Alloc&amp;gt;&amp;gt; { };
+}
+```
+* bool_constant[link /reference/type_traits/bool_constant.md]
+
+## 概要
+`uses_allocator`の、`flat_multiset`に対する特殊化。
+
+アロケータを指定する`flat_multiset`の[`コンストラクタ`](op_constructor.md)において、指定されたアロケータと、`KeyContainer`のアロケータが合致するかをチェックするのに使われる。
+
+
+## 例
+```cpp
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  using fs_t = std::flat_multiset&amp;lt;int&amp;gt;;
+
+  std::cout &amp;lt;&amp;lt; std::uses_allocator&amp;lt;fs_t, std::allocator&amp;lt;int&amp;gt;&amp;gt;::value &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::uses_allocator[color ff0000]
+* std::allocator[link /reference/memory/allocator.md]
+
+### 出力
+```cpp
+1
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>value_comp -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_multiset/value_comp.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/flat_multiset/value_comp.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_multiset/value_comp.md b/reference/flat_set/flat_multiset/value_comp.md
new file mode 100644
index 000000000..f823b1c75
--- /dev/null
+++ b/reference/flat_set/flat_multiset/value_comp.md
@@ -0,0 +1,65 @@
+# value_comp
+* flat_set[meta header]
+* std[meta namespace]
+* flat_multiset[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+value_compare value_comp() const; // C++23
+```
+
+
+## 概要
+コンテナに関連づけられた要素比較用の関数オブジェクトを返す。これはコンテナ内の二つの要素を比較するために利用できる。
+これは同じ型の 2 つの引数をとり、[狭義の弱順序](/reference/algorithm.md#strict-weak-ordering)に従って一つ目の引数が二つ目の引数の前になる場合に `true`、そうでない場合に `false` を返す。
+
+
+## 戻り値
+要素比較用の関数オブジェクト。
+`value_compare` はメンバ型であり、`key_compare` と同じく、テンプレートパラメータ `Compare` の別名である。
+
+
+## 計算量
+定数時間。
+
+
+## 例
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  std::flat_multiset&amp;lt;int&amp;gt; s;
+  std::flat_multiset&amp;lt;int&amp;gt;::value_compare comp = s.value_comp();
+
+  std::cout &amp;lt;&amp;lt; comp(1, 2) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; comp(3, 2) &amp;lt;&amp;lt; std::endl;
+}
+```
+* value_comp()[color ff0000]
+
+### 出力
+```
+1
+0
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+
+| 名前                                | 説明                                                     |
+|-------------------------------------|----------------------------------------------------------|
+| [`key_comp`](key_comp.md)           | キー比較用の関数オブジェクトを取得する                      |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>flat_set -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_set.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/flat_set.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_set.md b/reference/flat_set/flat_set.md
new file mode 100644
index 000000000..b2421c9e3
--- /dev/null
+++ b/reference/flat_set/flat_set.md
@@ -0,0 +1,229 @@
+# flat_set
+* flat_set[meta header]
+* std[meta namespace]
+* class template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;class Key,
+            class Compare = less&amp;lt;Key&amp;gt;,
+            class KeyContainer = vector&amp;lt;Key&amp;gt;&amp;gt;
+  class flat_set;
+}
+```
+* less[link ../functional/less.md]
+* vector[link /reference/vector/vector.md]
+
+## 概要
+
+
+## メンバ関数
+### 構築・破棄
+
+| 名前 | 説明 | 対応バージョン |
+|---------------------------------|----------------|-------|
+| [`(constructor)`](flat_set/op_constructor.md) | コンストラクタ | C++23 |
+| [`(destructor)`](flat_set/op_destructor.md.nolink) | デストラクタ | C++23 |
+| [`operator=`](flat_set/op_assign.md) | 代入演算子 | C++23 |
+
+
+### イテレータ
+
+| 名前 | 説明 | 対応バージョン |
+|----------------------------------|--------------------------------------------------|-------|
+| [`begin`](flat_set/begin.md)     | 先頭を指すイテレータを取得する                   | C++23 |
+| [`cbegin`](flat_set/cbegin.md)   | 先頭を指す読み取り専用イテレータを取得する       | C++23 |
+| [`end`](flat_set/end.md)         | 末尾の次を指すイテレータを取得する               | C++23 |
+| [`cend`](flat_set/cend.md)       | 末尾の次を指す読み取り専用イテレータを取得する   | C++23 |
+| [`rbegin`](flat_set/rbegin.md)   | 末尾を指す逆イテレータを取得する                 | C++23 |
+| [`crbegin`](flat_set/crbegin.md) | 末尾を指す読み取り専用逆イテレータを取得する     | C++23 |
+| [`rend`](flat_set/rend.md)       | 先頭の前を指す逆イテレータを取得する             | C++23 |
+| [`crend`](flat_set/crend.md)     | 先頭の前を指す読み取り専用逆イテレータを取得する | C++23 |
+
+
+### 領域
+
+| 名前 | 説明 | 対応バージョン |
+|------------------------------------|------------------------------------|-------|
+| [`empty`](flat_set/empty.md)       | コンテナが空であるかどうかを調べる | C++23 |
+| [`size`](flat_set/size.md)         | 要素数を取得する                   | C++23 |
+| [`max_size`](flat_set/max_size.md) | 格納可能な最大の要素数を取得する   | C++23 |
+
+
+### コンテナの変更
+
+| 名前 | 説明 | 対応バージョン |
+|--------------------------------------------|--------------------------------------------|----------------|
+| [`clear`](flat_set/clear.md)               | 全ての要素を削除する                       | C++23 |
+| [`insert`](flat_set/insert.md)             | 要素を挿入する                             | C++23 |
+| [`insert_range`](flat_set/insert_range.md) | Rangeを挿入する                            | C++23 |
+| [`emplace`](flat_set/emplace.md)           | 要素を直接構築する                         | C++23 |
+| [`emplace_hint`](flat_set/emplace_hint.md) | ヒントを使って要素を直接構築する           | C++23 |
+| [`erase`](flat_set/erase.md)               | 要素を削除する                             | C++23 |
+| [`swap`](flat_set/swap.md)                 | コンテンツを交換する                       | C++23 |
+| [`extract`](flat_set/extract.md)           | キーのコンテナを取得する                   | C++23 |
+| [`replace`](flat_set/replace.md)           | キーのコンテナを置き換える                 | C++23 |
+
+### 要素アクセス
+
+| 名前 | 説明 | 対応バージョン |
+|------------------------------------------|--------------------------------------------|-------|
+| [`count`](flat_set/count.md)             | 指定したキーにマッチする要素の数を取得する | C++23 |
+| [`find`](flat_set/find.md)               | 指定したキーで要素を探す                   | C++23 |
+| [`contains`](flat_set/contains.md)       | 指定したキーの要素が含まれているかを判定する | C++23 |
+| [`equal_range`](flat_set/equal_range.md) | 指定したキーにマッチする要素範囲を取得する | C++23 |
+| [`lower_bound`](flat_set/lower_bound.md) | 与えられた値より小さくない最初の要素へのイテレータを取得する | C++23 |
+| [`upper_bound`](flat_set/upper_bound.md) | 特定の値よりも大きい最初の要素へのイテレータを取得する       | C++23 |
+
+### オブザーバー
+
+| 名前 | 説明 | 対応バージョン |
+|----------------------------------------|----------------------------------------|----------------|
+| [`key_comp`](flat_set/key_comp.md)     | キー比較用の関数オブジェクトを取得する | C++23 |
+| [`value_comp`](flat_set/value_comp.md) | 要素比較用の関数オブジェクトを取得する | C++23 |
+
+
+## メンバ型
+
+| 名前 | 説明 | 対応バージョン |
+|--------------------------|---------------------------|----------------|
+| `key_type`               | キーの型。テンプレートパラメータ `Key`  |  C++23 |
+| `value_type`             | 要素の型。テンプレートパラメータ `Key`  |  C++23 |
+| `key_compare`            | キーの大小関係を判定する二項述語の型。テンプレートパラメータ `Compare` | C++23 |
+| `value_compare`          | 要素の大小関係を判定する二項述語の型。テンプレートパラメータ `Compare` | C++23 |
+| `reference`              | 要素への参照型。`value_type&amp;amp;` | C++23 |
+| `const_reference`        | 要素への`const`参照型。`const value_type&amp;amp;` | C++23 |
+| `size_type`              | 要素数を表す符号なし整数型 [`size_t`](/reference/cstddef/size_t.md) | C++23 |
+| `difference_type`        | 同一のコンテナを指す `iterator` の差を表す符号付き整数型 [`ptrdiff_t`](/reference/cstddef/ptrdiff_t.md) | C++23 |
+| `iterator`               | ランダムアクセスイテレータ | C++23 |
+| `const_iterator`         | 読み取り専用ランダムアクセスイテレータ | C++23 |
+| `reverse_iterator`       | 逆順ランダムアクセスイテレータ。[`std::reverse_iterator`](/reference/iterator/reverse_iterator.md)`&amp;lt;iterator&amp;gt;` | C++23 |
+| `const_reverse_iterator` | 読み取り専用逆順ランダムアクセスイテレータ。[`std::reverse_iterator`](/reference/iterator/reverse_iterator.md)`&amp;lt;const_iterator&amp;gt;` | C++23 |
+| `container_type`         | キーを格納するコンテナ型 `KeyContainer` | C++23 |
+
+
+## 非メンバ関数
+### 要素削除
+
+| 名前 | 説明 | 対応バージョン |
+|-----------------------------------------|-------------------------------------|----------------|
+| [`erase_if`](flat_set/erase_if_free.md) | 指定した条件に合致する要素とその分の領域を、コンテナから削除する | C++23 |
+
+
+## 非メンバ（*Hidden friends*）関数
+### 比較演算子
+
+| 名前 | 説明 | 対応バージョン |
+|----------------------------------------------------------|----------------------------|-------|
+| [`operator==`](flat_set/op_equal.md)                     | 左辺と右辺が等しいかの判定を行う           | C++23 |
+| `bool operator!=(const flat_set&amp;amp; x, const flat_set&amp;amp; y);` | 左辺と右辺が等しくないかの判定を行う (`==`により使用可能) | C++23 |
+| [`operator&amp;lt;=&amp;gt;`](flat_set/op_compare_3way.md)             | 三方比較を行う                             | C++23 |
+| `bool operator&amp;lt;(const flat_set&amp;amp; x, const flat_set&amp;amp; y);`  | 左辺が右辺より小さいかの判定を行う  (`&amp;lt;=&amp;gt;`により使用可能) | C++23 |
+| `bool operator&amp;lt;=(const flat_set&amp;amp; x, const flat_set&amp;amp; y);` | 左辺が右辺より小さいか等しいかの判定を行う (`&amp;lt;=&amp;gt;`により使用可能) | C++23 |
+| `bool operator&amp;gt;(const flat_set&amp;amp; x, const flat_set&amp;amp; y);`  | 左辺が右辺より大きいかの判定を行う (`&amp;lt;=&amp;gt;`により使用可能) | C++23 |
+| `bool operator&amp;gt;=(const flat_set&amp;amp; x, const flat_set&amp;amp; y);` | 左辺が右辺より大きいか等しいかの判定を行う (`&amp;lt;=&amp;gt;`により使用可能) | C++23 |
+
+
+### 入れ替え
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`swap`](flat_set/swap_free.md.nolink) | 2つの`flat_set`オブジェクトを入れ替える | C++23 |
+
+
+## 推論補助
+
+| 名前 | 説明 | 対応バージョン |
+|---------------------------------------------|------------------------------------|-------|
+| [`(deduction_guide)`](flat_set/op_deduction_guide.md.nolink) | クラステンプレートの推論補助 | C++23 |
+
+
+## その他
+
+| 名前 | 説明 | 対応バージョン |
+|------------------------------------------------|----------------------|-------|
+| [`uses_allocator`](flat_set/uses_allocator.md) | `flat_set`による特殊化 | C++23 |
+
+
+
+## 例
+### 基本的な使い方
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+int main()
+{
+  // stringをキーとして扱う連想配列
+  std::flat_set&amp;lt;std::string&amp;gt; fs = {&amp;#34;Carol&amp;#34;, &amp;#34;Alice&amp;#34;, &amp;#34;Bob&amp;#34;};
+
+  // 検索 : キーを指定し、イテレータを得る
+  auto it = fs.find(&amp;#34;Alice&amp;#34;);
+  std::cout &amp;lt;&amp;lt; *it &amp;lt;&amp;lt; std::endl
+            &amp;lt;&amp;lt; std::endl;
+
+  // 全体を出力する
+  for (const auto&amp;amp; str : fs) {
+    std::cout &amp;lt;&amp;lt; str &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* fs.find[link flat_set/find.md]
+
+#### 出力
+```
+Alice
+
+Alice
+Bob
+Carol
+```
+
+### キー以外のテンプレートを指定
+```cpp example
+#include &amp;lt;deque&amp;gt;
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  std::deque&amp;lt;int&amp;gt; keys = {1, 4, 2, 8, 5, 7};
+
+  // intをキーとして扱う連想配列
+  // キーの順序はgreater、キーのコンテナはdequeで保持
+  std::flat_set&amp;lt;int,
+                std::greater&amp;lt;int&amp;gt;,
+                std::deque&amp;lt;int&amp;gt;&amp;gt; fs(keys);
+
+  // 全体を出力する
+  for (int i : fs) {
+    std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &amp;#34; &amp;#34;;
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::greater[link ../functional/greater.md]
+
+#### 出力
+```
+8 7 5 4 2 1 
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P1222R0 A Standard `flat_set`](hhttps://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1222r0.pdf)
+    - C++23で`flat_set`が導入された経緯・動機・設計について記載されている
+- [P1222R4 A Standard `flat_set`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1222r4.pdf)
+    - C++23で導入された`flat_set`の仕様
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_set/begin.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/flat_set/begin.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_set/begin.md b/reference/flat_set/flat_set/begin.md
new file mode 100644
index 000000000..76cd50864
--- /dev/null
+++ b/reference/flat_set/flat_set/begin.md
@@ -0,0 +1,73 @@
+# begin
+* flat_set[meta header]
+* std[meta namespace]
+* flat_set[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+iterator begin() noexcept;
+const_iterator begin() const noexcept;
+```
+
+
+## 概要
+コンテナの先頭要素を参照するイテレータを取得する。
+
+内部的に、コンテナは要素を下位から上位へと並べており、従って`begin()`はコンテナ内の最下位のキーにあたる値へのイテレータを返す。
+
+
+## 戻り値
+コンテナの先頭要素へのイテレータ。
+`iterator` と `const_iterator` はともにメンバ型である。このクラステンプレートにおいて、これらはランダムアクセスイテレータである。
+
+
+## 計算量
+定数時間。
+
+
+## 例
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  std::flat_set&amp;lt;int&amp;gt; fs = {3, 1, 4};
+
+  for (auto i = fs.begin(); i != fs.end(); ++i) {
+    std::cout &amp;lt;&amp;lt; *i &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* begin()[color ff0000]
+* fs.end()[link end.md]
+
+### 出力
+```
+1
+3
+4
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+
+| 名前 | 説明 |
+|-----------------------------------|--------------------------------|
+| [`flat_set::end`](end.md)         | 末尾の次を指すイテレータを取得する |
+| [`flat_set::cbegin`](cbegin.md)   | 先頭を指すconstイテレータを取得する |
+| [`flat_set::cend`](cend.md)       | 末尾の次を指すconstイテレータを取得する |
+| [`flat_set::rbegin`](rbegin.md)   | 末尾を指す逆イテレータを取得する |
+| [`flat_set::rend`](rend.md)       | 先頭の前を指す逆イテレータを取得する |
+| [`flat_set::crbegin`](crbegin.md) | 末尾を指す逆constイテレータを取得する |
+| [`flat_set::crend`](crend.md)     | 先頭の前を指す逆constイテレータを取得する |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cbegin -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_set/cbegin.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/flat_set/cbegin.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_set/cbegin.md b/reference/flat_set/flat_set/cbegin.md
new file mode 100644
index 000000000..6be52785b
--- /dev/null
+++ b/reference/flat_set/flat_set/cbegin.md
@@ -0,0 +1,69 @@
+# cbegin
+* flat_set[meta header]
+* std[meta namespace]
+* flat_set[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+const_iterator cbegin() const noexcept;
+```
+
+
+## 概要
+コンテナの先頭要素を参照するイテレータを取得する。
+
+内部的に、コンテナは要素を下位から上位へと並べており、従って`cbegin()`はコンテナ内の最下位のキーにあたる値へのイテレータを返す。
+
+
+## 戻り値
+コンテナの先頭要素へのイテレータ。
+`const_iterator` はメンバ型である。このクラステンプレートにおいて、この型はランダムアクセスイテレータである。
+
+
+## 計算量
+定数時間。
+
+
+## 例
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  std::flat_set&amp;lt;int&amp;gt; fs = {3, 1, 4};
+
+  for (auto i = fs.cbegin(); i != fs.cend(); ++i) {
+    std::cout &amp;lt;&amp;lt; *i &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* cbegin()[color ff0000]
+* fs.cend()[link cend.md]
+
+### 出力
+```
+1
+3
+4
+```
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+
+| 名前 | 説明 |
+|-----------------------------------|--------------------------------|
+| [`flat_set::begin`](begin.md)     | 先頭を指すイテレータを取得する |
+| [`flat_set::end`](end.md)         | 末尾の次を指すイテレータを取得する |
+| [`flat_set::cend`](cend.md)       | 末尾の次を指すconstイテレータを取得する |
+| [`flat_set::rbegin`](rbegin.md)   | 末尾を指す逆イテレータを取得する |
+| [`flat_set::rend`](rend.md)       | 先頭の前を指す逆イテレータを取得する |
+| [`flat_set::crbegin`](crbegin.md) | 末尾を指す逆constイテレータを取得する |
+| [`flat_set::crend`](crend.md)     | 先頭の前を指す逆constイテレータを取得する |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cend -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_set/cend.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/flat_set/cend.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_set/cend.md b/reference/flat_set/flat_set/cend.md
new file mode 100644
index 000000000..e78572c3f
--- /dev/null
+++ b/reference/flat_set/flat_set/cend.md
@@ -0,0 +1,73 @@
+# cend
+* flat_set[meta header]
+* std[meta namespace]
+* flat_set[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+const_iterator cend() const noexcept;
+```
+
+## 概要
+コンテナの末尾の次を参照するイテレータを取得する。
+
+
+## 戻り値
+コンテナの末尾の次を参照するイテレータ。 
+`const_iterator` はメンバ型である。このクラステンプレートにおいて、この型はランダムアクセスイテレータである。
+
+
+## 計算量
+定数時間。
+
+
+## 備考
+- この関数によって返されるイテレータは、`*this`が保持するいずれの要素も参照しない。その指す先は、不正な範囲となるだろう
+
+
+## 例
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  std::flat_set&amp;lt;int&amp;gt; fs = {3, 1, 4};
+
+  for (auto i = fs.cbegin(); i != fs.cend(); ++i) {
+    std::cout &amp;lt;&amp;lt; *i &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* cend()[color ff0000]
+* fs.cbegin()[link cbegin.md]
+
+### 出力
+```
+1
+3
+4
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+## 関連項目
+
+| 名前 | 説明 |
+|-----------------------------------|-----------------------------|
+| [`flat_set::begin`](begin.md)     | 先頭を指すイテレータを取得する |
+| [`flat_set::end`](end.md)         | 末尾の次を指すイテレータを取得する |
+| [`flat_set::cbegin`](cbegin.md)   | 先頭を指すconstイテレータを取得する |
+| [`flat_set::rbegin`](rbegin.md)   | 末尾を指す逆イテレータを取得する |
+| [`flat_set::rend`](rend.md)       | 先頭の前を指す逆イテレータを取得する |
+| [`flat_set::crbegin`](crbegin.md) | 末尾を指す逆constイテレータを取得する |
+| [`flat_set::crend`](crend.md)     | 先頭の前を指す逆constイテレータを取得する |
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>clear -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_set/clear.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/flat_set/clear.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_set/clear.md b/reference/flat_set/flat_set/clear.md
new file mode 100644
index 000000000..29bc4b37f
--- /dev/null
+++ b/reference/flat_set/flat_set/clear.md
@@ -0,0 +1,56 @@
+# clear
+* flat_set[meta header]
+* std[meta namespace]
+* flat_set[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+void clear() noexcept; // (1) C++23
+```
+
+## 概要
+コンテナ内の全ての要素を削除する。各要素のデストラクタが呼ばれ、コンテナから削除される。[`size()`](size.md) は 0 になる。
+
+
+## 計算量
+線形時間。
+
+
+## 例外
+投げない。
+
+
+## 例
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main ()
+{
+  std::flat_set&amp;lt;int&amp;gt; fs = {3, 1, 4};
+
+  std::cout &amp;lt;&amp;lt; fs.size() &amp;lt;&amp;lt; std::endl;
+
+  fs.clear();
+
+  std::cout &amp;lt;&amp;lt; fs.size() &amp;lt;&amp;lt; std::endl;
+}
+```
+* clear()[color ff0000]
+* fs.size()[link size.md]
+
+### 出力
+```
+3
+0
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>contains -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_set/contains.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/flat_set/contains.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_set/contains.md b/reference/flat_set/flat_set/contains.md
new file mode 100644
index 000000000..9d9e01d6c
--- /dev/null
+++ b/reference/flat_set/flat_set/contains.md
@@ -0,0 +1,80 @@
+# contains
+* flat_set[meta header]
+* std[meta namespace]
+* flat_set[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+bool contains(const key_type&amp;amp; x) const; // (1) C++23
+
+template &amp;lt;class K&amp;gt;
+bool contains(const K&amp;amp; x) const;        // (2) C++23
+```
+
+
+## 概要
+指定されたキー`x`に一致する要素がコンテナに含まれているかを判定する。
+
+- (1) : クラスのテンプレートパラメータ`key_type`型のキーを受け取る
+- (2) : `key_type`と比較可能な`K`型のキーを受け取る
+
+
+## テンプレートパラメータ制約
+- (2) : `key_compare::is_transparent`が妥当な式であること
+
+
+## 戻り値
+以下と等価：
+
+```cpp
+return find(x) != end();
+```
+* find[link find.md]
+* end()[link end.md]
+
+
+## 計算量
+対数時間。
+
+
+## 備考
+- (2) :
+    - `is_transparent`は、標準ライブラリの[`std::less`](/reference/functional/less.md)、[`std::greater`](/reference/functional/greater.md)といった関数オブジェクトの、`void`に対する特殊化で定義される。それ以外のテンプレートパラメータで`is_transparent`が定義されないのは、互換性のためである。
+    - これらのオーバーロードは、`flat_set&amp;lt;string&amp;gt;`のようなコンテナに対し、検索操作で文字列リテラルを渡した際に、キー型の一時オブジェクトが生成されるコストを減らすためにある。
+
+
+## 例
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  std::flat_set&amp;lt;int&amp;gt; fs = {3, 1, 4};
+
+  // キー3の要素が含まれているか
+  if (fs.contains(3)) {
+    std::cout &amp;lt;&amp;lt; &amp;#34;contain&amp;#34; &amp;lt;&amp;lt; std::endl;
+  }
+  else {
+    std::cout &amp;lt;&amp;lt; &amp;#34;doesn&amp;#39;t contain&amp;#34; &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* contains[color ff0000]
+
+### 出力
+```
+contain
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>count -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_set/count.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/flat_set/count.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_set/count.md b/reference/flat_set/flat_set/count.md
new file mode 100644
index 000000000..4d6f18f86
--- /dev/null
+++ b/reference/flat_set/flat_set/count.md
@@ -0,0 +1,97 @@
+# count
+* flat_set[meta header]
+* std[meta namespace]
+* flat_set[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+size_type count(const key_type&amp;amp; x) const; // (1) C++23
+
+template &amp;lt;class K&amp;gt;
+size_type count(const K&amp;amp; x) const;        // (2) C++23
+```
+
+## 概要
+キー `x` を検索し、コンテナ内に見つかった要素の数を返す。`flat_set` コンテナはキーの重複を許さないため、この関数は実際には要素が見つかったときに 1 を、そうでないときに 0 を返す。
+
+- (1) : クラスのテンプレートパラメータ`key_type`型のキーを受け取る
+- (2) : `key_type`と比較可能な`K`型のキーを受け取る
+
+
+## テンプレートパラメータ制約
+- (2) : `key_compare::is_transparent`が妥当な式であること
+
+
+## 戻り値
+- (1) : `x`と等価なキーの要素が見つかった場合は1、そうでない場合は0を返す。
+- (2) : `key_compare`型の関数オブジェクトを`c`、コンテナ内の各要素が持つキーを`k`として、キーが等価か判定する式`!c(k, x) &amp;amp;&amp;amp; !c(x, k)`が`true`となる要素が見つかった場合は1、そうでない場合は0を返す。
+
+
+## 計算量
+```
+log(size()) + count(x)
+```
+* size()[link size.md]
+
+
+## 備考
+- (2) :
+    - `is_transparent`は、標準ライブラリの[`std::less`](/reference/functional/less.md)、[`std::greater`](/reference/functional/greater.md)といった関数オブジェクトの、`void`に対する特殊化で定義される。それ以外のテンプレートパラメータで`is_transparent`が定義されないのは、互換性のためである。
+    - これらのオーバーロードは、`flat_set&amp;lt;string&amp;gt;`のようなコンテナに対し、検索操作で文字列リテラルを渡した際に、キー型の一時オブジェクトが生成されるコストを減らすためにある。
+- [`std::flat_multiset`](/reference/flat_set/flat_multiset.md)クラスとの共通インタフェースを使用する必要がなければ、この関数の代わりに[`contains()`](contains.md)メンバ関数を使用することを推奨する
+
+
+## 例
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+int main()
+{
+  // (1)
+  {
+    std::flat_set&amp;lt;std::string&amp;gt; fs = {&amp;#34;Alice&amp;#34;, &amp;#34;Bob&amp;#34;, &amp;#34;Carol&amp;#34;};
+
+    std::size_t n = fs.count(&amp;#34;Bob&amp;#34;);
+    if (n &amp;gt; 0) { // 見つかった
+      std::cout &amp;lt;&amp;lt; &amp;#34;found&amp;#34; &amp;lt;&amp;lt; std::endl;
+    }
+  }
+
+  // (2)
+  {
+    std::flat_set&amp;lt;std::string, std::less&amp;lt;&amp;gt;&amp;gt; fs = {&amp;#34;Alice&amp;#34;, &amp;#34;Bob&amp;#34;, &amp;#34;Carol&amp;#34;};
+
+    // std::lessのvoidに対する特殊化を使用することで、
+    // 文字列リテラルをcount()関数の引数として渡した際に、
+    // std::string型の一時オブジェクトが生成されない。
+    std::size_t n = fs.count(&amp;#34;Bob&amp;#34;);
+    if (n &amp;gt; 0) { // 見つかった
+      std::cout &amp;lt;&amp;lt; &amp;#34;found&amp;#34; &amp;lt;&amp;lt; std::endl;
+    }
+  }
+}
+```
+* fs.count[color ff0000]
+* std::less[link /reference/functional/less.md]
+
+### 出力
+```
+found
+found
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`contains()`](contains.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>crbegin -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_set/crbegin.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/flat_set/crbegin.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_set/crbegin.md b/reference/flat_set/flat_set/crbegin.md
new file mode 100644
index 000000000..966106f5b
--- /dev/null
+++ b/reference/flat_set/flat_set/crbegin.md
@@ -0,0 +1,70 @@
+# crbegin
+* flat_set[meta header]
+* std[meta namespace]
+* flat_set[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+const_reverse_iterator crbegin() const noexcept;
+```
+
+## 概要
+コンテナ内の末尾を指す逆イテレータを取得する。 
+内部的に、このコンテナは各要素をキーの値に従って下位から上位へと並べており、従って `crbegin()` は最上位のキーにあたる値へのイテレータを返す。 
+`crbegin()` は [`end()`](end.md) と同じ要素を指すわけではなく、その前の要素を指すことに注意。
+
+
+## 戻り値
+反転したシーケンスの先頭を指す逆イテレータ。 
+`const_reverse_iterator` はメンバ型である。このクラステンプレートにおいて、この型は逆ランダムアクセスイテレータであり、`reverse_iterator&amp;lt;const_iterator&amp;gt;` と定義される。
+
+
+## 計算量
+定数時間。
+
+
+## 例
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  std::flat_set&amp;lt;int&amp;gt; fs = {3, 1, 4};
+
+  for (auto i = fs.crbegin(); i != fs.crend(); ++i) {
+    std::cout &amp;lt;&amp;lt; *i &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* crbegin()[color ff0000]
+* fs.crend()[link crend.md]
+
+### 出力
+```
+4
+3
+1
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+| 名前 | 説明 |
+|---------------------------------|-----------------------------|
+| [`flat_set::begin`](begin.md)   | 先頭を指すイテレータを取得する |
+| [`flat_set::end`](end.md)       | 末尾の次を指すイテレータを取得する |
+| [`flat_set::cbegin`](cbegin.md) | 先頭を指すconstイテレータを取得する |
+| [`flat_set::cend`](cend.md)     | 末尾の次を指すconstイテレータを取得する |
+| [`flat_set::rbegin`](rbegin.md) | 末尾を指す逆イテレータを取得する |
+| [`flat_set::rend`](rend.md)     | 先頭の前を指す逆イテレータを取得する |
+| [`flat_set::crend`](crend.md)   | 先頭の前を指す逆constイテレータを取得する |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>crend -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_set/crend.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/flat_set/crend.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_set/crend.md b/reference/flat_set/flat_set/crend.md
new file mode 100644
index 000000000..01a8136ab
--- /dev/null
+++ b/reference/flat_set/flat_set/crend.md
@@ -0,0 +1,68 @@
+# crend
+* flat_set[meta header]
+* std[meta namespace]
+* flat_set[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+const_reverse_iterator crend() const noexcept;
+```
+
+
+## 概要
+コンテナの先頭要素の前（これは反転シーケンスの末尾にあたる）を指す逆イテレータを取得する。 
+`crend()` は [`begin()`](begin.md) と同じ要素を指すわけではなく、その前の要素を指すことに注意。
+
+
+## 戻り値
+反転シーケンスの終端を指す逆イテレータ。 
+`const_reverse_iterator` はメンバ型である。`flat_set` クラステンプレートにおいて、この型は逆ランダムアクセスイテレータであり、`reverse_iterator&amp;lt;const_iterator&amp;gt;` と定義される。
+
+
+## 例
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  std::flat_set&amp;lt;int&amp;gt; fs = {3, 1, 4};
+
+  for (auto i = fs.crbegin(); i != fs.crend(); ++i) {
+    std::cout &amp;lt;&amp;lt; *i &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* crend()[color ff0000]
+* fs.crbegin()[link crbegin.md]
+
+### 出力
+```
+4
+3
+1
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+
+## 関連項目
+
+| 名前 | 説明 |
+|------------------------------|-----------------------------------------|
+| [`flat_set::begin`](begin.md)     | 先頭を指すイテレータを取得する |
+| [`flat_set::end`](end.md)         | 末尾の次を指すイテレータを取得する |
+| [`flat_set::cbegin`](cbegin.md)   | 先頭を指すconstイテレータを取得する |
+| [`flat_set::cend`](cend.md)       | 末尾の次を指すconstイテレータを取得する |
+| [`flat_set::rbegin`](rbegin.md)   | 末尾を指す逆イテレータを取得する |
+| [`flat_set::rend`](rend.md)       | 先頭の前を指す逆イテレータを取得する |
+| [`flat_set::crbegin`](crbegin.md) | 末尾を指す逆constイテレータを取得する |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>emplace -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_set/emplace.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/flat_set/emplace.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_set/emplace.md b/reference/flat_set/flat_set/emplace.md
new file mode 100644
index 000000000..7378406a2
--- /dev/null
+++ b/reference/flat_set/flat_set/emplace.md
@@ -0,0 +1,119 @@
+# emplace
+* flat_set[meta header]
+* std[meta namespace]
+* flat_set[meta class]
+* function template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+template &amp;lt;class... Args&amp;gt;
+pair&amp;lt;iterator, bool&amp;gt; emplace(Args&amp;amp;&amp;amp;... args);
+```
+* pair[link /reference/utility/pair.md]
+
+## 概要
+コンテナに新しい要素を挿入する。要素は直接構築される（コピーもムーブもされない）。要素のコンストラクタはこの関数に渡された引数を与えることによって呼ばれる。
+
+
+## パラメータ
+- `args...` : 要素のコンストラクタへ転送される引数パック。
+
+
+## テンプレートパラメータ制約
+- [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;value_type, Arg...&amp;gt;`が`true`であること。
+
+
+## 効果
+`value_type`型の変数`t`を[`forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...`で初期化する。このコンテナが`t`と等価なキーをすでにもっている場合、`*this`を変更しない。そうでない場合、キーを格納しているコンテナを`c`、とすると、以下と等価：
+
+```cpp
+auto it = ranges::upper_bound(c, t, value_comp());
+c.insert(it, std::move(t));
+```
+* ranges::upper_bound[link /reference/algorithm/ranges_upper_bound.md]
+* value_comp()[link value_comp.md]
+* insert[link /reference/vector/vector/insert.md]
+* std::move[link /reference/utility/move.md]
+
+
+## 戻り値
+挿入されたかどうかを示す `bool` と、挿入された要素へのイテレータからなる [`pair`](/reference/utility/pair.md) を返す。挿入されなかったときは、既存要素へのイテレータを返す。
+
+
+## 例
+### 単純な挿入の例
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  std::flat_set&amp;lt;int&amp;gt; fs;
+
+  fs.emplace(3);
+  fs.emplace(1);
+  fs.emplace(4);
+
+  for (int i : fs) {
+    std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* emplace[color ff0000]
+
+#### 出力
+```
+1
+3
+4
+```
+
+### コンストラクタ引数を渡す例
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+int main()
+{
+  std::flat_set&amp;lt;std::string&amp;gt; fs;
+  const char aaa[3] = {&amp;#39;A&amp;#39;, &amp;#39;A&amp;#39;, &amp;#39;A&amp;#39;};
+
+  fs.emplace(5, &amp;#39;C&amp;#39;);
+  fs.emplace(&amp;#34;BBBB&amp;#34;);
+  fs.emplace(std::begin(aaa), std::end(aaa));
+
+  for (const std::string&amp;amp; i : fs) {
+    std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* emplace[color ff0000]
+* std::begin[link /reference/iterator/begin.md]
+* std::end[link /reference/iterator/end.md]
+
+#### 出力
+```
+AAA
+BBBB
+CCCCC
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+
+| 名前                                        | 説明                                       |
+|---------------------------------------------|--------------------------------------------|
+| [`flat_set::insert`](insert.md)             | 要素を挿入する                             |
+| [`flat_set::insert_range`](insert_range.md) | Rangeを挿入する                            |
+| [`flat_set::emplace_hint`](emplace_hint.md) | ヒントを使って要素を直接構築する           |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>emplace_hint -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_set/emplace_hint.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/flat_set/emplace_hint.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_set/emplace_hint.md b/reference/flat_set/flat_set/emplace_hint.md
new file mode 100644
index 000000000..8fd7b5a7c
--- /dev/null
+++ b/reference/flat_set/flat_set/emplace_hint.md
@@ -0,0 +1,75 @@
+# emplace_hint
+* flat_set[meta header]
+* std[meta namespace]
+* flat_set[meta class]
+* function template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+template &amp;lt;class... Args&amp;gt;
+iterator emplace_hint(const_iterator hint, Args&amp;amp;&amp;amp;... args);
+```
+
+## 概要
+要素が配置されるべき場所を示唆するパラメータ `hint` を使って、コンテナに新しい要素を挿入する。要素は直接構築される（コピーもムーブもされない）。要素のコンストラクタはこの関数に渡された引数と同じ引数で呼ばれる。
+
+
+## パラメータ
+- `hint` : 新しい要素をどこへ挿入するかを示唆するために使われるイテレータ
+- `args...` : 要素のコンストラクタへ転送される引数パック
+
+
+## 戻り値
+新たな要素が追加された場合、その追加された要素を指すイテレータ。新たな要素が追加されなかった場合、既にあった要素を指すイテレータ。
+
+
+## 計算量
+一般にコンテナのサイズについて対数時間だが、新しい要素が `hint` の前に挿入された場合は償却定数時間。
+
+
+## 例
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  std::flat_set&amp;lt;int&amp;gt; fs = {3, 1, 4};
+
+  // キー5の要素が最後尾に追加されることが事前にわかっているので、fs.end()をヒントとして与える
+  fs.emplace_hint(fs.end(), 5);
+
+  for (int i : fs) {
+    std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* emplace_hint[color ff0000]
+* fs.end()[link end.md]
+
+### 出力
+```
+1
+3
+4
+5
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+
+| 名前                                        | 説明                                       |
+|---------------------------------------------|--------------------------------------------|
+| [`flat_set::insert`](insert.md)             | 要素を挿入する                             |
+| [`flat_set::insert_range`](insert_range.md) | Rangeを挿入する                            |
+| [`flat_set::emplace`](emplace.md)           | 要素を直接構築する                         |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>empty -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_set/empty.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/flat_set/empty.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_set/empty.md b/reference/flat_set/flat_set/empty.md
new file mode 100644
index 000000000..4b5a16816
--- /dev/null
+++ b/reference/flat_set/flat_set/empty.md
@@ -0,0 +1,60 @@
+# empty
+* flat_set[meta header]
+* std[meta namespace]
+* flat_set[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+[[nodiscard]] bool empty() const noexcept; // (1) C++23
+```
+
+## 概要
+コンテナが空かどうかをテストする。 
+コンテナが空（[`size()`](size.md) が 0）の場合に `true` を返す。 
+
+この関数はコンテナ内のコンテンツを変化させない。コンテンツをクリアするには [`clear()`](clear.md) メンバ関数を使用する。
+
+
+## 戻り値
+コンテナサイズが 0 のときに `true`, そうでないときに `false` を返す。
+
+
+## 計算量
+定数時間。
+
+
+## 例
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main ()
+{
+  std::flat_set&amp;lt;int&amp;gt; fs;
+
+  std::cout &amp;lt;&amp;lt; fs.empty() &amp;lt;&amp;lt; std::endl;
+
+  fs.insert(42);
+
+  std::cout &amp;lt;&amp;lt; fs.empty() &amp;lt;&amp;lt; std::endl;
+}
+```
+* empty()[color ff0000]
+* fs.insert[link insert.md]
+
+### 出力
+```
+1
+0
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_set/end.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/flat_set/end.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_set/end.md b/reference/flat_set/flat_set/end.md
new file mode 100644
index 000000000..0da617732
--- /dev/null
+++ b/reference/flat_set/flat_set/end.md
@@ -0,0 +1,74 @@
+# end
+* flat_set[meta header]
+* std[meta namespace]
+* flat_set[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+iterator end() noexcept;
+const_iterator end() const noexcept;
+```
+
+## 概要
+コンテナの末尾の次を参照するイテレータを取得する。
+
+
+## 戻り値
+コンテナの最後の要素の次を参照するイテレータ。 
+`iterator` と `const_iterator` はいずれもメンバ型である。このクラステンプレートにおいて、これらはランダムアクセスイテレータである。
+
+
+## 計算量
+定数時間。
+
+
+## 備考
+- この関数によって返されるイテレータは、`*this`が保持するいずれの要素も参照しない。その指す先は、不正な範囲となるだろう
+
+
+## 例
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  std::flat_set&amp;lt;int&amp;gt; fs = {3, 1, 4};
+
+  for (auto i = fs.begin(); i != fs.end(); ++i) {
+    std::cout &amp;lt;&amp;lt; *i &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* end()[color ff0000]
+* fs.begin()[link begin.md]
+
+### 出力
+```
+1
+3
+4
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+
+| 名前 | 説明 |
+|-----------------------------------|-----------------------------|
+| [`flat_set::begin`](begin.md)     | 先頭を指すイテレータを取得する |
+| [`flat_set::cbegin`](cbegin.md)   | 先頭を指すconstイテレータを取得する |
+| [`flat_set::cend`](cend.md)       | 末尾の次を指すconstイテレータを取得する |
+| [`flat_set::rbegin`](rbegin.md)   | 末尾の次を指す逆イテレータを取得する |
+| [`flat_set::rend`](rend.md)       | 先頭の前を指す逆イテレータを取得する |
+| [`flat_set::crbegin`](crbegin.md) | 末尾を指す逆constイテレータを取得する |
+| [`flat_set::crend`](crend.md)     | 先頭の前を指す逆constイテレータを取得する |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>equal_range -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_set/equal_range.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/flat_set/equal_range.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_set/equal_range.md b/reference/flat_set/flat_set/equal_range.md
new file mode 100644
index 000000000..c03c41431
--- /dev/null
+++ b/reference/flat_set/flat_set/equal_range.md
@@ -0,0 +1,85 @@
+# equal_range
+* flat_set[meta header]
+* std[meta namespace]
+* flat_set[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+pair&amp;lt;iterator, iterator&amp;gt; equal_range(const key_type&amp;amp; x); // (1) C++23
+
+template &amp;lt;class K&amp;gt;
+pair&amp;lt;iterator, iterator&amp;gt; equal_range(const K&amp;amp; x);        // (2) C++23
+
+pair&amp;lt;const_iterator, const_iterator&amp;gt;
+  equal_range(const key_type&amp;amp; x) const;                  // (3) C++23
+
+template &amp;lt;class K&amp;gt;
+pair&amp;lt;const_iterator, const_iterator&amp;gt;
+  equal_range(const K&amp;amp; x) const;                         // (4) C++23
+```
+* pair[link /reference/utility/pair.md]
+
+## 概要
+コンテナ内の、`x` と等しいキー要素を全て含む範囲の境界を返す。`flat_set` コンテナではキーの重複は無いため、この範囲は最大一つの要素を含む。 
+
+もし `x` がコンテナ内のどのキーともマッチしなかった場合、戻り値の範囲は長さ 0 になり、両方のイテレータは `x` より大きく最も近い値を指す。そうでない場合、`x` がコンテナ内の全ての要素よりも大きい場合は [`end`](end.md) を指す。
+
+- (1) : `key_type`型のキーを受け取り、そのキーと等価なキー要素を全て含むイテレータ範囲を取得する。
+- (2) : `key_type`と比較可能な`K`型のキーを受け取り、そのキーと等価なキー要素を全て含むイテレータ範囲を取得する。
+- (3) : `const`な`*this`オブジェクトにおいて、`key_type`型のキーを受け取り、そのキーと等価なキー要素を全て含むイテレータ範囲を取得する。
+- (4) : `const`な`*this`オブジェクトにおいて、`key_type`と比較可能な`K`型のキーを受け取り、そのキーと等価なキー要素を全て含むイテレータ範囲を取得する。
+
+
+## 戻り値
+この関数は `pair` を返す。ここで `pair::first` は [`lower_bound`](lower_bound.md)`(x)` が返すであろう値と同じ値で範囲の下境界にあたり、`pair::second` は [`upper_bound`](upper_bound.md)`(x)` が返すであろう値と同じ値で範囲の上境界にあたる。
+
+
+## 計算量
+[`size`](size.md) について対数時間。
+
+
+## 備考
+- (2), (4) : この関数がオーバーロード解決に参加する条件は、[`find()`](find.md)メンバ関数の備考欄を参照。
+
+
+## 例
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  std::flat_set&amp;lt;int&amp;gt; fs = {3, 1, 4};
+
+  using iterator = decltype(fs)::iterator;
+  std::pair&amp;lt;iterator, iterator&amp;gt; ret = fs.equal_range(3);
+
+  for (iterator it = ret.first; it != ret.second; ++it) {
+    std::cout &amp;lt;&amp;lt; *it &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* equal_range[color ff0000]
+
+### 出力
+```
+3
+```
+
+
+## バージョン
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+
+| 名前 | 説明 |
+|-------------------------------------------|----------------------------------------------------------|
+| [`flat_set::count`](count.md)             | 指定したキーにマッチする要素の数を返す                   |
+| [`flat_set::lower_bound`](lower_bound.md) | 与えられた値より小さくない最初の要素へのイテレータを返す |
+| [`flat_set::upper_bound`](upper_bound.md) | 特定の値よりも大きい最初の要素へのイテレータを返す       |
+| [`flat_set::find`](find.md)               | 指定したキーで要素を探す                                 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_set/erase.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/flat_set/erase.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_set/erase.md b/reference/flat_set/flat_set/erase.md
new file mode 100644
index 000000000..dd2274cfe
--- /dev/null
+++ b/reference/flat_set/flat_set/erase.md
@@ -0,0 +1,140 @@
+# erase
+* flat_set[meta header]
+* std[meta namespace]
+* flat_set[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+iterator erase(iterator position);                         // (1) C++23
+
+iterator erase(const_iterator position);                   // (2) C++23
+
+size_type erase(const key_type&amp;amp; x);                        // (3) C++23
+
+template &amp;lt;class K&amp;gt;
+size_type erase(K&amp;amp;&amp;amp; x);                                    // (4) C++23
+
+iterator erase(const_iterator first, const_iterator last); // (5) C++23
+```
+
+## 概要
+単一要素またはイテレータ範囲`[first, last)`を コンテナから削除する。
+
+これは削除された要素の数だけコンテナの `size` を減らし、それぞれの要素のデストラクタを呼び出す。
+
+- (1) : 指定されたイテレータが指す要素を削除する
+- (2) : 指定された読み取り専用イテレータが指す要素を削除する
+- (3) : 指定されたキーをもつ要素を削除する
+- (4) : `key_type`と比較可能な`K`型のキーを受け取って要素を削除する
+- (5) : 指定されたイテレータ範囲の要素をすべて削除する
+
+
+## パラメータ
+- `position` : 削除する単一要素を指すイテレータ。`iterator` はメンバ型であり、双方向イテレータとして定義される。
+- `x` : 削除する値のキー。`key_type` はメンバ型であり、コンテナの中で `Key` の別名として定義される。
+- `first, last` : 削除するイテレータ範囲 `[first, last)` を指定するイテレータ。ここでいう範囲は `first` と `last` の間の全ての要素を含み、`first` が指す要素を含むが `last` が指す要素は含まない。
+
+
+## 戻り値
+- (1), (2), (5) : 削除された要素の次を指すイテレータを返す。そのような要素がない場合、[`end()`](end.md)を返す (要素を削除した結果としてコンテナが空になった場合)
+- (3), (4) : 削除された要素の数を返す。
+
+
+## 計算量
+- (1), (2) : 定数時間
+- (3), (4) : コンテナの [`size()`](size.md) について対数時間
+- (5) : コンテナの [`size()`](size.md) について対数時間、それに加えて `first` と `last` の間の距離に対する線形時間
+
+
+## 備考
+- (1), (2) : この関数に、範囲外のイテレータ (終端イテレータを含む) を指定した場合の動作は未定義
+
+
+## 例
+### 基本的な使い方 (C++23)
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  std::flat_set&amp;lt;int&amp;gt; fs = {3, 1, 4};
+
+  std::cout &amp;lt;&amp;lt; fs.size() &amp;lt;&amp;lt; std::endl;
+
+  fs.erase(1);
+  std::cout &amp;lt;&amp;lt; fs.size() &amp;lt;&amp;lt; std::endl;
+
+  fs.erase(fs.begin(), fs.end());
+  std::cout &amp;lt;&amp;lt; fs.size() &amp;lt;&amp;lt; std::endl;
+}
+```
+* erase[color ff0000]
+* fs.size()[link size.md]
+* fs.begin()[link begin.md]
+* fs.end()[link end.md]
+
+#### 出力
+```
+3
+2
+0
+```
+
+### イテレート中に要素を削除する (C++23)
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  std::flat_set&amp;lt;int&amp;gt; fs = {3, 1, 4};
+
+  // イテレート中に要素削除をするような場合には、
+  // 範囲for文は使用できない
+  for (auto it = fs.begin(); it != fs.end();) {
+    // 条件一致した要素を削除する
+    if (*it == 1) {
+      // 削除された要素の次を指すイテレータが返される。
+      it = fs.erase(it);
+    }
+    // 要素削除をしない場合に、イテレータを進める
+    else {
+      ++it;
+    }
+  }
+
+  for (int i : fs) {
+    std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* erase[color ff0000]
+* fs.begin()[link begin.md]
+* fs.end()[link end.md]
+
+#### 出力
+```
+3
+4
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+
+| 名前 | 説明 |
+|---------------------------------|--------------------------|
+| [`flat_set::clear`](clear.md)   | 全ての要素を削除する     |
+| [`flat_set::insert`](insert.md) | 要素を挿入する           |
+| [`flat_set::find`](find.md)     | 指定したキーで要素を探す |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase_if -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_set/erase_if_free.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/flat_set/erase_if_free.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_set/erase_if_free.md b/reference/flat_set/flat_set/erase_if_free.md
new file mode 100644
index 000000000..58646f1c2
--- /dev/null
+++ b/reference/flat_set/flat_set/erase_if_free.md
@@ -0,0 +1,71 @@
+# erase_if
+* flat_set[meta header]
+* std[meta namespace]
+* function template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;class Key,
+           class Compare,
+           class KeyContainer,
+           class Predicate&amp;gt;
+  typename flat_set&amp;lt;Key, Compare, KeyContainer&amp;gt;::size_type
+    erase_if(flat_set&amp;lt;Key, Compare, KeyContainer&amp;gt;&amp;amp; c,
+             Predicate pred);
+}
+```
+
+## 概要
+指定した条件に合致する要素とその分の領域を、コンテナから削除する。
+
+
+## 事前条件
+- `Key`がムーブ代入可能であること
+
+
+## 効果
+メンバ変数として保持しているコンテナ`c`の各要素`e`について、`bool(pred(e))`を`E`として、`E`が`true`であるすべての要素を削除する。
+
+
+## 戻り値
+削除した要素数を返す。
+
+
+## 計算量
+正確に[`size()`](size.md)回だけ述語適用する。
+
+
+## 例
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  std::flat_set&amp;lt;int&amp;gt; fs = {3, 1, 4};
+
+  // コンテナfsから、キー1をもつ要素をすべて削除する
+  std::erase_if(fs, [](const auto&amp;amp; x) { return x == 1; });
+
+  for (int i : fs) {
+    std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* std::erase_if[color ff0000]
+
+### 出力
+```
+3
+4
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>extract -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_set/extract.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/flat_set/extract.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_set/extract.md b/reference/flat_set/flat_set/extract.md
new file mode 100644
index 000000000..dc2bbe200
--- /dev/null
+++ b/reference/flat_set/flat_set/extract.md
@@ -0,0 +1,77 @@
+# extract
+* flat_set[meta header]
+* std[meta namespace]
+* flat_set[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+container_type extract() &amp;amp;&amp;amp;;  // C++23
+```
+
+## 概要
+値のコンテナを戻り値として返す。
+
+
+## 戻り値
+クラス内部のデータ保持形式である `container_type` オブジェクト。
+
+
+## 事後条件
+呼び出し側の `flat_set` は空になる（たとえ例外で関数が中断されたとしても）。
+
+
+## 計算量
+定数時間。
+
+
+## 備考
+本関数は右辺値修飾されているので、右辺値からのみ読み出し可能である。
+
+
+## 例
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;utility&amp;gt;
+
+int main()
+{
+  std::flat_set&amp;lt;int&amp;gt; fs = {3, 1, 4};
+
+  std::cout &amp;lt;&amp;lt; fs.size() &amp;lt;&amp;lt; std::endl;
+
+  decltype(fs)::container_type c = std::move(fs).extract();
+
+  std::cout &amp;lt;&amp;lt; fs.size() &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::endl;
+
+  for (int i : c) {
+    std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* extract()[color ff0000]
+* fs.size()[link size.md]
+* std::move[link /reference/utility/move.md]
+
+### 出力
+```
+3
+0
+
+1
+3
+4
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>find -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_set/find.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/flat_set/find.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_set/find.md b/reference/flat_set/flat_set/find.md
new file mode 100644
index 000000000..b4fba9c70
--- /dev/null
+++ b/reference/flat_set/flat_set/find.md
@@ -0,0 +1,101 @@
+# find
+* flat_set[meta header]
+* std[meta namespace]
+* flat_set[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+iterator find(const key_type&amp;amp; x);             // (1) C++23
+
+template &amp;lt;class K&amp;gt;
+iterator find(const K&amp;amp; x);                    // (2) C++23
+
+const_iterator find(const key_type&amp;amp; x) const; // (3) C++23
+
+template &amp;lt;class K&amp;gt;
+const_iterator find(const K&amp;amp; x) const;        // (4) C++23
+```
+
+## 概要
+`x`と等価なキーの要素を検索する。
+
+- (1), (3) : クラスのテンプレートパラメータ`key_type`型のキーを受け取って検索する。
+- (2), (4) : `key_type`と比較可能な`K`型のキーを受け取って検索する。
+
+
+## テンプレートパラメータ制約
+- (2), (4) : `key_compare::is_transparent`が妥当な式であること
+
+
+## 戻り値
+- (1), (3) : `x`と等価なキーの要素が見つかった場合は、見つかった要素へのイテレータを返す。そうでない場合は、 [`end()`](end.md) を返す。
+- (2), (4) : `key_compare`型の関数オブジェクトを`c`、コンテナ内の各要素が持つキーを`k`として、キーが等価か判定する式`!c(k, x) &amp;amp;&amp;amp; !c(x, k)`が`true`となる要素へのイテレータを返す。そのような要素がない場合は、[`end()`](end.md) を返す。
+
+
+## 計算量
+[`size`](size.md) について対数時間。
+
+
+## 備考
+- (2), (4) :
+    - `is_transparent`は、標準ライブラリの[`std::less`](/reference/functional/less.md)、[`std::greater`](/reference/functional/greater.md)といった関数オブジェクトの、`void`に対する特殊化で定義される。それ以外のテンプレートパラメータで`is_transparent`が定義されないのは、互換性のためである。
+    - これらのオーバーロードは、`flat_set&amp;lt;string&amp;gt;`のようなコンテナに対し、検索操作で文字列リテラルを渡した際に、キー型の一時オブジェクトが生成されるコストを減らすためにある。
+
+
+## 例
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+int main()
+{
+  // (1)
+  {
+    std::flat_set&amp;lt;std::string&amp;gt; fs = {&amp;#34;Alice&amp;#34;, &amp;#34;Bob&amp;#34;, &amp;#34;Carol&amp;#34;};
+
+    decltype(fs)::iterator it = fs.find(&amp;#34;Bob&amp;#34;);
+    if (it != fs.end()) { // 見つかった
+      std::cout &amp;lt;&amp;lt; *it &amp;lt;&amp;lt; std::endl;
+    }
+  }
+
+  // (2)
+  {
+    std::flat_set&amp;lt;std::string, std::less&amp;lt;&amp;gt;&amp;gt; fs = {&amp;#34;Alice&amp;#34;, &amp;#34;Bob&amp;#34;, &amp;#34;Carol&amp;#34;};
+
+    // std::lessのvoidに対する特殊化を使用することで、
+    // 文字列リテラルをfind()関数の引数として渡した際に、
+    // std::string型の一時オブジェクトが生成されない。
+    decltype(fs)::iterator it = fs.find(&amp;#34;Bob&amp;#34;);
+    if (it != fs.end()) { // 見つかった
+      std::cout &amp;lt;&amp;lt; *it &amp;lt;&amp;lt; std::endl;
+    }
+  }
+}
+```
+* find[color ff0000]
+* fs.end()[link end.md]
+* std::less[link /reference/functional/less.md]
+
+### 出力
+```
+Bob
+Bob
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`contains()`](contains.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_set/insert.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/flat_set/insert.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_set/insert.md b/reference/flat_set/flat_set/insert.md
new file mode 100644
index 000000000..ef79a30b3
--- /dev/null
+++ b/reference/flat_set/flat_set/insert.md
@@ -0,0 +1,225 @@
+# insert
+* flat_set[meta header]
+* std[meta namespace]
+* flat_set[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+pair&amp;lt;iterator, bool&amp;gt; insert(const value_type&amp;amp; x); // (1) C++23
+pair&amp;lt;iterator, bool&amp;gt; insert(value_type&amp;amp;&amp;amp; x);      // (2) C++23
+
+iterator insert(const_iterator position,
+                const value_type&amp;amp; x);             // (3) C++23
+iterator insert(const_iterator position,
+                value_type&amp;amp;&amp;amp; x);                  // (4) C++23
+
+template&amp;lt;class P&amp;gt;
+pair&amp;lt;iterator, bool&amp;gt; insert(P&amp;amp;&amp;amp; x);               // (5) C++23
+
+template&amp;lt;class P&amp;gt;
+iterator insert(const_iterator position,
+                P&amp;amp;&amp;amp;);                             // (6) C++23
+
+template&amp;lt;class InputIterator&amp;gt;
+void insert(InputIterator first,
+            InputIterator last);                  // (7) C++23
+
+template&amp;lt;class InputIterator&amp;gt;
+void insert(sorted_unique_t,
+            InputIterator first,
+            InputIterator last);                  // (8) C++23
+
+void insert(initializer_list&amp;lt;value_type&amp;gt; il);     // (9) C++23
+
+void insert(sorted_unique_t s,
+            initializer_list&amp;lt;value_type&amp;gt; il);     // (10) C++23
+```
+* pair[link /reference/utility/pair.md]
+* initializer_list[link /reference/initializer_list/initializer_list.md]
+* sorted_unique_t[link /reference/flat_set_/sorted_unique_t.md]
+
+## 概要
+新しく一つの要素(引数 `x` を使う)または要素のシーケンス(入力イテレータまたは `initializer_list` を使う)を挿入し、コンテナを拡張する。
+
+これは、挿入された要素の数だけコンテナの [`size()`](size.md) を増やす。
+
+`flat_set` コンテナは重複したキーを持つ要素を許さないため、挿入操作はそれぞれの要素が他のコンテナ内の既存要素と同じキーかどうかをチェックする。もし同じであれば要素は挿入されず、戻り値を持つ関数の場合はそれへのイテレータなどを返す。
+
+重複した値を許す、類似したコンテナについては [`flat_multiset`](/reference/flat_set/flat_multiset.md) を参照。
+
+内部的に `flat_set_` コンテナは、コンストラクト時に指定された比較オブジェクトによって要素を下位から上位へとソートして保持する。
+
+この操作は、適切な引数 `position` を提供することで効率を飛躍的に改善することができる。
+
+- (1) : 単一要素を挿入する
+- (2) : 単一要素の一時オブジェクトを挿入する
+- (3) : 指定された位置に、単一要素を挿入する
+- (4) : 指定された位置に、単一要素の一時オブジェクトを挿入する
+- (5) : 単一要素として要素型`value_type`のコンストラクタ引数を受け取って挿入する
+- (6) : 指定された位置に、要素型`value_type`のコンストラクタ引数を受け取って挿入する
+- (7) : イテレータ範囲`[first, last)`を挿入する
+- (8) : ソート済みかつ重複要素のないイテレータ範囲`[first, last)`を挿入する
+- (9) : 初期化子リストを挿入する
+- (10) : ソート済みかつ重複要素のない初期化子リストを挿入する
+
+
+## 要件
+- (5), (6) : [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;key_type, P&amp;gt;`が`true`であること
+
+
+## 効果
+- (1) :
+    ```cpp
+    return emplace(x);
+    ```
+    * emplace[link emplace.md]
+
+- (2) :
+    ```cpp
+    return emplace(std::move(x));
+    ```
+    * emplace[link emplace.md]
+    * move[link /reference/utility/move.md]
+
+- (3) :
+    ```cpp
+    return emplace_hint(position, x);
+    ```
+    * emplace_hint[link emplace_hint.md]
+
+- (4) :
+    ```cpp
+    return emplace_hint(position, std::move(x));
+    ```
+    * emplace_hint[link emplace_hint.md]
+    * move[link /reference/utility/move.md]
+
+- (5) : 以下と等価：
+    ```cpp
+    return emplace(std::forward&amp;lt;P&amp;gt;(x));
+    ```
+    * emplace[link emplace.md]
+    * forward[link /reference/utility/forward.md]
+
+- (6) : 以下と等価：
+    ```cpp
+    return emplace_hint(position, std::forward&amp;lt;P&amp;gt;(x));.
+    ```
+    * emplace_hint[link emplace_hint.md]
+    * forward[link /reference/utility/forward.md]
+
+- (7) : メンバ変数として保持しているコンテナ`c`に、以下のように挿入する：
+    ```cpp
+    for (; first != last; ++first) {
+        value_type value = *first;
+        c.insert(c.end(), std::move(value));
+    }
+    ```
+    * end()[link /reference/vector/vector/end.md]
+    * insert[link /reference/vector/vector/insert.md]
+    * std::move[link /reference/utility/move.md]
+
+    - 次に、新しく挿入された要素の範囲を`value_comp()`を基準にソートする
+    - 次に、ソートされた結果の範囲と、既存の要素のソートされた範囲をひとつのソートされた範囲にマージする
+    - 最後に、重複する要素を削除する
+
+- (8) : メンバ変数として保持しているコンテナ`c`に、以下のように挿入する：
+    ```cpp
+    for (; first != last; ++first) {
+        value_type value = *first;
+        c.insert(c.end(), std::move(value));
+    }
+    ```
+    * end()[link /reference/vector/vector/end.md]
+    * insert[link /reference/vector/vector/insert.md]
+    * std::move[link /reference/utility/move.md]
+
+    - 次に、ソートされた結果の範囲と、既存の要素のソートされた範囲をひとつのソートされた範囲にマージする
+    - 最後に、重複する要素を削除する
+
+- (9) :
+    ```cpp
+    insert(il.begin(), il.end());
+    ```
+
+- (10) :
+    ```cpp
+    insert(s, il.begin(), il.end());
+    ```
+
+
+## 戻り値
+- (1), (2), (5) : 戻り値としては、イテレータと`bool`値の組を返す。
+    - 挿入された場合には、`first` に挿入された要素へのイテレータ、 `second` に `true` が設定される。
+    - 挿入されなかった場合には、 `first` に `x` と等価のキーを持つ要素へのイテレータ、 `second` に `false` が設定される。
+- (3), (4), (6) :
+    - 挿入された場合には、新しく挿入された要素を指すイテレータを返す。
+    - 挿入されなかった場合には、`x`のキーと等価のキーを持つ要素へのイテレータを返す。
+- (7), (8), (9), (10) : なし
+
+
+## 計算量
+- (7) : Nをこの操作の前の[`size()`](size.md)、Mを[`distance`](/reference/iterator/distance.md)`(first, last)`として、N + MlogM
+- (8) : Nをこの操作のあとの[`size()`](size.md)として、Nに対して線形
+
+
+## 備考
+- (7), (8) : この操作はインプレース・マージを行うため、追加のメモリ確保を行う可能性がある
+
+
+## 例
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main()
+{
+  std::flat_set&amp;lt;int&amp;gt; fs;
+
+  // 単一要素を挿入する
+  fs.insert(1);
+
+  // シーケンスを挿入する
+  std::vector&amp;lt;int&amp;gt; v = {2, 3, 4};
+  fs.insert(v.begin(), v.end());
+
+  // 挿入するシーケンスがソート済みかつ重複要素がないことがわかっている場合、
+  // 以下のように指定した方が高速になる
+  fs.insert(std::sorted_unique, {5, 6, 7});
+
+  for (int i : fs) {
+    std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* insert[color ff0000]
+* begin()[link /reference/vector/vector/begin.md]
+* end()[link /reference/vector/vector/end.md]
+* std::sorted_unique[link /reference/flat_set/sorted_unique_t.md]
+
+### 出力
+```
+1
+2
+3
+4
+5
+6
+7
+```
+
+## バージョン
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+| 名前                                        | 説明                             |
+|---------------------------------------------|----------------------------------|
+| [`flat_set::insert_range`](insert_range.md) | Rangeを挿入する                  |
+| [`flat_set::emplace`](emplace.md)           | 要素を直接構築する               |
+| [`flat_set::emplace_hint`](emplace_hint.md) | ヒントを使って要素を直接構築する |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert_range -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_set/insert_range.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/flat_set/insert_range.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_set/insert_range.md b/reference/flat_set/flat_set/insert_range.md
new file mode 100644
index 000000000..1e67de38f
--- /dev/null
+++ b/reference/flat_set/flat_set/insert_range.md
@@ -0,0 +1,79 @@
+# insert_range
+* flat_set[meta header]
+* std[meta namespace]
+* flat_set[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+template&amp;lt;container-compatible-range&amp;lt;value_type&amp;gt; R&amp;gt;
+void insert_range(R&amp;amp;&amp;amp; rg);                        // (1) C++23
+```
+* container-compatible-range[link /reference/exposition-only/container-compatible-range.md]
+
+## 概要
+Rangeを挿入し、コンテナを拡張する。
+
+これは、挿入された要素の数だけコンテナの [`size()`](size.md) を増やす。
+
+`flat_set` コンテナは重複したキーを持つ要素を許さないため、挿入操作はそれぞれの要素が他のコンテナ内の既存要素と同じキーかどうかをチェックする。もし同じであれば要素は挿入されない。
+
+重複した値を許す、類似したコンテナについては [`flat_multiset`](/reference/flat_set/flat_multiset.md) を参照。
+
+内部的に `flat_set` コンテナは、コンストラクト時に指定された比較オブジェクトによって要素を下位から上位へとソートして保持する。
+
+
+## 戻り値
+なし
+
+
+## 計算量
+- Nをこの操作の前の[`size()`](size.md)、Mを[`ranges::distance`](/reference/iterator/ranges_distance.md)`(rg)`として、N + MlogM
+
+
+## 備考
+- この操作はインプレース・マージを行うため、追加のメモリ確保を行う可能性がある
+
+
+## 例
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  std::flat_set&amp;lt;int&amp;gt; fs = {3};
+
+  std::flat_set&amp;lt;int&amp;gt; fs2 = {5, 15};
+
+  fs.insert_range(fs2);
+
+  for (int i : fs) {
+    std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* insert_range[color ff0000]
+
+### 出力
+```
+3
+5
+15
+```
+
+
+## バージョン
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+
+| 名前                                        | 説明                             |
+|---------------------------------------------|----------------------------------|
+| [`flat_set::insert`](insert.md)             | 要素を挿入する                   |
+| [`flat_set::emplace`](emplace.md)           | 要素を直接構築する               |
+| [`flat_set::emplace_hint`](emplace_hint.md) | ヒントを使って要素を直接構築する |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>key_comp -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_set/key_comp.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/flat_set/key_comp.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_set/key_comp.md b/reference/flat_set/flat_set/key_comp.md
new file mode 100644
index 000000000..af9fc6862
--- /dev/null
+++ b/reference/flat_set/flat_set/key_comp.md
@@ -0,0 +1,64 @@
+# key_comp
+* flat_set[meta header]
+* std[meta namespace]
+* flat_set[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+key_compare key_comp() const; // C++23
+```
+
+
+## 概要
+コンテナに関連づけられたキー比較用の関数オブジェクトを返す。このオブジェクトはコンテナ内の二つのキーを比較するために利用できる。
+この比較オブジェクトはオブジェクトの構築時に与えられ、関数へのポインタでも関数オブジェクトでも良い。いずれの場合でも、これは同じ型の 2 つの引数をとり、[狭義の弱順序](/reference/algorithm.md#strict-weak-ordering)に従って一つ目の引数が二つ目の引数より前のときに `true` を返し、そうでないときに `false` を返す。
+
+
+## 戻り値
+比較オブジェクト。`key_compare` はメンバ型であり、テンプレートパラメータ `Compare` の別名として定義される。
+
+
+## 計算量
+定数時間。
+
+
+## 例
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  std::flat_set&amp;lt;int&amp;gt; s;
+  std::flat_set&amp;lt;int&amp;gt;::key_compare comp = s.key_comp();
+
+  std::cout &amp;lt;&amp;lt; comp(1, 2) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; comp(3, 2) &amp;lt;&amp;lt; std::endl;
+}
+```
+* key_comp()[color ff0000]
+
+### 出力
+```
+1
+0
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+
+| 名前                                | 説明                                                     |
+|-------------------------------------|----------------------------------------------------------|
+| [`value_comp`](value_comp.md)       | 要素比較用の関数オブジェクトを返す                       |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>lower_bound -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_set/lower_bound.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/flat_set/lower_bound.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_set/lower_bound.md b/reference/flat_set/flat_set/lower_bound.md
new file mode 100644
index 000000000..fe9904855
--- /dev/null
+++ b/reference/flat_set/flat_set/lower_bound.md
@@ -0,0 +1,121 @@
+# lower_bound
+* flat_set[meta header]
+* std[meta namespace]
+* flat_set[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+iterator lower_bound(const key_type&amp;amp; x);             // (1) C++23
+
+template &amp;lt;class K&amp;gt;
+iterator lower_bound(const K&amp;amp; x);                    // (2) C++23
+
+const_iterator lower_bound(const key_type&amp;amp; x) const; // (3) C++23
+
+template &amp;lt;class K&amp;gt;
+const_iterator lower_bound(const K&amp;amp; x) const;        // (4) C++23
+```
+
+## 概要
+`x` を右辺とする `&amp;lt;` 演算が成り立たない最初の要素を指すイテレータを返す（コンテナの比較オブジェクトが使われる）。すなわちこれは `&amp;gt;=` 演算にあたる。
+
+[`upper_bound()`](upper_bound.md) とは異なり、このメンバ関数は `x` より大きいだけでなく、`x` と等しい場合であってもその要素へのイテレータを返す。
+
+内部的には `flat_set` コンテナ内の全ての要素は常に比較オブジェクトが定義する基準に沿って並んでいるため、この関数が返すいずれかの後に続く全ての要素が `x` より大きいか等しいことに注意。
+
+- (1) : `key_type`型のキーを受け取り、そのキーより小さくない最初の要素へのイテレータを取得する。
+- (2) : `key_type`と比較可能な`K`型のキーを受け取り、そのキーより小さくない最初の要素へのイテレータを取得する。
+- (3) : `const`な`*this`オブジェクトにおいて、`key_type`型のキーを受け取り、そのキーより小さくない最初の要素へのイテレータを取得する。
+- (4) : `const`な`*this`オブジェクトにおいて、`key_type`と比較可能な`K`型のキーを受け取り、そのキーより小さくない最初の要素へのイテレータを取得する。
+
+
+## 戻り値
+- (1), (3) : コンテナ内で `x` を右辺とする `&amp;lt;` 演算が成り立たない最初の要素へのイテレータを返す。そのような要素がない場合は、[`end()`](end.md)を返す。
+- (2), (4) : `key_compare`型の関数オブジェクトを`c`、コンテナ内の各要素が持つキーを`k`として、キーが小さくないか判定する式`!c(k, x)`が`true`となる要素へのイテレータを返す。そのような要素がない場合は、[`end()`](end.md) を返す。
+
+
+## 計算量
+[`size()`](size.md) について対数時間。
+
+
+## 備考
+- (2), (4) : この関数がオーバーロード解決に参加する条件は、[`find()`](find.md)メンバ関数の備考欄を参照。
+
+
+## 例
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+int main()
+{
+  // (1)
+  {
+    std::flat_set&amp;lt;std::string&amp;gt; fs = {
+      &amp;#34;Alice&amp;#34;, &amp;#34;Bob&amp;#34;, &amp;#34;Carol&amp;#34;, &amp;#34;David&amp;#34;
+    };
+
+    // Bob以上David以下の範囲を取得
+    decltype(fs)::iterator it = fs.lower_bound(&amp;#34;Bob&amp;#34;);
+    decltype(fs)::iterator last = fs.upper_bound(&amp;#34;David&amp;#34;);
+
+    while (it != last) {
+      std::cout &amp;lt;&amp;lt; *it &amp;lt;&amp;lt; std::endl;
+      ++it;
+    }
+  }
+
+  std::cout &amp;lt;&amp;lt; std::endl;
+
+  // (2)
+  {
+    std::flat_set&amp;lt;std::string, std::less&amp;lt;&amp;gt;&amp;gt; fs = {
+      &amp;#34;Alice&amp;#34;, &amp;#34;Bob&amp;#34;, &amp;#34;Carol&amp;#34;, &amp;#34;David&amp;#34;
+    };
+
+    // std::lessのvoidに対する特殊化を使用することで、
+    // 文字列リテラルをlower_bound()関数の引数として渡した際に、
+    // std::string型の一時オブジェクトが生成されない。
+    decltype(fs)::iterator it = fs.lower_bound(&amp;#34;Bob&amp;#34;);
+    decltype(fs)::iterator last = fs.upper_bound(&amp;#34;David&amp;#34;);
+
+    while (it != last) {
+      std::cout &amp;lt;&amp;lt; *it &amp;lt;&amp;lt; std::endl;
+      ++it;
+    }
+  }
+}
+```
+* lower_bound[color ff0000]
+* fs.upper_bound[link upper_bound.md]
+* std::less[link /reference/functional/less.md]
+
+### 出力
+```
+Bob
+Carol
+David
+
+Bob
+Carol
+David
+```
+
+
+## バージョン
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+
+| 名前 | 説明 |
+|-------------------------------------------|------------------------------------------------------|
+| [`flat_set::upper_bound`](upper_bound.md) | 指定した値よりも大きい最初の要素へのイテレータを返す |
+| [`flat_set::equal_range`](equal_range.md) | 指定したキーにマッチする要素範囲を返す               |
+| [`flat_set::find`](find.md)               | 指定したキーで要素を探す                             |
+| [`flat_set::count`](count.md)             | 指定したキーにマッチする要素の数を返す               |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>max_size -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_set/max_size.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/flat_set/max_size.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_set/max_size.md b/reference/flat_set/flat_set/max_size.md
new file mode 100644
index 000000000..470209043
--- /dev/null
+++ b/reference/flat_set/flat_set/max_size.md
@@ -0,0 +1,51 @@
+# max_size
+* flat_set[meta header]
+* std[meta namespace]
+* flat_set[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+size_type max_size() const noexcept; // (1) C++23
+```
+
+## 概要
+コンテナが格納できる要素の最大数を返す。 
+これは、システムやライブラリ実装の制限のもとでコンテナが格納できる潜在的な最大サイズである。
+
+
+## 戻り値
+`container_type` 型メンバ変数 `c` があるとして、`c.`[`max_size()`](/reference/vector/vector/max_size.md)。
+
+
+## 計算量
+定数時間。
+
+
+## 例
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  std::flat_set&amp;lt;int&amp;gt; fs;
+
+  std::cout &amp;lt;&amp;lt; fs.max_size() &amp;lt;&amp;lt; std::endl;
+}
+```
+* max_size()[color ff0000]
+
+### 出力例
+```
+178956970
+```
+
+
+## 言語バージョン
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_set/op_assign.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/flat_set/op_assign.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_set/op_assign.md b/reference/flat_set/flat_set/op_assign.md
new file mode 100644
index 000000000..4999cee1e
--- /dev/null
+++ b/reference/flat_set/flat_set/op_assign.md
@@ -0,0 +1,65 @@
+# operator=
+* flat_set[meta header]
+* std[meta namespace]
+* flat_set[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+flat_set&amp;amp; operator=(initializer_list&amp;lt;value_type&amp;gt; il); // C++23
+```
+* initializer_list[link /reference/initializer_list/initializer_list.md]
+
+
+## 概要
+初期化子リストの値を代入する。
+
+
+## 効果
+`*this`の全ての要素が解放され、`il`の全ての要素が`*this`にコピー代入される。
+
+
+## 戻り値
+`*this`
+
+
+## 備考
+- 引数の型が `const flat_set&amp;amp;` であるコピー代入演算子と、引数の型が `flat_set&amp;amp;&amp;amp;` であるムーブ代入演算子は、それぞれ自動生成される。
+
+
+## 例
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+int main()
+{
+  std::initializer_list&amp;lt;std::string&amp;gt; elems = {&amp;#34;Alice&amp;#34;, &amp;#34;Bob&amp;#34;, &amp;#34;Carol&amp;#34;};
+
+  std::flat_set&amp;lt;std::string&amp;gt; fs;
+  fs = elems;
+
+  for (const std::string&amp;amp; i : fs) {
+    std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+
+### 出力
+```
+Alice
+Bob
+Carol
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;=&gt; -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_set/op_compare_3way.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/flat_set/op_compare_3way.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_set/op_compare_3way.md b/reference/flat_set/flat_set/op_compare_3way.md
new file mode 100644
index 000000000..a9c38f5a9
--- /dev/null
+++ b/reference/flat_set/flat_set/op_compare_3way.md
@@ -0,0 +1,82 @@
+# operator&amp;lt;=&amp;gt;
+* flat_set[meta header]
+* std[meta namespace]
+* function template[meta id-type]
+* flat_set[meta class]
+* cpp23[meta cpp]
+
+```cpp
+synth-three-way-result&amp;lt;value_type&amp;gt;
+  operator&amp;lt;=&amp;gt;(const flat_set&amp;amp; x,
+              const flat_set&amp;amp; y); // (1) C++23
+```
+
+## 概要
+`flat_set`オブジェクトの三方比較を行う。
+
+
+## テンプレートパラメータ制約
+- 型 (`const`) `value_type` の値に対して`operator&amp;lt;=&amp;gt;`が定義されるか、型 (`const`) `value_type` の値に対して`operator&amp;lt;`が定義され全順序をもつこと
+
+
+## 効果
+```cpp
+return lexicographical_compare_three_way(
+    x.begin(), x.end(),
+    y.begin(), y.end(),
+    synth-three-way);
+```
+* lexicographical_compare_three_way[link /reference/algorithm/lexicographical_compare_three_way.md]
+* begin()[link begin.md]
+* end()[link end.md]
+
+
+## 計算量
+線形時間。
+
+
+## 備考
+- この演算子により、以下の演算子が使用可能になる：
+    - `operator&amp;lt;`
+    - `operator&amp;lt;=`
+    - `operator&amp;gt;`
+    - `operator&amp;gt;=`
+
+
+## 例
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  std::flat_set&amp;lt;int&amp;gt; fs1 = {3, 1, 4};
+
+  std::flat_set&amp;lt;int&amp;gt; fs2 = {3, 1};
+
+  std::cout &amp;lt;&amp;lt; std::boolalpha;
+  std::cout &amp;lt;&amp;lt; ((fs1 &amp;lt;=&amp;gt; fs1) == 0) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; (fs1 &amp;lt; fs2) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; (fs1 &amp;lt;= fs1) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; (fs1 &amp;gt; fs2) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; (fs2 &amp;gt;= fs1) &amp;lt;&amp;lt; std::endl;
+}
+```
+
+### 出力
+```
+true
+false
+true
+true
+false
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_set/op_constructor.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/flat_set/op_constructor.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_set/op_constructor.md b/reference/flat_set/flat_set/op_constructor.md
new file mode 100644
index 000000000..7a6fa5aaf
--- /dev/null
+++ b/reference/flat_set/flat_set/op_constructor.md
@@ -0,0 +1,267 @@
+# コンストラクタ
+* flat_set[meta header]
+* std[meta namespace]
+* flat_set[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+// ____要素数ゼロのflat_setを構築____
+
+flat_set() : flat_set(key_compare()) { } // (1) C++23
+
+explicit flat_set(const key_compare&amp;amp; comp) // (2) C++23
+  : c(), compare(comp) { }
+
+template&amp;lt;class Allocator&amp;gt;
+explicit flat_set(const Allocator&amp;amp; a); // (3) C++23
+
+template&amp;lt;class Allocator&amp;gt;
+flat_set(const key_compare&amp;amp; comp, const Allocator&amp;amp; a); // (4) C++23
+
+// ____アロケータを伴うコピー＆ムーブコンストラクタ____
+
+ template&amp;lt;class Allocator&amp;gt;
+ flat_set(const flat_set&amp;amp; x, const Allocator&amp;amp; a); // (5) C++26
+
+ template&amp;lt;class Allocator&amp;gt;
+ flat_set(flat_set&amp;amp;&amp;amp; x, const Allocator&amp;amp; a); // (6) C++26
+
+// ____container_typeから構築____
+
+flat_set(container_type cont,
+         const key_compare&amp;amp; comp = key_compare()); // (7) C++23
+
+template&amp;lt;class Allocator&amp;gt;
+flat_set(const container_type cont&amp;amp;,
+         const Allocator&amp;amp; a); // (8) C++23
+
+template&amp;lt;class Allocator&amp;gt;
+flat_set(const container_type&amp;amp; cont,
+         const key_compare&amp;amp; comp, const Allocator&amp;amp; a); // (9) C++23
+
+// ____container_type（ソート済み且つ重複なし）から構築____
+
+flat_set(sorted_unique_t, container_type cont,
+         const key_compare&amp;amp; comp = key_compare()); // (10) C++23
+
+template&amp;lt;class Allocator&amp;gt;
+flat_set(sorted_unique_t, const container_type&amp;amp; cont,
+         const Allocator&amp;amp; a); // (11) C++23
+
+template&amp;lt;class Allocator&amp;gt;
+flat_set(sorted_unique_t, const container_type&amp;amp; cont,
+         const key_compare&amp;amp; comp, const Allocator&amp;amp; a); // (12) C++23
+
+// ____イテレータから構築____
+
+template&amp;lt;class InputIterator&amp;gt;
+flat_set(InputIterator first, InputIterator last, const key_compare&amp;amp; comp = key_compare()) // (13) C++23
+  : c(), compare(comp) { insert(first, last); }
+
+template&amp;lt;class InputIterator, class Allocator&amp;gt;
+flat_set(InputIterator first, InputIterator last, const Allocator&amp;amp; a); // (14) C++23
+
+template&amp;lt;class InputIterator, class Allocator&amp;gt;
+flat_set(InputIterator first, InputIterator last,
+         const key_compare&amp;amp; comp, const Allocator&amp;amp; a); // (15) C++23
+
+// ____イテレータ（ソート済み且つ重複なし）から構築____
+
+template&amp;lt;class InputIterator&amp;gt;
+flat_set(sorted_unique_t s, InputIterator first, InputIterator last,
+         const key_compare&amp;amp; comp = key_compare()) // (16) C++23
+  : c(), compare(comp) { insert(s, first, last); }
+
+template&amp;lt;class InputIterator, class Allocator&amp;gt;
+flat_set(sorted_unique_t, InputIterator first, InputIterator last, const Allocator&amp;amp; a); // (17) C++23
+
+template&amp;lt;class InputIterator, class Allocator&amp;gt;
+flat_set(sorted_unique_t, InputIterator first, InputIterator last,
+         const key_compare&amp;amp; comp, const Allocator&amp;amp; a); // (18) C++23
+
+// ____Rangeから構築____
+
+template&amp;lt;container-compatible-range&amp;lt;value_type&amp;gt; R&amp;gt;
+flat_set(from_range_t fr, R&amp;amp;&amp;amp; rg) // (19) C++23
+  : flat_set(fr, forward&amp;lt;R&amp;gt;(rg), key_compare()) { }
+
+template&amp;lt;container-compatible-range&amp;lt;value_type&amp;gt; R&amp;gt;
+flat_set(from_range_t, R&amp;amp;&amp;amp; rg, const key_compare&amp;amp; comp) // (20) C++23
+  : flat_set(comp) { insert_range(forward&amp;lt;R&amp;gt;(rg)); }
+
+template&amp;lt;container-compatible-range&amp;lt;value_type&amp;gt; R, class Allocator&amp;gt;
+flat_set(from_range_t, R&amp;amp;&amp;amp; rg, const Allocator&amp;amp; a); // (21) C++23
+
+template&amp;lt;container-compatible-range&amp;lt;value_type&amp;gt; R, class Allocator&amp;gt;
+flat_set(from_range_t, R&amp;amp;&amp;amp; rg, const key_compare&amp;amp; comp, const Allocator&amp;amp; a); // (22) C++23
+
+// ____initializer_listから構築____
+
+flat_set(initializer_list&amp;lt;value_type&amp;gt; il, const key_compare&amp;amp; comp = key_compare()) // (23) C++23
+  : flat_set(il.begin(), il.end(), comp) { }
+
+template&amp;lt;class Allocator&amp;gt;
+flat_set(initializer_list&amp;lt;value_type&amp;gt; il, const Allocator&amp;amp; a); // (24) C++23
+
+template&amp;lt;class Allocator&amp;gt;
+flat_set(initializer_list&amp;lt;value_type&amp;gt; il, const key_compare&amp;amp; comp, const Allocator&amp;amp; a); // (25) C++23
+
+// ____initializer_list（ソート済み且つ重複なし）から構築____
+
+flat_set(sorted_unique_t s, initializer_list&amp;lt;value_type&amp;gt; il,
+         const key_compare&amp;amp; comp = key_compare()) // (26) C++23
+  : flat_set(s, il.begin(), il.end(), comp) { }
+
+template&amp;lt;class Allocator&amp;gt;
+flat_set(sorted_unique_t, initializer_list&amp;lt;value_type&amp;gt; il, const Allocator&amp;amp; a); // (27) C++23
+
+template&amp;lt;class Allocator&amp;gt;
+flat_set(sorted_unique_t, initializer_list&amp;lt;value_type&amp;gt; il,
+         const key_compare&amp;amp; comp, const Allocator&amp;amp; a); // (28) C++23
+```
+* initializer_list[link /reference/initializer_list/initializer_list.md]
+* from_range_t[link ../../ranges/from_range_t.md]
+* sorted_unique_t[link ../sorted_unique_t.md]
+* forward[link ../../utility/forward.md]
+* insert[link insert.md]
+* insert_range[link insert_range.md]
+
+
+## 概要
+`flat_set`オブジェクトを次に示す通りの要素で初期化する。
+
+
+## 効果
+- (1) : デフォルトコンストラクタ。デフォルトの `key_compare` を作成し、要素を持たない空の `flat_set` オブジェクトを構築する。
+- (2) : `key_compare` を受け取り、要素を持たない空の `flat_set` オブジェクトを構築する。
+- (3) : アロケータを受け取り、要素を持たない空の `flat_set` オブジェクトを構築する。
+- (4) : `key_compare` とアロケータを受け取り、要素を持たない空の `flat_set` オブジェクトを構築する。
+- (5) : アロケータを受け取り、`flat_set` オブジェクトをコピー構築する。
+- (6) : アロケータを受け取り、`flat_set` オブジェクトをムーブ構築する。
+- (7) : `container_type` から `flat_set` オブジェクトを構築する。構築に際し、`value_compare` に基づきソートされ、また、Key が重複している要素は削除される。
+- (8) : アロケータを受け取り、`container_type` から `flat_set` オブジェクトを構築する。構築に際し、`value_compare` に基づきソートされ、また、Key が重複している要素は削除される。
+- (9) : `key_compare` とアロケータを受け取り、`container_type` から `flat_set` オブジェクトを構築する。構築に際し、`value_compare` に基づきソートされ、また、Key が重複している要素は削除される。
+- (10) : `container_type`（ソート済み且つ重複なし）から `flat_set` オブジェクトを構築する。
+- (11) : アロケータを受け取り、`container_type`（ソート済み且つ重複なし）から `flat_set` オブジェクトを構築する。
+- (12) : `key_compare` とアロケータを受け取り、`container_type`（ソート済み且つ重複なし）から `flat_set` オブジェクトを構築する。
+- (13) : イテレータから `flat_set` オブジェクトを構築する。構築には [`insert()`](insert.md) が用いられる。
+- (14) : アロケータを受け取り、イテレータから `flat_set` オブジェクトを構築する。構築には [`insert()`](insert.md) が用いられる。
+- (15) : `key_compare` とアロケータを受け取り、イテレータから `flat_set` オブジェクトを構築する。構築には [`insert()`](insert.md) が用いられる。
+- (16) : イテレータ（ソート済み且つ重複なし）から `flat_set` オブジェクトを構築する。
+- (17) : アロケータを受け取り、イテレータ（ソート済み且つ重複なし）から `flat_set` オブジェクトを構築する。
+- (18) : `key_compare` とアロケータを受け取り、イテレータ（ソート済み且つ重複なし）から `flat_set` オブジェクトを構築する。
+- (19) : Rangeから `flat_set` オブジェクトを構築する。構築には [`insert_range()`](insert_range.md) が用いられる。
+- (20) : `key_compare` を受け取り、Rangeから `flat_set` オブジェクトを構築する。構築には [`insert_range()`](insert_range.md) が用いられる。
+- (21) : アロケータを受け取り、Rangeから `flat_set` オブジェクトを構築する。構築には [`insert_range()`](insert_range.md) が用いられる。
+- (22) : `key_compare` とアロケータを受け取り、Rangeから `flat_set` オブジェクトを構築する。構築には [`insert_range()`](insert_range.md) が用いられる。
+- (23) : initializer_listから `flat_set` オブジェクトを構築する。構築には [`insert()`](insert.md) が用いられる。
+- (24) : アロケータを受け取り、initializer_listから `flat_set` オブジェクトを構築する。構築には [`insert()`](insert.md) が用いられる。
+- (25) : `key_compare` とアロケータを受け取り、initializer_listから `flat_set` オブジェクトを構築する。構築には [`insert()`](insert.md) が用いられる。
+- (26) : initializer_list（ソート済み且つ重複なし）から `flat_set` オブジェクトを構築する。
+- (27) : アロケータを受け取り、initializer_list（ソート済み且つ重複なし）から `flat_set` オブジェクトを構築する。
+- (28) : `key_compare` とアロケータを受け取り、initializer_list（ソート済み且つ重複なし）から `flat_set` オブジェクトを構築する。
+
+
+## 計算量
+- (1)-(4) : 定数時間。
+- (5) : 引数 `x` のサイズに対して線形時間。
+- (6) : 引数 `x` の `container_type` をムーブした計算量と同じ。
+- (7)-(9) : 引数 `cont` のサイズを `N` とすると、`cont` がソート済みなら `N` に対して線形時間。そうでなければ `N log(N)`。
+- (10)-(12) : 引数 `cont` をムーブした計算量と同じ。
+- (13)-(15) : 引数 `first` と `last` の距離を `N` とすると、イテレータの値が `value_compare` に基づきソート済みなら `N` に対して線形時間。そうでなければ `N log(N)`。
+- (16)-(18) : 引数 `first` と `last` の距離を `N` とすると、`N` に対して線形時間。
+- (19)-(22) : [`ranges::distance`](../../iterator/ranges_distance.md)`(rg)` を `N` とすると、要素の値が `value_compare` に基づきソート済みなら `N` に対して線形時間。そうでなければ `N log(N)`。
+- (23)-(25) : 引数 `il` のサイズを `N` とすると、イテレータの値が `value_compare` に基づきソート済みなら `N` に対して線形時間。そうでなければ `N log(N)`。
+- (26)-(28) : 引数 `il` のサイズを `N` とすると、`N` に対して線形時間。
+
+
+## 備考
+- 通常の（アロケータを指定しない）コピーコンストラクタとムーブコンストラクタは自動生成される。
+- (7)-(9), (13)-(15), (23)-(25) において、Key が重複している要素は削除されるが、どの要素が削除されるかは定められていない。
+- (3)-(6), (8), (9), (11), (12), (14), (15), (17), (18), (21), (22), (24), (25), (27), (28) は引数としてアロケータを受け取るが、引数のアロケータに対して [`uses_allocator`](uses_allocator.md) が `false` であれば、この引数は無視される。
+
+
+## 例
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;string&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+void print(const std::flat_set&amp;lt;std::string&amp;gt;&amp;amp; fs)
+{
+  std::cout &amp;lt;&amp;lt; &amp;#34;{&amp;#34; &amp;lt;&amp;lt; std::endl;
+  for (const auto&amp;amp; k: fs) {
+    std::cout &amp;lt;&amp;lt; &amp;#34;  &amp;#34; &amp;lt;&amp;lt; k &amp;lt;&amp;lt; &amp;#34;,&amp;#34; &amp;lt;&amp;lt; std::endl;
+  }
+  std::cout &amp;lt;&amp;lt; &amp;#34;}&amp;#34; &amp;lt;&amp;lt; std::endl;
+}
+
+int main()
+{
+  std::cout &amp;lt;&amp;lt; &amp;#34;(1)&amp;#34; &amp;lt;&amp;lt; std::endl;
+  {
+    std::flat_set&amp;lt;std::string&amp;gt; fs;
+    print(fs);
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+
+  std::cout &amp;lt;&amp;lt; &amp;#34;(5)&amp;#34; &amp;lt;&amp;lt; std::endl;
+  {
+    std::vector&amp;lt;std::string&amp;gt; strs = {&amp;#34;Alice&amp;#34;, &amp;#34;Bob&amp;#34;, &amp;#34;Carol&amp;#34;};
+
+    std::flat_set&amp;lt;std::string&amp;gt; fs(strs);
+    print(fs);
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+
+  std::cout &amp;lt;&amp;lt; &amp;#34;(23)&amp;#34; &amp;lt;&amp;lt; std::endl;
+  {
+    std::initializer_list&amp;lt;std::string&amp;gt; elems = {&amp;#34;Alice&amp;#34;, &amp;#34;Bob&amp;#34;, &amp;#34;Carol&amp;#34;};
+
+    std::flat_set&amp;lt;std::string&amp;gt; fs(elems);
+    print(fs);
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+}
+```
+
+### 出力
+```
+(1)
+{
+}
+
+(5)
+{
+  Alice,
+  Bob,
+  Carol,
+}
+
+(23)
+{
+  Alice,
+  Bob,
+  Carol,
+}
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+
+| 名前 | 説明 |
+|---------------------------------------|--------------------------------------------|
+| [`uses_allocator`](uses_allocator.md) | 指定されたアロケータと合致するかをチェックする |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_set/op_equal.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/flat_set/op_equal.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_set/op_equal.md b/reference/flat_set/flat_set/op_equal.md
new file mode 100644
index 000000000..4f7786a38
--- /dev/null
+++ b/reference/flat_set/flat_set/op_equal.md
@@ -0,0 +1,70 @@
+# operator==
+* flat_set[meta header]
+* std[meta namespace]
+* function template[meta id-type]
+* flat_set[meta class]
+
+```cpp
+friend bool operator==(const flat_set&amp;amp; x, const flat_set&amp;amp; y);
+```
+
+## 概要
+`x` が `y` と等しいかどうかの判定を行う。
+
+
+## 戻り値
+以下と等価：
+
+```cpp
+return equal(x.begin(), x.end(), y.begin(), y.end());
+```
+* equal[link /reference/algorithm/equal.md]
+* begin()[link begin.md]
+* end()[link end.md]
+
+
+## 計算量
+[`size()`](size.md) に対して線形時間。ただし、`x`と`y`のサイズが異なる場合は定数時間。
+
+
+## 備考
+- この演算子により、以下の演算子が使用可能になる：
+    - `operator!=`
+
+
+## 例
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  std::flat_set&amp;lt;int&amp;gt; fs1 = {3, 1, 4};
+
+  std::flat_set&amp;lt;int&amp;gt; fs2 = {3, 1};
+
+  std::cout &amp;lt;&amp;lt; std::boolalpha;
+  std::cout &amp;lt;&amp;lt; (fs1 == fs1) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; (fs1 == fs2) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; (fs1 != fs1) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; (fs1 != fs2) &amp;lt;&amp;lt; std::endl;
+}
+```
+
+### 出力
+```
+true
+false
+false
+true
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rbegin -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_set/rbegin.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/flat_set/rbegin.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_set/rbegin.md b/reference/flat_set/flat_set/rbegin.md
new file mode 100644
index 000000000..7be2403e2
--- /dev/null
+++ b/reference/flat_set/flat_set/rbegin.md
@@ -0,0 +1,74 @@
+# rbegin
+* flat_set[meta header]
+* std[meta namespace]
+* flat_set[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+reverse_iterator rbegin() noexcept;
+const_reverse_iterator rbegin() const noexcept;
+```
+
+## 概要
+コンテナ内の末尾を指す逆イテレータを取得する。
+
+内部的に、このコンテナは各要素をキーの値に従って下位から上位へと並べており、従って `rbegin()` は最上位のキーにあたる値を指すイテレータを返す。 
+`rbegin()` は [`end()`](end.md) と同じ要素を指すわけではなく、その前の要素を指すことに注意。
+
+
+## 戻り値
+反転したシーケンスの先頭を指す逆イテレータ。 
+`reverse_iterator` と `const_reverse_iterator` はともにメンバ型である。このクラステンプレートにおいて、これらは逆ランダムアクセスイテレータであり、それぞれ `reverse_iterator&amp;lt;iterator&amp;gt;`, `reverse_iterator&amp;lt;const_iterator&amp;gt;` と定義される。
+
+
+## 計算量
+定数時間。
+
+
+## 例
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  std::flat_set&amp;lt;int&amp;gt; fs = {3, 1, 4};
+
+  for (auto i = fs.rbegin(); i != fs.rend(); ++i) {
+    std::cout &amp;lt;&amp;lt; *i &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* rbegin()[color ff0000]
+* fs.rend()[link rend.md]
+
+### 出力
+```
+4
+3
+1
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+
+| 名前 | 説明 |
+|-----------------------------------|-----------------------------|
+| [`flat_set::begin`](begin.md)     | 先頭を指すイテレータを取得する |
+| [`flat_set::end`](end.md)         | 末尾の次を指すイテレータを取得する |
+| [`flat_set::cbegin`](cbegin.md)   | 先頭を指すconstイテレータを取得する |
+| [`flat_set::cend`](cend.md)       | 末尾の次を指すconstイテレータを取得する |
+| [`flat_set::rend`](rend.md)       | 先頭の前を指す逆イテレータを取得する |
+| [`flat_set::crbegin`](crbegin.md) | 末尾を指す逆constイテレータを取得する |
+| [`flat_set::crend`](crend.md)     | 先頭の前を指す逆constイテレータを取得する |
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rend -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_set/rend.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/flat_set/rend.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_set/rend.md b/reference/flat_set/flat_set/rend.md
new file mode 100644
index 000000000..5980906ec
--- /dev/null
+++ b/reference/flat_set/flat_set/rend.md
@@ -0,0 +1,66 @@
+# rend
+* flat_set[meta header]
+* std[meta namespace]
+* flat_set[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+reverse_iterator rend() noexcept;
+const_reverse_iterator rend() const noexcept;
+```
+
+## 概要
+コンテナの先頭要素の前（これは反転シーケンスの末尾にあたる）を指す逆イテレータを取得する。 
+`rend()` は [`begin()`](begin.md) と同じ要素を指すわけではなく、その前の要素を指すことに注意。
+
+## 戻り値
+反転シーケンスの終端を指す逆イテレータ。 
+`reverse_iterator` と `const_reverse_iterator` はメンバ型である。このクラステンプレートにおいて、これらは逆ランダムアクセスイテレータであり、それぞれ `reverse_iterator&amp;lt;iterator&amp;gt;`, `reverse_iterator&amp;lt;const_iterator&amp;gt;` と定義される。
+
+## 例
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  std::flat_set&amp;lt;int&amp;gt; fs = {3, 1, 4};
+
+  for (auto i = fs.rbegin(); i != fs.rend(); ++i) {
+    std::cout &amp;lt;&amp;lt; *i &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* rend()[color ff0000]
+* fs.rbegin()[link rbegin.md]
+
+### 出力
+```
+4
+3
+1
+```
+
+## バージョン
+### 言語
+- C++23
+
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+
+| 名前 | 説明　|
+|-----------------------------------|-----------------------------|
+| [`flat_set::begin`](begin.md)     | 先頭を指すイテレータを取得する |
+| [`flat_set::end`](end.md)         | 末尾の次を指すイテレータを取得する |
+| [`flat_set::cbegin`](cbegin.md)   | 先頭を指すconstイテレータを取得する |
+| [`flat_set::cend`](cend.md)       | 末尾の次を指すconstイテレータを取得する |
+| [`flat_set::rbegin`](rbegin.md)   | 末尾を指す逆イテレータを取得する |
+| [`flat_set::crbegin`](crbegin.md) | 末尾を指す逆constイテレータを取得する |
+| [`flat_set::crend`](crend.md)     | 先頭の前を指す逆constイテレータを取得する |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>replace -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_set/replace.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/flat_set/replace.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_set/replace.md b/reference/flat_set/flat_set/replace.md
new file mode 100644
index 000000000..6f992f913
--- /dev/null
+++ b/reference/flat_set/flat_set/replace.md
@@ -0,0 +1,93 @@
+# replace
+* flat_set[meta header]
+* std[meta namespace]
+* flat_set[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+void replace(container_type&amp;amp;&amp;amp; cont);  // C++23
+```
+
+## 概要
+値のコンテナを置き換える。
+
+
+## 効果
+`flat_set` クラスが内部で保持している `container_type` を `c` とすると、以下と等価。
+    ```cpp
+    c = std::move(cont);
+    ```
+    * std::move[link /reference/utility/move.md]
+
+
+## 事前条件
+- `cont` が `key_compare` に基づいてソートされていること。
+- `cont` に重複する要素がないこと。
+
+
+## 計算量
+`cont` をムーブした計算量と同じ。
+
+
+## 例
+```cpp example
+#include &amp;lt;algorithm&amp;gt;
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;string&amp;gt;
+#include &amp;lt;utility&amp;gt;
+
+int main()
+{
+  std::vector&amp;lt;std::string&amp;gt; keys = {&amp;#34;Alice&amp;#34;, &amp;#34;Bob&amp;#34;, &amp;#34;Carol&amp;#34;};
+
+  // 事前条件の確認
+  assert(std::is_sorted(keys.begin(), keys.end()));
+  assert(std::adjacent_find(keys.begin(), keys.end()) == keys.end());
+
+  std::flat_set&amp;lt;std::string&amp;gt; fs;
+
+  std::cout &amp;lt;&amp;lt; fs.size() &amp;lt;&amp;lt; std::endl;
+
+  fs.replace(std::move(keys));
+
+  std::cout &amp;lt;&amp;lt; fs.size() &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::endl;
+
+  std::cout &amp;lt;&amp;lt; &amp;#34;{&amp;#34; &amp;lt;&amp;lt; std::endl;
+  for (const std::string&amp;amp; i: fs) {
+    std::cout &amp;lt;&amp;lt; &amp;#34;  &amp;#34; &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &amp;#34;,&amp;#34; &amp;lt;&amp;lt; std::endl;
+  }
+  std::cout &amp;lt;&amp;lt; &amp;#34;}&amp;#34; &amp;lt;&amp;lt; std::endl;
+}
+```
+* replace[color ff0000]
+* fs.size()[link size.md]
+* std::is_sorted[link /reference/algorithm/is_sorted.md]
+* std::adjacent_find[link /reference/algorithm/adjacent_find.md]
+* std::move[link /reference/utility/move.md]
+
+### 出力
+```
+0
+3
+
+{
+  Alice,
+  Bob,
+  Carol,
+}
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>size -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_set/size.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/flat_set/size.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_set/size.md b/reference/flat_set/flat_set/size.md
new file mode 100644
index 000000000..43cd684b5
--- /dev/null
+++ b/reference/flat_set/flat_set/size.md
@@ -0,0 +1,69 @@
+# size
+* flat_set[meta header]
+* std[meta namespace]
+* flat_set[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+size_type size() const noexcept;
+```
+
+## 概要
+コンテナ内の要素の数を返す。
+
+
+## 戻り値
+`flat_set` クラスが内部で保持している `container_type` を `c` とすると、以下を返す。
+
+```cpp
+return c.size();
+```
+* size()[link /reference/vector/vector/size.md]
+
+
+## 計算量
+定数時間。
+
+
+## 例
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main ()
+{
+  std::flat_set&amp;lt;int&amp;gt; fs;
+
+  std::cout &amp;lt;&amp;lt; fs.size() &amp;lt;&amp;lt; std::endl;
+
+  fs.insert(1);
+  fs.insert(2);
+  fs.insert(3);
+  fs.insert(1);
+
+  std::cout &amp;lt;&amp;lt; fs.size() &amp;lt;&amp;lt; std::endl;
+}
+```
+* size()[color ff0000]
+* fs.insert[link insert.md]
+
+### 出力
+```
+0
+3
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`empty()`](empty.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_set/swap.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/flat_set/swap.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_set/swap.md b/reference/flat_set/flat_set/swap.md
new file mode 100644
index 000000000..c0971d90f
--- /dev/null
+++ b/reference/flat_set/flat_set/swap.md
@@ -0,0 +1,75 @@
+# swap
+* flat_set[meta header]
+* std[meta namespace]
+* flat_set[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+void swap(flat_set&amp;amp; y) noexcept; // (1) C++23
+```
+
+## 概要
+コンテナ内のコンテンツを、同じ型の要素を保持する他の `flat_sest` オブジェクトである `y` 内のコンテンツと交換する。
+
+このメンバ関数の呼び出しの後、呼び出し前にコンテナ内にあった要素は `y` へ、`y` 内にあった要素は `*this` へ移る。
+
+
+## 計算量
+定数時間。
+
+
+## 例
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+template &amp;lt;class Set&amp;gt;
+void print(const char* name, const Set&amp;amp; s)
+{
+  std::cout &amp;lt;&amp;lt; name &amp;lt;&amp;lt; &amp;#34; : {&amp;#34;;
+
+  bool first = true;
+
+  for (const auto&amp;amp; x : s) {
+    if (first) {
+      first = false;
+    }
+    else {
+      std::cout &amp;lt;&amp;lt; &amp;#34;, &amp;#34;;
+    }
+    std::cout &amp;lt;&amp;lt; x;
+  }
+  std::cout &amp;lt;&amp;lt; &amp;#34;}&amp;#34; &amp;lt;&amp;lt; std::endl;
+}
+
+int main()
+{
+  std::flat_set&amp;lt;int&amp;gt; fs1 = {10, 20, 30};
+
+  std::flat_set&amp;lt;int&amp;gt; fs2 = {5, 15};
+
+  // fs1とfs2を入れ替える
+  fs1.swap(fs2);
+
+  print(&amp;#34;fs1&amp;#34;, fs1);
+  print(&amp;#34;fs2&amp;#34;, fs2);
+}
+```
+* swap[color ff0000]
+
+### 出力
+```
+fs1 : {5, 15}
+fs2 : {10, 20, 30}
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>upper_bound -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_set/upper_bound.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/flat_set/upper_bound.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_set/upper_bound.md b/reference/flat_set/flat_set/upper_bound.md
new file mode 100644
index 000000000..aaac5c6f4
--- /dev/null
+++ b/reference/flat_set/flat_set/upper_bound.md
@@ -0,0 +1,121 @@
+# upper_bound
+* flat_set[meta header]
+* std[meta namespace]
+* flat_set[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+iterator upper_bound(const key_type&amp;amp; x);             // (1) C++23
+
+template &amp;lt;class K&amp;gt;
+iterator upper_bound(const K&amp;amp; x);                    // (2) C++23
+
+const_iterator upper_bound(const key_type&amp;amp; x) const; // (3) C++23
+
+template &amp;lt;class K&amp;gt;
+const_iterator upper_bound(const K&amp;amp; x) const;        // (4) C++23
+```
+
+## 概要
+`x` より大きいキーを持つコンテナ内の最初の要素を指すイテレータを返す（コンテナの比較オブジェクトを使う）。
+
+[`lower_bound()`](lower_bound.md) と異なり、このメンバ関数は `x` と等しいときは要素へのイテレータを返さず、それは大きい場合にのみ要素へのイテレータを返す。
+
+内部的に、`flat_set` コンテナ内の全ての要素は常に比較オブジェクトで定義された基準に従って並ぶため、この関数が返す値に続く全ての要素は `x` より大きいことに注意。
+
+- (1) : `key_type`型のキーを受け取り、そのキーより大きい最初の要素へのイテレータを取得する。
+- (2) : `key_type`と比較可能な`K`型のキーを受け取り、そのキーより大きい最初の要素へのイテレータを取得する。
+- (3) : `const`な`*this`オブジェクトにおいて、`key_type`型のキーを受け取り、そのキーより大きい最初の要素へのイテレータを取得する。
+- (4) : `const`な`*this`オブジェクトにおいて、`key_type`と比較可能な`K`型のキーを受け取り、そのキーより大きい最初の要素へのイテレータを取得する。
+
+
+## 戻り値
+- (1), (3) : キー`x`より大きい最初の要素へのイテレータを返す。そのような要素がない場合は、[`end()`](end.md)を返す。
+- (2), (4) : `key_compare`型の関数オブジェクトを`c`、コンテナ内の各要素が持つキーを`k`として、キーが小さくないか判定する式`c(x, k)`が`true`となる要素へのイテレータを返す。そのような要素がない場合は、[`end()`](end.md) を返す。
+
+
+## 計算量
+[`size()`](size.md) について対数時間。
+
+
+## 備考
+- (2), (4) : この関数がオーバーロード解決に参加する条件は、[`find()`](find.md)メンバ関数の備考欄を参照。
+
+
+## 例
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+int main()
+{
+  // (1)
+  {
+    std::flat_set&amp;lt;std::string&amp;gt; fs = {
+      &amp;#34;Alice&amp;#34;, &amp;#34;Bob&amp;#34;, &amp;#34;Carol&amp;#34;, &amp;#34;David&amp;#34;
+    };
+
+    // Bob以上David以下の範囲を取得
+    decltype(fs)::iterator it = fs.lower_bound(&amp;#34;Bob&amp;#34;);
+    decltype(fs)::iterator last = fs.upper_bound(&amp;#34;David&amp;#34;);
+
+    while (it != last) {
+      std::cout &amp;lt;&amp;lt; *it &amp;lt;&amp;lt; std::endl;
+      ++it;
+    }
+  }
+
+  std::cout &amp;lt;&amp;lt; std::endl;
+
+  // (2)
+  {
+    std::flat_set&amp;lt;std::string, std::less&amp;lt;&amp;gt;&amp;gt; fs = {
+      &amp;#34;Alice&amp;#34;, &amp;#34;Bob&amp;#34;, &amp;#34;Carol&amp;#34;, &amp;#34;David&amp;#34;
+    };
+
+    // std::lessのvoidに対する特殊化を使用することで、
+    // 文字列リテラルをlower_bound()関数の引数として渡した際に、
+    // std::string型の一時オブジェクトが生成されない。
+    decltype(fs)::iterator it = fs.lower_bound(&amp;#34;Bob&amp;#34;);
+    decltype(fs)::iterator last = fs.upper_bound(&amp;#34;David&amp;#34;);
+
+    while (it != last) {
+      std::cout &amp;lt;&amp;lt; *it &amp;lt;&amp;lt; std::endl;
+      ++it;
+    }
+  }
+}
+```
+* upper_bound[color ff0000]
+* fs.lower_bound[link lower_bound.md]
+* std::less[link /reference/functional/less.md]
+
+### 出力
+```
+Bob
+Carol
+David
+
+Bob
+Carol
+David
+```
+
+
+## バージョン
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+
+| 名前 | 説明 |
+|-------------------------------------------|----------------------------------------------------------|
+| [`flat_set::lower_bound`](lower_bound.md) | 指定した値よりも小さくない最初の要素へのイテレータを返す |
+| [`flat_set::equal_range`](equal_range.md) | 指定したキーにマッチする要素範囲を返す                   |
+| [`flat_set::find`](find.md)               | 指定したキーで要素を探す                                 |
+| [`flat_set::count`](count.md)             | 指定したキーにマッチする要素の数を返す                   |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uses_allocator -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_set/uses_allocator.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/flat_set/uses_allocator.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_set/uses_allocator.md b/reference/flat_set/flat_set/uses_allocator.md
new file mode 100644
index 000000000..582575ff3
--- /dev/null
+++ b/reference/flat_set/flat_set/uses_allocator.md
@@ -0,0 +1,55 @@
+# uses_allocator
+* flat_set[meta header]
+* std[meta namespace]
+* class template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;class Key, class T, class Compare, class KeyContainer,
+            class Alloc&amp;gt;
+  struct uses_allocator&amp;lt;flat_set&amp;lt;Key, T, Compare, KeyContainer&amp;gt;,
+                        Alloc&amp;gt;
+    : bool_constant&amp;lt;uses_allocator_v&amp;lt;KeyContainer, Alloc&amp;gt;&amp;gt; { };
+}
+```
+* bool_constant[link /reference/type_traits/bool_constant.md]
+
+## 概要
+`uses_allocator`の、`flat_set`に対する特殊化。
+
+アロケータを指定する`flat_set`の[`コンストラクタ`](op_constructor.md)において、指定されたアロケータと、`KeyContainer`のアロケータが合致するかをチェックするのに使われる。
+
+
+## 例
+```cpp
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  using fs_t = std::flat_set&amp;lt;int&amp;gt;;
+
+  std::cout &amp;lt;&amp;lt; std::uses_allocator&amp;lt;fs_t, std::allocator&amp;lt;int&amp;gt;&amp;gt;::value &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::uses_allocator[color ff0000]
+* std::allocator[link /reference/memory/allocator.md]
+
+### 出力
+```cpp
+1
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>value_comp -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_set/value_comp.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/flat_set/value_comp.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_set/value_comp.md b/reference/flat_set/flat_set/value_comp.md
new file mode 100644
index 000000000..510561792
--- /dev/null
+++ b/reference/flat_set/flat_set/value_comp.md
@@ -0,0 +1,65 @@
+# value_comp
+* flat_set[meta header]
+* std[meta namespace]
+* flat_set[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+value_compare value_comp() const; // C++23
+```
+
+
+## 概要
+コンテナに関連づけられた要素比較用の関数オブジェクトを返す。これはコンテナ内の二つの要素を比較するために利用できる。
+これは同じ型の 2 つの引数をとり、[狭義の弱順序](/reference/algorithm.md#strict-weak-ordering)に従って一つ目の引数が二つ目の引数の前になる場合に `true`、そうでない場合に `false` を返す。
+
+
+## 戻り値
+要素比較用の関数オブジェクト。
+`value_compare` はメンバ型であり、`key_compare` と同じく、テンプレートパラメータ `Compare` の別名である。
+
+
+## 計算量
+定数時間。
+
+
+## 例
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  std::flat_set&amp;lt;int&amp;gt; s;
+  std::flat_set&amp;lt;int&amp;gt;::value_compare comp = s.value_comp();
+
+  std::cout &amp;lt;&amp;lt; comp(1, 2) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; comp(3, 2) &amp;lt;&amp;lt; std::endl;
+}
+```
+* value_comp()[color ff0000]
+
+### 出力
+```
+1
+0
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+
+| 名前                                | 説明                                                     |
+|-------------------------------------|----------------------------------------------------------|
+| [`key_comp`](key_comp.md)           | キー比較用の関数オブジェクトを取得する                      |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sorted_equivalent_t -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/sorted_equivalent_t.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/sorted_equivalent_t.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/sorted_equivalent_t.md b/reference/flat_set/sorted_equivalent_t.md
new file mode 100644
index 000000000..17b8ff068
--- /dev/null
+++ b/reference/flat_set/sorted_equivalent_t.md
@@ -0,0 +1,64 @@
+# sorted_equivalent_t
+* flat_set[meta header]
+* std[meta namespace]
+* class[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+namespace std {
+  struct sorted_equivalent_t { explicit sorted_equivalent_t() = default; };
+  inline constexpr sorted_equivalent_t sorted_equivalent{};
+}
+```
+
+## 概要
+`sorted_equivalent_t`は、[`flat_multiset`](flat_multiset.md)コンテナに挿入するシーケンスがソート済みであること（重複は許可される）を示すためのタグ型および値である。
+
+このクラス自体は空であり、オーバーロード解決のためにのみ使用される。
+
+
+## 例
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  std::flat_multiset&amp;lt;int&amp;gt; fs = {3};
+
+  std::flat_multiset&amp;lt;int&amp;gt; fs2 = {5, 15};
+
+  // 挿入するシーケンスがソート済みであることがわかっている場合、
+  // sorted_equivalentを指定した方が高速になる
+  fs.insert(std::sorted_equivalent, fs2.begin(), fs2.end());
+
+  for (int i : fs) {
+    std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* std::sorted_equivalent[color ff0000]
+* insert[link flat_multiset/insert.md]
+* begin()[link flat_multiset/begin.md]
+* end()[link flat_multiset/end.md]
+
+### 出力
+```
+3
+5
+15
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`std::flat_multiset`](flat_multiset.md)
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sorted_unique_t -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/sorted_unique_t.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/flat_set/sorted_unique_t.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/sorted_unique_t.md b/reference/flat_set/sorted_unique_t.md
new file mode 100644
index 000000000..70cea5a3a
--- /dev/null
+++ b/reference/flat_set/sorted_unique_t.md
@@ -0,0 +1,64 @@
+# sorted_unique_t
+* flat_set[meta header]
+* std[meta namespace]
+* class[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+namespace std {
+  struct sorted_unique_t { explicit sorted_unique_t() = default; };
+  inline constexpr sorted_unique_t sorted_unique{};
+}
+```
+
+## 概要
+`sorted_unique_t`は、[`flat_set`](flat_set.md)コンテナに挿入するシーケンスがソート済みかつ重複要素がないことを示すためのタグ型および値である。
+
+このクラス自体は空であり、オーバーロード解決のためにのみ使用される。
+
+
+## 例
+```cpp example
+#include &amp;lt;flat_set&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  std::flat_set&amp;lt;int&amp;gt; fs = {3};
+
+  std::flat_set&amp;lt;int&amp;gt; fs2 = {5, 15};
+
+  // 挿入するシーケンスがソート済みかつ重複要素がないことがわかっている場合、
+  // sorted_uniqueを指定した方が高速になる
+  fs.insert(std::sorted_unique, fs2.begin(), fs2.end());
+
+  for (int i : fs) {
+    std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* std::sorted_unique[color ff0000]
+* insert[link flat_set/insert.md]
+* begin()[link flat_set/begin.md]
+* end()[link flat_set/end.md]
+
+### 出力
+```
+3
+5
+15
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`std::flat_set`](flat_set.md)
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>format -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/format/format.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/format/format.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/format.md b/reference/format/format.md
index a26f023b6..45fbbdb7e 100644
--- a/reference/format/format.md
+++ b/reference/format/format.md
@@ -559,7 +559,7 @@ int main()
 * std::stack[link /reference/stack/stack.md]
 * st.push[link /reference/stack/stack/push.md]
 * std::flat_map[link /reference/flat_map/flat_map.md]
-* std::flat_set[link /reference/flat_map/flat_set.md.nolink]
+* std::flat_set[link /reference/flat_map/flat_set.md]
 
 #### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>range-default-formatter -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/format/range-default-formatter.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/format/range-default-formatter.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/range-default-formatter.md b/reference/format/range-default-formatter.md
index 45f154b17..5b6a59c4f 100644
--- a/reference/format/range-default-formatter.md
+++ b/reference/format/range-default-formatter.md
@@ -41,7 +41,7 @@ namespace std {
 - (1) : プライマリテンプレート。宣言のみ
 - (2) : Range・シーケンスコンテナに対する特殊化。デバッグ出力の有効化と、`[a, b, c]`形式の出力を行う
 - (3) : [`std::map`](/reference/map/map.md)や[`std::flat_map`](/reference/flat_map/flat_map.md)などの連想コンテナに対する特殊化。デバッグ出力の有効化と、`{1: a, 2: b}`形式での出力を行う
-- (4) : [`std::set`](/reference/set/set.md)や[`std::flat_set`](/reference/flat_set/flat_set.md.nolink)などの集合コンテナに対する特殊化。デバッグ出力の有効化と、`{a, b, c}`形式の出力を行う
+- (4) : [`std::set`](/reference/set/set.md)や[`std::flat_set`](/reference/flat_set/flat_set.md)などの集合コンテナに対する特殊化。デバッグ出力の有効化と、`{a, b, c}`形式の出力を行う
 - (5) : 文字列形式の出力を行うRangeに対する特殊化。Rangeを文字列として出力し、[`range_format::debug_string`](range_format.md)指定であればデバッグ文字列として出力する
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>range_format -- create flat_set folder and files (#1079)</title>
      <link href="https://cpprefjp.github.io/reference/format/range_format.html"/>
      <id>c135b44e4972135dd7bcfc0bd0434d10f0da5bbb:reference/format/range_format.md</id>
      <updated>2025-02-07T02:10:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/range_format.md b/reference/format/range_format.md
index 799c4d1f0..3342d6f78 100644
--- a/reference/format/range_format.md
+++ b/reference/format/range_format.md
@@ -25,7 +25,7 @@ Rangeの書式種別を表す列挙型。
 |----------------|------|
 | `disabled`     | 書式化ができないRangeであることを表す値 |
 | `map`          | [`std::map`](/reference/map/map.md)や[`std::flat_map`](/reference/flat_map/flat_map.md)向けの書式。`{k1: v1, k2: v2}` |
-| `set`          | [`std::set`](/reference/set/set.md)や[`std::flat_set`](/reference/flat_set/flat_set.md.nolink)向けの書式。`{v1, v2}` |
+| `set`          | [`std::set`](/reference/set/set.md)や[`std::flat_set`](/reference/flat_set/flat_set.md)向けの書式。`{v1, v2}` |
 | `sequence`     | [`std::vector`](/reference/vector/vector.md)や[`std::array`](/reference/array/array.md)向けの書式。`[v1, v2]`|
 | `string`       | 文字列向けの書式。`abc` |
 | `debug_string` | デバッグ文字列向けの書式。`\nabc` |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
</feed>
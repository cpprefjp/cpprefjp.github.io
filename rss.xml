<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-08-23T10:11:31.190385</updated>
  <id>81be9c5c-2d56-4127-97d4-e669e90d862b</id>

  
    <entry>
      <title>is_constant_evaluated -- is_constant_evaluated : C++23 if constevalへのリンクを追加</title>
      <link href="https://cpprefjp.github.io/reference/type_traits/is_constant_evaluated.html"/>
      <id>a2837c4112998a57257d08838c7e4412876c5826:reference/type_traits/is_constant_evaluated.md</id>
      <updated>2023-08-23T19:07:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/type_traits/is_constant_evaluated.md b/reference/type_traits/is_constant_evaluated.md
index 1cd386e9a..09482f82d 100644
--- a/reference/type_traits/is_constant_evaluated.md
+++ b/reference/type_traits/is_constant_evaluated.md
@@ -134,6 +134,7 @@ int main()
 
 ## 関連項目
 - [C++20 コンパイル時初期化を強制する`constinit`キーワードを追加](/lang/cpp20/constinit.md)
+- [C++23 `if consteval`](/lang/cpp23/if_consteval.md.nolink)
 
 ## 参照
 - [P0595R2 `std::is_constant_evaluated()`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0595r2.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ranges -- const_iterator_t/const_sentinel_t追加 #1084</title>
      <link href="https://cpprefjp.github.io/reference/ranges.html"/>
      <id>a3c830c711a9f273eb85e397f730bc40063289c8:reference/ranges.md</id>
      <updated>2023-08-23T16:10:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges.md b/reference/ranges.md
index 44737cf70..adda7dbb9 100644
--- a/reference/ranges.md
+++ b/reference/ranges.md
@@ -65,8 +65,8 @@ C++20では関数によるカスタマイゼーションポイントの問題点
 |------------------------------------------------------------------|------------------------------------------------|----------------|
 | [`iterator_t`](ranges/iterator_t.md)                             | イテレータ型を取得する (alias template)        | C++20          |
 | [`sentinel_t`](ranges/sentinel_t.md)                             | 番兵型を取得する (alias template)              | C++20          |
-| [`const_iterator_t`](ranges/const_iterator_t.md.nolink)          | 定数イテレータ型を取得する (alias template)        | C++23          |
-| [`const_sentinel_t`](ranges/const_sentinel_t.md.nolink)          | 定数番兵型を取得する (alias template)        | C++23          |
+| [`const_iterator_t`](ranges/const_iterator_t.md)                 | 定数イテレータ型を取得する (alias template)        | C++23          |
+| [`const_sentinel_t`](ranges/const_sentinel_t.md)          | 定数番兵型を取得する (alias template)        | C++23          |
 | [`range_difference_t`](ranges/range_difference_t.md)             | イテレータの差の型を取得する (alias template)  | C++20          |
 | [`range_size_t`](ranges/range_size_t.md)                         | サイズの型を取得する(alias template)           | C++20          |
 | [`range_value_t`](ranges/range_value_t.md)                       | 要素の型を取得する (alias template)            | C++20          |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>const_iterator_t -- const_iterator_t/const_sentinel_t追加 #1084</title>
      <link href="https://cpprefjp.github.io/reference/ranges/const_iterator_t.html"/>
      <id>a3c830c711a9f273eb85e397f730bc40063289c8:reference/ranges/const_iterator_t.md</id>
      <updated>2023-08-23T16:10:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/const_iterator_t.md b/reference/ranges/const_iterator_t.md
new file mode 100644
index 000000000..d2ecc3fd7
--- /dev/null
+++ b/reference/ranges/const_iterator_t.md
@@ -0,0 +1,49 @@
+# const_iterator_t
+* ranges[meta header]
+* std::ranges[meta namespace]
+* type-alias[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;range R&amp;gt;
+  using const_iterator_t = const_iterator&amp;lt;iterator_t&amp;lt;R&amp;gt;&amp;gt;;
+}
+```
+* range[link range.md]
+* const_iterator[link /reference/iterator/const_iterator.md]
+* iterator_t[link iterator_t.md]
+
+## 概要
+
+任意のRange型`R`の定数イテレータの型を取得する。
+
+## 例
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  static_assert(std::same_as&amp;lt;std::ranges::const_iterator_t&amp;lt;      std::vector&amp;lt;int&amp;gt;&amp;gt;, std::basic_const_iterator&amp;lt;std::vector&amp;lt;int&amp;gt;::iterator&amp;gt;&amp;gt;);
+  static_assert(std::same_as&amp;lt;std::ranges::const_iterator_t&amp;lt;const std::vector&amp;lt;int&amp;gt;&amp;gt;, std::vector&amp;lt;int&amp;gt;::const_iterator&amp;gt;);
+}
+```
+* std::ranges::const_iterator_t[color ff0000]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13.1
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 6
+
+## 参照
+
+- [P2278R4 `cbegin` should always return a constant iterator](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2278r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>const_sentinel_t -- const_iterator_t/const_sentinel_t追加 #1084</title>
      <link href="https://cpprefjp.github.io/reference/ranges/const_sentinel_t.html"/>
      <id>a3c830c711a9f273eb85e397f730bc40063289c8:reference/ranges/const_sentinel_t.md</id>
      <updated>2023-08-23T16:10:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/const_sentinel_t.md b/reference/ranges/const_sentinel_t.md
new file mode 100644
index 000000000..086fe5e1b
--- /dev/null
+++ b/reference/ranges/const_sentinel_t.md
@@ -0,0 +1,53 @@
+# const_sentinel_t
+* ranges[meta header]
+* std::ranges[meta namespace]
+* type-alias[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;range R&amp;gt;
+  using const_sentinel_t = const_sentinel&amp;lt;sentinel_t&amp;lt;R&amp;gt;&amp;gt;;
+}
+```
+* range[link range.md]
+* const_sentinel[link /reference/iterator/const_sentinel.md]
+* sentinel_t[link sentinel_t.md]
+
+## 概要
+
+任意のRange型`R`の定数イテレータ（[`const_iterator_t`](const_iterator_t.md)`&amp;lt;R&amp;gt;`）に対応する番兵の型を取得する。
+
+## 例
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  static_assert(std::same_as&amp;lt;std::ranges::const_sentinel_t&amp;lt;      std::vector&amp;lt;int&amp;gt;&amp;gt;, std::basic_const_iterator&amp;lt;std::vector&amp;lt;int&amp;gt;::iterator&amp;gt;&amp;gt;);
+  static_assert(std::same_as&amp;lt;std::ranges::const_sentinel_t&amp;lt;const std::vector&amp;lt;int&amp;gt;&amp;gt;, std::vector&amp;lt;int&amp;gt;::const_iterator&amp;gt;);
+
+  static_assert(std::same_as&amp;lt;std::ranges::const_sentinel_t&amp;lt;std::ranges::repeat_view&amp;lt;int&amp;gt;&amp;gt;, std::unreachable_sentinel_t&amp;gt;);
+}
+```
+* std::ranges::const_sentinel_t[color ff0000]
+* repeat_view[link repeat_view.md]
+* std::unreachable_sentinel_t[link /reference/iterator/unreachable_sentinel_t.md]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13.1
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 6
+
+## 参照
+
+- [P2278R4 `cbegin` should always return a constant iterator](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2278r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ranges -- &lt;ranges&gt; : P2278R4関連を追加 #1084</title>
      <link href="https://cpprefjp.github.io/reference/ranges.html"/>
      <id>f2eb44725d784a0b8cb1d2f343178ffe04c392d8:reference/ranges.md</id>
      <updated>2023-08-23T15:52:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges.md b/reference/ranges.md
index cbe100bf3..44737cf70 100644
--- a/reference/ranges.md
+++ b/reference/ranges.md
@@ -65,10 +65,13 @@ C++20では関数によるカスタマイゼーションポイントの問題点
 |------------------------------------------------------------------|------------------------------------------------|----------------|
 | [`iterator_t`](ranges/iterator_t.md)                             | イテレータ型を取得する (alias template)        | C++20          |
 | [`sentinel_t`](ranges/sentinel_t.md)                             | 番兵型を取得する (alias template)              | C++20          |
+| [`const_iterator_t`](ranges/const_iterator_t.md.nolink)          | 定数イテレータ型を取得する (alias template)        | C++23          |
+| [`const_sentinel_t`](ranges/const_sentinel_t.md.nolink)          | 定数番兵型を取得する (alias template)        | C++23          |
 | [`range_difference_t`](ranges/range_difference_t.md)             | イテレータの差の型を取得する (alias template)  | C++20          |
 | [`range_size_t`](ranges/range_size_t.md)                         | サイズの型を取得する(alias template)           | C++20          |
 | [`range_value_t`](ranges/range_value_t.md)                       | 要素の型を取得する (alias template)            | C++20          |
 | [`range_reference_t`](ranges/range_reference_t.md)               | 要素の参照型を取得する (alias template)        | C++20          |
+| [`range_const_reference_t`](ranges/range_const_reference_t.md.nolink)| 要素の定数参照型を取得する (alias template) | C++23          |
 | [`range_rvalue_reference_t`](ranges/range_rvalue_reference_t.md) | 要素の右辺値参照型を取得する (alias template)  | C++20          |
 
 ## Rangeコンセプト
@@ -87,6 +90,7 @@ C++20では関数によるカスタマイゼーションポイントの問題点
 | [`contiguous_range`](ranges/contiguous_range.md)       | イテレータが隣接イテレータであるRange (concept)             | C++20          |
 | [`common_range`](ranges/common_range.md)               | イテレータと番兵の型が等しいRange (concept)                 | C++20          |
 | [`viewable_range`](ranges/viewable_range.md)           | ビューに変換できるRange (concept)                           | C++20          |
+| [`constant_range`](ranges/constant_range.md.nolink)    | 要素が定数なRange (concept)                           | C++23          |
 
 ## カスタマイゼーションポイント
 
@@ -424,3 +428,4 @@ range | adaptor(args...)
 ## 参照
 - [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
 - [C++20 ranges](https://techbookfest.org/product/5134506308665344)
+- [P2278R4 `cbegin` should always return a constant iterator](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2278r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator- -- chrono/time_point/op_minusのコメントを修正</title>
      <link href="https://cpprefjp.github.io/reference/chrono/time_point/op_minus.html"/>
      <id>6366c71c487dcdf10bbf224db35a5b3bbc4d3c3f:reference/chrono/time_point/op_minus.md</id>
      <updated>2023-08-23T14:50:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/time_point/op_minus.md b/reference/chrono/time_point/op_minus.md
index 5ee318618..b38628c53 100644
--- a/reference/chrono/time_point/op_minus.md
+++ b/reference/chrono/time_point/op_minus.md
@@ -7,6 +7,7 @@
 ```cpp
 namespace std {
 namespace chrono {
+  // time_point - duration = time_point
   template &amp;lt;class Clock, class Duration1, class Rep2, class Period2&amp;gt;
   time_point&amp;lt;Clock, typename common_type&amp;lt;Duration1, duration&amp;lt;Rep2, Period2&amp;gt;&amp;gt;::type&amp;gt;
     operator-(const time_point&amp;lt;Clock, Duration1&amp;gt;&amp;amp; lhs,
@@ -18,13 +19,13 @@ namespace chrono {
     operator-(const time_point&amp;lt;Clock, Duration1&amp;gt;&amp;amp; lhs,
               const duration&amp;lt;Rep2, Period2&amp;gt;&amp;amp; rhs);      // (1) C++14
 
-  // time_point - time_point - duration
+  // time_point - time_point = duration
   template &amp;lt;class Clock, class Duration1, class Duration2&amp;gt;
   typename common_type&amp;lt;Duration1, Duration2&amp;gt;::type
     operator-(const time_point&amp;lt;Clock, Duration1&amp;gt;&amp;amp; lhs,
               const time_point&amp;lt;Clock, Duration2&amp;gt;&amp;amp; rhs); // (2) C++11
 
-  // time_point - time_point - duration
+  // time_point - time_point = duration
   template &amp;lt;class Clock, class Duration1, class Duration2&amp;gt;
   constexpr typename common_type&amp;lt;Duration1, Duration2&amp;gt;::type
     operator-(const time_point&amp;lt;Clock, Duration1&amp;gt;&amp;amp; lhs,
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>OGAWA KenIchi</name>
        <email>kenichi@ice.email.ne.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- コメントの誤りを修正</title>
      <link href="https://cpprefjp.github.io/reference/chrono/duration/op_constructor.html"/>
      <id>86bab47aa01fce293636c43725a8d0d017f47c06:reference/chrono/duration/op_constructor.md</id>
      <updated>2023-08-23T10:02:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/duration/op_constructor.md b/reference/chrono/duration/op_constructor.md
index acb831b61..95afebbee 100644
--- a/reference/chrono/duration/op_constructor.md
+++ b/reference/chrono/duration/op_constructor.md
@@ -45,7 +45,7 @@ using std::chrono::duration;
 int main()
 {
   duration&amp;lt;int, std::milli&amp;gt; d1;        // デフォルト構築 d1.count()は未初期化の値
-  duration&amp;lt;int, std::milli&amp;gt; d2 {};     // デフォルト構築 d1.count()の値は0
+  duration&amp;lt;int, std::milli&amp;gt; d2 {};     // デフォルト構築 d2.count()の値は0
 
   duration&amp;lt;int, std::milli&amp;gt; d3(3);     // 値を指定して構築(ミリ秒)
   duration&amp;lt;int, std::micro&amp;gt; d4 = d3;   // ミリ秒からマイクロ秒に変換
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>OGAWA KenIchi</name>
        <email>kenichi@ice.email.ne.jp</email>
      </author>
    </entry>
  
</feed>
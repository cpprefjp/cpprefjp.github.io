<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2020-06-01T08:08:11.262626</updated>
  <id>a5e0f475-f3cf-4373-9ede-8ec44b849fd2</id>

  
    <entry>
      <title>duration -- duration : formatterを追加</title>
      <link href="https://cpprefjp.github.io/reference/chrono/duration.html"/>
      <id>ed526a7b9444a46063caba839454d3e7b165ec15:reference/chrono/duration.md</id>
      <updated>2020-06-01T17:03:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/duration.md b/reference/chrono/duration.md
index b73513227..fa7579015 100644
--- a/reference/chrono/duration.md
+++ b/reference/chrono/duration.md
@@ -143,11 +143,13 @@ namespace chrono {
 | [`h`](duration/op_h.md)     | 時リテラル         | C++14 |
 
 
-### common_type特殊化
+## 特殊化
 
 | 名前  | 説明               | 対応バージョン |
 |-------|--------------------|----------------|
-| [`common_type`](common_type.md)   | 異なる`duration`間の共通の型を求める | C++11 |
+| [`common_type`](common_type.md) | 異なる`duration`間の共通の型を求める | C++11 |
+| [`formatter`](duration/formatter.md) | [`std::formatter`](/reference/format/formatter.md)クラスの特殊化。文字列フォーマットの許可 | C++20 |
+
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>formatter -- duration : formatterを追加</title>
      <link href="https://cpprefjp.github.io/reference/chrono/duration/formatter.html"/>
      <id>ed526a7b9444a46063caba839454d3e7b165ec15:reference/chrono/duration/formatter.md</id>
      <updated>2020-06-01T17:03:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/duration/formatter.md b/reference/chrono/duration/formatter.md
new file mode 100644
index 000000000..882b3fd19
--- /dev/null
+++ b/reference/chrono/duration/formatter.md
@@ -0,0 +1,66 @@
+# formatter
+* chrono[meta header]
+* std[meta namespace]
+* class[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;class Rep, class Period, class charT&amp;gt;
+  struct formatter&amp;lt;chrono::duration&amp;lt;Rep, Period&amp;gt;, charT&amp;gt;;
+}
+```
+
+## 概要
+`duration`クラスに対する[`std::formatter`](/reference/format/formatter.md)クラステンプレートの特殊化。
+
+
+## 備考
+- `Rep`が浮動小数点数である場合のみ、フォーマットとして浮動小数点数の精度を指定でき、そうでない場合に指定すると[`std::format_error`](/reference/format/format_error.md)例外が送出される
+- `duration`に対するフォーマットは深夜0時からの経過時間として扱われ、一日内の時間として出力される (例として`&amp;#34;%H&amp;#34;`, `&amp;#34;%I&amp;#34;`, `&amp;#34;%p&amp;#34;`など)
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+#include &amp;lt;format&amp;gt;
+
+namespace chrono = std::chrono;
+
+int main()
+{
+  // デフォルトフォーマットは、operator&amp;lt;&amp;lt;で出力されるものと同じ
+  std::format(&amp;#34;{}&amp;#34;, chrono::seconds{3});
+
+  // フォーマット指定子を使用した場合、サフィックスは出力されない
+  std::format(&amp;#34;seconds : {:%S}&amp;#34;, chrono::seconds{3});
+  std::format(&amp;#34;minutes : {:%M}&amp;#34;, chrono::minutes{3});
+  std::format(&amp;#34;24-hours : {:%H}&amp;#34;, chrono::hours{15});
+  std::format(&amp;#34;12-hours : {:%I}&amp;#34;, chrono::hours{15});
+  std::format(&amp;#34;AM/PM : {:%p %I:00}&amp;#34;, chrono::hours{15});
+}
+```
+
+### 出力
+```
+3s
+seconds : 03
+minutes : 03
+24-hours : 15
+12-hours : 03
+AM/PM : PM 03:00
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): (9.0時点で実装なし)
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
+
+
+## 関連項目
+- [chronoの`std::format()`](/reference/chrono/format.md) (フォーマットの詳細)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>duration -- duration : operator&lt;&lt;を追加</title>
      <link href="https://cpprefjp.github.io/reference/chrono/duration.html"/>
      <id>59481128b4a5a1346c674ad515d45b9b9ecbbfb0:reference/chrono/duration.md</id>
      <updated>2020-06-01T16:42:53+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/duration.md b/reference/chrono/duration.md
index d589d660d..b73513227 100644
--- a/reference/chrono/duration.md
+++ b/reference/chrono/duration.md
@@ -127,7 +127,7 @@ namespace chrono {
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`operator&amp;lt;&amp;lt;`](duration/op_ostream.md.nolink) | ストリームへの出力 | C++20 |
+| [`operator&amp;lt;&amp;lt;`](duration/op_ostream.md) | ストリームへの出力 | C++20 |
 | [`from_stream`](duration/from_stream.md.nolink) | フォーマットを指定してストリームから入力 | C++20 |
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;&lt; -- duration : operator&lt;&lt;を追加</title>
      <link href="https://cpprefjp.github.io/reference/chrono/duration/op_ostream.html"/>
      <id>59481128b4a5a1346c674ad515d45b9b9ecbbfb0:reference/chrono/duration/op_ostream.md</id>
      <updated>2020-06-01T16:42:53+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/duration/op_ostream.md b/reference/chrono/duration/op_ostream.md
new file mode 100644
index 000000000..c7a7792d5
--- /dev/null
+++ b/reference/chrono/duration/op_ostream.md
@@ -0,0 +1,108 @@
+# operator&amp;lt;&amp;lt;
+* chrono[meta header]
+* std::chrono[meta namespace]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::chrono {
+  template &amp;lt;class charT, class traits, class Rep, class Period&amp;gt;
+  basic_ostream&amp;lt;charT, traits&amp;gt;&amp;amp;
+    operator&amp;lt;&amp;lt;(basic_ostream&amp;lt;charT, traits&amp;gt;&amp;amp; os,
+               const duration&amp;lt;Rep, Period&amp;gt;&amp;amp; d);  // (1) C++20
+}
+```
+
+## 概要
+`duration`オブジェクトを出力ストリームに出力する。
+
+
+## 適格要件
+- `Rep`は、整数変換ランクが`short`以上の整数型か、浮動小数点数型であること
+- `charT`は`char`か`wchar_t`であること
+
+
+## 効果
+- `charT`が`char`の場合は[`to_string()`](/reference/string/to_string.md)、`wchar_t`の場合は[`to_wstring()`](/reference/string/to_wstring.md)を使用して[`d.count()`](count.md)から[`basic_string`](/reference/string/basic_string.md)`&amp;lt;charT, traits&amp;gt;`を構築し、以下で述べるサフィックスを追加して`os`に出力する：
+
+| `Period::type`単位型 | サフィックス |
+|----------------------|--------------|
+| [`atto`](/reference/ratio/si_prefix.md)       | `&amp;#34;as&amp;#34;` |
+| [`femto`](/reference/ratio/si_prefix.md)      | `&amp;#34;fs&amp;#34;` |
+| [`pico`](/reference/ratio/si_prefix.md)       | `&amp;#34;ps&amp;#34;` |
+| [`nano`](/reference/ratio/si_prefix.md)       | `&amp;#34;ns&amp;#34;` |
+| [`micro`](/reference/ratio/si_prefix.md)      | `&amp;#34;µs&amp;#34;` (`&amp;#34;\u00b5\u0073&amp;#34;`) |
+| [`milli`](/reference/ratio/si_prefix.md)      | `&amp;#34;ms&amp;#34;` |
+| [`centi`](/reference/ratio/si_prefix.md)      | `&amp;#34;cs&amp;#34;` |
+| [`deci`](/reference/ratio/si_prefix.md)       | `&amp;#34;ds&amp;#34;` |
+| [`ratio`](/reference/ratio/ratio.md)`&amp;lt;1&amp;gt;`     | `&amp;#34;s&amp;#34;` |
+| [`deca`](/reference/ratio/si_prefix.md)       | `&amp;#34;das&amp;#34;` |
+| [`hecto`](/reference/ratio/si_prefix.md)      | `&amp;#34;hs&amp;#34;` |
+| [`kilo`](/reference/ratio/si_prefix.md)       | `&amp;#34;ks&amp;#34;` |
+| [`mega`](/reference/ratio/si_prefix.md)       | `&amp;#34;Ms&amp;#34;` |
+| [`giga`](/reference/ratio/si_prefix.md)       | `&amp;#34;Gs&amp;#34;` |
+| [`tera`](/reference/ratio/si_prefix.md)       | `&amp;#34;Ts&amp;#34;` |
+| [`peta`](/reference/ratio/si_prefix.md)       | `&amp;#34;Ps&amp;#34;` |
+| [`exa`](/reference/ratio/si_prefix.md)        | `&amp;#34;Es&amp;#34;` |
+| [`ratio`](/reference/ratio/ratio.md)`&amp;lt;60&amp;gt;`    | `&amp;#34;min&amp;#34;` |
+| [`ratio`](/reference/ratio/ratio.md)`&amp;lt;3600&amp;gt;`  | `&amp;#34;h&amp;#34;` |
+| [`ratio`](/reference/ratio/ratio.md)`&amp;lt;86400&amp;gt;` | `&amp;#34;d&amp;#34;` |
+
+値`num`を`Period::type::num`、値`den`を`Period::type::den`をゼロ埋めなしの10進数で文字列化したものであるとして、
+
+- `Period::type::den == 1`である場合、サフィックス&amp;#34;[num]s&amp;#34;
+- いずれにもあてはまらない場合、サフィックスは`&amp;#34;[num/den]s&amp;#34;`
+
+マイクロ秒として`&amp;#34;µs&amp;#34;`が表現できないエンコーディングの場合、代わりに`&amp;#34;us&amp;#34;`が使用される。
+
+
+## 戻り値
+```cpp
+return os;
+```
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+
+namespace chrono = std::chrono;
+
+int main()
+{
+  std::cout &amp;lt;&amp;lt; &amp;#34;nano sec : &amp;#34; &amp;lt;&amp;lt; chrono::nanoseconds{3} &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; &amp;#34;milli sec : &amp;#34; &amp;lt;&amp;lt; chrono::milliseconds{3} &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; &amp;#34;seconds : &amp;#34; &amp;lt;&amp;lt; chrono::seconds{3} &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; &amp;#34;minutes : &amp;#34; &amp;lt;&amp;lt; chrono::minutes{3} &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; &amp;#34;hours : &amp;#34; &amp;lt;&amp;lt; chrono::hours{3} &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; &amp;#34;days : &amp;#34; &amp;lt;&amp;lt; chrono::days{3} &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; &amp;#34;weeks : &amp;#34; &amp;lt;&amp;lt; chrono::weeks{3} &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; &amp;#34;1/3 seconds : &amp;#34; &amp;lt;&amp;lt; chrono::duration&amp;lt;int, std::ratio&amp;lt;1, 3&amp;gt;&amp;gt;{3} &amp;lt;&amp;lt; std::endl;
+
+  using float_seconds = chrono::duration&amp;lt;float, std::ratio&amp;lt;1&amp;gt;&amp;gt;;
+  std::cout &amp;lt;&amp;lt; &amp;#34;float sec : &amp;#34; &amp;lt;&amp;lt; float_seconds{1.23f} &amp;lt;&amp;lt; std::endl;
+}
+```
+
+### 出力
+```
+nano sec : 3ns
+milli sec : 3ms
+seconds : 3s
+minutes : 3min
+hours : 3h
+days : 3d
+weeks : 3[604800]s
+1/3 seconds : 3[1/3]s
+float sec : 1.23s
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): (9.0時点で実装なし)
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>u8path -- u8path : fix typo</title>
      <link href="https://cpprefjp.github.io/reference/filesystem/u8path.html"/>
      <id>fe9573a0682342437a243dbe20db2783af085f55:reference/filesystem/u8path.md</id>
      <updated>2020-06-01T15:39:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/filesystem/u8path.md b/reference/filesystem/u8path.md
index c4c5e84a7..7f1b63ede 100644
--- a/reference/filesystem/u8path.md
+++ b/reference/filesystem/u8path.md
@@ -22,8 +22,8 @@ namespace std::filesystem {
 ## 概要
 UTF-8エンコードされた文字列からパスオブジェクトを構築する。
 
-- (1) : UTF-8エンコードされた`char`(C++20移行は`char8_t`も)配列、[`std::string`](/reference/string/basic_string.md)、[`std::string_view`](/reference/string_view/basic_string_view.md)オブジェクトからパスオブジェクトを構築する
-- (2) : UTF-8エンコードされた`char`(C++20移行は`char8_t`も)要素の範囲から、パスオブジェクトを構築する
+- (1) : UTF-8エンコードされた`char`(C++20以降は`char8_t`も)配列、[`std::string`](/reference/string/basic_string.md)、[`std::string_view`](/reference/string_view/basic_string_view.md)オブジェクトからパスオブジェクトを構築する
+- (2) : UTF-8エンコードされた`char`(C++20以降は`char8_t`も)要素の範囲から、パスオブジェクトを構築する
 
 
 ## 要件
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>char16_tとchar32_t -- Merge pull request #765 from cpprefjp/cpp20/char8_t_delete_op_left_shift</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/char16_32.html"/>
      <id>63c035c380c269d0ae09d266c0f58e6285c83479:lang/cpp11/char16_32.md</id>
      <updated>2020-05-31T21:09:41+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/char16_32.md b/lang/cpp11/char16_32.md
index b90b22c70..70fbf7195 100644
--- a/lang/cpp11/char16_32.md
+++ b/lang/cpp11/char16_32.md
@@ -130,7 +130,7 @@ int main()
 - [`wstring_convert`](/reference/locale/wstring_convert.md)
 - [C++11 UTF-8文字列リテラル](utf8_string_literals.md)
 - [C++20 UTF-8エンコーディングされた文字の型として`char8_t`を追加](/lang/cpp20/char8_t.md)
-
+- [ostream `operator&amp;lt;&amp;lt;`](/reference/ostream/basic_ostream/op_ostream_free.md)
 
 ## 参照
 - [WG14 N1040 Extensions for the programming language C to support new character data types](http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1040.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yumetodo</name>
        <email>yume-wikijp@live.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>UTF-8文字列リテラル -- Merge pull request #765 from cpprefjp/cpp20/char8_t_delete_op_left_shift</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/utf8_string_literals.html"/>
      <id>63c035c380c269d0ae09d266c0f58e6285c83479:lang/cpp11/utf8_string_literals.md</id>
      <updated>2020-05-31T21:09:41+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/utf8_string_literals.md b/lang/cpp11/utf8_string_literals.md
index 51ea16936..bf640e9cb 100644
--- a/lang/cpp11/utf8_string_literals.md
+++ b/lang/cpp11/utf8_string_literals.md
@@ -15,6 +15,7 @@ char t[] = u8&amp;#34;\U00020BB7野家&amp;#34;; // 𠮷野家
 
 `u8`プレフィックスを指定しない場合は、実装定義のマルチバイト文字コードにエンコードされる。その実装定義の文字コードは、ASCII文字コードと互換があることは保証されない。そのため、UTF-8のASCII互換部分が、実装定義の文字コードと互換があることも、保証されない。
 
+C++20ではUTF-8文字リテラルの型が[`const char[N]`ではなく`const char8_t[N]`になる](/lang/cpp20/char8_t.md)
 
 ## 仕様
 - 文字列リテラルに`u8`プレフィックスを付けることで、UTF-8にエンコードされた`char`型の配列に初期化される。
@@ -65,7 +66,7 @@ int main()
 - [C++11 `char16_t`と`char32_t`](char16_32.md)
 - [C++17 UTF-8文字リテラル](/lang/cpp17/utf8_character_literals.md)
 - [C++20 UTF-8エンコーディングされた文字の型として`char8_t`を追加](/lang/cpp20/char8_t.md)
-
+- [ostream `operator&amp;lt;&amp;lt;`](/reference/ostream/basic_ostream/op_ostream_free.md)
 
 ## 参照
 - [N2159 UTF-8 String Literals](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2159.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yumetodo</name>
        <email>yume-wikijp@live.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>UTF-8文字リテラル -- Merge pull request #765 from cpprefjp/cpp20/char8_t_delete_op_left_shift</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/utf8_character_literals.html"/>
      <id>63c035c380c269d0ae09d266c0f58e6285c83479:lang/cpp17/utf8_character_literals.md</id>
      <updated>2020-05-31T21:09:41+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/utf8_character_literals.md b/lang/cpp17/utf8_character_literals.md
index 6aede84e1..7c93dac3e 100644
--- a/lang/cpp17/utf8_character_literals.md
+++ b/lang/cpp17/utf8_character_literals.md
@@ -9,6 +9,7 @@ char s[] = u8&amp;#34;あいうえお&amp;#34;; // OK : C++11以降
 char c = u8&amp;#39;A&amp;#39;; // OK : C++17以降
 ```
 
+C++20ではUTF-8文字リテラルの型が[`char`ではなく`char8_t`になる](/lang/cpp20/char8_t.md)
 
 ## 仕様
 - `u8`プレフィックスが付いた文字リテラルは、`char`文字型の、UTF-8文字リテラルとなる
@@ -20,6 +21,8 @@ char c = u8&amp;#39;A&amp;#39;; // OK : C++17以降
 ## 関連項目
 - [C++11 UTF-8文字列リテラル](/lang/cpp11/utf8_string_literals.md)
 - [C++11 `char16_t`と`char32_t`](/lang/cpp11/char16_32.md)
+- [C++20 UTF-8エンコーディングされた文字の型として`char8_t`を追加](/lang/cpp20/char8_t.md)
+- [ostream `operator&amp;lt;&amp;lt;`](/reference/ostream/basic_ostream/op_ostream_free.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yumetodo</name>
        <email>yume-wikijp@live.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>UTF-8エンコーディングされた文字の型として`char8_t`を追加 -- Merge pull request #765 from cpprefjp/cpp20/char8_t_delete_op_left_shift</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/char8_t.html"/>
      <id>63c035c380c269d0ae09d266c0f58e6285c83479:lang/cpp20/char8_t.md</id>
      <updated>2020-05-31T21:09:41+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/char8_t.md b/lang/cpp20/char8_t.md
index 1b590f54a..781a7f315 100644
--- a/lang/cpp20/char8_t.md
+++ b/lang/cpp20/char8_t.md
@@ -27,7 +27,12 @@ UTF-8でエンコードされた文字を格納することを想定した型と
 
 ## 備考
 
-[機能テストマクロ](../../lang/cpp17/feature_test_macros.md)は`__cpp_char8_t`で、値は`201803`。
+[機能テストマクロ](../../lang/cpp20/feature_test_macros.md.nolink)は以下の通り。
+
+| マクロ名            | 値       |
+|---------------------|----------|
+| `__cpp_char8_t`     | `201811` |
+| `__cpp_lib_char8_t` | `201811` |
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yumetodo</name>
        <email>yume-wikijp@live.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>u8path -- Merge pull request #765 from cpprefjp/cpp20/char8_t_delete_op_left_shift</title>
      <link href="https://cpprefjp.github.io/reference/filesystem/u8path.html"/>
      <id>63c035c380c269d0ae09d266c0f58e6285c83479:reference/filesystem/u8path.md</id>
      <updated>2020-05-31T21:09:41+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/filesystem/u8path.md b/reference/filesystem/u8path.md
index 233f23e54..c4c5e84a7 100644
--- a/reference/filesystem/u8path.md
+++ b/reference/filesystem/u8path.md
@@ -22,8 +22,8 @@ namespace std::filesystem {
 ## 概要
 UTF-8エンコードされた文字列からパスオブジェクトを構築する。
 
-- (1) : UTF-8エンコードされた`char`配列、[`std::string`](/reference/string/basic_string.md)、[`std::string_view`](/reference/string_view/basic_string_view.md)オブジェクトからパスオブジェクトを構築する
-- (2) : UTF-8エンコードされた`char`要素の範囲から、パスオブジェクトを構築する
+- (1) : UTF-8エンコードされた`char`(C++20移行は`char8_t`も)配列、[`std::string`](/reference/string/basic_string.md)、[`std::string_view`](/reference/string_view/basic_string_view.md)オブジェクトからパスオブジェクトを構築する
+- (2) : UTF-8エンコードされた`char`(C++20移行は`char8_t`も)要素の範囲から、パスオブジェクトを構築する
 
 
 ## 要件
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yumetodo</name>
        <email>yume-wikijp@live.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;&lt; (非メンバ関数) -- Merge pull request #765 from cpprefjp/cpp20/char8_t_delete_op_left_shift</title>
      <link href="https://cpprefjp.github.io/reference/ostream/basic_ostream/op_ostream_free.html"/>
      <id>63c035c380c269d0ae09d266c0f58e6285c83479:reference/ostream/basic_ostream/op_ostream_free.md</id>
      <updated>2020-05-31T21:09:41+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ostream/basic_ostream/op_ostream_free.md b/reference/ostream/basic_ostream/op_ostream_free.md
index 8496abc73..593a3cbf2 100644
--- a/reference/ostream/basic_ostream/op_ostream_free.md
+++ b/reference/ostream/basic_ostream/op_ostream_free.md
@@ -96,7 +96,7 @@ namespace std {
 なお、(14) の形式（`os` の文字型（`char_type`）が `char` 以外で `s` が `const char*`）の時は、`s` の各文字 `c` を直接出力するのではなく、`os.`[`widen`](../../ios/basic_ios/widen.md)`(c)` を出力する。  
 出力後、幅指定は `0` にリセットされる。
 
-### (18)～(24) 文字列の書式化出力
+### (18)～(24) 文字列の書式化出力 (C++20)
 
 これらの関数は削除されている
 
@@ -212,6 +212,25 @@ cpprefjp
 ## 実装例
 TBD
 
+## C++20で追加された`delete`指定オーバーロードについて
+
+[`char8_t`型の追加](/lang/cpp20/char8_t.md)に伴って、次に示すようなコードに破壊的変更が生じてしまった。
+
+```cpp
+#include &amp;lt;iostream&amp;gt;
+int main()
+{
+    std::cout &amp;lt;&amp;lt; u8&amp;#39;x&amp;#39;;    // C++17までは x と表示された。C++20では120と表示される
+    std::cout &amp;lt;&amp;lt; u8&amp;#34;text&amp;#34;; // C++20までは text と表示された。C++20では文字列先頭へのポインタが表示される
+}
+```
+
+これは`char8_t`/`char16_t`/`char32_t`に対するostreamの`operator&amp;lt;&amp;lt;`が提供されないため、他のオーバーロードが選ばれるためにこのような直感に反する挙動が発生する。
+
+そこで(6)～(12)、(18)～(24)のように`delete`指定された`operator&amp;lt;&amp;lt;`を追加することで不適格にし、このような直感的ではない挙動を避ける。
+
+[機能テストマクロ](/lang/cpp20/feature_test_macros.md.nolink)は`__cpp_lib_char8_t`で、値は`201907`。
+
 ## バージョン
 ### 言語
 - C++98
@@ -221,39 +240,53 @@ TBD
 
 ## 関連項目
 
-- このほかの`&amp;lt;&amp;lt;`演算子関数
-    - [`bool`値・数値・ポインタ、ストリームバッファ、マニピュレータに対するもの](op_ostream.md)
-	- [`std::sub_match`に関するもの](../../regex/sub_match/op_ostream.md)
-	- [`std::error_code`に関するもの](../../system_error/error_code/op_ostream.md)
-	- [`std::complex`に関するもの](../../complex/complex/op_ostream.md)
-	- [`std::bitset`に関するもの](../../bitset/bitset/op_ostream.md)
-	- [`std::basic_string`に関するもの](../../string/basic_string/op_ostream.md)
-	- [`std::shared_ptr`に関するもの](../../memory/shared_ptr/op_ostream.md)
-	- [`std::shuffle_order_engine`に関するもの](../../random/shuffle_order_engine/op_ostream.md)
-	- [`std::gamma_distribution`に関するもの](../../random/gamma_distribution/op_ostream.md)
-	- [`std::geometric_distribution`に関するもの](../../random/geometric_distribution/op_ostream.md)
-	- [`std::extreme_value_distribution`に関するもの](../../random/extreme_value_distribution/op_ostream.md)
-	- [`std::fisher_f_distribution`に関するもの](../../random/fisher_f_distribution/op_ostream.md)
-	- [`std::mersenne_twister_engine`に関するもの](../../random/mersenne_twister_engine/op_ostream.md)
-	- [`std::chi_squared_distribution`に関するもの](../../random/chi_squared_distribution/op_ostream.md)
-	- [`std::exponential_distribution`に関するもの](../../random/exponential_distribution/op_ostream.md)
-	- [`std::discrete_distribution`に関するもの](../../random/discrete_distribution/op_ostream.md)
-	- [`std::subtract_with_carry_engine`に関するもの](../../random/subtract_with_carry_engine/op_ostream.md)
-	- [`std::piecewise_constant_distribution`に関するもの](../../random/piecewise_constant_distribution/op_ostream.md)
-	- [`std::poisson_distribution`に関するもの](../../random/poisson_distribution/op_ostream.md)
-	- [`std::student_t_distribution`に関するもの](../../random/student_t_distribution/op_ostream.md)
-	- [`std::bernoulli_distribution`に関するもの](../../random/bernoulli_distribution/op_ostream.md)
-	- [`std::weibull_distribution`に関するもの](../../random/weibull_distribution/op_ostream.md)
-	- [`std::binomial_distribution`に関するもの](../../random/binomial_distribution/op_ostream.md)
-	- [`std::piecewise_linear_distribution`に関するもの](../../random/piecewise_linear_distribution/op_ostream.md)
-	- [`std::uniform_real_distribution`に関するもの](../../random/uniform_real_distribution/op_ostream.md)
-	- [`std::negative_binomial_distribution`に関するもの](../../random/negative_binomial_distribution/op_ostream.md)
-	- [`std::discard_block_engine`に関するもの](../../random/discard_block_engine/op_ostream.md)
-	- [`std::normal_distribution`に関するもの](../../random/normal_distribution/op_ostream.md)
-	- [`std::cauchy_distribution`に関するもの](../../random/cauchy_distribution/op_ostream.md)
-	- [`std::lognormal_distribution`に関するもの](../../random/lognormal_distribution/op_ostream.md)
-	- [`std::linear_congruential_engine`に関するもの](../../random/linear_congruential_engine/op_ostream.md)
-	- [`std::uniform_int_distribution`に関するもの](../../random/uniform_int_distribution/op_ostream.md)
-	- [`std::independent_bits_engine`に関するもの](../../random/independent_bits_engine/op_ostream.md)
-- 出力対象の型
-    - [`basic_streambuf`](../../streambuf/basic_streambuf.md)
+### このほかの`&amp;lt;&amp;lt;`演算子関数
+
+- [`bool`値・数値・ポインタ、ストリームバッファ、マニピュレータに対するもの](op_ostream.md)
+- [`std::sub_match`に関するもの](../../regex/sub_match/op_ostream.md)
+- [`std::error_code`に関するもの](../../system_error/error_code/op_ostream.md)
+- [`std::complex`に関するもの](../../complex/complex/op_ostream.md)
+- [`std::bitset`に関するもの](../../bitset/bitset/op_ostream.md)
+- [`std::basic_string`に関するもの](../../string/basic_string/op_ostream.md)
+- [`std::shared_ptr`に関するもの](../../memory/shared_ptr/op_ostream.md)
+- [`std::shuffle_order_engine`に関するもの](../../random/shuffle_order_engine/op_ostream.md)
+- [`std::gamma_distribution`に関するもの](../../random/gamma_distribution/op_ostream.md)
+- [`std::geometric_distribution`に関するもの](../../random/geometric_distribution/op_ostream.md)
+- [`std::extreme_value_distribution`に関するもの](../../random/extreme_value_distribution/op_ostream.md)
+- [`std::fisher_f_distribution`に関するもの](../../random/fisher_f_distribution/op_ostream.md)
+- [`std::mersenne_twister_engine`に関するもの](../../random/mersenne_twister_engine/op_ostream.md)
+- [`std::chi_squared_distribution`に関するもの](../../random/chi_squared_distribution/op_ostream.md)
+- [`std::exponential_distribution`に関するもの](../../random/exponential_distribution/op_ostream.md)
+- [`std::discrete_distribution`に関するもの](../../random/discrete_distribution/op_ostream.md)
+- [`std::subtract_with_carry_engine`に関するもの](../../random/subtract_with_carry_engine/op_ostream.md)
+- [`std::piecewise_constant_distribution`に関するもの](../../random/piecewise_constant_distribution/op_ostream.md)
+- [`std::poisson_distribution`に関するもの](../../random/poisson_distribution/op_ostream.md)
+- [`std::student_t_distribution`に関するもの](../../random/student_t_distribution/op_ostream.md)
+- [`std::bernoulli_distribution`に関するもの](../../random/bernoulli_distribution/op_ostream.md)
+- [`std::weibull_distribution`に関するもの](../../random/weibull_distribution/op_ostream.md)
+- [`std::binomial_distribution`に関するもの](../../random/binomial_distribution/op_ostream.md)
+- [`std::piecewise_linear_distribution`に関するもの](../../random/piecewise_linear_distribution/op_ostream.md)
+- [`std::uniform_real_distribution`に関するもの](../../random/uniform_real_distribution/op_ostream.md)
+- [`std::negative_binomial_distribution`に関するもの](../../random/negative_binomial_distribution/op_ostream.md)
+- [`std::discard_block_engine`に関するもの](../../random/discard_block_engine/op_ostream.md)
+- [`std::normal_distribution`に関するもの](../../random/normal_distribution/op_ostream.md)
+- [`std::cauchy_distribution`に関するもの](../../random/cauchy_distribution/op_ostream.md)
+- [`std::lognormal_distribution`に関するもの](../../random/lognormal_distribution/op_ostream.md)
+- [`std::linear_congruential_engine`に関するもの](../../random/linear_congruential_engine/op_ostream.md)
+- [`std::uniform_int_distribution`に関するもの](../../random/uniform_int_distribution/op_ostream.md)
+- [`std::independent_bits_engine`に関するもの](../../random/independent_bits_engine/op_ostream.md)
+
+### 出力対象の型
+
+- [`basic_streambuf`](../../streambuf/basic_streambuf.md)
+
+### C++20での変更関連
+
+- [UTF-8エンコーディングされた文字の型として`char8_t`を追加](/lang/cpp20/char8_t.md)
+- [char16_tとchar32_t](/lang/cpp11/char16_32.md)
+- [UTF-8文字列リテラル](/lang/cpp11/utf8_string_literals.md)
+- [UTF-8文字リテラル](/lang/cpp17/utf8_character_literals.md)
+
+## 参照
+
+[P1423R3: char8_t backward compatibility remediation](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1423r3.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yumetodo</name>
        <email>yume-wikijp@live.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;&lt; (非メンバ関数) -- chore(cpp20/char8_t): 「された」を続けない</title>
      <link href="https://cpprefjp.github.io/reference/ostream/basic_ostream/op_ostream_free.html"/>
      <id>31e86994b877f5aad17113cd3bb782953144b91b:reference/ostream/basic_ostream/op_ostream_free.md</id>
      <updated>2020-05-30T21:22:23+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ostream/basic_ostream/op_ostream_free.md b/reference/ostream/basic_ostream/op_ostream_free.md
index a2a8641e0..593a3cbf2 100644
--- a/reference/ostream/basic_ostream/op_ostream_free.md
+++ b/reference/ostream/basic_ostream/op_ostream_free.md
@@ -212,7 +212,7 @@ cpprefjp
 ## 実装例
 TBD
 
-## C++20で追加された`delete`指定されたオーバーロードについて
+## C++20で追加された`delete`指定オーバーロードについて
 
 [`char8_t`型の追加](/lang/cpp20/char8_t.md)に伴って、次に示すようなコードに破壊的変更が生じてしまった。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yumetodo</name>
        <email>yume-wikijp@live.jp</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2022-12-14T14:40:22.302246</updated>
  <id>829cfda0-4857-4ce4-9c63-fac73a8310f5</id>

  
    <entry>
      <title>右辺値参照・ムーブセマンティクス -- Merge pull request #1010 from aeioaeu/patch-1</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/rvalue_ref_and_move_semantics.html"/>
      <id>a4fc781706e3bc129d61404f76228a1cd6c3041d:lang/cpp11/rvalue_ref_and_move_semantics.md</id>
      <updated>2022-12-14T19:39:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/rvalue_ref_and_move_semantics.md b/lang/cpp11/rvalue_ref_and_move_semantics.md
index 58ae89097..d258668b8 100644
--- a/lang/cpp11/rvalue_ref_and_move_semantics.md
+++ b/lang/cpp11/rvalue_ref_and_move_semantics.md
@@ -291,7 +291,7 @@ void f(T&amp;amp;&amp;amp; x) {}
 
 ### 完全転送（Perfect Forwarding）
 
-あるが関数が受け取ったパラメータを別の関数へそのまま渡したいとき、
+ある関数が受け取ったパラメータを別の関数へそのまま渡したいとき、
 右辺値は右辺値として、左辺値は左辺値として別の関数へ転送したいことがある（完全転送）。  
 ユニヴァーサル参照を用いると、呼び出し元における右辺値／左辺値という情報が、受け取り側で右辺値参照／左辺値参照という型情報によって区別可能となる。  
 しかし右辺値を右辺値参照で受け取った場合、その引数をそのまま使うと左辺値になるため再び右辺値へ変換する必要が生じる。  
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>time_point -- time_point : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/chrono/time_point.html"/>
      <id>83d70bcd16c54096a29d2938153c6cff75f4fdb6:reference/chrono/time_point.md</id>
      <updated>2022-12-14T19:33:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/time_point.md b/reference/chrono/time_point.md
index ef310f65d..7098302b1 100644
--- a/reference/chrono/time_point.md
+++ b/reference/chrono/time_point.md
@@ -83,12 +83,13 @@ namespace chrono {
 
 | 名前 | 説明 | 対応バージョン |
 |------------------------------------------------|------|-------|
-| [`operator==`](time_point/op_equal.md)         | 等値判定を行う | C++11 |
-| [`operator!=`](time_point/op_not_equal.md)     | 非等値判定を行う | C++11 |
-| [`operator&amp;lt;`](time_point/op_less.md)           | 左辺が右辺より小さいか判定を行う | C++11 |
-| [`operator&amp;lt;=`](time_point/op_less_equal.md)    | 左辺が右辺以下かの判定を行う | C++11 |
-| [`operator&amp;gt;`](time_point/op_greater.md)        | 左辺が右辺より大きいか判定を行う | C++11 |
-| [`operator&amp;gt;=`](time_point/op_greater_equal.md) | 左辺が右辺以上かの判定を行う | C++11 |
+| [`operator==`](time_point/op_equal.md)         | 等値比較を行う | C++11 |
+| [`operator!=`](time_point/op_not_equal.md)     | 非等値比較を行う | C++11 |
+| [`operator&amp;lt;=&amp;gt;`](time_point/op_compare_3way.md) | 三方比較を行う | C++20 |
+| [`operator&amp;lt;`](time_point/op_less.md)           | 左辺が右辺より小さいか比較を行う | C++11 |
+| [`operator&amp;lt;=`](time_point/op_less_equal.md)    | 左辺が右辺以下かの比較を行う | C++11 |
+| [`operator&amp;gt;`](time_point/op_greater.md)        | 左辺が右辺より大きいか比較を行う | C++11 |
+| [`operator&amp;gt;=`](time_point/op_greater_equal.md) | 左辺が右辺以上かの比較を行う | C++11 |
 
 ### common_type特殊化
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;=&gt; -- time_point : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/chrono/time_point/op_compare_3way.html"/>
      <id>83d70bcd16c54096a29d2938153c6cff75f4fdb6:reference/chrono/time_point/op_compare_3way.md</id>
      <updated>2022-12-14T19:33:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/time_point/op_compare_3way.md b/reference/chrono/time_point/op_compare_3way.md
new file mode 100644
index 000000000..a38acc7e8
--- /dev/null
+++ b/reference/chrono/time_point/op_compare_3way.md
@@ -0,0 +1,64 @@
+# operator&amp;lt;=&amp;gt;
+* chrono[meta header]
+* std::chrono[meta namespace]
+* function template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::chrono {
+  template &amp;lt;class Clock, class Duration1,
+    three_way_comparable_with&amp;lt;Duration1&amp;gt; Duration2&amp;gt;
+  constexpr auto
+    operator&amp;lt;=&amp;gt;(const time_point&amp;lt;Clock, Duration1&amp;gt;&amp;amp; lhs,
+                const time_point&amp;lt;Clock, Duration2&amp;gt;&amp;amp; rhs); // (1) C++20
+}
+```
+* time_point[link /reference/chrono/time_point.md]
+
+## 概要
+三方比較を行う
+
+
+## 戻り値
+```cpp
+return lhs.time_since_epoch() &amp;lt;=&amp;gt; rhs.time_since_poch();
+```
+* time_since_epoch[link /reference/chrono/time_point/time_since_epoch.md]
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+
+using namespace std::chrono;
+
+int main()
+{
+  time_point&amp;lt;system_clock&amp;gt; tp1{ seconds{3} };
+  time_point&amp;lt;system_clock&amp;gt; tp2{ seconds{3} };
+  time_point&amp;lt;system_clock&amp;gt; tp3{ seconds{4} };
+
+  assert((tp1 &amp;lt;=&amp;gt; tp2) == 0);
+  assert((tp1 &amp;lt;=&amp;gt; tp3) != 0);
+}
+```
+* system_clock[link /reference/chrono/system_clock.md]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang):
+- [GCC](/implementation.md#gcc): 10
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- time_point : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/chrono/time_point/op_equal.html"/>
      <id>83d70bcd16c54096a29d2938153c6cff75f4fdb6:reference/chrono/time_point/op_equal.md</id>
      <updated>2022-12-14T19:33:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/time_point/op_equal.md b/reference/chrono/time_point/op_equal.md
index 689adaabe..27b413480 100644
--- a/reference/chrono/time_point/op_equal.md
+++ b/reference/chrono/time_point/op_equal.md
@@ -9,11 +9,11 @@ namespace std {
 namespace chrono {
   template &amp;lt;class Clock, class Duration1, class Duration2&amp;gt;
   bool operator==(const time_point&amp;lt;Clock, Duration1&amp;gt;&amp;amp; lhs,
-                  const time_point&amp;lt;Clock, Duration2&amp;gt;&amp;amp; rhs);           // C++11
+                  const time_point&amp;lt;Clock, Duration2&amp;gt;&amp;amp; rhs);           // (1) C++11
 
   template &amp;lt;class Clock, class Duration1, class Duration2&amp;gt;
   constexpr bool operator==(const time_point&amp;lt;Clock, Duration1&amp;gt;&amp;amp; lhs,
-                            const time_point&amp;lt;Clock, Duration2&amp;gt;&amp;amp; rhs); // C++14
+                            const time_point&amp;lt;Clock, Duration2&amp;gt;&amp;amp; rhs); // (1) C++14
 }}
 ```
 * time_point[link /reference/chrono/time_point.md]
@@ -29,6 +29,11 @@ return lhs.time_since_epoch() == rhs.time_since_poch();
 * time_since_epoch[link /reference/chrono/time_point/time_since_epoch.md]
 
 
+## 備考
+- この演算子により、以下の演算子が使用可能になる (C++20)：
+    - `operator!=`
+
+
 ## 例
 ```cpp example
 #include &amp;lt;cassert&amp;gt;
@@ -64,4 +69,5 @@ int main()
 
 ## 参照
 - [N3469 Constexpr Library Additions: chrono, v3](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3469.html)
-
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator!= -- time_point : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/chrono/time_point/op_not_equal.html"/>
      <id>83d70bcd16c54096a29d2938153c6cff75f4fdb6:reference/chrono/time_point/op_not_equal.md</id>
      <updated>2022-12-14T19:33:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/time_point/op_not_equal.md b/reference/chrono/time_point/op_not_equal.md
index 59a2b41db..0ad78ae6e 100644
--- a/reference/chrono/time_point/op_not_equal.md
+++ b/reference/chrono/time_point/op_not_equal.md
@@ -7,20 +7,21 @@
 ```cpp
 namespace std {
 namespace chrono {
+  // operator==により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class Clock, class Duration1, class Duration2&amp;gt;
   bool operator!=(const time_point&amp;lt;Clock, Duration1&amp;gt;&amp;amp; lhs,
-                  const time_point&amp;lt;Clock, Duration2&amp;gt;&amp;amp; rhs);           // C++11
+                  const time_point&amp;lt;Clock, Duration2&amp;gt;&amp;amp; rhs);           // (1) C++11
 
   template &amp;lt;class Clock, class Duration1, class Duration2&amp;gt;
   constexpr bool operator!=(const time_point&amp;lt;Clock, Duration1&amp;gt;&amp;amp; lhs,
-                            const time_point&amp;lt;Clock, Duration2&amp;gt;&amp;amp; rhs); // C++14
+                            const time_point&amp;lt;Clock, Duration2&amp;gt;&amp;amp; rhs); // (1) C++14
 }}
 ```
 * time_point[link /reference/chrono/time_point.md]
 
 
 ## 概要
-非等値の判定を行う
+非等値比較を行う
 
 
 ## 戻り値
@@ -62,4 +63,5 @@ int main()
 
 ## 参照
 - [N3469 Constexpr Library Additions: chrono, v3](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3469.html)
-
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>duration -- duration : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/chrono/duration.html"/>
      <id>d71006a8a9c60da5d75ad41d2a662c4c24d599e1:reference/chrono/duration.md</id>
      <updated>2022-12-14T19:27:53+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/duration.md b/reference/chrono/duration.md
index f0c6d3d45..9bdcbe176 100644
--- a/reference/chrono/duration.md
+++ b/reference/chrono/duration.md
@@ -114,13 +114,14 @@ namespace chrono {
 ### 比較演算
 
 | 名前 | 説明 | 対応バージョン |
-|------------------------------------------------|----------------------------|-------|
-| [`operator==`](duration/op_equal.md)         | 等値判定を行う | C++11 |
-| [`operator!=`](duration/op_not_equal.md)     | 非等値判定を行う | C++11 |
-| [`operator&amp;lt;`](duration/op_less.md)           | 左辺が右辺より小さいか判定を行う | C++11 |
-| [`operator&amp;lt;=`](duration/op_less_equal.md)    | 左辺が右辺以下かの判定を行う | C++11 |
-| [`operator&amp;gt;`](duration/op_greater.md)        | 左辺が右辺より大きいか判定を行う | C++11 |
-| [`operator&amp;gt;=`](duration/op_greater_equal.md) | 左辺が右辺以上かの判定を行う | C++11 |
+|----------------------------------------------|----------------------------|-------|
+| [`operator==`](duration/op_equal.md)         | 等値比較を行う | C++11 |
+| [`operator!=`](duration/op_not_equal.md)     | 非等値比較を行う | C++11 |
+| [`operator&amp;lt;=&amp;gt;`](duration/op_compare_3way.md) | 三方比較を行う | C++20 |
+| [`operator&amp;lt;`](duration/op_less.md)           | 左辺が右辺より小さいか比較を行う | C++11 |
+| [`operator&amp;lt;=`](duration/op_less_equal.md)    | 左辺が右辺以下かの比較を行う | C++11 |
+| [`operator&amp;gt;`](duration/op_greater.md)        | 左辺が右辺より大きいか比較を行う | C++11 |
+| [`operator&amp;gt;=`](duration/op_greater_equal.md) | 左辺が右辺以上かの比較を行う | C++11 |
 
 
 ### 入出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;=&gt; -- duration : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/chrono/duration/op_compare_3way.html"/>
      <id>d71006a8a9c60da5d75ad41d2a662c4c24d599e1:reference/chrono/duration/op_compare_3way.md</id>
      <updated>2022-12-14T19:27:53+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/duration/op_compare_3way.md b/reference/chrono/duration/op_compare_3way.md
new file mode 100644
index 000000000..7dd9b339c
--- /dev/null
+++ b/reference/chrono/duration/op_compare_3way.md
@@ -0,0 +1,68 @@
+# operator&amp;lt;=&amp;gt;
+* chrono[meta header]
+* std::chrono[meta namespace]
+* function template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::chrono {
+  template &amp;lt;class Rep1, class Period1, class Rep2, class Period2&amp;gt;
+       requires three_way_comparable&amp;lt;
+         typename common_type_t&amp;lt;
+           duration&amp;lt;Rep1, Period1&amp;gt;,
+           duration&amp;lt;Rep2, Period2&amp;gt;
+         &amp;gt;::rep
+       &amp;gt;
+  constexpr auto
+    operator&amp;lt;=&amp;gt;(const duration&amp;lt;Rep1, Period1&amp;gt;&amp;amp; lhs,
+                const duration&amp;lt;Rep2, Period2&amp;gt;&amp;amp; rhs);  // (1) C++20
+}
+```
+* common_type_t[link /reference/chrono/common_type.md]
+
+## 概要
+三方比較を行う
+
+
+## 戻り値
+2つの[`duration`](/reference/chrono/duration.md)の単位を合わせた上で、[`count()`](/reference/chrono/duration/count.md)の三方比較を行う。
+
+```cpp
+using ct = common_type&amp;lt;decltype(lhs), decltype(rhs)&amp;gt;::type;
+return ct(lhs).count() &amp;lt;=&amp;gt; ct(rhs).count();
+```
+* common_type[link /reference/type_traits/common_type.md]
+* count()[link /reference/chrono/duration/count.md]
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+
+using namespace std::chrono;
+
+int main()
+{
+  assert((seconds{3} &amp;lt;=&amp;gt; seconds{3}) == 0);
+  assert((seconds{3} &amp;lt;=&amp;gt; milliseconds{3000}) == 0);
+}
+```
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang):
+- [GCC](/implementation.md#gcc): 10
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- duration : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/chrono/duration/op_equal.html"/>
      <id>d71006a8a9c60da5d75ad41d2a662c4c24d599e1:reference/chrono/duration/op_equal.md</id>
      <updated>2022-12-14T19:27:53+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/duration/op_equal.md b/reference/chrono/duration/op_equal.md
index 30ff2ffc2..cb266a7ce 100644
--- a/reference/chrono/duration/op_equal.md
+++ b/reference/chrono/duration/op_equal.md
@@ -9,7 +9,7 @@ namespace std {
 namespace chrono {
   template &amp;lt;class Rep1, class Period1, class Rep2, class Period2&amp;gt;
   constexpr bool operator==(const duration&amp;lt;Rep1, Period1&amp;gt;&amp;amp; lhs,
-                            const duration&amp;lt;Rep2, Period2&amp;gt;&amp;amp; rhs);
+                            const duration&amp;lt;Rep2, Period2&amp;gt;&amp;amp; rhs); // (1) C++11
 }}
 ```
 
@@ -27,6 +27,12 @@ return ct(lhs).count() == ct(rhs).count();
 * common_type[link /reference/type_traits/common_type.md]
 * count()[link /reference/chrono/duration/count.md]
 
+
+## 備考
+- この演算子により、以下の演算子が使用可能になる (C++20)：
+    - `operator!=`
+
+
 ## 例
 ```cpp example
 #include &amp;lt;cassert&amp;gt;
@@ -56,4 +62,5 @@ int main()
 
 ## 参照
 - [N3469 Constexpr Library Additions: chrono, v3](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3469.html)
-
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator!= -- duration : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/chrono/duration/op_not_equal.html"/>
      <id>d71006a8a9c60da5d75ad41d2a662c4c24d599e1:reference/chrono/duration/op_not_equal.md</id>
      <updated>2022-12-14T19:27:53+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/duration/op_not_equal.md b/reference/chrono/duration/op_not_equal.md
index 98ee4ffc2..fa0e3324f 100644
--- a/reference/chrono/duration/op_not_equal.md
+++ b/reference/chrono/duration/op_not_equal.md
@@ -7,9 +7,10 @@
 ```cpp
 namespace std {
 namespace chrono {
+  // operator==により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class Rep1, class Period1, class Rep2, class Period2&amp;gt;
   constexpr bool operator!=(const duration&amp;lt;Rep1, Period1&amp;gt;&amp;amp; lhs,
-                            const duration&amp;lt;Rep2, Period2&amp;gt;&amp;amp; rhs);
+                            const duration&amp;lt;Rep2, Period2&amp;gt;&amp;amp; rhs); // (1) C++11
 }}
 ```
 
@@ -50,4 +51,5 @@ int main()
 
 ## 参照
 - [N3469 Constexpr Library Additions: chrono, v3](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3469.html)
-
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>slice -- slice : operator==を追加 #900</title>
      <link href="https://cpprefjp.github.io/reference/valarray/slice.html"/>
      <id>5bc37292a51c45a155ec34191ac30b31b338eea5:reference/valarray/slice.md</id>
      <updated>2022-12-14T19:18:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/valarray/slice.md b/reference/valarray/slice.md
index ea8c61c7a..94cf8e3b8 100644
--- a/reference/valarray/slice.md
+++ b/reference/valarray/slice.md
@@ -21,7 +21,7 @@ namespace std {
 | [`(constructor)`](slice/op_constructor.md) | コンストラクタ             |      |
 
 
-### その他メンバ関数
+### プロパティ
 
 | 名前 | 説明 | 対応バージョン |
 |-------------------------------|--------------------------------------|------|
@@ -30,6 +30,14 @@ namespace std {
 | [`stride`](slice/stride.md) | スライスを生成する間隔を取得する     |      |
 
 
+### 比較演算子
+
+| 名前 | 説明 | 対応バージョン |
+|-----------------------------------|----------------|-------|
+| [`operator==`](slice/op_equal.md) | 等値比較を行う | C++20 |
+| `friend bool operator!=(const slice&amp;amp;, const slice&amp;amp;);` | 非等値比較を行う (`operator==`により使用可能) | C++20 |
+
+
 ## 例
 ```cpp example
 #include &amp;lt;valarray&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- slice : operator==を追加 #900</title>
      <link href="https://cpprefjp.github.io/reference/valarray/slice/op_equal.html"/>
      <id>5bc37292a51c45a155ec34191ac30b31b338eea5:reference/valarray/slice/op_equal.md</id>
      <updated>2022-12-14T19:18:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/valarray/slice/op_equal.md b/reference/valarray/slice/op_equal.md
new file mode 100644
index 000000000..d6c48e005
--- /dev/null
+++ b/reference/valarray/slice/op_equal.md
@@ -0,0 +1,65 @@
+# operator==
+* valarray[meta header]
+* std[meta namespace]
+* slice[meta class]
+* function[meta id-type]
+
+```cpp
+friend bool operator==(const slice&amp;amp; x, const slice&amp;amp; y);
+```
+
+## 概要
+`slice`オブジェクトの等値比較を行う。
+
+
+## 効果
+以下と等価：
+
+```cpp
+return x.start() == y.start() &amp;amp;&amp;amp;
+       x.size() == y.size() &amp;amp;&amp;amp;
+       x.stride() == y.stride();
+```
+* start()[link start.md]
+* size()[link size.md]
+* stride()[link stride.md]
+
+
+## 備考
+- この演算子により、以下の演算子が使用可能になる (C++20)：
+    - `operator!=`
+
+
+## 例
+```cpp example
+#include &amp;lt;valarray&amp;gt;
+#include &amp;lt;cassert&amp;gt;
+
+int main()
+{
+  std::slice s1{.start = 3, .length = 5, .stride = 7};
+  std::slice s2{.start = 3, .length = 5, .stride = 7};
+  std::slice s3{.start = 3, .length = 5, .stride = 6};
+
+  assert(s1 == s2);
+  assert(s1 != s3);
+}
+```
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang):
+- [GCC](/implementation.md#gcc): 10
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- complex : 演算子の自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/complex/complex/op_equal.html"/>
      <id>39de7762af589e4d0e94ad3206e9058223d188b9:reference/complex/complex/op_equal.md</id>
      <updated>2022-12-14T19:11:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/complex/complex/op_equal.md b/reference/complex/complex/op_equal.md
index f707f54c8..a9e14f7bf 100644
--- a/reference/complex/complex/op_equal.md
+++ b/reference/complex/complex/op_equal.md
@@ -8,7 +8,6 @@ namespace std {
   template &amp;lt;class T&amp;gt;
   bool operator==(const complex&amp;lt;T&amp;gt;&amp;amp; lhs,
                   const complex&amp;lt;T&amp;gt;&amp;amp; rhs);           // (1) C++03
-
   template &amp;lt;class T&amp;gt;
   constexpr bool operator==(const complex&amp;lt;T&amp;gt;&amp;amp; lhs,
                             const complex&amp;lt;T&amp;gt;&amp;amp; rhs); // (1) C++14
@@ -16,15 +15,14 @@ namespace std {
   template &amp;lt;class T&amp;gt;
   bool operator==(const complex&amp;lt;T&amp;gt;&amp;amp; lhs,
                   const T&amp;amp; rhs);                    // (2) C++03
-
   template &amp;lt;class T&amp;gt;
   constexpr bool operator==(const complex&amp;lt;T&amp;gt;&amp;amp; lhs,
                             const T&amp;amp; rhs);          // (2) C++14
 
+  // (2)により、以下のオーバーロードが使用可能になる (C++20)
   template &amp;lt;class T&amp;gt;
   bool operator==(const T&amp;amp; lhs,
                   const complex&amp;lt;T&amp;gt;&amp;amp; rhs);           // (3) C++03
-
   template &amp;lt;class T&amp;gt;
   constexpr bool operator==(const T&amp;amp; lhs,
                             const complex&amp;lt;T&amp;gt;&amp;amp; rhs); // (3) C++14
@@ -40,7 +38,9 @@ namespace std {
 
 
 ## 備考
-引数の型が `const T&amp;amp;` の場合、虚部（[`imag`](imag.md)`()`）は `T()`、あるいは、`0.0` とみなされる。
+- 引数の型が `const T&amp;amp;` の場合、虚部（[`imag`](imag.md)`()`）は `T()`、あるいは、`0.0` とみなされる。
+- この演算子により、以下の演算子が使用可能になる (C++20)：
+    - `operator!=`
 
 
 ## 例
@@ -69,9 +69,6 @@ int main()
 4 == (1,4):false
 ```
 
-## 参照
-- [N3302 Constexpr Library Additions: complex, v2](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3302.html)
-
 
 ## 関連項目
 
@@ -81,3 +78,8 @@ int main()
 | [`real`](real.md)               | 実部を取得、あるいは、設定する。（メンバ関数） |
 | [`imag`](imag.md)               | 虚部を取得、あるいは、設定する。（メンバ関数） |
 
+
+## 参照
+- [N3302 Constexpr Library Additions: complex, v2](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3302.html)
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator!= -- complex : 演算子の自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/complex/complex/op_not_equal.html"/>
      <id>39de7762af589e4d0e94ad3206e9058223d188b9:reference/complex/complex/op_not_equal.md</id>
      <updated>2022-12-14T19:11:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/complex/complex/op_not_equal.md b/reference/complex/complex/op_not_equal.md
index 27d0881e1..e2e485b78 100644
--- a/reference/complex/complex/op_not_equal.md
+++ b/reference/complex/complex/op_not_equal.md
@@ -5,29 +5,27 @@
 
 ```cpp
 namespace std {
+  // operator==により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class T&amp;gt;
   bool operator!=(const complex&amp;lt;T&amp;gt;&amp;amp; lhs,
-                  const complex&amp;lt;T&amp;gt;&amp;amp; rhs);           // C++03
-
+                  const complex&amp;lt;T&amp;gt;&amp;amp; rhs);           // (1) C++03
   template &amp;lt;class T&amp;gt;
   constexpr bool operator!=(const complex&amp;lt;T&amp;gt;&amp;amp; lhs,
-                            const complex&amp;lt;T&amp;gt;&amp;amp; rhs); // C++14
+                            const complex&amp;lt;T&amp;gt;&amp;amp; rhs); // (1) C++14
 
   template &amp;lt;class T&amp;gt;
   bool operator!=(const complex&amp;lt;T&amp;gt;&amp;amp; lhs,
-                  const T&amp;amp; rhs);                    // C++03
-
+                  const T&amp;amp; rhs);                    // (2) C++03
   template &amp;lt;class T&amp;gt;
   constexpr bool operator!=(const complex&amp;lt;T&amp;gt;&amp;amp; lhs,
-                            const T&amp;amp; rhs);          // C++14
+                            const T&amp;amp; rhs);          // (2) C++14
 
   template &amp;lt;class T&amp;gt;
   bool operator==(const T&amp;amp; lhs,
-                  const complex&amp;lt;T&amp;gt;&amp;amp; rhs);           // C++03
-
+                  const complex&amp;lt;T&amp;gt;&amp;amp; rhs);           // (3) C++03
   template &amp;lt;class T&amp;gt;
   constexpr bool operator==(const T&amp;amp; lhs,
-                            const complex&amp;lt;T&amp;gt;&amp;amp; rhs); // C++14
+                            const complex&amp;lt;T&amp;gt;&amp;amp; rhs); // (3) C++14
 }
 ```
 
@@ -70,10 +68,6 @@ int main()
 ```
 
 
-## 参照
-- [N3302 Constexpr Library Additions: complex, v2](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3302.html)
-
-
 ## 関連項目
 
 | 名前                        | 説明                                           |
@@ -81,3 +75,9 @@ int main()
 | [`operator==`](op_equal.md) | 等値比較を行う。                               |
 | [`real`](real.md)           | 実部を取得、あるいは、設定する。（メンバ関数） |
 | [`imag`](imag.md)           | 虚部を取得、あるいは、設定する。（メンバ関数） |
+
+
+## 参照
+- [N3302 Constexpr Library Additions: complex, v2](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3302.html)
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2024-12-20T01:26:06.000725</updated>
  <id>b45de0bd-1e7d-42da-9054-f2554beb01fa</id>

  
    <entry>
      <title>assume_aligned -- memory: is_sufficiently_aligned P2897R7(#1380)</title>
      <link href="https://cpprefjp.github.io/reference/memory/assume_aligned.html"/>
      <id>b5dd43fc76697bf7c1a321b7e84abf3f2f805a27:reference/memory/assume_aligned.md</id>
      <updated>2024-12-20T10:21:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/assume_aligned.md b/reference/memory/assume_aligned.md
index 7dbb19567..0ff53eb65 100644
--- a/reference/memory/assume_aligned.md
+++ b/reference/memory/assume_aligned.md
@@ -345,6 +345,7 @@ C++20 から標準で使用可能となる本機能だが、実装例からも
 
 - [`alignas`](../../lang/cpp11/alignas.md)
 - [`alignof`](../../lang/cpp11/alignof.md)
+- [`is_sufficiently_aligned`](is_sufficiently_aligned.md)
 
 ## 参照
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_sufficiently_aligned -- memory: is_sufficiently_aligned P2897R7(#1380)</title>
      <link href="https://cpprefjp.github.io/reference/memory/is_sufficiently_aligned.html"/>
      <id>b5dd43fc76697bf7c1a321b7e84abf3f2f805a27:reference/memory/is_sufficiently_aligned.md</id>
      <updated>2024-12-20T10:21:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/is_sufficiently_aligned.md b/reference/memory/is_sufficiently_aligned.md
new file mode 100644
index 000000000..2b9675049
--- /dev/null
+++ b/reference/memory/is_sufficiently_aligned.md
@@ -0,0 +1,82 @@
+# is_sufficiently_aligned
+* memory[meta header]
+* function template[meta id-type]
+* std[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+template&amp;lt;size_t Alignment, class T&amp;gt;
+  bool is_sufficiently_aligned(T* ptr);
+```
+
+## 概要
+ポインタ値が指定したアライメントを満たすか否かを返す。
+
+
+## 事前条件
+ポインタ`p`が、`T`に類似(similar)した型のオブジェクト`X`を指すこと。
+
+
+## 戻り値
+`X`が少なくとも`Alignment`でアライメントされるならば`true`。そうでなければ`false`。
+
+
+## 例外
+投げない
+
+
+## この機能が必要になった背景・経緯
+この関数テンプレートは[`&amp;lt;mdspan&amp;gt;`](/reference/mdspan.md)ヘッダへの[`aligned_accessor`](/reference/mdspan/aligned_accessor.md.nolink)導入に伴って必要とされた機能である。
+一方で、ポインタ値のアライメント要件を検査するユースケースは一般的と考えられたため、汎用ユーティリティとして`&amp;lt;memory&amp;gt;`ヘッダに対して機能追加された。
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;memory&amp;gt;
+#include &amp;lt;news&amp;gt;
+
+int main()
+{
+  int *ptr = new(std::align_val_t{32}) int;
+  assert( std::is_sufficiently_aligned&amp;lt;32&amp;gt;(ptr) );
+  delete ptr;
+}
+```
+* std::is_sufficiently_aligned[color ff0000]
+* std::align_val_t[link /reference/new/align_val_t.md]
+
+### 出力
+```
+```
+
+
+## 実装例
+```cpp
+// 提案文書P2897R7より引用
+template&amp;lt;size_t ByteAlignment, class ElementType&amp;gt;
+bool is_sufficiently_aligned(ElementType* p)
+{
+  return bit_cast&amp;lt;uintptr_t&amp;gt;(p) % ByteAlignment == 0;
+}
+```
+* bit_cast[link /reference/bit/bit_cast.md]
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`assume_aligned`](assume_aligned.md)
+- [アライメント指定されたデータの動的メモリ確保](/lang/cpp17/dynamic_memory_allocation_for_over-aligned_data.md)
+
+
+## 参照
+- [P2897R7 `aligned_accessor`: An mdspan accessor expressing pointer over-alignment](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2897r7.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>philox_engine -- philox_engineのサンプル : ループ内でオブジェクトを作るよう修正</title>
      <link href="https://cpprefjp.github.io/reference/random/philox_engine.html"/>
      <id>000cd8fb45da8eb4f823102d56ae6fa10b67f2ab:reference/random/philox_engine.md</id>
      <updated>2024-12-19T22:18:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/philox_engine.md b/reference/random/philox_engine.md
index 4a60b07dc..4fa2ae4b5 100644
--- a/reference/random/philox_engine.md
+++ b/reference/random/philox_engine.md
@@ -213,13 +213,12 @@ struct Vector {
 int main()
 {
   std::uint32_t seed = 12345;
-  std::philox4x32 engine;
 
   // 2x2x2個のランダムなベクトルを生成する
   for (std::uint32_t x = 0; x &amp;lt; 2; ++x) {
     for (std::uint32_t y = 0; y &amp;lt; 2; ++y) {
       for (std::uint32_t z = 0; z &amp;lt; 2; ++z) {
-        engine.seed(seed);
+        std::philox4x32 engine{seed};
         engine.set_counter({x, y, z, 0});
 
         std::uniform_real_distribution&amp;lt;float&amp;gt; dist{0, 1.0};
@@ -236,7 +235,6 @@ int main()
 }
 ```
 * std::philox4x32[link philox4x32.md]
-* engine.seed[link philox_engine/seed.md]
 * engine.set_counter[link philox_engine/set_counter.md]
 * uniform_real_distribution[link /reference/random/uniform_real_distribution.md]
 * std::uint32_t[link /reference/cstdint/uint32_t.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>set_counter -- philox_engine::set_counter : シード値を状態として保持してないことを記載</title>
      <link href="https://cpprefjp.github.io/reference/random/philox_engine/set_counter.html"/>
      <id>da031c58424518a87ddc1d52e61b2ecb779940f7:reference/random/philox_engine/set_counter.md</id>
      <updated>2024-12-19T22:13:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/philox_engine/set_counter.md b/reference/random/philox_engine/set_counter.md
index e26cde032..ab3a5d976 100644
--- a/reference/random/philox_engine/set_counter.md
+++ b/reference/random/philox_engine/set_counter.md
@@ -16,7 +16,7 @@ void set_counter(const array&amp;lt;result_type, n&amp;gt;&amp;amp; c); // (1) C++26
 
 この関数は、カウンターベースの乱数生成器において、カウンター値を直接設定することで乱数生成器を指定位置に進める (ジャンプさせる) ことができる。カウンターベースでない乱数生成器においては、乱数生成器の状態を進めるには一つひとつ乱数生成の結果を捨てなければならない場合があるが、カウンターベース乱数生成器のこの機能を使えば状態を一気に進めることができる。
 
-この機能は、シード設定と合わせて使用する。同じシード値と同じカウンター値を設定すれば、同じ乱数列を再現させることができる。
+この機能は、シード設定と合わせて使用する。同じシード値と同じカウンター値を設定すれば、同じ乱数列を再現させることができる。このクラスはシード値を状態として保持していないため、再現のためにカウンター値を設定する場合は、シード値も設定する必要がある。
 
 この関数のパラメータは、標準ライブラリで定義される[`philox4x32`](/reference/random/philox4x32.md)および[`philox4x64`](/reference/random/philox4x64.md)を使っている限りは、要素数4の符号なし32 or 64ビット整数をもつ配列である。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>philox4x32 -- 処理系の見出しが消えてた</title>
      <link href="https://cpprefjp.github.io/reference/random/philox4x32.html"/>
      <id>552254b6123a3fee218174e4472819ef125e97d5:reference/random/philox4x32.md</id>
      <updated>2024-12-19T22:05:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/philox4x32.md b/reference/random/philox4x32.md
index 1447c69d3..b0df428ac 100644
--- a/reference/random/philox4x32.md
+++ b/reference/random/philox4x32.md
@@ -77,6 +77,7 @@ int main()
 ### 言語
 - C++26
 
+### 処理系
 - [Clang](/implementation.md#clang): 19 [mark noimpl]
 - [GCC](/implementation.md#gcc): 14 [mark noimpl]
 - [ICC](/implementation.md#icc): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>philox4x64 -- 処理系の見出しが消えてた</title>
      <link href="https://cpprefjp.github.io/reference/random/philox4x64.html"/>
      <id>552254b6123a3fee218174e4472819ef125e97d5:reference/random/philox4x64.md</id>
      <updated>2024-12-19T22:05:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/philox4x64.md b/reference/random/philox4x64.md
index dc9712842..5ca75d307 100644
--- a/reference/random/philox4x64.md
+++ b/reference/random/philox4x64.md
@@ -77,6 +77,7 @@ int main()
 ### 言語
 - C++26
 
+### 処理系
 - [Clang](/implementation.md#clang): 19 [mark noimpl]
 - [GCC](/implementation.md#gcc): 14 [mark noimpl]
 - [ICC](/implementation.md#icc): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>philox4x32 -- fix 日本語</title>
      <link href="https://cpprefjp.github.io/reference/random/philox4x32.html"/>
      <id>b3291717f938ec4580220aec64fe4fee6a87ef28:reference/random/philox4x32.md</id>
      <updated>2024-12-19T22:04:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/philox4x32.md b/reference/random/philox4x32.md
index 541bdb51e..1447c69d3 100644
--- a/reference/random/philox4x32.md
+++ b/reference/random/philox4x32.md
@@ -34,7 +34,7 @@ namespace std {
 
 
 ## 備考
-- ここではラウンド数として`r = 10`を設定している。この値を大きくすれば乱数の品質は向上し、統計的により良い分布になっていく。`10`という値は既知の統計検定の合格する最小値よりやや大きめであり、広く使用されている値である。言い換えれば、適度な性能コストで統計的な安全マージンを提供している
+- ここではラウンド数として`r = 10`を設定している。この値を大きくすれば乱数の品質は向上し、統計的により良い分布になっていく。`10`という値は既知の統計検定に合格する最小値よりやや大きめであり、広く使用されている値である。言い換えれば、適度な性能コストで統計的な安全マージンを提供している
     - `r = 7`でも統計的な欠陥は見つかっていないが、実際には`r = 10`だけが広く使われている
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>philox4x64 -- fix 日本語</title>
      <link href="https://cpprefjp.github.io/reference/random/philox4x64.html"/>
      <id>b3291717f938ec4580220aec64fe4fee6a87ef28:reference/random/philox4x64.md</id>
      <updated>2024-12-19T22:04:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/philox4x64.md b/reference/random/philox4x64.md
index 62a8fa34e..dc9712842 100644
--- a/reference/random/philox4x64.md
+++ b/reference/random/philox4x64.md
@@ -34,7 +34,7 @@ namespace std {
 
 
 ## 備考
-- ここではラウンド数として`r = 10`を設定している。この値を大きくすれば乱数の品質は向上し、統計的により良い分布になっていく。`10`という値は既知の統計検定の合格する最小値よりやや大きめであり、広く使用されている値である。言い換えれば、適度な性能コストで統計的な安全マージンを提供している
+- ここではラウンド数として`r = 10`を設定している。この値を大きくすれば乱数の品質は向上し、統計的により良い分布になっていく。`10`という値は既知の統計検定に合格する最小値よりやや大きめであり、広く使用されている値である。言い換えれば、適度な性能コストで統計的な安全マージンを提供している
     - `r = 7`でも統計的な欠陥は見つかっていないが、実際には`r = 10`だけが広く使われている
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
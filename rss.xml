<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2024-07-12T14:39:48.706692</updated>
  <id>065b1bac-ddc3-4b95-9138-3791024e888e</id>

  
    <entry>
      <title>constexpr if 文 [P0292R2] -- コードコメント内の提案文書番号の修正</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/if_constexpr.html"/>
      <id>94669bfb50f4fe4664568864d048a6f6377f8166:lang/cpp17/if_constexpr.md</id>
      <updated>2024-07-12T20:54:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/if_constexpr.md b/lang/cpp17/if_constexpr.md
index c2febe1f4..b417ae33f 100644
--- a/lang/cpp17/if_constexpr.md
+++ b/lang/cpp17/if_constexpr.md
@@ -364,7 +364,7 @@ constexpr_if (condition)
 constexpr_else
   statement
 
-// P0128R0
+// P0128R1
 constexpr if (condition)
   statement
 constexpr_else constexpr if (condition)
@@ -477,4 +477,4 @@ template &amp;lt;int arg, typename ... Args&amp;gt; int do_something(Args... args) {
 - [C++1z if constexpr文 - Faith and Brave - C++で遊ぼう](https://faithandbrave.hateblo.jp/entry/2016/12/22/171238)
 - [[cfe-dev] Clang getting involved](https://lists.llvm.org/pipermail/cfe-dev/2014-March/035801.html)
 - [`__if_exists` Statement | Microsoft Docs](https://docs.microsoft.com/ja-jp/cpp/cpp/if-exists-statement)
-- [Issue 2518: Conformance requirements and #error/#warning - WG21 CWG Issues](https://wg21.cmeerw.net/cwg/issue2518)
\ No newline at end of file
+- [Issue 2518: Conformance requirements and #error/#warning - WG21 CWG Issues](https://wg21.cmeerw.net/cwg/issue2518)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>tshino</name>
        <email>tshino@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>matrix_inf_norm -- matrix_inf_norm / matrix_one_norm : 番号付きリストが通常のリストになってしまう問題を修正 #1298</title>
      <link href="https://cpprefjp.github.io/reference/linalg/matrix_inf_norm.html"/>
      <id>9dae3cf32805754936870534e3910c277b37577d:reference/linalg/matrix_inf_norm.md</id>
      <updated>2024-07-12T12:38:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/matrix_inf_norm.md b/reference/linalg/matrix_inf_norm.md
index f11272888..93c3390e5 100644
--- a/reference/linalg/matrix_inf_norm.md
+++ b/reference/linalg/matrix_inf_norm.md
@@ -50,8 +50,8 @@ namespace std::linalg {
 
 ## 戻り値
 - (1), (2): `A`が $m \times n$ 行列とすると、以下の値を返す。
-  1. もし、`m`が0なら`init`
-  2. そうでないなら、以下の式の値
+    1. もし、`m`が0なら`init`
+    2. そうでないなら、以下の式の値
 
 $$
 \verb|init| + \max_{i = 0, \dots ,m - 1}\sum_{j = 0}^{n - 1} |\verb|A[|i, j\verb|]||
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>matrix_one_norm -- matrix_inf_norm / matrix_one_norm : 番号付きリストが通常のリストになってしまう問題を修正 #1298</title>
      <link href="https://cpprefjp.github.io/reference/linalg/matrix_one_norm.html"/>
      <id>9dae3cf32805754936870534e3910c277b37577d:reference/linalg/matrix_one_norm.md</id>
      <updated>2024-07-12T12:38:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/matrix_one_norm.md b/reference/linalg/matrix_one_norm.md
index f736b56f9..e4d7e5c70 100644
--- a/reference/linalg/matrix_one_norm.md
+++ b/reference/linalg/matrix_one_norm.md
@@ -50,8 +50,8 @@ namespace std::linalg {
 
 ## 戻り値
 - (1), (2): `A`が $m \times n$ 行列とすると、以下の値を返す。
-  1. もし、`n`が0なら`init`
-  2. そうでないなら、以下の式の値
+    1. もし、`n`が0なら`init`
+    2. そうでないなら、以下の式の値
 
 $$
 \verb|init| + \max_{j = 0, \dots ,n - 1}\sum_{i = 0}^{m - 1} |\verb|A[|i, j\verb|]||
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>vector_abs_sum -- linalg : レイアウトの調整とargmaxのエラーを修正 (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/vector_abs_sum.html"/>
      <id>5e743f5713c1e34640d601c07ff7f8b03669871f:reference/linalg/vector_abs_sum.md</id>
      <updated>2024-07-12T12:22:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/vector_abs_sum.md b/reference/linalg/vector_abs_sum.md
index 774fb08c2..d1f87f25f 100644
--- a/reference/linalg/vector_abs_sum.md
+++ b/reference/linalg/vector_abs_sum.md
@@ -48,18 +48,18 @@ namespace std::linalg {
 
 ## 戻り値
 - (1), (2): `N`を`v`の次元`v.extent(0)`とすると、以下を返す。
-    - もし`N`が0なら`init`
-    - そうでない場合、もし`InVec::value_type`が算術型なら以下の式の値
+    + もし`N`が0なら`init`
+    + そうでない場合、もし`InVec::value_type`が算術型なら以下の式の値
 
-$$
-\sum_{i = 0}^{N - 1} |\verb|v[|i\verb|]|| + \verb|init|
-$$
+    $$
+    \sum_{i = 0}^{N - 1} |\verb|v[|i\verb|]|| + \verb|init|
+    $$
 
-    - そうでない場合、以下の式の値
+    + そうでない場合、以下の式の値
 
-$$
-\sum_{i = 0}^{N - 1} \left\{|\mathrm{Re}(\verb|v[|i\verb|]|)| + |\mathrm{Im}(\verb|v[|i\verb|]|)|\right\} + \verb|init|
-$$
+    $$
+    \sum_{i = 0}^{N - 1} \left\{|\mathrm{Re}(\verb|v[|i\verb|]|)| + |\mathrm{Im}(\verb|v[|i\verb|]|)|\right\} + \verb|init|
+    $$
 
 
 - (3), (4): `T`を`typename InVec::value_type`とすると、
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>vector_idx_abs_sum -- linalg : レイアウトの調整とargmaxのエラーを修正 (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/vector_idx_abs_max.html"/>
      <id>5e743f5713c1e34640d601c07ff7f8b03669871f:reference/linalg/vector_idx_abs_max.md</id>
      <updated>2024-07-12T12:22:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/vector_idx_abs_max.md b/reference/linalg/vector_idx_abs_max.md
index 85b4e234d..756b4f877 100644
--- a/reference/linalg/vector_idx_abs_max.md
+++ b/reference/linalg/vector_idx_abs_max.md
@@ -35,15 +35,15 @@ namespace std::linalg {
     + もし`N`が0なら[`std::numeric_limits`](/reference/limits/numeric_limits.md)`&amp;lt;typename InVec::size_type&amp;gt;::max()`
     + そうでない場合、もし`InVec::value_type`が算術型なら絶対値が最大の最初の`v`の成分のインデックス。つまり、
 
-$$
-\argmax_{i = 0, \dots, N - 1} |\verb|v[|i\verb|]||
-$$
+    $$
+    \mathop{\mathrm{argmax}}\limits_{i = 0, \dots, N - 1} |\verb|v[|i\verb|]||
+    $$
 
     + そうでない場合、
 
-$$
-\argmax_{i = 0, \dots, N - 1}\left\{|\mathrm{Re}(\verb|v[|i\verb|]|)| + |\mathrm{Im}(\verb|v[|i\verb|]|)|\right\}
-$$
+    $$
+    \mathop{\mathrm{argmax}}\limits_{i = 0, \dots, N - 1}\left\{|\mathrm{Re}(\verb|v[|i\verb|]|)| + |\mathrm{Im}(\verb|v[|i\verb|]|)|\right\}
+    $$
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>vector_sum_of_squares -- linalg : レイアウトの調整とargmaxのエラーを修正 (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/vector_sum_of_squares.html"/>
      <id>5e743f5713c1e34640d601c07ff7f8b03669871f:reference/linalg/vector_sum_of_squares.md</id>
      <updated>2024-07-12T12:22:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/vector_sum_of_squares.md b/reference/linalg/vector_sum_of_squares.md
index be29e69b5..8b546813b 100644
--- a/reference/linalg/vector_sum_of_squares.md
+++ b/reference/linalg/vector_sum_of_squares.md
@@ -1,4 +1,4 @@
-# sum_of_squares_result
+# vector_sum_of_squares
 
 * [mathjax enable]
 * linalg[meta header]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>exponential_distribution -- exponential_distribution : 例を追加</title>
      <link href="https://cpprefjp.github.io/reference/random/exponential_distribution.html"/>
      <id>c7e4c78d7b4c106e9ba43a0c771aa937fe30d6f1:reference/random/exponential_distribution.md</id>
      <updated>2024-07-12T11:47:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/exponential_distribution.md b/reference/random/exponential_distribution.md
index 1bec2268c..338237106 100644
--- a/reference/random/exponential_distribution.md
+++ b/reference/random/exponential_distribution.md
@@ -79,6 +79,7 @@ $$ p(x \mid \lambda) = \lambda e^{-\lambda x} $$
 
 
 ## 例
+### 基本的な使い方
 ```cpp example
 #include &amp;lt;random&amp;gt;
 #include &amp;lt;fstream&amp;gt;
@@ -102,7 +103,7 @@ int main()
 * std::ofstream[link /reference/fstream/basic_ofstream.md]
 * dist(engine)[link exponential_distribution/op_call.md]
 
-### 出力
+#### 出力
 ```
 ```
 
@@ -110,14 +111,77 @@ int main()
 
 ![](https://raw.githubusercontent.com/cpprefjp/image/master/reference/random/exponential_distribution/exponential_distribution.png)
 
+### コールセンターに電話がかかってくる時間間隔をシミュレート
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;random&amp;gt;
+
+int main() {
+  // 平均的に1時間に30回（1回あたり2分間隔）の電話がかかってくる
+  double average_calls_per_hour = 30.0;
+
+  std::random_device seed_gen;
+  std::default_random_engine engine{seed_gen()};
+
+  // 指数分布を定義 (平均値は1/lambdaで定義されるため逆数をとる)
+  std::exponential_distribution&amp;lt;double&amp;gt; dist{average_calls_per_hour / 60.0};
+
+  // 1時間分の電話の間隔をシミュレート
+  double time = 0;
+  while (time &amp;lt; 60) {
+    double wait_time = dist(engine);
+    time += wait_time;
+    if (time &amp;lt; 60) {
+      std::cout &amp;lt;&amp;lt; &amp;#34;Phone call after &amp;#34; &amp;lt;&amp;lt; wait_time &amp;lt;&amp;lt; &amp;#34; minute wait\n&amp;#34;;
+    }
+  }
+}
+```
+* std::exponential_distribution[color ff0000]
+* dist(engine)[link exponential_distribution/op_call.md]
+
+#### 出力例
+```
+Phone call after 0.118293 minute wait
+Phone call after 2.67793 minute wait
+Phone call after 3.46596 minute wait
+Phone call after 1.58166 minute wait
+Phone call after 0.704957 minute wait
+Phone call after 2.09809 minute wait
+Phone call after 0.168292 minute wait
+Phone call after 1.05299 minute wait
+Phone call after 3.4055 minute wait
+Phone call after 1.06941 minute wait
+Phone call after 4.99887 minute wait
+Phone call after 3.4023 minute wait
+Phone call after 3.37294 minute wait
+Phone call after 1.69335 minute wait
+Phone call after 1.21446 minute wait
+Phone call after 0.765484 minute wait
+Phone call after 0.590176 minute wait
+Phone call after 0.0506416 minute wait
+Phone call after 1.64168 minute wait
+Phone call after 1.93174 minute wait
+Phone call after 0.903994 minute wait
+Phone call after 3.06768 minute wait
+Phone call after 2.37803 minute wait
+Phone call after 0.597241 minute wait
+Phone call after 1.67885 minute wait
+Phone call after 0.756916 minute wait
+Phone call after 2.09694 minute wait
+Phone call after 1.22043 minute wait
+Phone call after 3.05816 minute wait
+Phone call after 3.10884 minute wait
+Phone call after 2.60918 minute wait
+```
+
 ## バージョン
 ### 言語
 - C++11
 
 ### 処理系
-- [Clang](/implementation.md#clang): 
+- [Clang](/implementation.md#clang): 7.1 [mark verified]
 - [GCC](/implementation.md#gcc): 4.7.2 [mark verified]
-- [ICC](/implementation.md#icc): 
 - [Visual C++](/implementation.md#visual_cpp): 
 
 ### 参考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>poisson_distribution -- poisson_distribution : 例を追加</title>
      <link href="https://cpprefjp.github.io/reference/random/poisson_distribution.html"/>
      <id>2819232f6315dcf3440504bb89196840f051434f:reference/random/poisson_distribution.md</id>
      <updated>2024-07-12T11:29:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/poisson_distribution.md b/reference/random/poisson_distribution.md
index d4939dae9..d9c3c5222 100644
--- a/reference/random/poisson_distribution.md
+++ b/reference/random/poisson_distribution.md
@@ -22,7 +22,7 @@ $$ p(x \mid \mu) = \frac{e^{-\mu} \mu^x}{x!} $$
 この数式においてμ(mu)は、平均値(mean)である。
 
 
-ポワソン分布は、以下のような用途に使用できる：
+ポワソン分布は、まれにしか起こらない事象が何回起こるかを求めるために使用できる確率分布である。以下のような用途に使用できる：
 
 - ある交差点で1時間に起きる事故の件数
 - 国道1キロメートル当たりのレストランの数
@@ -80,6 +80,7 @@ $$ p(x \mid \mu) = \frac{e^{-\mu} \mu^x}{x!} $$
 
 
 ## 例
+### 基本的な使い方
 ```cpp example
 #include &amp;lt;random&amp;gt;
 #include &amp;lt;fstream&amp;gt;
@@ -104,7 +105,7 @@ int main()
 * std::ofstream[link /reference/fstream/basic_ofstream.md]
 * dist(engine)[link poisson_distribution/op_call.md]
 
-### 出力
+#### 出力
 ```
 ```
 
@@ -112,19 +113,58 @@ int main()
 
 ![](https://raw.githubusercontent.com/cpprefjp/image/master/reference/random/poisson_distribution/poisson_distribution.png)
 
+
+### 地震が1ヶ月に平均1回起こるとして1年間をシミュレート
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;random&amp;gt;
+
+int main() {
+  // 平均的に1ヶ月に1回の地震が起こるとする
+  double average_quakes = 1.0;
+
+  std::random_device seed_gen;
+  std::default_random_engine engine{seed_gen()};
+  std::poisson_distribution&amp;lt;int&amp;gt; dist{average_quakes};
+
+  // 1年間 (12ヶ月) の地震の回数をシミュレート
+  for (int month = 1; month &amp;lt;= 12; ++month) {
+    int quakes = dist(engine);
+    std::cout &amp;lt;&amp;lt; &amp;#34;Month &amp;#34; &amp;lt;&amp;lt; month &amp;lt;&amp;lt; &amp;#34;: &amp;#34; &amp;lt;&amp;lt; quakes &amp;lt;&amp;lt; &amp;#34; earthquake(s)\n&amp;#34;;
+  }
+}
+```
+* std::poisson_distribution[color ff0000]
+* dist(engine)[link poisson_distribution/op_call.md]
+
+#### 出力例
+```
+Month 1: 1 earthquake(s)
+Month 2: 2 earthquake(s)
+Month 3: 2 earthquake(s)
+Month 4: 0 earthquake(s)
+Month 5: 0 earthquake(s)
+Month 6: 1 earthquake(s)
+Month 7: 1 earthquake(s)
+Month 8: 1 earthquake(s)
+Month 9: 2 earthquake(s)
+Month 10: 2 earthquake(s)
+Month 11: 2 earthquake(s)
+Month 12: 1 earthquake(s)
+```
+
 ## バージョン
 ### 言語
 - C++11
 
 ### 処理系
-- [Clang](/implementation.md#clang): 
+- [Clang](/implementation.md#clang): 7 [mark verified]
 - [GCC](/implementation.md#gcc): 4.7.2 [mark verified]
-- [ICC](/implementation.md#icc): 
 - [Visual C++](/implementation.md#visual_cpp): 
 
 ### 参考
 - [ポワソン分布 - Wikipedia](https://ja.wikipedia.org/wiki/ポアソン分布)
 - [ポアソン分布 - 統計・データ解析](https://okumuralab.org/~okumura/stat/poisson.html)
 - [ポアソン分布 - NtRand](http://www.ntrand.com/jp/poisson-distribution/)
-
+- [［データ分析］ポアソン分布 ～ 100年に1人の天才は何人現れる？：やさしい確率分布 - ＠IT](https://atmarkit.itmedia.co.jp/ait/articles/2407/11/news002.html)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
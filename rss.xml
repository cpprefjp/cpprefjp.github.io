<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-02-16T03:44:47.028818</updated>
  <id>2888fcec-7768-4601-95a7-79cab9bf6d15</id>

  
    <entry>
      <title>cmath -- &lt;cmath&gt; : C++23での変更概要をまとめた #1067</title>
      <link href="https://cpprefjp.github.io/reference/cmath.html"/>
      <id>a26647ae2a5f030130be55e76162716598002d6c:reference/cmath.md</id>
      <updated>2023-02-16T12:40:39+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath.md b/reference/cmath.md
index 9bfc4a6cd..3ac2fc19f 100644
--- a/reference/cmath.md
+++ b/reference/cmath.md
@@ -85,6 +85,37 @@
     * Promoted[italic]
 
 
+### C++23での差異
+#### constexpr対応
+C++23では、多くの数学関数が`constexpr`に対応し、定数式内で使用できるようになった。C++23時点では、コンパイラベンダの負担が低い機能を`constexpr`対応した。
+
+C++23で`constexpr`対応する関数の条件は以下：
+
+1. 有理数の集合、または実数のどこにも密でない部分集合に作用すると見なされ、関数が閉じていること
+2. 関数が丸めモードに強く依存しないこと
+
+[`exp()`](cmath/exp.md)、[`sqrt()`](cmath/sqrt.md)、[`cos()`](cmath/cos.md)、[`sin()`](cmath/sin.md)は1. の条件を満たさないため、C++23では`constexpr`に対応しない。
+
+[`nearbyint`](cmath/nearbyint.md)は2. の条件を満たさないため、C++23では`constexpr`に対応しない。
+
+なお、C++20では[`lerp()`](cmath/lerp.md)のみ`constexpr`に対応している。これはC標準ライブラリからの移植ではなく、C++で標準化された関数だからである。
+
+#### 拡張浮動小数点数型への対応
+C++23では[`&amp;lt;stdfloat&amp;gt;`](stdfloat.md.nolink)に拡張浮動小数点数型が追加された。その対応として、以下のような`float`、`double`、`long double`に対するオーバーロードは、
+
+```cpp
+float abs(float x);
+double abs(double x);
+long double abs(long double x);
+```
+
+以下のように`floating-point-type`へのオーバーロードに統合され、拡張浮動小数点数型も扱えるようになった。
+
+```cpp
+floating-point-type abs(floating-point-type x);
+```
+
+
 ## &amp;lt;a id=&amp;#34;error-handling&amp;#34; href=&amp;#34;#error-handling&amp;#34;&amp;gt;エラーの扱い&amp;lt;/a&amp;gt;
 `&amp;lt;cmath&amp;gt;` で提供される各関数は、特に明記されていない限り、引数の型が表現できる全ての値についての挙動が定義されている。
 なお、ここで言う「挙動が定義されている」とは、未定義動作を引き起こさないというだけで、エラーが発生したり、実装依存の挙動となる場合がある事に注意。
@@ -169,6 +200,18 @@ C++03 までの場合、[`errno`](cerrno/errno.md) でしか通知されない
 特に、[`fesetround`](cfenv/fesetround.md) で設定した丸め方式に従うとは限らないため、注意が必要である。
 
 
+## 定数式になる条件
+
+`constexpr`対応する数学関数において、以下のいずれかの条件に合致する場合、定数式とならない (引数によってコンパイルエラーになる)
+
+- [`FE_INEXACT`](cfenv/fe_inexact.md)以外の、以下の浮動小数点例外が発生した場合：
+    - [`FE_DIVBYZERO`](cfenv/fe_divbyzero.md) (ゼロ除算)
+    - [`FE_INVALID`](cfenv/fe_invalid.md) (不正な演算)
+    - [`FE_OVERFLOW`](cfenv/fe_overflow.md) (オーバーフロー)
+    - [`FE_UNDERFLOW`](cfenv/fe_underflow.md) (アンダーフロー)
+- [`math_errhandling`](cmath/math_errhandling.md) `&amp;amp;` [`MATH_ERRNO`](cmath/math_errno.md)が真で、[`errno`](cerrno/errno.md)が設定された場合
+
+
 ## &amp;lt;a id=&amp;#34;trigonometric-functions&amp;#34; href=&amp;#34;#trigonometric-functions&amp;#34;&amp;gt;三角関数&amp;lt;/a&amp;gt;
 
 | 名前 | 説明 | 対応バージョン |
@@ -417,3 +460,5 @@ NaN を返さなければならないが定義域エラーを報告してはな
 - [N1568 Proposed additions to TR-1 to improve compatibility with C99](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1568.htm)
 - [P00175R0 Synopses for the C library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0175r0.html)
     - C++17 から`f`、`l`サフィックス付きのC関数を導入
+- [P0533R9 constexpr for `&amp;lt;cmath&amp;gt;` and `&amp;lt;cstdlib&amp;gt;`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p0533r9.pdf)
+    - C++23での、一部関数の`constexpr`対応
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>shared_timed_mutex -- Merge pull request #1126 from cpprefjp/yutopp-patch-1</title>
      <link href="https://cpprefjp.github.io/reference/shared_mutex/shared_timed_mutex.html"/>
      <id>24c4e8a3e69f4bba9ea5eb43ad44588fb8340f3f:reference/shared_mutex/shared_timed_mutex.md</id>
      <updated>2023-02-15T19:07:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/shared_mutex/shared_timed_mutex.md b/reference/shared_mutex/shared_timed_mutex.md
index 64940c2d7..07aaa1a92 100644
--- a/reference/shared_mutex/shared_timed_mutex.md
+++ b/reference/shared_mutex/shared_timed_mutex.md
@@ -96,7 +96,7 @@ public:
   {
     int local_count;
     {
-      std::shared_lock&amp;lt;std::shared_mutex&amp;gt; lock(mtx_);
+      std::shared_lock&amp;lt;std::shared_timed_mutex&amp;gt; lock(mtx_);
       local_count = count_;
     } // 共有ロックをここで手放す
     print_value(local_count);
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>shared_timed_mutex -- typo/コンパイルエラーの修正: shared_mutex→shared_timed_mutex</title>
      <link href="https://cpprefjp.github.io/reference/shared_mutex/shared_timed_mutex.html"/>
      <id>20ed53df537f4456bc971969411f1277bbeb22f0:reference/shared_mutex/shared_timed_mutex.md</id>
      <updated>2023-02-15T17:44:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/shared_mutex/shared_timed_mutex.md b/reference/shared_mutex/shared_timed_mutex.md
index 64940c2d7..07aaa1a92 100644
--- a/reference/shared_mutex/shared_timed_mutex.md
+++ b/reference/shared_mutex/shared_timed_mutex.md
@@ -96,7 +96,7 @@ public:
   {
     int local_count;
     {
-      std::shared_lock&amp;lt;std::shared_mutex&amp;gt; lock(mtx_);
+      std::shared_lock&amp;lt;std::shared_timed_mutex&amp;gt; lock(mtx_);
       local_count = count_;
     } // 共有ロックをここで手放す
     print_value(local_count);
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yutopp</name>
        <email>yutopp@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>epsilon -- fix external link (close #1123)</title>
      <link href="https://cpprefjp.github.io/reference/limits/numeric_limits/epsilon.html"/>
      <id>8203fdd4e47fe92368e78d40c7821cb1d6bae2b9:reference/limits/numeric_limits/epsilon.md</id>
      <updated>2023-02-15T11:56:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/limits/numeric_limits/epsilon.md b/reference/limits/numeric_limits/epsilon.md
index 9f969b62c..3af48f808 100644
--- a/reference/limits/numeric_limits/epsilon.md
+++ b/reference/limits/numeric_limits/epsilon.md
@@ -57,7 +57,7 @@ equal
 ```
 
 ## 参照
-- [C++ FAQ - Why doesn&amp;#39;t my floating-point comparison work?](http://www.cs.technion.ac.il/users/yechiel/c++-faq/floating-point-arith.html)
+- [C++ FAQ - Why doesn&amp;#39;t my floating-point comparison work?](https://isocpp.org/wiki/faq/newbie#floating-point-arith)
 - [Comparing Floating Point Numbers, 2012 Edition](https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/)
 - [浮動小数比較の落とし穴 - trinoの走り書き](http://d.hatena.ne.jp/n-trino/20161101#p1)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
</feed>
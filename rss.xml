<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-04-06T04:31:28.920612</updated>
  <id>3b085da0-9302-4101-92a6-74921745cfa0</id>

  
    <entry>
      <title>コンストラクタ -- update istreambuf_iterator constructor</title>
      <link href="https://cpprefjp.github.io/reference/iterator/istreambuf_iterator/op_constructor.html"/>
      <id>aa6976390f6b99836bccb8df2a5db12a510fe8b1:reference/iterator/istreambuf_iterator/op_constructor.md</id>
      <updated>2025-04-06T13:27:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/istreambuf_iterator/op_constructor.md b/reference/iterator/istreambuf_iterator/op_constructor.md
index 2bbdf5059..9c481c9cf 100644
--- a/reference/iterator/istreambuf_iterator/op_constructor.md
+++ b/reference/iterator/istreambuf_iterator/op_constructor.md
@@ -5,18 +5,31 @@
 * function[meta id-type]
 
 ```cpp
-constexpr istreambuf_iterator() noexcept;
-istreambuf_iterator(const istreambuf_iterator&amp;amp;) noexcept = default;
-istreambuf_iterator(istream_type&amp;amp; s) noexcept;
-istreambuf_iterator(streambuf_type* s) noexcept;
-istreambuf_iterator(const proxy&amp;amp; p) noexcept;
+istreambuf_iterator() throw();            // (1) C++03
+constexpr istreambuf_iterator() noexcept; // (1) C++11
+
+constexpr istreambuf_iterator(default_sentinel_t) noexcept; // (2) C++11
+
+istreambuf_iterator(const istreambuf_iterator&amp;amp;) noexcept = default; // (3) C++11
+
+istreambuf_iterator(istream_type&amp;amp; s) throw();  // (4) C++03
+istreambuf_iterator(istream_type&amp;amp; s) noexcept; // (4) C++11
+
+istreambuf_iterator(streambuf_type* s) throw();  // (5) C++03
+istreambuf_iterator(streambuf_type* s) noexcept; // (5) C++11
+
+istreambuf_iterator(const proxy&amp;amp; p) throw();  // (6) C++03
+istreambuf_iterator(const proxy&amp;amp; p) noexcept; // (6) C++11
 ```
+* default_sentinel_t[link /reference/iterator/default_sentinel_t.md]
 
 ## istreambuf_iteratorオブジェクトの構築
-- `istreambuf_iterator()`&amp;lt;br/&amp;gt;デフォルトコンストラクタメンバ変数として保持する`streambuf`オブジェクトへのポインタをヌル初期化する。
-- `istreambuf_iterator(istreamtype&amp;amp; s) noexcept`&amp;lt;br/&amp;gt;`s.rdbuf()`をメンバ変数として保持する。
-- `istreambuf_iterator(streambuf_type* s) noexcept`&amp;lt;br/&amp;gt;`s`をメンバ変数として保持する
-- `istreambuf_iterator(const proxy&amp;amp; p) noexcept`&amp;lt;br/&amp;gt;後置`operator++()`が返すであろうproxyオブジェクトを受け取り、そのオブジェクトが指す`streambuf`オブジェクトへのポインタをメンバ変数として保持する。
+- (1) : デフォルトコンストラクタ。メンバ変数として保持する`streambuf`オブジェクトへのポインタをヌル初期化する。
+- (2) : [`default_sentinel`](/reference/iterator/default_sentinel_t.md)を受け取り、(1)と同等の構築をより明示的に行う。
+- (3) : コピーコンストラクタ。
+- (4) : `s.rdbuf()`をメンバ変数として保持する。
+- (5) : `s`をメンバ変数として保持する。
+- (6) : 後置`operator++()`が返すであろうproxyオブジェクトを受け取り、そのオブジェクトが指す`streambuf`オブジェクトへのポインタをメンバ変数として保持する。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>splice -- Merge pull request #1434 from Gumichocopengin8/fix/unnecessary-move-in-list-splice</title>
      <link href="https://cpprefjp.github.io/reference/list/list/splice.html"/>
      <id>b4e98464dc2a30bb30b29c9738ab145142729df0:reference/list/list/splice.md</id>
      <updated>2025-04-06T11:25:12+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/list/list/splice.md b/reference/list/list/splice.md
index a04fcd507..1ef73e11b 100644
--- a/reference/list/list/splice.md
+++ b/reference/list/list/splice.md
@@ -74,7 +74,6 @@ void splice(const_iterator position, list&amp;amp;&amp;amp; x,
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;list&amp;gt;
-#include &amp;lt;utility&amp;gt; // move
 
 template &amp;lt;class T&amp;gt;
 void print(const std::list&amp;lt;T&amp;gt;&amp;amp; ls)
@@ -90,7 +89,7 @@ int main()
     std::list&amp;lt;int&amp;gt; xs = {4, 5, 6};
     std::list&amp;lt;int&amp;gt; ys = {1, 2, 3};
 
-    xs.splice(xs.begin(), std::move(ys));
+    xs.splice(xs.begin(), ys);
 
     print(xs);
   }
@@ -99,7 +98,7 @@ int main()
     std::list&amp;lt;int&amp;gt; xs = {4, 5, 6};
     std::list&amp;lt;int&amp;gt; ys = {1, 2, 3};
 
-    xs.splice(xs.begin(), std::move(ys), ys.begin());
+    xs.splice(xs.begin(), ys, ys.begin());
 
     print(xs);
   }
@@ -108,7 +107,7 @@ int main()
     std::list&amp;lt;int&amp;gt; xs = {4, 5, 6};
     std::list&amp;lt;int&amp;gt; ys = {1, 2, 3};
 
-    xs.splice(xs.begin(), std::move(ys), ys.begin(), std::next(ys.begin(), 2));
+    xs.splice(xs.begin(), ys, ys.begin(), std::next(ys.begin(), 2));
 
     print(xs);
   }
@@ -117,7 +116,7 @@ int main()
     std::list&amp;lt;int&amp;gt; xs = {1, 2, 3};
     std::list&amp;lt;int&amp;gt; ys = {4, 5, 6};
 
-    xs.splice(xs.end(), std::move(ys));
+    xs.splice(xs.end(), ys);
 
     print(xs);
   }
@@ -125,7 +124,6 @@ int main()
 ```
 * splice[color ff0000]
 * begin()[link begin.md]
-* std::move[link /reference/utility/move.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>splice -- fix: remove unnecessary `std::move` in splice of `std::list`</title>
      <link href="https://cpprefjp.github.io/reference/list/list/splice.html"/>
      <id>3fb56b866798869aa88bf8b556f86df3d628ae5d:reference/list/list/splice.md</id>
      <updated>2025-04-05T07:35:03-07:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/list/list/splice.md b/reference/list/list/splice.md
index a04fcd507..1ef73e11b 100644
--- a/reference/list/list/splice.md
+++ b/reference/list/list/splice.md
@@ -74,7 +74,6 @@ void splice(const_iterator position, list&amp;amp;&amp;amp; x,
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;list&amp;gt;
-#include &amp;lt;utility&amp;gt; // move
 
 template &amp;lt;class T&amp;gt;
 void print(const std::list&amp;lt;T&amp;gt;&amp;amp; ls)
@@ -90,7 +89,7 @@ int main()
     std::list&amp;lt;int&amp;gt; xs = {4, 5, 6};
     std::list&amp;lt;int&amp;gt; ys = {1, 2, 3};
 
-    xs.splice(xs.begin(), std::move(ys));
+    xs.splice(xs.begin(), ys);
 
     print(xs);
   }
@@ -99,7 +98,7 @@ int main()
     std::list&amp;lt;int&amp;gt; xs = {4, 5, 6};
     std::list&amp;lt;int&amp;gt; ys = {1, 2, 3};
 
-    xs.splice(xs.begin(), std::move(ys), ys.begin());
+    xs.splice(xs.begin(), ys, ys.begin());
 
     print(xs);
   }
@@ -108,7 +107,7 @@ int main()
     std::list&amp;lt;int&amp;gt; xs = {4, 5, 6};
     std::list&amp;lt;int&amp;gt; ys = {1, 2, 3};
 
-    xs.splice(xs.begin(), std::move(ys), ys.begin(), std::next(ys.begin(), 2));
+    xs.splice(xs.begin(), ys, ys.begin(), std::next(ys.begin(), 2));
 
     print(xs);
   }
@@ -117,7 +116,7 @@ int main()
     std::list&amp;lt;int&amp;gt; xs = {1, 2, 3};
     std::list&amp;lt;int&amp;gt; ys = {4, 5, 6};
 
-    xs.splice(xs.end(), std::move(ys));
+    xs.splice(xs.end(), ys);
 
     print(xs);
   }
@@ -125,7 +124,6 @@ int main()
 ```
 * splice[color ff0000]
 * begin()[link begin.md]
-* std::move[link /reference/utility/move.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Keita Nonaka</name>
        <email>iKonnyaku40@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase -- fix statement position</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/erase.html"/>
      <id>ba2b7c94d13ed76e045f28c4a6c8d87373ba7923:reference/vector/vector/erase.md</id>
      <updated>2025-04-05T17:55:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/erase.md b/reference/vector/vector/erase.md
index 30b9ce33d..6d4fe195c 100644
--- a/reference/vector/vector/erase.md
+++ b/reference/vector/vector/erase.md
@@ -32,11 +32,11 @@ constexpr iterator erase(const_iterator first,
 
 
 ## 戻り値
-削除された要素の次の要素を指すイテレータを返す。そのような要素が存在しない場合は、[`end()`](end.md)を返す。さらに、削除された要素以降の要素の数と同じ回数の`T`のムーブ代入演算子が呼ばれる。
+削除された要素の次の要素を指すイテレータを返す。そのような要素が存在しない場合は、[`end()`](end.md)を返す。
 
 
 ## 計算量
-削除される要素の数と同じ回数の`T`のデストラクタが実行される。
+削除される要素の数と同じ回数の`T`のデストラクタが実行される。さらに、削除された要素以降の要素の数と同じ回数の`T`のムーブ代入演算子が呼ばれる。
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>I</name>
        <email>1091761+wx257osn2@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>文字列リテラルの文字エンコーディング失敗を不適格とする [P1854R4] -- C++26 「文字列リテラルの文字エンコーディング失敗を不適格とする」 : 例を見直し</title>
      <link href="https://cpprefjp.github.io/lang/cpp26/making_non-encodable_string_literals_ill-formed.html"/>
      <id>e897a1649efc952baf4e9f66508e25ea37cca81a:lang/cpp26/making_non-encodable_string_literals_ill-formed.md</id>
      <updated>2025-04-05T13:07:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp26/making_non-encodable_string_literals_ill-formed.md b/lang/cpp26/making_non-encodable_string_literals_ill-formed.md
index 10bf6463f..629db80db 100644
--- a/lang/cpp26/making_non-encodable_string_literals_ill-formed.md
+++ b/lang/cpp26/making_non-encodable_string_literals_ill-formed.md
@@ -20,13 +20,12 @@ wchar_t c = L&amp;#39;é&amp;#39;;  // C++20:OK, C++23:NG \u0065\u0301
 
 C++26ではさらに、文字列リテラルとしてエンコーディングできない文字の扱いが実装定義でコンパイラーに任されていたものを、不適格になるよう仕様変更する。
 
+また、マルチ文字リテラル (ひとつの文字リテラルに4文字まで入れられて値が実装定義なもの。例として`&amp;#39;intl&amp;#39;`) については、単一のコードユニットにエンコードされるもののみ許可される。
+
 ```cpp
-wchar_t ao = L&amp;#39;\x123456789abcdef0&amp;#39;; // C++23:実装定義, C++26:NG (範囲外)
-char16_t ap = u&amp;#39;\x12345678&amp;#39;;        // C++23:実装定義, C++26:NG (範囲外)
+char c = &amp;#39;é&amp;#39;; // C++23:実装定義, C++26:NG グレイブアクセントをつけると複数のコードユニットになる
 ```
 
-また、マルチ文字リテラル (ひとつの文字リテラルに4文字まで入れられて値が実装定義なもの。例として`&amp;#39;intl&amp;#39;`) については、単一のコードユニットにエンコードされるもののみ許可される。
-
 
 ## 関連項目
 - [C++23 1ワイド文字に収まらないワイド文字リテラルを禁止する](/lang/cpp23/remove_non_encodable_wide_character_literals_and_multicharacter_wide_character_literals.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
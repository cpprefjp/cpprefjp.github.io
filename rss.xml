<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-09-06T05:50:24.747657</updated>
  <id>cc567a16-d58e-4dd0-944a-32769ff070c4</id>

  
    <entry>
      <title>as_const_view -- as_const_view : サンプルコードの修正</title>
      <link href="https://cpprefjp.github.io/reference/ranges/as_const_view.html"/>
      <id>f1b46a11655c1b1b27faa245f5732a4fd5dd5c81:reference/ranges/as_const_view.md</id>
      <updated>2023-09-06T14:45:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/as_const_view.md b/reference/ranges/as_const_view.md
index f335682fb..2cac9fe1c 100644
--- a/reference/ranges/as_const_view.md
+++ b/reference/ranges/as_const_view.md
@@ -77,11 +77,11 @@ namespace std::ranges {
 int main() {
   std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4};
 
-  for (const int&amp;amp; i : vec | std::views::as_const) {
+  for (auto&amp;amp; i : vec | std::views::as_const) {
     std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &amp;#39; &amp;#39;;
 
     // 変更不可
-    //*i = 0
+    //i = 0
   }
 }
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ranges -- views::as_const追加 #1084</title>
      <link href="https://cpprefjp.github.io/reference/ranges.html"/>
      <id>953efe6f14e067f5c4d51fa0f30e6ff175859d02:reference/ranges.md</id>
      <updated>2023-09-06T14:41:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges.md b/reference/ranges.md
index c7b99a06f..41b8b7b19 100644
--- a/reference/ranges.md
+++ b/reference/ranges.md
@@ -321,8 +321,8 @@ range | adaptor(args...)
 
 | 名前                                          | 説明                                                         | 対応バージョン |
 |-----------------------------------------------|--------------------------------------------------------------|----------------|
-| [`as_const_view`](ranges/as_const_view.md.nolink)    | 各要素をconstにするビュー (class template)                   | C++23          |
-| [`views::as_const`](ranges/as_const.md.nolink)       | `as_const_view`を生成する (customization point object)       | C++23          |
+| [`as_const_view`](ranges/as_const_view.md)    | 各要素をconstにするビュー (class template)                       | C++23          |
+| [`views::as_const`](ranges/as_const_view.md)  | `as_const_view`を生成する (customization point object)         | C++23          |
 
 ### elements view
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>as_const_view -- views::as_const追加 #1084</title>
      <link href="https://cpprefjp.github.io/reference/ranges/as_const_view.html"/>
      <id>953efe6f14e067f5c4d51fa0f30e6ff175859d02:reference/ranges/as_const_view.md</id>
      <updated>2023-09-06T14:41:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/as_const_view.md b/reference/ranges/as_const_view.md
new file mode 100644
index 000000000..f335682fb
--- /dev/null
+++ b/reference/ranges/as_const_view.md
@@ -0,0 +1,106 @@
+# as_const_view
+* ranges[meta header]
+* std::ranges[meta namespace]
+* class template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;view V&amp;gt;
+    requires input_range&amp;lt;V&amp;gt;
+  class as_const_view : public view_interface&amp;lt;as_const_view&amp;lt;V&amp;gt;&amp;gt; { …… }; // (1)
+
+  namespace views {
+    inline constexpr /*unspecified*/ as_const = /*unspecified*/;        // (2)
+  }
+}
+```
+* input_range[link input_range.md]
+* view[link view.md]
+* view_interface[link view_interface.md]
+
+## 概要
+- (1): 各要素を定数化したRangeとして振る舞う[`view`](view.md)
+- (2): `as_const_view`を生成するRangeアダプタオブジェクト
+
+### Rangeコンセプト
+
+| borrowed | sized | output | input | forward | bidirectional | random_access | contiguous | common | viewable | view |
+|----------|-------|--------|-------|---------|---------------|---------------|------------|--------|----------|------|
+| (1)      | (1)   |        | ○     | (1)     | (1)           | (1)           | (1)        | (1)    | ○        | ○    |
+
+- (1): `V`に従う
+
+## 効果
+
+- (2): 式`views::as_const(E)`の効果は次のいずれか（`T = decltype((E))`、`U = remove_cvref_t&amp;lt;T&amp;gt;`とする）
+    - `views::all_t&amp;lt;T&amp;gt;`が`constant_range`のモデルとなる場合 : `views::all(E)`
+    - 任意の型`X`に対して、`U`が`empty_view&amp;lt;X&amp;gt;`である場合 : `auto(views::empty&amp;lt;const X&amp;gt;)`
+    - 任意の型`X`と整数値`Extent`に対して、`U`が`span&amp;lt;X, Extent&amp;gt;`である場合 : `span&amp;lt;const X, Extent&amp;gt;(E)`
+    - 任意の型`X`に対して、`U`が`ref_view&amp;lt;X&amp;gt;`であり、`const X`が`constant_range`のモデルとなる場合 : `ref_view(static_cast&amp;lt;const X&amp;amp;&amp;gt;(E.base()))`
+    - `E`が左辺値であり、`const U`が`constant_range`のモデルとなり、かつ`U`は`view`のモデルとならない場合 : `ref_view(static_cast&amp;lt;const U&amp;amp;&amp;gt;(E))`
+    - それ以外の場合 : `as_const_view(E)`
+
+## メンバ関数
+
+| 名前                                             | 説明                             | 対応バージョン |
+|--------------------------------------------------|----------------------------------|----------------|
+| [`(constructor)`](as_const_view/op_constructor.md.nolink)  | コンストラクタ                   | C++23          |
+| [`base`](as_const_view/base.md.nolink)                     | `V`の参照を取得する              | C++23          |
+| [`begin`](as_const_view/begin.md.nolink)                   | 先頭を指すイテレータを取得する   | C++23          |
+| [`end`](as_const_view/end.md.nolink)                       | 番兵を取得する                   | C++23          |
+| [`size`](as_const_view/size.md.nolink)                     | 要素数を取得する                 | C++23          |
+
+## 継承しているメンバ関数
+
+| 名前                                         | 説明                              | 対応バージョン |
+|----------------------------------------------|----------------------------------|----------------|
+| [`empty`](view_interface/empty.md)           | Rangeが空かどうかを判定する         | C++23          |
+| [`operator bool`](view_interface/op_bool.md) | Rangeが空でないかどうかを判定する    | C++23          |
+| [`front`](view_interface/front.md)           | 先頭要素への参照を取得する           | C++23          |
+| [`back`](view_interface/back.md)             | 末尾要素への参照を取得する           | C++23          |
+| [`operator[]`](view_interface/op_at.md)      | 要素へアクセスする                  | C++23          |
+| [`cbegin`](view_interface/cbegin.md)         | 定数イテレータを取得する             | C++23          |
+| [`cend`](view_interface/cend.md)             | 定数イテレータ（番兵）を取得する      | C++23          |
+
+## 推論補助
+
+| 名前                                                  | 説明                         | 対応バージョン |
+|-------------------------------------------------------|------------------------------|----------------|
+| [`(deduction_guide)`](as_const_view/op_deduction_guide.md.nolink) | クラステンプレートの推論補助 | C++23          |
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4};
+
+  for (const int&amp;amp; i : vec | std::views::as_const) {
+    std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &amp;#39; &amp;#39;;
+
+    // 変更不可
+    //*i = 0
+  }
+}
+```
+* views::as_const[color ff0000]
+
+### 出力
+```
+1 2 3 4 
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13.1
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 6
+
+## 参照
+
+- [P2278R4 `cbegin` should always return a constant iterator](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2278r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>view_interface -- view_interface : P2278R4対応 #1084</title>
      <link href="https://cpprefjp.github.io/reference/ranges/view_interface.html"/>
      <id>c5d0375ce0f048faf59ce7c6df22e9590de92e45:reference/ranges/view_interface.md</id>
      <updated>2023-09-05T12:34:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/view_interface.md b/reference/ranges/view_interface.md
index 9c75fdd6e..505a2706f 100644
--- a/reference/ranges/view_interface.md
+++ b/reference/ranges/view_interface.md
@@ -37,6 +37,8 @@ namespace std::ranges {
 | [`front`](view_interface/front.md)           | 先頭要素への参照を取得する         | C++20          |
 | [`back`](view_interface/back.md)             | 末尾要素への参照を取得する         | C++20          |
 | [`operator[]`](view_interface/op_at.md)      | 要素へアクセスする                 | C++20          |
+| [`cbegin`](view_interface/cbegin.md)         | 定数イテレータを取得する           | C++23          |
+| [`cend`](view_interface/cend.md)             | 定数イテレータ（番兵）を取得する     | C++23          |
 | [`derived`](view_interface/derived.md)       | `D`へダウンキャストする (説明専用) | C++20          |
 
 ## バージョン
@@ -58,3 +60,4 @@ namespace std::ranges {
 - [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
 - [C++20 ranges](https://techbookfest.org/product/5134506308665344)
 - [LWG Issue 3549. `view_interface` is overspecified to derive from `view_base`](https://cplusplus.github.io/LWG/issue3549)
+- [P2278R4 `cbegin` should always return a constant iterator](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2278r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cbegin -- view_interface : P2278R4対応 #1084</title>
      <link href="https://cpprefjp.github.io/reference/ranges/view_interface/cbegin.html"/>
      <id>c5d0375ce0f048faf59ce7c6df22e9590de92e45:reference/ranges/view_interface/cbegin.md</id>
      <updated>2023-09-05T12:34:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/view_interface/cbegin.md b/reference/ranges/view_interface/cbegin.md
new file mode 100644
index 000000000..e02a0de9e
--- /dev/null
+++ b/reference/ranges/view_interface/cbegin.md
@@ -0,0 +1,45 @@
+# cbegin
+* ranges[meta header]
+* std::ranges[meta namespace]
+* view_interface[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+constexpr auto cbegin()
+  requires input_range&amp;lt;D&amp;gt;;       // (1)
+
+constexpr auto cbegin() const
+  requires input_range&amp;lt;const D&amp;gt;; // (2)
+```
+* input_range[link ../input_range.md]
+
+## 概要
+
+Rangeの定数イテレータを取得する。
+
+## 戻り値
+
+(1)、(2)共に、以下と等価
+
+```cpp
+return ranges::cbegin(derived());
+```
+* ranges::cbegin[link ../cbegin.md]
+* derived[link derived.md]
+
+## 計算量
+償却定数時間
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13.1
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 6
+
+## 参照
+
+- [P2278R4 `cbegin` should always return a constant iterator](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2278r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cend -- view_interface : P2278R4対応 #1084</title>
      <link href="https://cpprefjp.github.io/reference/ranges/view_interface/cend.html"/>
      <id>c5d0375ce0f048faf59ce7c6df22e9590de92e45:reference/ranges/view_interface/cend.md</id>
      <updated>2023-09-05T12:34:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/view_interface/cend.md b/reference/ranges/view_interface/cend.md
new file mode 100644
index 000000000..78325c709
--- /dev/null
+++ b/reference/ranges/view_interface/cend.md
@@ -0,0 +1,45 @@
+# cend
+* ranges[meta header]
+* std::ranges[meta namespace]
+* view_interface[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+constexpr auto cend()
+  requires input_range&amp;lt;D&amp;gt;;       // (1)
+
+constexpr auto cend() const
+  requires input_range&amp;lt;const D&amp;gt;; // (2)
+```
+* input_range[link ../input_range.md]
+
+## 概要
+
+Rangeの定数イテレータに対応する番兵を取得する。
+
+## 戻り値
+
+(1)、(2)共に、以下と等価
+
+```cpp
+return ranges::cend(derived());
+```
+* ranges::cend[link ../cend.md]
+* derived[link derived.md]
+
+## 計算量
+償却定数時間
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13.1
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 6
+
+## 参照
+
+- [P2278R4 `cbegin` should always return a constant iterator](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2278r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cdata -- 範囲アクセス関数のP2278R4対応 #1084</title>
      <link href="https://cpprefjp.github.io/reference/ranges/cdata.html"/>
      <id>e37ef9b695f6bb5e02f5153a9fa4281980f60e22:reference/ranges/cdata.md</id>
      <updated>2023-08-25T12:32:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/cdata.md b/reference/ranges/cdata.md
index 34ca0ed78..4bf0e27bf 100644
--- a/reference/ranges/cdata.md
+++ b/reference/ranges/cdata.md
@@ -16,10 +16,19 @@ namespace std::ranges {
 Rangeの要素が格納されたメモリ領域へのポインタを取得する関数オブジェクト。
 
 ## 効果
-部分式`E`の型を`T`とする。このとき、式`ranges::cdata(E)`の効果は以下の式と等しい。
+部分式`E`の型を`T`、`E`の評価結果オブジェクトを示す左辺値を`t`とする。このとき、式`ranges::cdata(E)`の効果は以下の式と等しい。
 
-1. `E`がlvalueであれば、[`ranges::data`](data.md)`(static_cast&amp;lt;const T&amp;amp;&amp;gt;(E))`
-2. それ以外の場合、[`ranges::data`](data.md)`(static_cast&amp;lt;const T&amp;amp;&amp;amp;&amp;gt;(E))`
+- C++20まで
+    1. `E`がlvalueであれば、[`ranges::data`](data.md)`(static_cast&amp;lt;const T&amp;amp;&amp;gt;(E))`
+    2. それ以外の場合、[`ranges::data`](data.md)`(static_cast&amp;lt;const T&amp;amp;&amp;amp;&amp;gt;(E))`
+- C++23から
+    1. `E`が右辺値であり、[`enable_borrowed_range`](./enable_borrowed_range.md)`&amp;lt;remove_cv_t&amp;lt;T&amp;gt;&amp;gt;`が`false`となる場合、`ranges::cdata(E)`は不適格
+    2. それ以外の場合、`as-const-pointer(`[`ranges::data`](data.md)`(`[`possibly-const-range`](./possibly-const-range.md)`(t)))`
+        - `as-const-pointer`は次のような説明専用関数テンプレートである
+          ```cpp
+          template&amp;lt;class T&amp;gt;
+          constexpr auto as-const-pointer(const T* p) { return p; }
+          ```
 
 ## 戻り値
 Rangeの要素が格納されたメモリ領域へのポインタ。
@@ -28,7 +37,7 @@ Rangeの要素が格納されたメモリ領域へのポインタ。
 Rangeが`const`な場合について[`ranges::data`](data.md)をカスタマイズすることで、`ranges::cdata`をカスタマイズできる。
 
 ## 備考
-`ranges::cdata(E)`が有効な式であるとき、その型はオブジェクトへのポインタである。
+`ranges::cdata(E)`が有効な式であるとき、その型はオブジェクトへのポインタである（C++23以降、このポインタは定数ポインタである）。
 
 ## 例
 ```cpp example
@@ -71,3 +80,4 @@ array size:1 at 0x556ec23ba2b0
 ## 参照
 - [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
 - [C++20 ranges](https://techbookfest.org/product/5134506308665344)
+- [P2278R4 `cbegin` should always return a constant iterator](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2278r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cend -- 範囲アクセス関数のP2278R4対応 #1084</title>
      <link href="https://cpprefjp.github.io/reference/ranges/cend.html"/>
      <id>e37ef9b695f6bb5e02f5153a9fa4281980f60e22:reference/ranges/cend.md</id>
      <updated>2023-08-25T12:32:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/cend.md b/reference/ranges/cend.md
index 355272484..dbbcbe1d1 100644
--- a/reference/ranges/cend.md
+++ b/reference/ranges/cend.md
@@ -16,10 +16,14 @@ namespace std::ranges {
 Rangeから、最後尾要素の次を指す読み取り専用イテレータもしくは番兵を取得する関数オブジェクト。
 
 ## 効果
-部分式`E`の型を`T`とする。このとき、式`ranges::cend(E)`の効果は以下の式と等しい。
+部分式`E`の型を`T`、`E`の評価結果オブジェクトを示す左辺値を`t`とする。このとき、式`ranges::cend(E)`の効果は以下の式と等しい。
 
-1. `E`がlvalueであれば、[`ranges::end`](end.md)`(static_cast&amp;lt;const T&amp;amp;&amp;gt;(E))`
-2. それ以外の場合、[`ranges::end`](end.md)`(static_cast&amp;lt;const T&amp;amp;&amp;amp;&amp;gt;(E))`
+- C++20まで
+    1. `E`がlvalueであれば、[`ranges::end`](end.md)`(static_cast&amp;lt;const T&amp;amp;&amp;gt;(E))`
+    2. それ以外の場合、[`ranges::end`](end.md)`(static_cast&amp;lt;const T&amp;amp;&amp;amp;&amp;gt;(E))`
+- C++23から
+    1. `E`が右辺値であり、[`enable_borrowed_range`](./enable_borrowed_range.md)`&amp;lt;remove_cv_t&amp;lt;T&amp;gt;&amp;gt;`が`false`となる場合、`ranges::cend(E)`は不適格
+    2. それ以外の場合、式`U`を[`ranges::end`](end.md)`(`[`possibly-const-range`](./possibly-const-range.md)`(t))`とすると、[`const_sentinel`](/reference/iterator/const_sentinel.md)`&amp;lt;decltype(U)&amp;gt;(U)`
 
 ## 戻り値
 最後尾要素の次を指す読み取り専用イテレータもしくは番兵。
@@ -28,7 +32,7 @@ Rangeから、最後尾要素の次を指す読み取り専用イテレータも
 Rangeが`const`な場合について[`ranges::end`](end.md)をカスタマイズすることで、`ranges::cend`をカスタマイズできる。
 
 ## 備考
-`ranges::cend(E)`が有効な式であるとき、`ranges::cend(E)`の型`S`、[`ranges::cbegin`](cbegin.md)`(E)`の型`I`は[`sentinel_for`](/reference/iterator/sentinel_for.md)`&amp;lt;S, I&amp;gt;`のモデルである。
+`ranges::cend(E)`が有効な式であるとき、`ranges::cend(E)`の型`S`、[`ranges::cbegin`](cbegin.md)`(E)`の型`I`は[`sentinel_for`](/reference/iterator/sentinel_for.md)`&amp;lt;S, I&amp;gt;`のモデルである。C++23以降はさらに、`S`が`input_iterator`のモデルならば`S`は[`constant-iterator`](/reference/iterator/constant-iterator.md)のモデルである。
 
 ## 例
 ```cpp example
@@ -75,3 +79,4 @@ int main()
 ## 参照
 - [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
 - [C++20 ranges](https://techbookfest.org/product/5134506308665344)
+- [P2278R4 `cbegin` should always return a constant iterator](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2278r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>crbegin -- 範囲アクセス関数のP2278R4対応 #1084</title>
      <link href="https://cpprefjp.github.io/reference/ranges/crbegin.html"/>
      <id>e37ef9b695f6bb5e02f5153a9fa4281980f60e22:reference/ranges/crbegin.md</id>
      <updated>2023-08-25T12:32:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/crbegin.md b/reference/ranges/crbegin.md
index 650f0632b..fe119a51d 100644
--- a/reference/ranges/crbegin.md
+++ b/reference/ranges/crbegin.md
@@ -16,10 +16,14 @@ namespace std::ranges {
 Rangeの末尾を指す読み取り専用逆イテレータを取得する関数オブジェクト。
 
 ## 効果
-部分式`E`の型を`T`とする。このとき、式`ranges::crbegin(E)`の効果は以下の式と等しい。
+部分式`E`の型を`T`、`E`の評価結果オブジェクトを示す左辺値を`t`とする。このとき、式`ranges::crbegin(E)`の効果は以下の式と等しい。
 
-1. `E`がlvalueであれば、[`ranges::rbegin`](rbegin.md)`(static_cast&amp;lt;const T&amp;amp;&amp;gt;(E))`
-2. それ以外の場合、[`ranges::rbegin`](rbegin.md)`(static_cast&amp;lt;const T&amp;amp;&amp;amp;&amp;gt;(E))`
+- C++20まで
+    1. `E`がlvalueであれば、[`ranges::rbegin`](rbegin.md)`(static_cast&amp;lt;const T&amp;amp;&amp;gt;(E))`
+    2. それ以外の場合、[`ranges::rbegin`](rbegin.md)`(static_cast&amp;lt;const T&amp;amp;&amp;amp;&amp;gt;(E))`
+- C++23から
+    1. `E`が右辺値であり、[`enable_borrowed_range`](./enable_borrowed_range.md)`&amp;lt;remove_cv_t&amp;lt;T&amp;gt;&amp;gt;`が`false`となる場合、`ranges::crbegin(E)`は不適格
+    2. それ以外の場合、式`U`を[`ranges::rbegin`](rbegin.md)`(`[`possibly-const-range`](./possibly-const-range.md)`(t))`とすると、[`const_iterator`](/reference/iterator/const_iterator.md)`&amp;lt;decltype(U)&amp;gt;(U)`
 
 ## 戻り値
 Rangeの末尾を指す読み取り専用逆イテレータ。
@@ -27,6 +31,9 @@ Rangeの末尾を指す読み取り専用逆イテレータ。
 ## カスタマイゼーションポイント
 Rangeが`const`な場合について[`ranges::rbegin`](rbegin.md)をカスタマイズすることで、`ranges::crbegin`をカスタマイズできる。
 
+## 備考
+`ranges::crbegin`の呼び出しが有効な式であるとき、その型は[`input_or_output_iterator`](/reference/iterator/input_or_output_iterator.md)のモデルであり、C++23以降はさらに[`constant-iterator`](/reference/iterator/constant-iterator.md)のモデルである。
+
 ## 例
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
@@ -101,3 +108,4 @@ int main()
 ## 参照
 - [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
 - [C++20 ranges](https://techbookfest.org/product/5134506308665344)
+- [P2278R4 `cbegin` should always return a constant iterator](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2278r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>crend -- 範囲アクセス関数のP2278R4対応 #1084</title>
      <link href="https://cpprefjp.github.io/reference/ranges/crend.html"/>
      <id>e37ef9b695f6bb5e02f5153a9fa4281980f60e22:reference/ranges/crend.md</id>
      <updated>2023-08-25T12:32:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/crend.md b/reference/ranges/crend.md
index e96891978..bd3393e11 100644
--- a/reference/ranges/crend.md
+++ b/reference/ranges/crend.md
@@ -16,10 +16,14 @@ namespace std::ranges {
 Rangeの先頭の前を指す、読み取り専用逆イテレータもしくは番兵を取得する関数オブジェクト。
 
 ## 効果
-部分式`E`の型を`T`とする。このとき、式`ranges::crend(E)`の効果は以下の式と等しい。
+部分式`E`の型を`T`、`E`の評価結果オブジェクトを示す左辺値を`t`とする。このとき、式`ranges::crend(E)`の効果は以下の式と等しい。
 
-1. `E`がlvalueであれば、[`ranges::rend`](rend.md)`(static_cast&amp;lt;const T&amp;amp;&amp;gt;(E))`
-2. それ以外の場合、[`ranges::rend`](rend.md)`(static_cast&amp;lt;const T&amp;amp;&amp;amp;&amp;gt;(E))`
+- C++20まで
+    1. `E`がlvalueであれば、[`ranges::rend`](rend.md)`(static_cast&amp;lt;const T&amp;amp;&amp;gt;(E))`
+    2. それ以外の場合、[`ranges::rend`](rend.md)`(static_cast&amp;lt;const T&amp;amp;&amp;amp;&amp;gt;(E))`
+- C++23から
+    1. `E`が右辺値であり、[`enable_borrowed_range`](./enable_borrowed_range.md)`&amp;lt;remove_cv_t&amp;lt;T&amp;gt;&amp;gt;`が`false`となる場合、`ranges::crend(E)`は不適格
+    2. それ以外の場合、式`U`を[`ranges::rend`](rend.md)`(`[`possibly-const-range`](./possibly-const-range.md)`(t))`とすると、[`const_sentinel`](/reference/iterator/const_sentinel.md)`&amp;lt;decltype(U)&amp;gt;(U)`
 
 ## 戻り値
 Rangeの先頭の前を指す、読み取り専用逆イテレータもしくは番兵。
@@ -28,7 +32,7 @@ Rangeの先頭の前を指す、読み取り専用逆イテレータもしくは
 Rangeが`const`な場合について[`ranges::rend`](rend.md)をカスタマイズすることで、`ranges::crend`をカスタマイズできる。
 
 ## 備考
-`ranges::crend(E)`が有効な式であるとき、`ranges::crend(E)`の型`S`、[`ranges::crbegin`](crbegin.md)`(E)`の型`I`は[`sentinel_for`](/reference/iterator/sentinel_for.md)`&amp;lt;S, I&amp;gt;`のモデルである。
+`ranges::crend(E)`が有効な式であるとき、`ranges::crend(E)`の型`S`、[`ranges::crbegin`](crbegin.md)`(E)`の型`I`は[`sentinel_for`](/reference/iterator/sentinel_for.md)`&amp;lt;S, I&amp;gt;`のモデルである。C++23以降はさらに、`S`が`input_iterator`のモデルならば`S`は[`constant-iterator`](/reference/iterator/constant-iterator.md)のモデルである。
 
 ## 例
 ```cpp example
@@ -104,3 +108,4 @@ int main()
 ## 参照
 - [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
 - [C++20 ranges](https://techbookfest.org/product/5134506308665344)
+- [P2278R4 `cbegin` should always return a constant iterator](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2278r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>iter_const_reference_t -- range_const_reference_t追加 #1084</title>
      <link href="https://cpprefjp.github.io/reference/iterator/iter_const_reference_t.html"/>
      <id>4e3f803c205c62d5f0d09e3684e12536eaa58704:reference/iterator/iter_const_reference_t.md</id>
      <updated>2023-08-25T11:49:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/iter_const_reference_t.md b/reference/iterator/iter_const_reference_t.md
index 47a79a25f..459eb5016 100644
--- a/reference/iterator/iter_const_reference_t.md
+++ b/reference/iterator/iter_const_reference_t.md
@@ -21,9 +21,9 @@ namespace std {
 
 ## 型の決定
 
-`iter_value_t&amp;lt;It&amp;gt;`が非参照型であり`iter_reference_t&amp;lt;It&amp;gt;`から修飾を除いた型であるとすると、`iter_reference_t&amp;lt;It&amp;gt;`に対して`iter_const_reference_t&amp;lt;It&amp;gt;`は基本的には次のようになる
+`iter_value_t&amp;lt;It&amp;gt;`が非参照型であり`iter_reference_t&amp;lt;It&amp;gt;`から修飾を除いた型であるとすると、`iter_reference_t&amp;lt;It&amp;gt;`に対して`iter_const_reference_t&amp;lt;It&amp;gt;`は基本的には次のようになる（`T`を任意の修飾なしの型とする）
 
-|`iter_reference_t`|`iter_const_reference_t&amp;lt;It&amp;gt;`|
+|`iter_reference_t&amp;lt;It&amp;gt;`|`iter_const_reference_t&amp;lt;It&amp;gt;`|
 |---|---|
 |`T&amp;amp;`|`const T&amp;amp;`|
 |`T&amp;amp;&amp;amp;`|`const T&amp;amp;&amp;amp;`|
@@ -32,7 +32,7 @@ namespace std {
 |`T`|`T`|
 |`const T`|`T`|
 
-`It`に対して`iterator_traits`の特殊化が存在する場合や、`const iter_value_t&amp;lt;It&amp;gt;&amp;amp;&amp;amp;`と`iter_reference_t&amp;lt;It&amp;gt;`について`common_reference`が特殊化されている場合はこれと異なる結果となりうる。標準ライブラリにあるそのようなイテレータ型を持つものについて一部例を示すと、次のようになる
+`iter_value_t&amp;lt;It&amp;gt;`に対して`iter_reference_t&amp;lt;It&amp;gt;`が修飾以外も異なる型となる場合や、`It`に対して`iterator_traits`の特殊化が存在する場合、`const iter_value_t&amp;lt;It&amp;gt;&amp;amp;&amp;amp;`と`iter_reference_t&amp;lt;It&amp;gt;`について`common_reference`が特殊化されている場合などはこれと異なる結果となりうる。標準ライブラリにあるそのようなイテレータ型を持つものについて一部例を示すと、次のようになる
 
 |`It`の取得元の範囲|`iter_value_t&amp;lt;It&amp;gt;`|`iter_reference_t&amp;lt;It&amp;gt;`|`iter_const_reference_t&amp;lt;It&amp;gt;`|
 |---|---|---|---|
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ranges -- range_const_reference_t追加 #1084</title>
      <link href="https://cpprefjp.github.io/reference/ranges.html"/>
      <id>4e3f803c205c62d5f0d09e3684e12536eaa58704:reference/ranges.md</id>
      <updated>2023-08-25T11:49:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges.md b/reference/ranges.md
index e61744fe2..c7b99a06f 100644
--- a/reference/ranges.md
+++ b/reference/ranges.md
@@ -66,12 +66,12 @@ C++20では関数によるカスタマイゼーションポイントの問題点
 | [`iterator_t`](ranges/iterator_t.md)                             | イテレータ型を取得する (alias template)        | C++20          |
 | [`sentinel_t`](ranges/sentinel_t.md)                             | 番兵型を取得する (alias template)              | C++20          |
 | [`const_iterator_t`](ranges/const_iterator_t.md)                 | 定数イテレータ型を取得する (alias template)        | C++23          |
-| [`const_sentinel_t`](ranges/const_sentinel_t.md)          | 定数番兵型を取得する (alias template)        | C++23          |
+| [`const_sentinel_t`](ranges/const_sentinel_t.md)                 | 定数番兵型を取得する (alias template)        | C++23          |
 | [`range_difference_t`](ranges/range_difference_t.md)             | イテレータの差の型を取得する (alias template)  | C++20          |
 | [`range_size_t`](ranges/range_size_t.md)                         | サイズの型を取得する(alias template)           | C++20          |
 | [`range_value_t`](ranges/range_value_t.md)                       | 要素の型を取得する (alias template)            | C++20          |
 | [`range_reference_t`](ranges/range_reference_t.md)               | 要素の参照型を取得する (alias template)        | C++20          |
-| [`range_const_reference_t`](ranges/range_const_reference_t.md.nolink)| 要素の定数参照型を取得する (alias template) | C++23          |
+| [`range_const_reference_t`](ranges/range_const_reference_t.md)   | 要素の定数参照型を取得する (alias template)    | C++23          |
 | [`range_rvalue_reference_t`](ranges/range_rvalue_reference_t.md) | 要素の右辺値参照型を取得する (alias template)  | C++20          |
 
 ## Rangeコンセプト
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>range_const_reference_t -- range_const_reference_t追加 #1084</title>
      <link href="https://cpprefjp.github.io/reference/ranges/range_const_reference_t.html"/>
      <id>4e3f803c205c62d5f0d09e3684e12536eaa58704:reference/ranges/range_const_reference_t.md</id>
      <updated>2023-08-25T11:49:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/range_const_reference_t.md b/reference/ranges/range_const_reference_t.md
new file mode 100644
index 000000000..ae2fe2e01
--- /dev/null
+++ b/reference/ranges/range_const_reference_t.md
@@ -0,0 +1,49 @@
+# range_const_reference_t
+* ranges[meta header]
+* std::ranges[meta namespace]
+* type-alias[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;range R&amp;gt;
+  using range_const_reference_t = iter_const_reference_t&amp;lt;iterator_t&amp;lt;R&amp;gt;&amp;gt;;
+}
+```
+* range[link range.md]
+* iter_const_reference_t[link /reference/iterator/iter_const_reference_t.md]
+* iterator_t[link iterator_t.md]
+
+## 概要
+
+任意のRange型`R`から、そのRangeの要素への`const`参照型を取得する。
+
+## 例
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  static_assert(std::same_as&amp;lt;std::ranges::range_const_reference_t&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt; , const int&amp;amp;&amp;gt;);
+  static_assert(std::same_as&amp;lt;std::ranges::range_const_reference_t&amp;lt;std::vector&amp;lt;bool&amp;gt;&amp;gt;, bool&amp;gt;);
+}
+```
+* std::ranges::range_const_reference_t[color ff0000]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13.1
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 6
+
+## 参照
+
+- [P2278R4 `cbegin` should always return a constant iterator](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2278r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
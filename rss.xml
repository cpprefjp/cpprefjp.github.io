<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2021-01-26T23:20:28.834534</updated>
  <id>9c4b3ed8-7b57-4423-91a1-63cbe830e72b</id>

  
    <entry>
      <title>basic_stacktrace -- basic_stacktrace : swapを追加</title>
      <link href="https://cpprefjp.github.io/reference/stacktrace/basic_stacktrace.html"/>
      <id>2121646061974d94db3e055c9f50bb52290d9440:reference/stacktrace/basic_stacktrace.md</id>
      <updated>2021-01-27T08:15:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stacktrace/basic_stacktrace.md b/reference/stacktrace/basic_stacktrace.md
index 70eaa2fdf..29f408936 100644
--- a/reference/stacktrace/basic_stacktrace.md
+++ b/reference/stacktrace/basic_stacktrace.md
@@ -84,7 +84,7 @@ namespace std {
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`swap`](basic_stacktrace/swap.md.nolink) | 他の`basic_stacktrace`オブジェクトとデータを入れ替える | C++23 |
+| [`swap`](basic_stacktrace/swap.md) | 他の`basic_stacktrace`オブジェクトとデータを入れ替える | C++23 |
 
 
 ### 静的メンバ関数
@@ -115,7 +115,7 @@ namespace std {
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`swap`](basic_stacktrace/swap_free.md.nolink) | 2つの`basic_stacktrace`オブジェクトを入れ替える | C++23 |
+| [`swap`](basic_stacktrace/swap_free.md) | 2つの`basic_stacktrace`オブジェクトを入れ替える | C++23 |
 
 
 ### 入出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap -- basic_stacktrace : swapを追加</title>
      <link href="https://cpprefjp.github.io/reference/stacktrace/basic_stacktrace/swap.html"/>
      <id>2121646061974d94db3e055c9f50bb52290d9440:reference/stacktrace/basic_stacktrace/swap.md</id>
      <updated>2021-01-27T08:15:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stacktrace/basic_stacktrace/swap.md b/reference/stacktrace/basic_stacktrace/swap.md
new file mode 100644
index 000000000..1fc1fbeea
--- /dev/null
+++ b/reference/stacktrace/basic_stacktrace/swap.md
@@ -0,0 +1,65 @@
+# swap
+* stacktrace[meta header]
+* std[meta namespace]
+* basic_stacktrace[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+void swap(basic_stacktrace&amp;amp; other)
+        noexcept(
+          allocator_traits&amp;lt;Allocator&amp;gt;::propagate_on_container_swap::value ||
+          allocator_traits&amp;lt;Allocator&amp;gt;::is_always_equal::value
+        );                           // (1) C++23
+```
+* allocator_traits[link /reference/memory/allocator_traits.md]
+
+## 概要
+他の`basic_stacktrace`オブジェクトとデータを入れ替える。
+
+
+## 効果
+`*this`と`other`の内容を交換する。
+
+
+## 例
+### 全体のスタックトレースを取得する
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;stacktrace&amp;gt;
+
+void g() {
+  std::stacktrace a = std::stacktrace::current();
+  std::stacktrace b = std::stacktrace::current();
+  a.swap(b);
+
+  std::cout &amp;lt;&amp;lt; a &amp;lt;&amp;lt; std::endl; // bで取得したスタックトレースが出力される
+}
+
+void f() {
+  g();
+}
+
+int main() {
+  f();
+}
+```
+* a.swap[color ff0000]
+* current()[link current.md]
+
+### 出力例
+```
+ 0# g() at main.cpp:6
+ 1# f() at main.cpp:13
+ 2# main at main.cpp:17
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap (非メンバ関数) -- basic_stacktrace : swapを追加</title>
      <link href="https://cpprefjp.github.io/reference/stacktrace/basic_stacktrace/swap_free.html"/>
      <id>2121646061974d94db3e055c9f50bb52290d9440:reference/stacktrace/basic_stacktrace/swap_free.md</id>
      <updated>2021-01-27T08:15:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stacktrace/basic_stacktrace/swap_free.md b/reference/stacktrace/basic_stacktrace/swap_free.md
new file mode 100644
index 000000000..7b39d4a13
--- /dev/null
+++ b/reference/stacktrace/basic_stacktrace/swap_free.md
@@ -0,0 +1,70 @@
+# swap (非メンバ関数)
+* stacktrace[meta header]
+* std[meta namespace]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;class Allocator&amp;gt;
+  void swap(basic_stacktrace&amp;lt;Allocator&amp;gt;&amp;amp; a,
+            basic_stacktrace&amp;lt;Allocator&amp;gt;&amp;amp; b)
+        noexcept(noexcept(a.swap(b)));      // (1) C++23
+}
+```
+* a.swap[link swap.md]
+
+## 概要
+2つの`basic_stacktrace`オブジェクトを入れ替える。
+
+
+## 効果
+以下と等価：
+
+```cpp
+a.swap(b);
+```
+* a.swap[link swap.md]
+
+
+## 例
+### 全体のスタックトレースを取得する
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;stacktrace&amp;gt;
+
+void g() {
+  std::stacktrace a = std::stacktrace::current();
+  std::stacktrace b = std::stacktrace::current();
+  std::swap(a, b);
+
+  std::cout &amp;lt;&amp;lt; a &amp;lt;&amp;lt; std::endl; // bで取得したスタックトレースが出力される
+}
+
+void f() {
+  g();
+}
+
+int main() {
+  f();
+}
+```
+* std::swap[color ff0000]
+* current()[link current.md]
+
+### 出力例
+```
+ 0# g() at main.cpp:6
+ 1# f() at main.cpp:13
+ 2# main at main.cpp:17
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>current -- basic_stacktrace : 見出しミスを修正</title>
      <link href="https://cpprefjp.github.io/reference/stacktrace/basic_stacktrace/current.html"/>
      <id>a0e9b43161f92d438f86bfef2bbb0ea7e40aff4f:reference/stacktrace/basic_stacktrace/current.md</id>
      <updated>2021-01-27T08:10:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stacktrace/basic_stacktrace/current.md b/reference/stacktrace/basic_stacktrace/current.md
index ad992dc60..080415f51 100644
--- a/reference/stacktrace/basic_stacktrace/current.md
+++ b/reference/stacktrace/basic_stacktrace/current.md
@@ -67,7 +67,7 @@ int main() {
 ```
 * current()[color ff0000]
 
-### 出力例
+#### 出力例
 ```
  0# g() at main.cpp:5
  1# f() at main.cpp:9
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap -- forward_listのswap : オーバーロードに番号をつけた</title>
      <link href="https://cpprefjp.github.io/reference/forward_list/forward_list/swap.html"/>
      <id>cee17bef003e523df0942daf9397db0288256c32:reference/forward_list/forward_list/swap.md</id>
      <updated>2021-01-27T08:09:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/forward_list/forward_list/swap.md b/reference/forward_list/forward_list/swap.md
index d6c6f8682..fb58dd7b9 100644
--- a/reference/forward_list/forward_list/swap.md
+++ b/reference/forward_list/forward_list/swap.md
@@ -6,9 +6,14 @@
 * cpp11[meta cpp]
 
 ```cpp
-void swap(forward_list&amp;amp; x);
-void swap(forward_list&amp;amp; x) noexcept(allocator_traits&amp;lt;Allocator&amp;gt;::is_always_equal::value) // C++17
+void swap(forward_list&amp;amp; x); // (1) C++17
+
+void swap(forward_list&amp;amp; x)
+       noexcept(
+         allocator_traits&amp;lt;Allocator&amp;gt;::is_always_equal::value
+       );                   // (1) C++17
 ```
+* allocator_traits[link /reference/memory/allocator_traits.md]
 
 ## 概要
 他の`forward_list`オブジェクトと値を入れ替える。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap (非メンバ関数) -- forward_listのswap : オーバーロードに番号をつけた</title>
      <link href="https://cpprefjp.github.io/reference/forward_list/forward_list/swap_free.html"/>
      <id>cee17bef003e523df0942daf9397db0288256c32:reference/forward_list/forward_list/swap_free.md</id>
      <updated>2021-01-27T08:09:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/forward_list/forward_list/swap_free.md b/reference/forward_list/forward_list/swap_free.md
index 11e66d0e9..60444a3c9 100644
--- a/reference/forward_list/forward_list/swap_free.md
+++ b/reference/forward_list/forward_list/swap_free.md
@@ -7,11 +7,13 @@
 ```cpp
 namespace std {
   template &amp;lt;class T, class Allocator&amp;gt;
-  void swap(forward_list&amp;lt;T, Allocator&amp;gt;&amp;amp; x, forward_list&amp;lt;T, Allocator&amp;gt;&amp;amp; y);
+  void swap(forward_list&amp;lt;T, Allocator&amp;gt;&amp;amp; x,
+            forward_list&amp;lt;T, Allocator&amp;gt;&amp;amp; y);  // (1) C++11
 
   template &amp;lt;class T, class Allocator&amp;gt;
-  void swap(forward_list&amp;lt;T,Allocator&amp;gt;&amp;amp; x, forward_list&amp;lt;T,Allocator&amp;gt;&amp;amp; y)
-  noexcept(noexcept(x.swap(y)));                                        // C++17
+  void swap(forward_list&amp;lt;T,Allocator&amp;gt;&amp;amp; x,
+            forward_list&amp;lt;T,Allocator&amp;gt;&amp;amp; y)
+              noexcept(noexcept(x.swap(y))); // (1) C++17
 }
 ```
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_stacktrace -- basic_stacktrace : イテレータ関係を追加</title>
      <link href="https://cpprefjp.github.io/reference/stacktrace/basic_stacktrace.html"/>
      <id>35aacaaa0c689a9c46800f9e5a4a0c4ad3edaffc:reference/stacktrace/basic_stacktrace.md</id>
      <updated>2021-01-27T08:00:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stacktrace/basic_stacktrace.md b/reference/stacktrace/basic_stacktrace.md
index b9411740b..70eaa2fdf 100644
--- a/reference/stacktrace/basic_stacktrace.md
+++ b/reference/stacktrace/basic_stacktrace.md
@@ -53,14 +53,14 @@ namespace std {
 
 | 名前 | 説明 | 対応バージョン |
 |----------------------------------|---------------------------------------|-------|
-| [`begin`](basic_stacktrace/begin.md.nolink)     | 先頭の要素を指すイテレータを取得する | C++23 |
-| [`end`](basic_stacktrace/end.md.nolink)         | 末尾の次を指すイテレータを取得する | C++23 |
-| [`cbegin`](basic_stacktrace/cbegin.md.nolink)   | 先頭の要素を指す読み取り専用イテレータを取得する | C++23 |
-| [`cend`](basic_stacktrace/cend.md.nolink)       | 末尾の次を指す読み取り専用イテレータを取得する | C++23 |
-| [`rbegin`](basic_stacktrace/rbegin.md.nolink)   | 末尾を指す逆イテレータを取得する | C++23 |
-| [`rend`](basic_stacktrace/rend.md.nolink)       | 先頭の前を指す逆イテレータを取得する | C++23 |
-| [`crbegin`](basic_stacktrace/crbegin.md.nolink) | 末尾を指す読み取り専用逆イテレータを取得する | C++23 |
-| [`crend`](basic_stacktrace/crend.md.nolink)     | 先頭の前を指す読み取り専用逆イテレータを取得する | C++23 |
+| [`begin`](basic_stacktrace/begin.md)     | 先頭の要素を指すイテレータを取得する | C++23 |
+| [`end`](basic_stacktrace/end.md)         | 末尾の次を指すイテレータを取得する | C++23 |
+| [`cbegin`](basic_stacktrace/cbegin.md)   | 先頭の要素を指す読み取り専用イテレータを取得する | C++23 |
+| [`cend`](basic_stacktrace/cend.md)       | 末尾の次を指す読み取り専用イテレータを取得する | C++23 |
+| [`rbegin`](basic_stacktrace/rbegin.md)   | 末尾の要素を指す逆順イテレータを取得する | C++23 |
+| [`rend`](basic_stacktrace/rend.md)       | 先頭の前を指す逆順イテレータを取得する | C++23 |
+| [`crbegin`](basic_stacktrace/crbegin.md) | 末尾の要素を指す読み取り専用逆順イテレータを取得する | C++23 |
+| [`crend`](basic_stacktrace/crend.md)     | 先頭の前を指す読み取り専用逆順イテレータを取得する | C++23 |
 
 
 ### 領域
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin -- basic_stacktrace : イテレータ関係を追加</title>
      <link href="https://cpprefjp.github.io/reference/stacktrace/basic_stacktrace/begin.html"/>
      <id>35aacaaa0c689a9c46800f9e5a4a0c4ad3edaffc:reference/stacktrace/basic_stacktrace/begin.md</id>
      <updated>2021-01-27T08:00:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stacktrace/basic_stacktrace/begin.md b/reference/stacktrace/basic_stacktrace/begin.md
new file mode 100644
index 000000000..62a433b88
--- /dev/null
+++ b/reference/stacktrace/basic_stacktrace/begin.md
@@ -0,0 +1,61 @@
+# begin
+* stacktrace[meta header]
+* std[meta namespace]
+* basic_stacktrace[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+const_iterator begin() const noexcept; // (1) C++23
+```
+
+## 概要
+先頭の要素を指すイテレータを取得する。
+
+
+## 戻り値
+スタックトレース履歴の先頭要素を指すイテレータを返す。ただし、[`empty()`](empty.md)が`true`である場合、[`end()`](end.md)と同じ値を返す。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;stacktrace&amp;gt;
+#include &amp;lt;algorithm&amp;gt;
+
+void g() {
+  std::stacktrace st = std::stacktrace::current();
+  std::for_each(st.begin(), st.end(), [](const std::stacktrace_entry&amp;amp; x) {
+    std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl;
+  }):
+}
+
+void f() {
+  g();
+}
+
+int main() {
+  f();
+}
+```
+* st.begin()[color ff0000]
+* st.end()[link end.md]
+* current()[link current.md]
+* std::stacktrace_entry[link /reference/stacktrace/stacktrace_entry.md.nolink]
+
+### 出力
+```
+g() at main.cpp:6
+f() at main.cpp:13
+main at main.cpp:17
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cbegin -- basic_stacktrace : イテレータ関係を追加</title>
      <link href="https://cpprefjp.github.io/reference/stacktrace/basic_stacktrace/cbegin.html"/>
      <id>35aacaaa0c689a9c46800f9e5a4a0c4ad3edaffc:reference/stacktrace/basic_stacktrace/cbegin.md</id>
      <updated>2021-01-27T08:00:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stacktrace/basic_stacktrace/cbegin.md b/reference/stacktrace/basic_stacktrace/cbegin.md
new file mode 100644
index 000000000..9cc9a7f32
--- /dev/null
+++ b/reference/stacktrace/basic_stacktrace/cbegin.md
@@ -0,0 +1,61 @@
+# cbegin
+* stacktrace[meta header]
+* std[meta namespace]
+* basic_stacktrace[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+const_iterator cbegin() const noexcept; // (1) C++23
+```
+
+## 概要
+先頭の要素を指す読み取り専用イテレータを取得する。
+
+
+## 戻り値
+スタックトレース履歴の先頭要素を指す読み取り専用イテレータを返す。ただし、[`empty()`](empty.md)が`true`である場合、[`cend()`](cend.md)と同じ値を返す。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;stacktrace&amp;gt;
+#include &amp;lt;algorithm&amp;gt;
+
+void g() {
+  std::stacktrace st = std::stacktrace::current();
+  std::for_each(st.cbegin(), st.cend(), [](const std::stacktrace_entry&amp;amp; x) {
+    std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl;
+  }):
+}
+
+void f() {
+  g();
+}
+
+int main() {
+  f();
+}
+```
+* st.cbegin()[color ff0000]
+* st.cend()[link cend.md]
+* current()[link current.md]
+* std::stacktrace_entry[link /reference/stacktrace/stacktrace_entry.md.nolink]
+
+### 出力
+```
+g() at main.cpp:6
+f() at main.cpp:13
+main at main.cpp:17
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cend -- basic_stacktrace : イテレータ関係を追加</title>
      <link href="https://cpprefjp.github.io/reference/stacktrace/basic_stacktrace/cend.html"/>
      <id>35aacaaa0c689a9c46800f9e5a4a0c4ad3edaffc:reference/stacktrace/basic_stacktrace/cend.md</id>
      <updated>2021-01-27T08:00:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stacktrace/basic_stacktrace/cend.md b/reference/stacktrace/basic_stacktrace/cend.md
new file mode 100644
index 000000000..c8d8735a8
--- /dev/null
+++ b/reference/stacktrace/basic_stacktrace/cend.md
@@ -0,0 +1,61 @@
+# cend
+* stacktrace[meta header]
+* std[meta namespace]
+* basic_stacktrace[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+const_iterator cend() const noexcept; // (1) C++23
+```
+
+## 概要
+末尾の次を指す読み取り専用イテレータを取得する。
+
+
+## 戻り値
+スタックトレース履歴の末尾の次を指す読み取り専用イテレータを返す。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;stacktrace&amp;gt;
+#include &amp;lt;algorithm&amp;gt;
+
+void g() {
+  std::stacktrace st = std::stacktrace::current();
+  std::for_each(st.cbegin(), st.cend(), [](const std::stacktrace_entry&amp;amp; x) {
+    std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl;
+  }):
+}
+
+void f() {
+  g();
+}
+
+int main() {
+  f();
+}
+```
+* st.cend()[color ff0000]
+* st.cbegin()[link cbegin.md]
+* current()[link current.md]
+* std::stacktrace_entry[link /reference/stacktrace/stacktrace_entry.md.nolink]
+
+### 出力
+```
+g() at main.cpp:6
+f() at main.cpp:13
+main at main.cpp:17
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>crbegin -- basic_stacktrace : イテレータ関係を追加</title>
      <link href="https://cpprefjp.github.io/reference/stacktrace/basic_stacktrace/crbegin.html"/>
      <id>35aacaaa0c689a9c46800f9e5a4a0c4ad3edaffc:reference/stacktrace/basic_stacktrace/crbegin.md</id>
      <updated>2021-01-27T08:00:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stacktrace/basic_stacktrace/crbegin.md b/reference/stacktrace/basic_stacktrace/crbegin.md
new file mode 100644
index 000000000..4f4d22d46
--- /dev/null
+++ b/reference/stacktrace/basic_stacktrace/crbegin.md
@@ -0,0 +1,64 @@
+# crbegin
+* stacktrace[meta header]
+* std[meta namespace]
+* basic_stacktrace[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+const_reverse_iterator crbegin() const noexcept; // (1) C++23
+```
+
+## 概要
+末尾の要素を指す読み取り専用逆順イテレータを取得する。
+
+
+## 戻り値
+```cpp
+return reverse_iterator(cend());
+```
+* cend()[link cend.md]
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;stacktrace&amp;gt;
+#include &amp;lt;algorithm&amp;gt;
+
+void g() {
+  std::stacktrace st = std::stacktrace::current();
+  std::for_each(st.crbegin(), st.crend(), [](const std::stacktrace_entry&amp;amp; x) {
+    std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl;
+  }):
+}
+
+void f() {
+  g();
+}
+
+int main() {
+  f();
+}
+```
+* st.crbegin()[color ff0000]
+* st.crend()[link crend.md]
+* current()[link current.md]
+* std::stacktrace_entry[link /reference/stacktrace/stacktrace_entry.md.nolink]
+
+### 出力
+```
+main at main.cpp:17
+f() at main.cpp:13
+g() at main.cpp:6
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>crend -- basic_stacktrace : イテレータ関係を追加</title>
      <link href="https://cpprefjp.github.io/reference/stacktrace/basic_stacktrace/crend.html"/>
      <id>35aacaaa0c689a9c46800f9e5a4a0c4ad3edaffc:reference/stacktrace/basic_stacktrace/crend.md</id>
      <updated>2021-01-27T08:00:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stacktrace/basic_stacktrace/crend.md b/reference/stacktrace/basic_stacktrace/crend.md
new file mode 100644
index 000000000..a1fd0b291
--- /dev/null
+++ b/reference/stacktrace/basic_stacktrace/crend.md
@@ -0,0 +1,64 @@
+# crend
+* stacktrace[meta header]
+* std[meta namespace]
+* basic_stacktrace[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+const_reverse_iterator crend() const noexcept; // (1) C++23
+```
+
+## 概要
+先頭の前を指す読み取り専用逆順イテレータを取得する。
+
+
+## 戻り値
+```cpp
+return reverse_iterator(cbegin());
+```
+* cbegin()[link cbegin.md]
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;stacktrace&amp;gt;
+#include &amp;lt;algorithm&amp;gt;
+
+void g() {
+  std::stacktrace st = std::stacktrace::current();
+  std::for_each(st.crbegin(), st.crend(), [](const std::stacktrace_entry&amp;amp; x) {
+    std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl;
+  }):
+}
+
+void f() {
+  g();
+}
+
+int main() {
+  f();
+}
+```
+* st.crend()[color ff0000]
+* st.crbegin()[link crbegin.md]
+* current()[link current.md]
+* std::stacktrace_entry[link /reference/stacktrace/stacktrace_entry.md.nolink]
+
+### 出力
+```
+main at main.cpp:17
+f() at main.cpp:13
+g() at main.cpp:6
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- basic_stacktrace : イテレータ関係を追加</title>
      <link href="https://cpprefjp.github.io/reference/stacktrace/basic_stacktrace/end.html"/>
      <id>35aacaaa0c689a9c46800f9e5a4a0c4ad3edaffc:reference/stacktrace/basic_stacktrace/end.md</id>
      <updated>2021-01-27T08:00:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stacktrace/basic_stacktrace/end.md b/reference/stacktrace/basic_stacktrace/end.md
new file mode 100644
index 000000000..8dae22ba7
--- /dev/null
+++ b/reference/stacktrace/basic_stacktrace/end.md
@@ -0,0 +1,61 @@
+# end
+* stacktrace[meta header]
+* std[meta namespace]
+* basic_stacktrace[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+const_iterator end() const noexcept; // (1) C++23
+```
+
+## 概要
+末尾の次を指すイテレータを取得する。
+
+
+## 戻り値
+スタックトレース履歴の末尾の次を指すイテレータを返す。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;stacktrace&amp;gt;
+#include &amp;lt;algorithm&amp;gt;
+
+void g() {
+  std::stacktrace st = std::stacktrace::current();
+  std::for_each(st.begin(), st.end(), [](const std::stacktrace_entry&amp;amp; x) {
+    std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl;
+  }):
+}
+
+void f() {
+  g();
+}
+
+int main() {
+  f();
+}
+```
+* st.end()[color ff0000]
+* st.begin()[link begin.md]
+* current()[link current.md]
+* std::stacktrace_entry[link /reference/stacktrace/stacktrace_entry.md.nolink]
+
+### 出力
+```
+g() at main.cpp:6
+f() at main.cpp:13
+main at main.cpp:17
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rbegin -- basic_stacktrace : イテレータ関係を追加</title>
      <link href="https://cpprefjp.github.io/reference/stacktrace/basic_stacktrace/rbegin.html"/>
      <id>35aacaaa0c689a9c46800f9e5a4a0c4ad3edaffc:reference/stacktrace/basic_stacktrace/rbegin.md</id>
      <updated>2021-01-27T08:00:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stacktrace/basic_stacktrace/rbegin.md b/reference/stacktrace/basic_stacktrace/rbegin.md
new file mode 100644
index 000000000..9ad96f570
--- /dev/null
+++ b/reference/stacktrace/basic_stacktrace/rbegin.md
@@ -0,0 +1,64 @@
+# rbegin
+* stacktrace[meta header]
+* std[meta namespace]
+* basic_stacktrace[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+const_reverse_iterator rbegin() const noexcept; // (1) C++23
+```
+
+## 概要
+末尾の要素を指す逆順イテレータを取得する。
+
+
+## 戻り値
+```cpp
+return reverse_iterator(cend());
+```
+* cend()[link cend.md]
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;stacktrace&amp;gt;
+#include &amp;lt;algorithm&amp;gt;
+
+void g() {
+  std::stacktrace st = std::stacktrace::current();
+  std::for_each(st.rbegin(), st.rend(), [](const std::stacktrace_entry&amp;amp; x) {
+    std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl;
+  }):
+}
+
+void f() {
+  g();
+}
+
+int main() {
+  f();
+}
+```
+* st.rbegin()[color ff0000]
+* st.rend()[link rend.md]
+* current()[link current.md]
+* std::stacktrace_entry[link /reference/stacktrace/stacktrace_entry.md.nolink]
+
+### 出力
+```
+main at main.cpp:17
+f() at main.cpp:13
+g() at main.cpp:6
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rend -- basic_stacktrace : イテレータ関係を追加</title>
      <link href="https://cpprefjp.github.io/reference/stacktrace/basic_stacktrace/rend.html"/>
      <id>35aacaaa0c689a9c46800f9e5a4a0c4ad3edaffc:reference/stacktrace/basic_stacktrace/rend.md</id>
      <updated>2021-01-27T08:00:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stacktrace/basic_stacktrace/rend.md b/reference/stacktrace/basic_stacktrace/rend.md
new file mode 100644
index 000000000..16f8c75ac
--- /dev/null
+++ b/reference/stacktrace/basic_stacktrace/rend.md
@@ -0,0 +1,64 @@
+# rend
+* stacktrace[meta header]
+* std[meta namespace]
+* basic_stacktrace[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+const_reverse_iterator rend() const noexcept; // (1) C++23
+```
+
+## 概要
+先頭の前を指す逆順イテレータを取得する。
+
+
+## 戻り値
+```cpp
+return reverse_iterator(cbegin());
+```
+* cbegin()[link cbegin.md]
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;stacktrace&amp;gt;
+#include &amp;lt;algorithm&amp;gt;
+
+void g() {
+  std::stacktrace st = std::stacktrace::current();
+  std::for_each(st.rbegin(), st.rend(), [](const std::stacktrace_entry&amp;amp; x) {
+    std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl;
+  }):
+}
+
+void f() {
+  g();
+}
+
+int main() {
+  f();
+}
+```
+* st.rend()[color ff0000]
+* st.rbegin()[link rbegin.md]
+* current()[link current.md]
+* std::stacktrace_entry[link /reference/stacktrace/stacktrace_entry.md.nolink]
+
+### 出力
+```
+main at main.cpp:17
+f() at main.cpp:13
+g() at main.cpp:6
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_stacktrace -- basic_stacktrace : operator[ ]とatを追加</title>
      <link href="https://cpprefjp.github.io/reference/stacktrace/basic_stacktrace.html"/>
      <id>aa3ea60a32343d41274457aab0017d8dd25bfac4:reference/stacktrace/basic_stacktrace.md</id>
      <updated>2021-01-27T07:43:50+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stacktrace/basic_stacktrace.md b/reference/stacktrace/basic_stacktrace.md
index fd8e3ebbf..b9411740b 100644
--- a/reference/stacktrace/basic_stacktrace.md
+++ b/reference/stacktrace/basic_stacktrace.md
@@ -76,8 +76,8 @@ namespace std {
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`operator[]`](basic_stacktrace/op_at.md.nolink) | 要素アクセス | C++23 |
-| [`at`](basic_stacktrace/at.md.nolink)            | 要素アクセス | C++23 |
+| [`operator[]`](basic_stacktrace/op_at.md) | 任意の位置の要素を取得する | C++23 |
+| [`at`](basic_stacktrace/at.md)            | 任意の位置の要素を取得する | C++23 |
 
 
 ### 変更
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>at -- basic_stacktrace : operator[ ]とatを追加</title>
      <link href="https://cpprefjp.github.io/reference/stacktrace/basic_stacktrace/at.html"/>
      <id>aa3ea60a32343d41274457aab0017d8dd25bfac4:reference/stacktrace/basic_stacktrace/at.md</id>
      <updated>2021-01-27T07:43:50+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stacktrace/basic_stacktrace/at.md b/reference/stacktrace/basic_stacktrace/at.md
new file mode 100644
index 000000000..8e34e8f89
--- /dev/null
+++ b/reference/stacktrace/basic_stacktrace/at.md
@@ -0,0 +1,58 @@
+# at
+* stacktrace[meta header]
+* std[meta namespace]
+* basic_stacktrace[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+const_reference at(size_type frame_no) const; // (1) C++23
+```
+
+## 概要
+任意の位置の要素を取得する。
+
+
+## 戻り値
+保持しているスタックトレースの履歴の、`frame_no`番目の要素を返す。
+
+
+## 例外
+`frame_no &amp;gt;=` [`size()`](size.md)である場合、[`std::out_of_range`](/reference/stdexcept.md)例外を送出する。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;stacktrace&amp;gt;
+
+void g() {
+  std::stacktrace st = std::stacktrace::current();
+  std::cout &amp;lt;&amp;lt; st.at(0) &amp;lt;&amp;lt; std::endl;
+}
+
+void f() {
+  g();
+}
+
+int main() {
+  f();
+}
+```
+* st.at[color ff0000]
+* current()[link current.md]
+
+### 出力例
+```
+g() at main.cpp:5
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator[] -- basic_stacktrace : operator[ ]とatを追加</title>
      <link href="https://cpprefjp.github.io/reference/stacktrace/basic_stacktrace/op_at.html"/>
      <id>aa3ea60a32343d41274457aab0017d8dd25bfac4:reference/stacktrace/basic_stacktrace/op_at.md</id>
      <updated>2021-01-27T07:43:50+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stacktrace/basic_stacktrace/op_at.md b/reference/stacktrace/basic_stacktrace/op_at.md
new file mode 100644
index 000000000..8b7d642cb
--- /dev/null
+++ b/reference/stacktrace/basic_stacktrace/op_at.md
@@ -0,0 +1,62 @@
+# operator[]
+* stacktrace[meta header]
+* std[meta namespace]
+* basic_stacktrace[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+const_reference operator[](size_type frame_no) const; // (1) C++23
+```
+
+## 概要
+任意の位置の要素を取得する。
+
+
+## 事前条件
+- `frame_no &amp;lt;` [`size()`](size.md)であること
+
+
+## 戻り値
+保持しているスタックトレースの履歴の、`frame_no`番目の要素を返す。
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;stacktrace&amp;gt;
+
+void g() {
+  std::stacktrace st = std::stacktrace::current();
+  std::cout &amp;lt;&amp;lt; st[0] &amp;lt;&amp;lt; std::endl;
+}
+
+void f() {
+  g();
+}
+
+int main() {
+  f();
+}
+```
+* st[0][color ff0000]
+* current()[link current.md]
+
+### 出力例
+```
+g() at main.cpp:5
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
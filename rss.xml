<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-01-23T15:20:33.805733</updated>
  <id>768e111a-2a68-47a1-8c3a-af7f115c3848</id>

  
    <entry>
      <title>formatter -- formatter : コード修飾を追加</title>
      <link href="https://cpprefjp.github.io/reference/format/formatter.html"/>
      <id>93bd53edf4fda360fdc78d36d80cbbe94036c3b5:reference/format/formatter.md</id>
      <updated>2023-01-24T00:16:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/formatter.md b/reference/format/formatter.md
index b93271146..7c882484a 100644
--- a/reference/format/formatter.md
+++ b/reference/format/formatter.md
@@ -153,6 +153,7 @@ int main()
 }
 ```
 * std::format_context[link basic_format_context.md]
+* std::format[link format.md]
 
 #### 出力
 ```
@@ -212,6 +213,7 @@ int main()
 * std::format_context[link basic_format_context.md]
 * ctx.out()[link basic_format_context/out.md]
 * std::format_to[link format_to.md]
+* std::format[link format.md]
 
 
 #### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>format -- formatter : format, set_brackets, set_separator, set_debug_formatを追加 #1085</title>
      <link href="https://cpprefjp.github.io/reference/format/format.html"/>
      <id>3269f7f3c99ee899ad037629c023ff4edb7577a0:reference/format/format.md</id>
      <updated>2023-01-23T23:06:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/format.md b/reference/format/format.md
index 9f8b0498e..83a6ce5a0 100644
--- a/reference/format/format.md
+++ b/reference/format/format.md
@@ -177,7 +177,7 @@ Range・シーケンスコンテナに対して使用できる標準のオプシ
 Range・シーケンスコンテナと同じだが、デフォルトで`m`書式を適用する。
 
 
-#### &amp;lt;a id=&amp;#34;tuple-format-options&amp;#34; name=&amp;#34;tuple-format-options&amp;#34;&amp;gt;pair、tupleの書式 (C++23)&amp;lt;/a&amp;gt;
+#### &amp;lt;a id=&amp;#34;tuple-format-options&amp;#34; name=&amp;#34;#tuple-format-options&amp;#34;&amp;gt;pair、tupleの書式 (C++23)&amp;lt;/a&amp;gt;
 
 [`std::pair`](/reference/utility/pair.md)と[`std::tuple`](/reference/tuple/tuple.md)に対して使用できる標準のオプション書式は次の通り(`[]`は省略可の意味)。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>formatter -- formatter : format, set_brackets, set_separator, set_debug_formatを追加 #1085</title>
      <link href="https://cpprefjp.github.io/reference/format/formatter.html"/>
      <id>3269f7f3c99ee899ad037629c023ff4edb7577a0:reference/format/formatter.md</id>
      <updated>2023-01-23T23:06:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/formatter.md b/reference/format/formatter.md
index 4f87612a8..b93271146 100644
--- a/reference/format/formatter.md
+++ b/reference/format/formatter.md
@@ -112,22 +112,22 @@ namespace std {
 | メンバ関数 | 説明 | 対応バージョン |
 |------------|------|----------------|
 | [`parse`](formatter/parse.md)   | 書式の解析を行う | C++20 |
-| [`format`](formatter/format.md.nolink) | 書式化を行う | C++20 |
+| [`format`](formatter/format.md) | 書式化を行う | C++20 |
 
 
 ### 文字・文字列に対する特殊化
 
 | メンバ関数 | 説明 | 対応バージョン |
 |------------|------|----------------|
-| [`set_debug_format`](formatter/set_debug_format.md.nolink) | デバッグ書式を有効にする | C++23 |
+| [`set_debug_format`](formatter/set_debug_format.md) | デバッグ出力を有効にする | C++23 |
 
 
 ### pair / tuple向けの特殊化
 
 | メンバ関数 | 説明 | 対応バージョン |
 |------------|------|----------------|
-| [`set_separator`](formatter/set_separator.md.nolink) | 要素の区切り文字を設定する | C++23 |
-| [`set_brackets`](formatter/set_brackets.md.nolink)   | 全体の囲み文字を設定する | C++23 |
+| [`set_separator`](formatter/set_separator.md) | 要素の区切り文字を設定する | C++23 |
+| [`set_brackets`](formatter/set_brackets.md)   | 全体の囲み文字を設定する | C++23 |
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>format -- formatter : format, set_brackets, set_separator, set_debug_formatを追加 #1085</title>
      <link href="https://cpprefjp.github.io/reference/format/formatter/format.html"/>
      <id>3269f7f3c99ee899ad037629c023ff4edb7577a0:reference/format/formatter/format.md</id>
      <updated>2023-01-23T23:06:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/formatter/format.md b/reference/format/formatter/format.md
new file mode 100644
index 000000000..fb4995889
--- /dev/null
+++ b/reference/format/formatter/format.md
@@ -0,0 +1,41 @@
+# format
+* format[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* formatter[meta class]
+* cpp20[meta cpp]
+
+```cpp
+template &amp;lt;class FormatContext&amp;gt;
+typename FormatContext::iterator
+  format(T&amp;amp; x, FormatContext&amp;amp; ctx) const;
+```
+* FormatContext[link /reference/format/basic_format_context.md]
+
+## 概要
+受け取った型`T`のオブジェクトを書式化する。
+
+
+## 効果
+- [`parse()`](parse.md)メンバ関数で解析した書式文字列の指定に基づいて、`x`の値を文字列に変換する
+- [`std::pair`](/reference/utility/pair.md)と[`std::tuple`](/reference/tuple/tuple.md)に対する`formatter`の特殊化の場合、以下を[`ctx.out()`](/reference/format/basic_format_context/out.md)に出力する：
+    - 開きカッコを出力する
+    - 範囲`[0, タプルの要素数)`の各要素`I`について、
+        - `I != 0`であれば区切り文字を出力する
+        - タプルの`I`番目の要素を、その型の`formatter`で出力する
+    - 閉じカッコを出力する
+
+
+## 戻り値
+出力がおわった位置の出力イテレータを返す。
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13
+- [Visual C++](/implementation.md#visual_cpp): ??
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>parse -- formatter : format, set_brackets, set_separator, set_debug_formatを追加 #1085</title>
      <link href="https://cpprefjp.github.io/reference/format/formatter/parse.html"/>
      <id>3269f7f3c99ee899ad037629c023ff4edb7577a0:reference/format/formatter/parse.md</id>
      <updated>2023-01-23T23:06:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/formatter/parse.md b/reference/format/formatter/parse.md
index 789c2f672..2d4f6ab23 100644
--- a/reference/format/formatter/parse.md
+++ b/reference/format/formatter/parse.md
@@ -20,9 +20,9 @@ constexpr typename ParseContext::iterator
 - デフォルトの`formatter`の場合、[`std::format()`](/reference/format/format.md)関数ページに記載されている「[標準のオプション書式](/reference/format/format.md#std-format-options)」を解析する
 - [`std::pair`](/reference/utility/pair.md)と[`std::tuple`](/reference/tuple/tuple.md)に対する`formatter`の特殊化の場合、[`std::format()`](/reference/format/format.md)関数ページに記載されている「[pair、tupleの書式](/reference/format/format.md#tuple-format-options)」を解析する
     - このとき、書式によって以下を設定する
-        - 全体の囲み文字を、[`set_brackets()`](set_brackets.md.nolink)メンバ関数で設定する
-        - 要素の区切り文字を、[`set_separator()`](set_separator.md.nolink)メンバ関数で設定する
-        - 各要素の`formatter`を`e`として、[`e.set_debug_format()`](set_debug_format.md.nolink)が有効な式であれば、それを呼び出してデバッグ書式を有効にする
+        - 全体の囲み文字を、[`set_brackets()`](set_brackets.md)メンバ関数で設定する
+        - 要素の区切り文字を、[`set_separator()`](set_separator.md)メンバ関数で設定する
+        - 各要素の`formatter`を`e`として、[`e.set_debug_format()`](set_debug_format.md)が有効な式であれば、それを呼び出してデバッグ書式を有効にする
 
 
 ## 戻り値
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>set_brackets -- formatter : format, set_brackets, set_separator, set_debug_formatを追加 #1085</title>
      <link href="https://cpprefjp.github.io/reference/format/formatter/set_brackets.html"/>
      <id>3269f7f3c99ee899ad037629c023ff4edb7577a0:reference/format/formatter/set_brackets.md</id>
      <updated>2023-01-23T23:06:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/formatter/set_brackets.md b/reference/format/formatter/set_brackets.md
new file mode 100644
index 000000000..972fd8cff
--- /dev/null
+++ b/reference/format/formatter/set_brackets.md
@@ -0,0 +1,41 @@
+# set_brackets
+* format[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* formatter[meta class]
+* cpp23[meta cpp]
+
+```cpp
+template &amp;lt;class charT, formattable&amp;lt;charT&amp;gt;... Ts&amp;gt;
+constexpr void
+  formatter&amp;lt;pair-or-tuple&amp;lt;Ts...&amp;gt;&amp;gt;::set_brackets(
+    basic_string_view&amp;lt;charT&amp;gt; opening,
+    basic_string_view&amp;lt;charT&amp;gt; closing); // (1)
+```
+
+## 概要
+全体の囲み文字を設定する。
+
+このメンバ関数は、[`std::format()`](/reference/format/format.md)関数の「[pair、tupleの書式](/reference/format/format.md#tuple-format-options)」において囲み文字を変更するオプションを指定することで自動的に呼び出される。
+
+デフォルトの開きカッコは`&amp;#34;(&amp;#34;`、閉じカッコは`&amp;#34;)&amp;#34;`である。
+
+
+## 効果
+`opening`を開きカッコ、`closing`を閉じカッコとして設定する。
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P2286R8 Formatting Ranges](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2286r8.html)
+- [P2585R1 Improve default container formatting](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2585r1.html)
+    - C++23から、Range・コンテナ、`pair`、`tuple`のフォーマット出力、および文字・文字列のデバッグ指定 (`&amp;#34;?&amp;#34;`) が追加された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>set_debug_format -- formatter : format, set_brackets, set_separator, set_debug_formatを追加 #1085</title>
      <link href="https://cpprefjp.github.io/reference/format/formatter/set_debug_format.html"/>
      <id>3269f7f3c99ee899ad037629c023ff4edb7577a0:reference/format/formatter/set_debug_format.md</id>
      <updated>2023-01-23T23:06:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/formatter/set_debug_format.md b/reference/format/formatter/set_debug_format.md
new file mode 100644
index 000000000..94d7141c7
--- /dev/null
+++ b/reference/format/formatter/set_debug_format.md
@@ -0,0 +1,40 @@
+# set_debug_format
+* format[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* formatter[meta class]
+* cpp23[meta cpp]
+
+```cpp
+constexpr void
+  formatter&amp;lt;char-or-string&amp;gt;::set_debug_format(); // (1)
+```
+
+## 概要
+デバッグ出力を有効にする。
+
+このメンバ関数は、[`std::format()`](/reference/format/format.md)関数の文字・文字列に対する書式として「? (デバッグ出力)」の指定をすることで自動的に呼び出される。デフォルトは無効である。
+
+この機能が有効になることで、文字・文字列が引用符で囲まれ、エスケープシーケンスがエスケープされて出力される (例:`&amp;#34;\n&amp;#34;`は`&amp;#34;\&amp;#34;\n\&amp;#34;&amp;#34;`となる)。
+
+タプルおよびRangeの要素としての文字・文字列に対しては、デフォルトで有効であることに注意。
+
+
+## 効果
+デバッグ出力を有効にする。
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P2286R8 Formatting Ranges](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2286r8.html)
+- [P2585R1 Improve default container formatting](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2585r1.html)
+    - C++23から、Range・コンテナ、`pair`、`tuple`のフォーマット出力、および文字・文字列のデバッグ指定 (`&amp;#34;?&amp;#34;`) が追加された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>set_separator -- formatter : format, set_brackets, set_separator, set_debug_formatを追加 #1085</title>
      <link href="https://cpprefjp.github.io/reference/format/formatter/set_separator.html"/>
      <id>3269f7f3c99ee899ad037629c023ff4edb7577a0:reference/format/formatter/set_separator.md</id>
      <updated>2023-01-23T23:06:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/formatter/set_separator.md b/reference/format/formatter/set_separator.md
new file mode 100644
index 000000000..d54d732a9
--- /dev/null
+++ b/reference/format/formatter/set_separator.md
@@ -0,0 +1,39 @@
+# set_separator
+* format[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* formatter[meta class]
+* cpp23[meta cpp]
+
+```cpp
+template &amp;lt;class charT, formattable&amp;lt;charT&amp;gt;... Ts&amp;gt;
+constexpr void
+  formatter&amp;lt;pair-or-tuple&amp;lt;Ts...&amp;gt;&amp;gt;::set_separator(basic_string_view&amp;lt;charT&amp;gt; sep); // (1)
+```
+
+## 概要
+要素の区切り文字を設定する。
+
+このメンバ関数は、[`std::format()`](/reference/format/format.md)関数の「[pair、tupleの書式](/reference/format/format.md#tuple-format-options)」において区切り文字を変更するオプションを指定することで自動的に呼び出される。
+
+デフォルトの開きカッコは`&amp;#34;, &amp;#34;`である。
+
+
+## 効果
+`sep`を区切り文字として設定する。
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P2286R8 Formatting Ranges](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2286r8.html)
+- [P2585R1 Improve default container formatting](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2585r1.html)
+    - C++23から、Range・コンテナ、`pair`、`tuple`のフォーマット出力、および文字・文字列のデバッグ指定 (`&amp;#34;?&amp;#34;`) が追加された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>advance_to -- basic_format_parse_context::advance_to : 説明見直し</title>
      <link href="https://cpprefjp.github.io/reference/format/basic_format_parse_context/advance_to.html"/>
      <id>d1ac632cff8ca15c520099a205d3039e6b7111c1:reference/format/basic_format_parse_context/advance_to.md</id>
      <updated>2023-01-23T22:37:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/basic_format_parse_context/advance_to.md b/reference/format/basic_format_parse_context/advance_to.md
index 5f490afd7..8d2967bf9 100644
--- a/reference/format/basic_format_parse_context/advance_to.md
+++ b/reference/format/basic_format_parse_context/advance_to.md
@@ -12,11 +12,15 @@ constexpr void advance_to(const_iterator it);
 ## 概要
 指定したイテレータを先頭イテレータとして設定する。
 
-この関数は、書式文字列の全体を解析する処理において、[`formatter`](/reference/format/formatter.md)`::`[`parse()`](/reference/format/formatter/parse.md)の戻り値を、次の解析の初期位置として設定するために使用する。
+この関数は、書式文字列の全体を解析する処理において、[`formatter`](/reference/format/formatter.md)`::`[`parse()`](/reference/format/formatter/parse.md)の戻り値から、次の解析を始めるために使用する。
 
 ```cpp
 while (…) {
-  next_parse_ctx.advance_to(f.parse(parse_ctx));
+  auto it = f.parse(parse_ctx);
+
+  /* 次の書式指定までitを進める… */
+
+  next_parse_ctx.advance_to(it);
 }
 ```
 * parse[link /reference/format/formatter/parse.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>advance_to -- basic_format_parse_context: begin, end, advance_toを追加</title>
      <link href="https://cpprefjp.github.io/reference/format/basic_format_context/advance_to.html"/>
      <id>ad997184e5177e545acd5a3b7410cc48451fc5cb:reference/format/basic_format_context/advance_to.md</id>
      <updated>2023-01-23T22:33:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/basic_format_context/advance_to.md b/reference/format/basic_format_context/advance_to.md
index 5aff44b4a..dac5edc89 100644
--- a/reference/format/basic_format_context/advance_to.md
+++ b/reference/format/basic_format_context/advance_to.md
@@ -8,8 +8,6 @@
 ```cpp
 void advance_to(iterator it);
 ```
-* basic_format_arg[link /reference/format/basic_format_arg.md]
-* basic_format_context[link /reference/format/basic_format_context.md]
 
 ## 概要
 出力イテレータを指定したイテレータに設定する。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>out -- basic_format_parse_context: begin, end, advance_toを追加</title>
      <link href="https://cpprefjp.github.io/reference/format/basic_format_context/out.html"/>
      <id>ad997184e5177e545acd5a3b7410cc48451fc5cb:reference/format/basic_format_context/out.md</id>
      <updated>2023-01-23T22:33:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/basic_format_context/out.md b/reference/format/basic_format_context/out.md
index 4c8569f05..d6e567653 100644
--- a/reference/format/basic_format_context/out.md
+++ b/reference/format/basic_format_context/out.md
@@ -8,8 +8,6 @@
 ```cpp
 iterator out();
 ```
-* basic_format_arg[link /reference/format/basic_format_arg.md]
-* basic_format_context[link /reference/format/basic_format_context.md]
 
 ## 概要
 出力イテレータを取得する。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_format_parse_context -- basic_format_parse_context: begin, end, advance_toを追加</title>
      <link href="https://cpprefjp.github.io/reference/format/basic_format_parse_context.html"/>
      <id>ad997184e5177e545acd5a3b7410cc48451fc5cb:reference/format/basic_format_parse_context.md</id>
      <updated>2023-01-23T22:33:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/basic_format_parse_context.md b/reference/format/basic_format_parse_context.md
index 2d0db6d8a..f02a30633 100644
--- a/reference/format/basic_format_parse_context.md
+++ b/reference/format/basic_format_parse_context.md
@@ -28,17 +28,17 @@ namespace std {
 | 名前            | 説明                                               | 対応バージョン |
 |-----------------|----------------------------------------------------|----------------|
 | `(constructor)` | コンストラクタ                                     | C++20          |
-| `begin`         | 書式文字列の先頭のイテレータを得る               | C++20          |
-| `end`           | 書式文字列の末尾のイテレータを得る               | C++20          |
-| `advance_to`    | 先頭のイテレータを指定したイテレータに設定する | C++20          |
+| [`begin`](basic_format_parse_context/begin.md) | 書式文字列の先頭を指すイテレータを取得する               | C++20          |
+| [`end`](basic_format_parse_context/end.md)     | 書式文字列の末尾を指すイテレータを取得する               | C++20          |
+| [`advance_to`](basic_format_parse_context/advance_to.md) | 指定したイテレータを先頭イテレータとして設定する | C++20          |
 | `next_arg_id`   | フォーマット引数の番号を次に進める                 | C++20          |
 | `check_arg_id`  | フォーマット引数の番号指定が有効か確かめる         | C++20          |
 
 ## メンバ型
 
-| 名前             | 説明                                                                                          | 対応バージョン |
-|------------------|-----------------------------------------------------------------------------------------------|----------------|
-| `char_type`      | 文字の型(`charT`と等しい) (type-alias)                                                        | C++20          |
+| 名前             | 説明                                                                                        | 対応バージョン |
+|------------------|---------------------------------------------------------------------------------------------|----------------|
+| `char_type`      | 文字の型(`charT`と等しい) (type-alias)                                                      | C++20          |
 | `const_iterator` | 書式文字列のイテレータの型(`basic_string_view&amp;lt;charT&amp;gt;::const_iterator`と等しい) (type-alias) | C++20          |
 | `iterator`       | 書式文字列のイテレータの型(`basic_string_view&amp;lt;charT&amp;gt;::iterator`と等しい) (type-alias)       | C++20          |
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>advance_to -- basic_format_parse_context: begin, end, advance_toを追加</title>
      <link href="https://cpprefjp.github.io/reference/format/basic_format_parse_context/advance_to.html"/>
      <id>ad997184e5177e545acd5a3b7410cc48451fc5cb:reference/format/basic_format_parse_context/advance_to.md</id>
      <updated>2023-01-23T22:33:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/basic_format_parse_context/advance_to.md b/reference/format/basic_format_parse_context/advance_to.md
new file mode 100644
index 000000000..5f490afd7
--- /dev/null
+++ b/reference/format/basic_format_parse_context/advance_to.md
@@ -0,0 +1,48 @@
+# advance_to
+* format[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* basic_format_parse_context[meta class]
+* cpp20[meta cpp]
+
+```cpp
+constexpr void advance_to(const_iterator it);
+```
+
+## 概要
+指定したイテレータを先頭イテレータとして設定する。
+
+この関数は、書式文字列の全体を解析する処理において、[`formatter`](/reference/format/formatter.md)`::`[`parse()`](/reference/format/formatter/parse.md)の戻り値を、次の解析の初期位置として設定するために使用する。
+
+```cpp
+while (…) {
+  next_parse_ctx.advance_to(f.parse(parse_ctx));
+}
+```
+* parse[link /reference/format/formatter/parse.md]
+
+
+## 事前条件
+- `it`は[`end()`](end.md)に到達可能であること
+
+
+## 効果
+メンバ変数として保持している、書式文字列の先頭を指すイテレータ`begin_`があるとして、以下と等価：
+
+```cpp
+begin_ = it;
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+## 参照
+
+- [P0645R10 Text Formatting](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0645r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin -- basic_format_parse_context: begin, end, advance_toを追加</title>
      <link href="https://cpprefjp.github.io/reference/format/basic_format_parse_context/begin.html"/>
      <id>ad997184e5177e545acd5a3b7410cc48451fc5cb:reference/format/basic_format_parse_context/begin.md</id>
      <updated>2023-01-23T22:33:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/basic_format_parse_context/begin.md b/reference/format/basic_format_parse_context/begin.md
new file mode 100644
index 000000000..be15eeaed
--- /dev/null
+++ b/reference/format/basic_format_parse_context/begin.md
@@ -0,0 +1,86 @@
+# begin
+* format[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* basic_format_parse_context[meta class]
+* cpp20[meta cpp]
+
+```cpp
+constexpr const_iterator begin() const noexcept;
+```
+
+## 概要
+書式文字列の先頭を指すイテレータを取得する。
+
+
+## 効果
+メンバ変数として保持している、書式文字列の先頭を指すイテレータを返す。
+
+
+## 例
+### 基本的な使い方
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;format&amp;gt;
+
+enum color { red, green, blue };
+
+const char* color_names[] = { &amp;#34;red&amp;#34;, &amp;#34;green&amp;#34;, &amp;#34;blue&amp;#34; };
+
+template&amp;lt;&amp;gt;
+class std::formatter&amp;lt;color&amp;gt; {
+  bool enable_quote = false;
+public:
+  constexpr auto parse(std::format_parse_context&amp;amp; ctx) {
+    auto it = ctx.begin();
+    if (it == ctx.end()) {
+      return it;
+    }
+
+    if (*it == &amp;#39;%&amp;#39;) {
+      enable_quote = true;
+      ++it;
+    }
+    return it;
+  }
+
+  auto format(color c, std::format_context&amp;amp; ctx) const {
+    if (enable_quote) {
+      return std::format_to(ctx.out(), &amp;#34;\&amp;#34;{}\&amp;#34;&amp;#34;, color_names[c]);
+    }
+    else {
+      return std::format_to(ctx.out(), &amp;#34;{}&amp;#34;, color_names[c]);
+    }
+  }
+};
+
+int main()
+{
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{:%}&amp;#34;, red) &amp;lt;&amp;lt; std::endl;
+}
+```
+* ctx.begin()[color ff0000]
+* ctx.end()[link end.md]
+* std::format[link /reference/format/format.md]
+* std::format_to[link /reference/format/format_to.md]
+* std::format_context[link /reference/format/basic_format_context.md]
+* ctx.out()[link /reference/format/basic_format_context/out.md]
+
+#### 出力
+```
+&amp;#34;red&amp;#34;
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+## 参照
+
+- [P0645R10 Text Formatting](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0645r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- basic_format_parse_context: begin, end, advance_toを追加</title>
      <link href="https://cpprefjp.github.io/reference/format/basic_format_parse_context/end.html"/>
      <id>ad997184e5177e545acd5a3b7410cc48451fc5cb:reference/format/basic_format_parse_context/end.md</id>
      <updated>2023-01-23T22:33:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/basic_format_parse_context/end.md b/reference/format/basic_format_parse_context/end.md
new file mode 100644
index 000000000..b71998a6d
--- /dev/null
+++ b/reference/format/basic_format_parse_context/end.md
@@ -0,0 +1,86 @@
+# end
+* format[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* basic_format_parse_context[meta class]
+* cpp20[meta cpp]
+
+```cpp
+constexpr const_iterator end() const noexcept;
+```
+
+## 概要
+書式文字列の末尾を指すイテレータを取得する。
+
+
+## 効果
+メンバ変数として保持している、書式文字列の末尾を指すイテレータを返す。
+
+
+## 例
+### 基本的な使い方
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;format&amp;gt;
+
+enum color { red, green, blue };
+
+const char* color_names[] = { &amp;#34;red&amp;#34;, &amp;#34;green&amp;#34;, &amp;#34;blue&amp;#34; };
+
+template&amp;lt;&amp;gt;
+class std::formatter&amp;lt;color&amp;gt; {
+  bool enable_quote = false;
+public:
+  constexpr auto parse(std::format_parse_context&amp;amp; ctx) {
+    auto it = ctx.begin();
+    if (it == ctx.end()) {
+      return it;
+    }
+
+    if (*it == &amp;#39;%&amp;#39;) {
+      enable_quote = true;
+      ++it;
+    }
+    return it;
+  }
+
+  auto format(color c, std::format_context&amp;amp; ctx) const {
+    if (enable_quote) {
+      return std::format_to(ctx.out(), &amp;#34;\&amp;#34;{}\&amp;#34;&amp;#34;, color_names[c]);
+    }
+    else {
+      return std::format_to(ctx.out(), &amp;#34;{}&amp;#34;, color_names[c]);
+    }
+  }
+};
+
+int main()
+{
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{:%}&amp;#34;, red) &amp;lt;&amp;lt; std::endl;
+}
+```
+* ctx.end()[color ff0000]
+* ctx.begin()[link begin.md]
+* std::format[link /reference/format/format.md]
+* std::format_to[link /reference/format/format_to.md]
+* std::format_context[link /reference/format/basic_format_context.md]
+* ctx.out()[link /reference/format/basic_format_context/out.md]
+
+#### 出力
+```
+&amp;#34;red&amp;#34;
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+## 参照
+
+- [P0645R10 Text Formatting](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0645r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>formatter -- basic_format_parse_context: begin, end, advance_toを追加</title>
      <link href="https://cpprefjp.github.io/reference/format/formatter.html"/>
      <id>ad997184e5177e545acd5a3b7410cc48451fc5cb:reference/format/formatter.md</id>
      <updated>2023-01-23T22:33:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/formatter.md b/reference/format/formatter.md
index f815402b9..4f87612a8 100644
--- a/reference/format/formatter.md
+++ b/reference/format/formatter.md
@@ -208,7 +208,7 @@ int main()
 }
 ```
 * std::format_parse_context[link basic_format_parse_context.md]
-* ctx.begin()[link basic_format_parse_context/begin.md.nolink]
+* ctx.begin()[link basic_format_parse_context/begin.md]
 * std::format_context[link basic_format_context.md]
 * ctx.out()[link basic_format_context/out.md]
 * std::format_to[link format_to.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>functional -- functional: move_only_functionへのリンク追加(#1056)</title>
      <link href="https://cpprefjp.github.io/reference/functional.html"/>
      <id>96e93fc28af2cb6f312a531638731b8bebdbcb90:reference/functional.md</id>
      <updated>2023-01-23T21:15:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional.md b/reference/functional.md
index 8ac753e93..de215b83e 100644
--- a/reference/functional.md
+++ b/reference/functional.md
@@ -25,6 +25,7 @@ struct doubler {
 |----------------------------------------------------------|----------------------------------------|-------|
 | [`function`](functional/function.md) | 関数・関数オブジェクトの多相的なラッパー(class template) | C++11 |
 | [`bad_function_call`](functional/bad_function_call.md) | 不正な関数呼び出しに関する例外(class)  | C++11 |
+| [`move_only_function`](functional/move_only_function.md) | 関数・関数オブジェクトの多相的な軽量ラッパー(class template) | C++23 |
 
 
 ## 統一的な関数呼び出し
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-02-25T14:44:28.164097</updated>
  <id>ab264814-db38-48c9-bd06-7bd017fc6e8f</id>

  
    <entry>
      <title>contains -- fix sample in flat_multiset</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_multiset/contains.html"/>
      <id>816853121ff41b05699b3edb3ec38c95cce82db5:reference/flat_set/flat_multiset/contains.md</id>
      <updated>2025-02-18T20:11:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_multiset/contains.md b/reference/flat_set/flat_multiset/contains.md
index 48e2daa1a..3bc429600 100644
--- a/reference/flat_set/flat_multiset/contains.md
+++ b/reference/flat_set/flat_multiset/contains.md
@@ -51,7 +51,7 @@ return find(x) != end();
 
 int main()
 {
-  std::flat_set&amp;lt;int&amp;gt; fs = {3, 1, 4, 1};
+  std::flat_multiset&amp;lt;int&amp;gt; fs = {3, 1, 4, 1};
 
   // キー3の要素が含まれているか
   if (fs.contains(3)) {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>[[nodiscard]]をコンストラクタのオーバーロードごとに付加できるようにする [P1771R1] -- C++20 / C++23 : ページタイトルに提案文書の番号を追加</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/nodiscard_for_constructors.html"/>
      <id>7a572ea68617b61516b1e1820b42c813d103ca73:lang/cpp20/nodiscard_for_constructors.md</id>
      <updated>2025-02-18T15:53:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/nodiscard_for_constructors.md b/lang/cpp20/nodiscard_for_constructors.md
index bd3a0a979..4fe7d3183 100644
--- a/lang/cpp20/nodiscard_for_constructors.md
+++ b/lang/cpp20/nodiscard_for_constructors.md
@@ -1,4 +1,4 @@
-# [[nodiscard]]をコンストラクタのオーバーロードごとに付加できるようにする
+# [[nodiscard]]をコンストラクタのオーバーロードごとに付加できるようにする [P1771R1]
 * cpp20[meta cpp]
 
 &amp;lt;!-- start lang caution --&amp;gt;
@@ -64,4 +64,4 @@ prog.cc:11:12: note: declared here
 
 
 ## 参照
-- [P1771R1 `[[nodiscard]]` for constructors](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1771r1.pdf)
\ No newline at end of file
+- [P1771R1 `[[nodiscard]]` for constructors](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1771r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>throw()による例外送出しない指定を削除 [P0619R4] -- C++20 / C++23 : ページタイトルに提案文書の番号を追加</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/remove_deprecated_nothrow_exception_specification.html"/>
      <id>7a572ea68617b61516b1e1820b42c813d103ca73:lang/cpp20/remove_deprecated_nothrow_exception_specification.md</id>
      <updated>2025-02-18T15:53:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/remove_deprecated_nothrow_exception_specification.md b/lang/cpp20/remove_deprecated_nothrow_exception_specification.md
index 088f25b9a..bd7edaa94 100644
--- a/lang/cpp20/remove_deprecated_nothrow_exception_specification.md
+++ b/lang/cpp20/remove_deprecated_nothrow_exception_specification.md
@@ -1,4 +1,4 @@
-# throw()による例外送出しない指定を削除
+# throw()による例外送出しない指定を削除 [P0619R4]
 * cpp20[meta cpp]
 
 &amp;lt;!-- start lang caution --&amp;gt;
@@ -27,4 +27,4 @@ C++20では、非推奨とされていた`throw()`指定の機能を削除する
 
 
 ## 参照
-- [P0619R4 Reviewing Deprecated Facilities of C++17 for C++20](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0619r4.html)
\ No newline at end of file
+- [P0619R4 Reviewing Deprecated Facilities of C++17 for C++20](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0619r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>属性の名前空間を予約 [P1908R1] -- C++20 / C++23 : ページタイトルに提案文書の番号を追加</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/reserving_attribute_namespaces_for_future_use.html"/>
      <id>7a572ea68617b61516b1e1820b42c813d103ca73:lang/cpp20/reserving_attribute_namespaces_for_future_use.md</id>
      <updated>2025-02-18T15:53:36+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;属性の名前空間を予約 [P1908R1]&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;このページはC++20に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため&lt;a href=&#34;#relative-page&#34;&gt;関連項目&lt;/a&gt;を参照してください。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;将来的に標準で定義する属性のために、以下の名前空間の属性を予約する：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;名前空間に属さない属性&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std&lt;/code&gt;および&lt;code&gt;std&lt;/code&gt; + 数字の名前空間の属性&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#relative-page&#34; id=&#34;relative-page&#34;&gt;関連項目&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../cpp11/attributes.html&#34;&gt;C++11 属性構文&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1908r1.pdf&#34; target=&#34;_blank&#34;&gt;P1908R1 Reserving Attribute Namespaces for Future Use&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Unicode標準への参照を更新 [P1025R1] -- C++20 / C++23 : ページタイトルに提案文書の番号を追加</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/update_the_reference_to_the_unicode_standard.html"/>
      <id>7a572ea68617b61516b1e1820b42c813d103ca73:lang/cpp20/update_the_reference_to_the_unicode_standard.md</id>
      <updated>2025-02-18T15:53:36+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Unicode標準への参照を更新 [P1025R1]&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;このページはC++20に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため&lt;a href=&#34;#relative-page&#34;&gt;関連項目&lt;/a&gt;を参照してください。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;Unicode標準 (ISO/IEC 10646) としてこれまで、「ISO/IEC 10646-1:1993, Information technology — Universal Multiple-Octet Coded Character Set (UCS) — Part 1: Architecture and Basic Multilingual Plane」が参照されていた。&lt;/p&gt;
&lt;p&gt;従来の古い仕様への参照は、非推奨化された古い機能のものであるとして残し、Unicode標準の最新仕様「ISO/IEC 10646, Information technology — Universal Coded Character Set (UCS)」を参照するよう追加する。&lt;/p&gt;
&lt;p&gt;Unicode標準で非推奨化された用語UCS2とUCS4の扱いは、以下のようになる：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UTC-32はUCS4と見なせるため、文字エンコーディングの説明ではUCS4の代わりにUTF-32を使用する&lt;/li&gt;
&lt;li&gt;ただしUTF-16はUCS2と見なすことができないため、古い機能のために古い仕様を参照するとして一部そのまま残す&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;実装が常に最新のUnicode標準を参照していることから、この変更によるユーザーへの直接的な影響はない。&lt;/p&gt;
&lt;h2&gt;この機能が必要になった背景・経緯&lt;/h2&gt;
&lt;p&gt;C++規格上ではISO/IEC 10646-1:1993を参照していても、実装は最新仕様に更新し続けていた。たとえば1996の仕様ではハングル文字のセットが削除されて別な位置に追加され、チベット文字が再追加された。実装はそれに対応している。&lt;/p&gt;
&lt;p&gt;また、C++標準が参照しているECMAScript標準でUnicode標準の参照が競合してしまう。&lt;/p&gt;
&lt;p&gt;Unicode標準での用語定義が変更されたことにも影響がある。UCS2とUCS4という用語が非推奨化されたために、その用語をC++標準が使用し続けることは望ましくない。&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1025r1.html&#34; target=&#34;_blank&#34;&gt;P1025R1 Update The Reference To The Unicode Standard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>参照するPOSIX規格を更新 [P2227R0] -- C++20 / C++23 : ページタイトルに提案文書の番号を追加</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/update_normative_reference_to_posix.html"/>
      <id>7a572ea68617b61516b1e1820b42c813d103ca73:lang/cpp23/update_normative_reference_to_posix.md</id>
      <updated>2025-02-18T15:53:36+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;参照するPOSIX規格を更新 [P2227R0]&lt;/span&gt;&lt;span class=&#34;cpp cpp23&#34; title=&#34;C++23で追加&#34;&gt;(C++23)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;このページはC++23に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため&lt;a href=&#34;#relative-page&#34;&gt;関連項目&lt;/a&gt;を参照してください。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;C++20まではPOSIX規格としてISO/IEC 9945:2003 (別名POSIX.1-2001 aka The Single UNIX Specification, version 3) を参照していた。&lt;/p&gt;
&lt;p&gt;しかし、標準C++の一部の機能はより新しいPOSIX規格の機能を使用していたため、ISO/IEC 9945:2003への参照を削除した上で、以下の3つの規格を参照するよう変更する：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ISO/IEC/IEEE 9945:20032009, Information Technology — Portable Operating System Interface (POSIX)&lt;/li&gt;
&lt;li&gt;ISO/IEC/IEEE 9945:2009/Cor 1:2013, Information Technology — Portable Operating System Interface (POSIX), Technical Corrigendum 1&lt;/li&gt;
&lt;li&gt;ISO/IEC/IEEE 9945:2009/Cor 2:2017, Information Technology — Portable Operating System Interface (POSIX), Technical Corrigendum 2&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;posix&lt;/code&gt;名前空間の予約に関してのPOSIX規格の参照もまた、ISO/IEC 9945からISO/IEC/IEEE 9945に変更する。&lt;/p&gt;
&lt;p&gt;また、POSIXの一部環境で非推奨となっている機能である&lt;code&gt;readdir_r()&lt;/code&gt;を参照していたところを、&lt;code&gt;readdir()&lt;/code&gt;に置き換える。&lt;/p&gt;
&lt;h2&gt;この機能が必要になった背景・経緯&lt;/h2&gt;
&lt;p&gt;ここでは、具体的に問題になった、標準C++が参照するPOSIXの機能を列挙する。&lt;/p&gt;
&lt;h3&gt;errno&lt;/h3&gt;
&lt;p&gt;C++03まで、&lt;code&gt;&lt;a href=&#34;../../reference/cerrno.html&#34;&gt;&amp;lt;cerrno&amp;gt;&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&amp;lt;errno.h&amp;gt;&lt;/code&gt;にはISO Cが要求する&lt;code&gt;EDOM&lt;/code&gt; (定義域エラー)、&lt;code&gt;ERANGE&lt;/code&gt; (値域エラー)、&lt;code&gt;errno&lt;/code&gt;といった必要最低限のマクロのみが含まれていた。&lt;/p&gt;
&lt;p&gt;C++11での&lt;code&gt;&lt;a href=&#34;../../reference/system_error.html&#34;&gt;&amp;lt;system_error&amp;gt;&lt;/a&gt;&lt;/code&gt;ライブラリの導入にともなって、「&lt;code&gt;&lt;a href=&#34;../../reference/cerrno.html&#34;&gt;&amp;lt;cerrno&amp;gt;&lt;/a&gt;&lt;/code&gt;で定義される内容は、&lt;code&gt;errno&lt;/code&gt;がマクロ定義されることを除いてPOSIXの&lt;code&gt;&amp;lt;errno.h&amp;gt;&lt;/code&gt;ヘッダと同じである」という規定となった。この規定のあとにマクロのリストが定義されるが、&lt;code&gt;ENOTRECOVERABLE&lt;/code&gt;と&lt;code&gt;EOWNERDEAD&lt;/code&gt;はPOSIXの2006規格、&lt;code&gt;ENOTSUP&lt;/code&gt;と&lt;code&gt;EOPNOTSUPP&lt;/code&gt;は2008規格で追加されたものだった。&lt;/p&gt;
&lt;p&gt;POSIXの2008年では標準C++で定義されるマクロのほかに&lt;code&gt;EDQUOT&lt;/code&gt;、&lt;code&gt;EMULTIHOP&lt;/code&gt;、&lt;code&gt;ENOLINK&lt;/code&gt;といった具体的な意味をもたない「予約済み」というだけのマクロももっている。すでに定義されている&lt;code&gt;ESTALE&lt;/code&gt;のようにそれらを標準C++に追加することは今後検討する必要はあるが、ここでは提案しない。&lt;/p&gt;
&lt;h3&gt;ファイルシステム&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&lt;a href=&#34;../../reference/filesystem/path.html&#34;&gt;path&lt;/a&gt;&lt;/code&gt;クラスについて、POSIX.1-2008の4.12 Pathname ResolutionとPOSIX.1-2017の4.13 Pathname Resolutionを追加で参照する必要がある。&lt;/p&gt;
&lt;p&gt;ここで参照するほとんどの機能はPOSIX.1-2001に存在するが、ファイルの最終更新日時の&lt;code&gt;futimens()&lt;/code&gt;関数、ファイル権限の&lt;code&gt;fchmodat()&lt;/code&gt;関数は存在していない。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;truncate()&lt;/code&gt;と&lt;code&gt;statvfs()&lt;/code&gt;の機能はオプションであり、POSIXに準拠する環境に存在する必要がない。POSIX.1-2008ではこれらの機能がオプションではなくなった。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;stat()&lt;/code&gt;で使用される&lt;code&gt;S_ISVTX&lt;/code&gt;マクロはオプション機能であり、XSIの一部である。これはPOSIX.1-2008とPOSIX.1-2017でもオプションのままである。&lt;/p&gt;
&lt;p&gt;POSIX.1-2001のスレッドセーフ関数 (Thread-Safe Functions : TSF) オプションの一部である&lt;code&gt;readdir_r()&lt;/code&gt;を参照する注記もあるが、POSIX.1-2008ではBaseに移動されている。ただし、&lt;code&gt;readdir_r()&lt;/code&gt; APIの実装には欠陥があり、一部の実装では非推奨となっており、将来のバージョンから削除される可能性がある。ここでは&lt;code&gt;readdir_r()&lt;/code&gt;に固有のものに依存してはいないため、&lt;code&gt;readdir()&lt;/code&gt;を参照するよう変更する。&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2227r0.html&#34; target=&#34;_blank&#34;&gt;P2227R0 Update normative reference to POSIX&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>条件付きで特殊メンバ関数をトリビアルに定義するように [P0848R3] -- 見出しの表示崩れを修正</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/conditionally_trivial_special_member_functions.html"/>
      <id>cce034a5cd5372fb36a549fc6b134a340b1482f3:lang/cpp20/conditionally_trivial_special_member_functions.md</id>
      <updated>2025-02-18T15:43:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/conditionally_trivial_special_member_functions.md b/lang/cpp20/conditionally_trivial_special_member_functions.md
index 6a4cd44e5..e33bd76fa 100644
--- a/lang/cpp20/conditionally_trivial_special_member_functions.md
+++ b/lang/cpp20/conditionally_trivial_special_member_functions.md
@@ -287,7 +287,7 @@ C++20のコンセプトの導入によって、コンセプトによって特殊
 
 この機能は、C++23の`std::expceted`の実装で活用されるだろう。
 
-## ## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 
 - [コンセプト](./concepts.md)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>条件付きで特殊メンバ関数をトリビアルに定義するように [P0848R3] -- C++20: 提案文書の番号をタイトルに記載</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/conditionally_trivial_special_member_functions.html"/>
      <id>50250aec626a8d887e6730af931cf2e46512d67d:lang/cpp20/conditionally_trivial_special_member_functions.md</id>
      <updated>2025-02-18T15:42:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/conditionally_trivial_special_member_functions.md b/lang/cpp20/conditionally_trivial_special_member_functions.md
index 7a305b64c..6a4cd44e5 100644
--- a/lang/cpp20/conditionally_trivial_special_member_functions.md
+++ b/lang/cpp20/conditionally_trivial_special_member_functions.md
@@ -1,4 +1,4 @@
-# 条件付きで特殊メンバ関数をトリビアルに定義するように
+# 条件付きで特殊メンバ関数をトリビアルに定義するように [P0848R3]
 * cpp20[meta cpp]
 
 このページはC++20に採用された言語機能の変更を解説しています。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>未初期化領域への暗黙的なオブジェクト構築 [P0593R6] -- C++20: 提案文書の番号をタイトルに記載</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/implicit_creation_of_objects_for_low-level_object_manipulation.html"/>
      <id>50250aec626a8d887e6730af931cf2e46512d67d:lang/cpp20/implicit_creation_of_objects_for_low-level_object_manipulation.md</id>
      <updated>2025-02-18T15:42:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/implicit_creation_of_objects_for_low-level_object_manipulation.md b/lang/cpp20/implicit_creation_of_objects_for_low-level_object_manipulation.md
index 37bd5f5bf..4f19a53d9 100644
--- a/lang/cpp20/implicit_creation_of_objects_for_low-level_object_manipulation.md
+++ b/lang/cpp20/implicit_creation_of_objects_for_low-level_object_manipulation.md
@@ -1,4 +1,4 @@
-# 未初期化領域への暗黙的なオブジェクト構築
+# 未初期化領域への暗黙的なオブジェクト構築 [P0593R6]
 * cpp20[meta cpp]
 
 &amp;lt;!-- start lang caution --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- add deduction guide with range to some containers.</title>
      <link href="https://cpprefjp.github.io/reference/deque/deque/op_deduction_guide.html"/>
      <id>e44911377d9340e5f31ed3d125486bc1305c5a9c:reference/deque/deque/op_deduction_guide.md</id>
      <updated>2025-02-17T21:01:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/deque/deque/op_deduction_guide.md b/reference/deque/deque/op_deduction_guide.md
index 3564d08ab..2f223cdf3 100644
--- a/reference/deque/deque/op_deduction_guide.md
+++ b/reference/deque/deque/op_deduction_guide.md
@@ -9,13 +9,25 @@ namespace std {
   template &amp;lt;class InputIterator,
             class Allocator = allocator&amp;lt;typename iterator_traits&amp;lt;InputIterator&amp;gt;::value_type&amp;gt;&amp;gt;
   deque(InputIterator, InputIterator, Allocator = Allocator())
-    -&amp;gt; deque&amp;lt;typename iterator_traits&amp;lt;InputIterator&amp;gt;::value_type, Allocator&amp;gt;;
+    -&amp;gt; deque&amp;lt;typename iterator_traits&amp;lt;InputIterator&amp;gt;::value_type, Allocator&amp;gt;; // (1)
+
+  template &amp;lt;ranges::input_range R,
+            class Allocator = allocator&amp;lt;ranges::range_value_t&amp;lt;R&amp;gt;&amp;gt;&amp;gt;
+  deque(from_range_t, R&amp;amp;&amp;amp;, Allocator = Allocator())
+    -&amp;gt; deque&amp;lt;ranges::range_value_t&amp;lt;R&amp;gt;, Allocator&amp;gt;;                            // (2) C++23から
 }
 ```
 * iterator_traits[link /reference/iterator/iterator_traits.md]
+* ranges::input_range[link /reference/ranges/input_range.md]
+* allocator[link /reference/memory/allocator.md]
+* ranges::range_value_t[link /reference/ranges/range_value_t.md]
+* from_range_t[link /reference/ranges/from_range_t.md]
 
 ## 概要
-`std::deque`クラステンプレートの型推論補助。イテレータ範囲から推論する。
+`std::deque`クラステンプレートの型推論補助。
+
+- (1) : イテレータ範囲から推論する。
+- (2) : Rangeから推論する。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- add deduction guide with range to some containers.</title>
      <link href="https://cpprefjp.github.io/reference/forward_list/forward_list/op_deduction_guide.html"/>
      <id>e44911377d9340e5f31ed3d125486bc1305c5a9c:reference/forward_list/forward_list/op_deduction_guide.md</id>
      <updated>2025-02-17T21:01:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/forward_list/forward_list/op_deduction_guide.md b/reference/forward_list/forward_list/op_deduction_guide.md
index 27df64fa3..b882d7666 100644
--- a/reference/forward_list/forward_list/op_deduction_guide.md
+++ b/reference/forward_list/forward_list/op_deduction_guide.md
@@ -9,13 +9,25 @@ namespace std {
   template &amp;lt;class InputIterator,
             class Allocator = allocator&amp;lt;typename iterator_traits&amp;lt;InputIterator&amp;gt;::value_type&amp;gt;&amp;gt;
   forward_list(InputIterator, InputIterator, Allocator = Allocator())
-    -&amp;gt; forward_list&amp;lt;typename iterator_traits&amp;lt;InputIterator&amp;gt;::value_type, Allocator&amp;gt;;
+    -&amp;gt; forward_list&amp;lt;typename iterator_traits&amp;lt;InputIterator&amp;gt;::value_type, Allocator&amp;gt;; // (1)
+
+  template &amp;lt;ranges::input_range R,
+            class Allocator = allocator&amp;lt;ranges::range_value_t&amp;lt;R&amp;gt;&amp;gt;&amp;gt;
+  forward_list(from_range_t, R&amp;amp;&amp;amp;, Allocator = Allocator())
+    -&amp;gt; forward_list&amp;lt;ranges::range_value_t&amp;lt;R&amp;gt;, Allocator&amp;gt;;                            // (2) C++23から
 }
 ```
 * iterator_traits[link /reference/iterator/iterator_traits.md]
+* ranges::input_range[link /reference/ranges/input_range.md]
+* allocator[link /reference/memory/allocator.md]
+* ranges::range_value_t[link /reference/ranges/range_value_t.md]
+* from_range_t[link /reference/ranges/from_range_t.md]
 
 ## 概要
-`std::forward_list`クラステンプレートの型推論補助。イテレータ範囲から推論する。
+`std::forward_list`クラステンプレートの型推論補助。
+
+- (1) : イテレータ範囲から推論する。
+- (2) : Rangeから推論する。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- add deduction guide with range to some containers.</title>
      <link href="https://cpprefjp.github.io/reference/list/list/op_constructor.html"/>
      <id>e44911377d9340e5f31ed3d125486bc1305c5a9c:reference/list/list/op_constructor.md</id>
      <updated>2025-02-17T21:01:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/list/list/op_constructor.md b/reference/list/list/op_constructor.md
index a881629f4..4a50e7dca 100644
--- a/reference/list/list/op_constructor.md
+++ b/reference/list/list/op_constructor.md
@@ -35,7 +35,7 @@ list(from_range_t, R&amp;amp;&amp;amp; rg,
      const Allocator&amp;amp; a = Allocator());          // (11) C++23 から
 ```
 * initializer_list[link /reference/initializer_list/initializer_list.md]
-* from_range_t[link ../../ranges/from_range_t.md]
+* from_range_t[link /reference/ranges/from_range_t.md]
 
 
 ## 概要
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- add deduction guide with range to some containers.</title>
      <link href="https://cpprefjp.github.io/reference/list/list/op_deduction_guide.html"/>
      <id>e44911377d9340e5f31ed3d125486bc1305c5a9c:reference/list/list/op_deduction_guide.md</id>
      <updated>2025-02-17T21:01:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/list/list/op_deduction_guide.md b/reference/list/list/op_deduction_guide.md
index fe63d096d..0a82481b3 100644
--- a/reference/list/list/op_deduction_guide.md
+++ b/reference/list/list/op_deduction_guide.md
@@ -9,13 +9,25 @@ namespace std {
   template &amp;lt;class InputIterator,
             class Allocator = allocator&amp;lt;typename iterator_traits&amp;lt;InputIterator&amp;gt;::value_type&amp;gt;&amp;gt;
   list(InputIterator, InputIterator, Allocator = Allocator())
-    -&amp;gt; list&amp;lt;typename iterator_traits&amp;lt;InputIterator&amp;gt;::value_type, Allocator&amp;gt;;
+    -&amp;gt; list&amp;lt;typename iterator_traits&amp;lt;InputIterator&amp;gt;::value_type, Allocator&amp;gt;; // (1)
+
+  template &amp;lt;ranges::input_range R,
+            class Allocator = allocator&amp;lt;ranges::range_value_t&amp;lt;R&amp;gt;&amp;gt;&amp;gt;
+  list(from_range_t, R&amp;amp;&amp;amp;, Allocator = Allocator())
+    -&amp;gt; list&amp;lt;ranges::range_value_t&amp;lt;R&amp;gt;, Allocator&amp;gt;;                            // (2) C++23から
 }
 ```
 * iterator_traits[link /reference/iterator/iterator_traits.md]
+* ranges::input_range[link /reference/ranges/input_range.md]
+* allocator[link /reference/memory/allocator.md]
+* ranges::range_value_t[link /reference/ranges/range_value_t.md]
+* from_range_t[link /reference/ranges/from_range_t.md]
 
 ## 概要
-`std::list`クラステンプレートの型推論補助。イテレータ範囲から推論する。
+`std::list`クラステンプレートの型推論補助。
+
+- (1) : イテレータ範囲から推論する。
+- (2) : Rangeから推論する。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- add deduction guide with range to some containers.</title>
      <link href="https://cpprefjp.github.io/reference/map/map/op_deduction_guide.html"/>
      <id>e44911377d9340e5f31ed3d125486bc1305c5a9c:reference/map/map/op_deduction_guide.md</id>
      <updated>2025-02-17T21:01:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/map/op_deduction_guide.md b/reference/map/map/op_deduction_guide.md
index 8f7fefcef..68c7d66b6 100644
--- a/reference/map/map/op_deduction_guide.md
+++ b/reference/map/map/op_deduction_guide.md
@@ -14,6 +14,10 @@ namespace std {
   template &amp;lt;class InputIterator&amp;gt;
   using iter_to_alloc_t = pair&amp;lt;add_const_t&amp;lt;typename iterator_traits&amp;lt;InputIterator&amp;gt;::value_type::first_type&amp;gt;,
                                typename iterator_traits&amp;lt;InputIterator&amp;gt;::value_type::second_type&amp;gt;;
+  template &amp;lt;ranges::input_range Range&amp;gt;
+  using range_key_t = remove_const_t&amp;lt;typename ranges::range_value_t&amp;lt;Range&amp;gt;::first_type&amp;gt;;
+  template &amp;lt;ranges::input_range Range&amp;gt;
+  using range_val_t = typename ranges::range_value_t&amp;lt;Range&amp;gt;::second_type;
 
   template &amp;lt;class InputIterator,
             class Compare = less&amp;lt;iter_key_t&amp;lt;InputIterator&amp;gt;&amp;gt;,
@@ -36,6 +40,10 @@ namespace std {
   template &amp;lt;class Key, class T, class Allocator&amp;gt;
   map(initializer_list&amp;lt;pair&amp;lt;Key, T&amp;gt;&amp;gt;, Allocator)
     -&amp;gt; map&amp;lt;Key, T, less&amp;lt;Key&amp;gt;, Allocator&amp;gt;;                                             // (4)
+
+  template &amp;lt;ranges::input_range R, class Allocator&amp;gt;
+  map(from_range_t, R&amp;amp;&amp;amp;, Allocator)
+    -&amp;gt; map&amp;lt;range_key_t&amp;lt;R&amp;gt;, range_val_t&amp;lt;R&amp;gt;, less&amp;lt;range_key_t&amp;lt;R&amp;gt;&amp;gt;, Allocator&amp;gt;;          // (5) C++23から
 }
 ```
 * remove_const_t[link /reference/type_traits/remove_const.md]
@@ -45,6 +53,9 @@ namespace std {
 * less[link /reference/functional/less.md]
 * allocator[link /reference/memory/allocator.md]
 * initializer_list[link /reference/initializer_list/initializer_list.md]
+* ranges::input_range[link /reference/ranges/input_range.md]
+* ranges::range_value_t[link /reference/ranges/range_value_t.md]
+* from_range_t[link /reference/ranges/from_range_t.md]
 
 ## 概要
 `std::map`クラステンプレートの型推論補助。
@@ -53,6 +64,7 @@ namespace std {
 - (2) : 初期化子リストからの推論
 - (3) : イテレータ範囲とアロケータからの推論
 - (4) : 初期化子リストとアロケータからの推論
+- (5) : Rangeからの推論
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- add deduction guide with range to some containers.</title>
      <link href="https://cpprefjp.github.io/reference/map/multimap/op_deduction_guide.html"/>
      <id>e44911377d9340e5f31ed3d125486bc1305c5a9c:reference/map/multimap/op_deduction_guide.md</id>
      <updated>2025-02-17T21:01:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/multimap/op_deduction_guide.md b/reference/map/multimap/op_deduction_guide.md
index f797ca0a0..03cb0ea04 100644
--- a/reference/map/multimap/op_deduction_guide.md
+++ b/reference/map/multimap/op_deduction_guide.md
@@ -14,6 +14,10 @@ namespace std {
   template &amp;lt;class InputIterator&amp;gt;
   using iter_to_alloc_t = pair&amp;lt;add_const_t&amp;lt;typename iterator_traits&amp;lt;InputIterator&amp;gt;::value_type::first_type&amp;gt;,
                                typename iterator_traits&amp;lt;InputIterator&amp;gt;::value_type::second_type&amp;gt;;
+  template &amp;lt;ranges::input_range Range&amp;gt;
+  using range_key_t = remove_const_t&amp;lt;typename ranges::range_value_t&amp;lt;Range&amp;gt;::first_type&amp;gt;;
+  template &amp;lt;ranges::input_range Range&amp;gt;
+  using range_val_t = typename ranges::range_value_t&amp;lt;Range&amp;gt;::second_type;
 
   template &amp;lt;class InputIterator,
             class Compare = less&amp;lt;iter_key_t&amp;lt;InputIterator&amp;gt;&amp;gt;,
@@ -36,6 +40,10 @@ namespace std {
   template &amp;lt;class Key, class T, class Allocator&amp;gt;
   multimap(initializer_list&amp;lt;pair&amp;lt;Key, T&amp;gt;&amp;gt;, Allocator)
     -&amp;gt; multimap&amp;lt;Key, T, less&amp;lt;Key&amp;gt;, Allocator&amp;gt;;                                             // (4)
+
+  template &amp;lt;ranges::input_range R, class Allocator&amp;gt;
+  multimap(from_range_t, R&amp;amp;&amp;amp;, Allocator)
+    -&amp;gt; multimap&amp;lt;range_key_t&amp;lt;R&amp;gt;, range_val_t&amp;lt;R&amp;gt;, less&amp;lt;range_key_t&amp;lt;R&amp;gt;&amp;gt;, Allocator&amp;gt;;          // (5) C++23から
 }
 ```
 * remove_const_t[link /reference/type_traits/remove_const.md]
@@ -45,6 +53,9 @@ namespace std {
 * less[link /reference/functional/less.md]
 * allocator[link /reference/memory/allocator.md]
 * initializer_list[link /reference/initializer_list/initializer_list.md]
+* ranges::input_range[link /reference/ranges/input_range.md]
+* ranges::range_value_t[link /reference/ranges/range_value_t.md]
+* from_range_t[link /reference/ranges/from_range_t.md]
 
 ## 概要
 `std::multimap`クラステンプレートの型推論補助。
@@ -53,6 +64,7 @@ namespace std {
 - (2) : 初期化子リストからの推論
 - (3) : イテレータ範囲とアロケータからの推論
 - (4) : 初期化子リストとアロケータからの推論
+- (5) : Rangeからの推論
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- add deduction guide with range to some containers.</title>
      <link href="https://cpprefjp.github.io/reference/queue/priority_queue/op_deduction_guide.html"/>
      <id>e44911377d9340e5f31ed3d125486bc1305c5a9c:reference/queue/priority_queue/op_deduction_guide.md</id>
      <updated>2025-02-17T21:01:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/queue/priority_queue/op_deduction_guide.md b/reference/queue/priority_queue/op_deduction_guide.md
index b9670980d..90952debc 100644
--- a/reference/queue/priority_queue/op_deduction_guide.md
+++ b/reference/queue/priority_queue/op_deduction_guide.md
@@ -6,32 +6,76 @@
 
 ```cpp
 namespace std {
-  template &amp;lt;class Compare, class Container&amp;gt;
+  // 説明用の型
+  template &amp;lt;class InputIterator&amp;gt;
+  using iter_val_t = typename iterator_traits&amp;lt;InputIterator&amp;gt;::value_type;
+
+template &amp;lt;class Compare, class Container&amp;gt;
   priority_queue(Compare, Container)
     -&amp;gt; priority_queue&amp;lt;typename Container::value_type, Container, Compare&amp;gt;; // (1)
 
   template &amp;lt;class InputIterator,
-            class Compare = less&amp;lt;typename iterator_traits&amp;lt;InputIterator&amp;gt;::value_type&amp;gt;,
-            class Container = std::vector&amp;lt;typename iterator_traits&amp;lt;InputIterator&amp;gt;::value_type&amp;gt;&amp;gt;
+            class Compare = less&amp;lt;iter_val_t&amp;lt;InputIterator&amp;gt;&amp;gt;,
+            class Container = std::vector&amp;lt;iter_val_t&amp;lt;InputIterator&amp;gt;&amp;gt;&amp;gt;
   priority_queue(InputIterator, InputIterator, Compare = Compare(), Container = Container())
-    -&amp;gt; priority_queue&amp;lt;
-         typename iterator_traits&amp;lt;InputIterator&amp;gt;::value_type,
-         Container, Compare&amp;gt;;                                              // (2)
+    -&amp;gt; priority_queue&amp;lt;iter_val_t&amp;lt;InputIterator&amp;gt;, Container, Compare&amp;gt;;      // (2)
+
+  template &amp;lt;ranges::input_range R, class Compare = less&amp;lt;ranges::range_value_t&amp;lt;R&amp;gt;&amp;gt;&amp;gt;
+  priority_queue(from_range_t, R&amp;amp;&amp;amp;, Compare = Compare())
+    -&amp;gt; priority_queue&amp;lt;ranges::range_value_t&amp;lt;R&amp;gt;,
+                      vector&amp;lt;ranges::range_value_t&amp;lt;R&amp;gt;&amp;gt;, Compare&amp;gt;;          // (3) C++23から
 
   template &amp;lt;class Compare, class Container, class Allocator&amp;gt;
   priority_queue(Compare, Container, Allocator)
-    -&amp;gt; priority_queue&amp;lt;typename Container::value_type, Container, Compare&amp;gt;; // (3)
+    -&amp;gt; priority_queue&amp;lt;typename Container::value_type, Container, Compare&amp;gt;; // (4)
+
+  template &amp;lt;class InputIterator, class Allocator&amp;gt;
+  priority_queue(InputIterator, InputIterator, Allocator)
+    -&amp;gt; priority_queue&amp;lt;iter_val_t&amp;lt;InputIterator&amp;gt;,
+                      vector&amp;lt;iter_val_t&amp;lt;InputIterator&amp;gt;, Allocator&amp;gt;,
+                      less&amp;lt;iter_val_t&amp;lt;InputIterator&amp;gt;&amp;gt;&amp;gt;;                    // (5) C++23から
+
+  template &amp;lt;class InputIterator, class Compare, class Allocator&amp;gt;
+  priority_queue(InputIterator, InputIterator, Compare, Allocator)
+    -&amp;gt; priority_queue&amp;lt;iter_val_t&amp;lt;InputIterator&amp;gt;,
+                      vector&amp;lt;iter_val_t&amp;lt;InputIterator&amp;gt;, Allocator&amp;gt;,
+                      Compare&amp;gt;;                                            // (6) C++23から
+
+  template &amp;lt;class InputIterator, class Compare, class Container, class Allocator&amp;gt;
+  priority_queue(InputIterator, InputIterator, Compare, Container, Allocator)
+    -&amp;gt; priority_queue&amp;lt;typename Container::value_type, Container, Compare&amp;gt;; // (7) C++23から
+
+  template &amp;lt;ranges::input_range R, class Compare, class Allocator&amp;gt;
+  priority_queue(from_range_t, R&amp;amp;&amp;amp;, Compare, Allocator)
+    -&amp;gt; priority_queue&amp;lt;ranges::range_value_t&amp;lt;R&amp;gt;,
+                      vector&amp;lt;ranges::range_value_t&amp;lt;R&amp;gt;, Allocator&amp;gt;,
+                      Compare&amp;gt;;                                            // (8) C++23から
+
+  template &amp;lt;ranges::input_range R, class Allocator&amp;gt;
+  priority_queue(from_range_t, R&amp;amp;&amp;amp;, Allocator)
+    -&amp;gt; priority_queue&amp;lt;ranges::range_value_t&amp;lt;R&amp;gt;,
+                      vector&amp;lt;ranges::range_value_t&amp;lt;R&amp;gt;, Allocator&amp;gt;&amp;gt;;        // (9) C++23から
 }
 ```
 * iterator_traits[link /reference/iterator/iterator_traits.md]
 * less[link /reference/functional/less.md]
+* vector[link /reference/vector/vector.md]
+* ranges::input_range[link /reference/ranges/input_range.md]
+* ranges::range_value_t[link /reference/ranges/range_value_t.md]
+* from_range_t[link /reference/ranges/from_range_t.md]
 
 ## 概要
 `std::priority_queue`クラステンプレートの型推論補助。
 
 - (1) : 比較関数オブジェクトと、元となるコンテナから推論する
 - (2) : イテレータ範囲、比較関数オブジェクト、元となるコンテナから推論する
-- (3) : 比較関数オブジェクトと、元となるコンテナ、アロケータから推論する
+- (3) : Rangeと比較関数オブジェクトから推論する
+- (4) : 比較関数オブジェクトと、元となるコンテナ、アロケータから推論する
+- (5) : イテレータ範囲とアロケータから推論する
+- (6) : イテレータ範囲、比較関数オブジェクト、アロケータから推論する
+- (7) : イテレータ範囲、比較関数オブジェクト、元となるコンテナ、アロケータから推論する
+- (8) : Range、比較関数オブジェクト、元となるコンテナから推論する
+- (9) : Rangeとアロケータから推論する
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- add deduction guide with range to some containers.</title>
      <link href="https://cpprefjp.github.io/reference/queue/queue/op_deduction_guide.html"/>
      <id>e44911377d9340e5f31ed3d125486bc1305c5a9c:reference/queue/queue/op_deduction_guide.md</id>
      <updated>2025-02-17T21:01:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/queue/queue/op_deduction_guide.md b/reference/queue/queue/op_deduction_guide.md
index 0d2a04eb5..fc38ce514 100644
--- a/reference/queue/queue/op_deduction_guide.md
+++ b/reference/queue/queue/op_deduction_guide.md
@@ -8,26 +8,47 @@
 namespace std {
   template &amp;lt;class Container&amp;gt;
   queue(Container)
-    -&amp;gt; queue&amp;lt;typename Container::value_type, Container&amp;gt;; // (1)
+    -&amp;gt; queue&amp;lt;typename Container::value_type, Container&amp;gt;;       // (1)
 
-  template&amp;lt;class InputIterator&amp;gt;
+  template &amp;lt;class InputIterator&amp;gt;
   queue(InputIterator, InputIterator)
-    -&amp;gt; queue&amp;lt;&amp;lt;InputIterator&amp;gt;&amp;gt;;  // (2) C++23
+    -&amp;gt; queue&amp;lt;&amp;lt;InputIterator&amp;gt;&amp;gt;;                                 // (2) C++23
+
+  template &amp;lt;ranges::input_range R&amp;gt;
+  queue(from_range_t, R&amp;amp;&amp;amp;) -&amp;gt; queue&amp;lt;ranges::range_value_t&amp;lt;R&amp;gt;&amp;gt;; // (3) C++23
+
 
   template &amp;lt;class Container, class Allocator&amp;gt;
   queue(Container, Allocator)
-    -&amp;gt; queue&amp;lt;typename Container::value_type, Container&amp;gt;; // (3)
+    -&amp;gt; queue&amp;lt;typename Container::value_type, Container&amp;gt;;       // (4)
 
-  template&amp;lt;class InputIterator, class Allocator&amp;gt;
+  template &amp;lt;class InputIterator, class Allocator&amp;gt;
   queue(InputIterator, InputIterator, Allocator)
     -&amp;gt; queue&amp;lt;iter-value-type&amp;lt;InputIterator&amp;gt;, deque&amp;lt;iter-value-type&amp;lt;InputIterator&amp;gt;,
-             Allocator&amp;gt;&amp;gt;;  // (4) C++23
+             Allocator&amp;gt;&amp;gt;;                                      // (5) C++23
+
+  template &amp;lt;ranges::input_range R, class Allocator&amp;gt;
+  queue(from_range_t, R&amp;amp;&amp;amp;, Allocator)
+    -&amp;gt; queue&amp;lt;ranges::range_value_t&amp;lt;R&amp;gt;, deque&amp;lt;ranges::range_value_t&amp;lt;R&amp;gt;,
+             Allocator&amp;gt;&amp;gt;;                                      // (6) C++23
+
 }
 ```
 * iter-value-type[italic]
+* deque[link /reference/deque/deque.md]
+* ranges::input_range[link /reference/ranges/input_range.md]
+* ranges::range_value_t[link /reference/ranges/range_value_t.md]
+* from_range_t[link /reference/ranges/from_range_t.md]
 
 ## 概要
-`std::queue`クラステンプレートの型推論補助。元となるコンテナから推論する。
+`std::queue`クラステンプレートの型推論補助。
+
+- (1) : 元となるコンテナから推論する。
+- (2) : イテレータ範囲から推論する。
+- (3) : Rangeからの推論する。
+- (4) : 元となるコンテナとアロケータから推論する。
+- (5) : イテレータ範囲とアロケータから推論する。
+- (6) : Rangeとアロケータからの推論する。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- add deduction guide with range to some containers.</title>
      <link href="https://cpprefjp.github.io/reference/set/multiset/op_deduction_guide.html"/>
      <id>e44911377d9340e5f31ed3d125486bc1305c5a9c:reference/set/multiset/op_deduction_guide.md</id>
      <updated>2025-02-17T21:01:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/multiset/op_deduction_guide.md b/reference/set/multiset/op_deduction_guide.md
index 4d8206c7d..5b2724600 100644
--- a/reference/set/multiset/op_deduction_guide.md
+++ b/reference/set/multiset/op_deduction_guide.md
@@ -20,16 +20,23 @@ namespace std {
   template &amp;lt;class InputIterator, class Allocator&amp;gt;
   multiset(InputIterator, InputIterator, Allocator)
     -&amp;gt; multiset&amp;lt;typename iterator_traits&amp;lt;InputIterator&amp;gt;::value_type,
-           less&amp;lt;typename iterator_traits&amp;lt;InputIterator&amp;gt;::value_type&amp;gt;, Allocator&amp;gt;;    // (3)
+           less&amp;lt;typename iterator_traits&amp;lt;InputIterator&amp;gt;::value_type&amp;gt;, Allocator&amp;gt;;         // (3)
 
   template &amp;lt;class Key, class Allocator&amp;gt;
-  multiset(initializer_list&amp;lt;Key&amp;gt;, Allocator) -&amp;gt; multiset&amp;lt;Key, less&amp;lt;Key&amp;gt;, Allocator&amp;gt;;           // (4)
+  multiset(initializer_list&amp;lt;Key&amp;gt;, Allocator) -&amp;gt; multiset&amp;lt;Key, less&amp;lt;Key&amp;gt;, Allocator&amp;gt;;      // (4)
+
+  template &amp;lt;ranges::input_range R, class Allocator&amp;gt;
+  multiset(from_range_t, R&amp;amp;&amp;amp;, Allocator)
+    -&amp;gt; multiset&amp;lt;ranges::range_value_t&amp;lt;R&amp;gt;, less&amp;lt;ranges::range_value_t&amp;lt;R&amp;gt;&amp;gt;, Allocator&amp;gt;;     // (5) C++23から
 }
 ```
 * less[link /reference/functional/less.md]
 * iterator_traits[link /reference/iterator/iterator_traits.md]
 * allocator[link /reference/memory/allocator.md]
 * initializer_list[link /reference/initializer_list/initializer_list.md]
+* ranges::input_range[link /reference/ranges/input_range.md]
+* ranges::range_value_t[link /reference/ranges/range_value_t.md]
+* from_range_t[link /reference/ranges/from_range_t.md]
 
 ## 概要
 `std::multiset`クラステンプレートの型推論補助。
@@ -38,6 +45,7 @@ namespace std {
 - (2) : 初期化子リストと比較関数オブジェクトからの推論
 - (3) : イテレータ範囲とアロケータからの推論
 - (4) : 初期化子リストとアロケータからの推論
+- (5) : Rangeからの推論
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- add deduction guide with range to some containers.</title>
      <link href="https://cpprefjp.github.io/reference/set/set/op_deduction_guide.html"/>
      <id>e44911377d9340e5f31ed3d125486bc1305c5a9c:reference/set/set/op_deduction_guide.md</id>
      <updated>2025-02-17T21:01:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/set/op_deduction_guide.md b/reference/set/set/op_deduction_guide.md
index 4c65d0e3d..7a13e3800 100644
--- a/reference/set/set/op_deduction_guide.md
+++ b/reference/set/set/op_deduction_guide.md
@@ -24,12 +24,19 @@ namespace std {
 
   template &amp;lt;class Key, class Allocator&amp;gt;
   set(initializer_list&amp;lt;Key&amp;gt;, Allocator) -&amp;gt; set&amp;lt;Key, less&amp;lt;Key&amp;gt;, Allocator&amp;gt;;           // (4)
+
+  template &amp;lt;ranges::input_range R, class Allocator&amp;gt;
+  set(from_range_t, R&amp;amp;&amp;amp;, Allocator)
+    -&amp;gt; set&amp;lt;ranges::range_value_t&amp;lt;R&amp;gt;, less&amp;lt;ranges::range_value_t&amp;lt;R&amp;gt;&amp;gt;, Allocator&amp;gt;;     // (5) C++23から
 }
 ```
 * less[link /reference/functional/less.md]
 * iterator_traits[link /reference/iterator/iterator_traits.md]
 * allocator[link /reference/memory/allocator.md]
 * initializer_list[link /reference/initializer_list/initializer_list.md]
+* ranges::input_range[link /reference/ranges/input_range.md]
+* ranges::range_value_t[link /reference/ranges/range_value_t.md]
+* from_range_t[link /reference/ranges/from_range_t.md]
 
 ## 概要
 `std::set`クラステンプレートの型推論補助。
@@ -38,6 +45,7 @@ namespace std {
 - (2) : 初期化子リストと比較関数オブジェクトからの推論
 - (3) : イテレータ範囲とアロケータからの推論
 - (4) : 初期化子リストとアロケータからの推論
+- (5) : Rangeからの推論
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- add deduction guide with range to some containers.</title>
      <link href="https://cpprefjp.github.io/reference/stack/stack/op_deduction_guide.html"/>
      <id>e44911377d9340e5f31ed3d125486bc1305c5a9c:reference/stack/stack/op_deduction_guide.md</id>
      <updated>2025-02-17T21:01:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stack/stack/op_deduction_guide.md b/reference/stack/stack/op_deduction_guide.md
index 53fd601ae..62c8ae875 100644
--- a/reference/stack/stack/op_deduction_guide.md
+++ b/reference/stack/stack/op_deduction_guide.md
@@ -6,28 +6,51 @@
 
 ```cpp
 namespace std {
-  template&amp;lt;class Container&amp;gt;
+  // 説明用の型
+  template &amp;lt;class InputIterator&amp;gt;
+  using iter_val_t = typename iterator_traits&amp;lt;InputIterator&amp;gt;::value_type;
+
+  template &amp;lt;class Container&amp;gt;
   stack(Container)
-    -&amp;gt; stack&amp;lt;typename Container::value_type, Container&amp;gt;; // (1)
+    -&amp;gt; stack&amp;lt;typename Container::value_type, Container&amp;gt;;      // (1)
 
-  template&amp;lt;class InputIterator&amp;gt;
+  template &amp;lt;class InputIterator&amp;gt;
   stack(InputIterator, InputIterator)
-    -&amp;gt; stack&amp;lt;iter-value-type&amp;lt;InputIterator&amp;gt;&amp;gt;;  // (2) C++23
+    -&amp;gt; stack&amp;lt;iter_val_t&amp;lt;InputIterator&amp;gt;&amp;gt;;                      // (2) C++23から
+
+  template &amp;lt;ranges::input_range R&amp;gt;
+  stack(from_range_t, R&amp;amp;&amp;amp;)-&amp;gt; stack&amp;lt;ranges::range_value_t&amp;lt;R&amp;gt;&amp;gt;; // (3) C++23から
 
-  template&amp;lt;class Container, class Allocator&amp;gt;
+  template &amp;lt;class Container, class Allocator&amp;gt;
   stack(Container, Allocator)
-    -&amp;gt; stack&amp;lt;typename Container::value_type, Container&amp;gt;; // (3)
+    -&amp;gt; stack&amp;lt;typename Container::value_type, Container&amp;gt;;      // (4)
 
-  template&amp;lt;class InputIterator, class Allocator&amp;gt;
+  template &amp;lt;class InputIterator, class Allocator&amp;gt;
   stack(InputIterator, InputIterator, Allocator)
-    -&amp;gt; stack&amp;lt;iter-value-type&amp;lt;InputIterator&amp;gt;, deque&amp;lt;iter-value-type&amp;lt;InputIterator&amp;gt;,
-             Allocator&amp;gt;&amp;gt;;  // (4) C++23
+    -&amp;gt; stack&amp;lt;iter_val_t&amp;lt;InputIterator&amp;gt;, deque&amp;lt;iter_val_t&amp;lt;InputIterator&amp;gt;,
+             Allocator&amp;gt;&amp;gt;;                                     // (5) C++23から
+
+  template &amp;lt;ranges::input_range R, class Allocator&amp;gt;
+  stack(from_range_t, R&amp;amp;&amp;amp;, Allocator)
+    -&amp;gt; stack&amp;lt;ranges::range_value_t&amp;lt;R&amp;gt;, deque&amp;lt;ranges::range_value_t&amp;lt;R&amp;gt;,
+             Allocator&amp;gt;&amp;gt;;                                     // (6) C++23から
 }
 ```
-* iter-value-type[italic]
+* iterator_traits[link /reference/iterator/iterator_traits.md]
+* deque[link /reference/deque/deque.md]
+* ranges::input_range[link /reference/ranges/input_range.md]
+* ranges::range_value_t[link /reference/ranges/range_value_t.md]
+* from_range_t[link /reference/ranges/from_range_t.md]
 
 ## 概要
-`std::stack`クラステンプレートの型推論補助。元となるコンテナから推論する。
+`std::stack`クラステンプレートの型推論補助。
+
+- (1) : 元となるコンテナから推論する。
+- (2) : イテレータ範囲から推論する。
+- (3) : Rangeからの推論する。
+- (4) : 元となるコンテナとアロケータから推論する。
+- (5) : イテレータ範囲とアロケータから推論する。
+- (6) : Rangeとアロケータからの推論する。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- add deduction guide with range to some containers.</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/op_deduction_guide.html"/>
      <id>e44911377d9340e5f31ed3d125486bc1305c5a9c:reference/string/basic_string/op_deduction_guide.md</id>
      <updated>2025-02-17T21:01:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/op_deduction_guide.md b/reference/string/basic_string/op_deduction_guide.md
index cda97ea53..5e23053fd 100644
--- a/reference/string/basic_string/op_deduction_guide.md
+++ b/reference/string/basic_string/op_deduction_guide.md
@@ -27,6 +27,13 @@ namespace std {
                typename see below::size_type,
                const Allocator&amp;amp; = Allocator())
     -&amp;gt; basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;;  // (3) C++20
+
+  template &amp;lt;ranges::input_range R,
+            class Allocator = allocator&amp;lt;ranges::range_value_t&amp;lt;R&amp;gt;&amp;gt;&amp;gt;
+  basic_string(from_range_t, R&amp;amp;&amp;amp;, Allocator = Allocator())
+    -&amp;gt; basic_string&amp;lt;ranges::range_value_t&amp;lt;R&amp;gt;,
+                    char_traits&amp;lt;ranges::range_value_t&amp;lt;R&amp;gt;&amp;gt;,
+                    Allocator&amp;gt;;                 // (4) C++23
 }
 ```
 * see below[italic]
@@ -34,9 +41,17 @@ namespace std {
 * iterator_traits[link /reference/iterator/iterator_traits.md]
 * char_traits[link /reference/string/char_traits.md]
 * basic_string_view[link /reference/string_view/basic_string_view.md]
+* ranges::input_range[link /reference/ranges/input_range.md]
+* ranges::range_value_t[link /reference/ranges/range_value_t.md]
+* from_range_t[link /reference/ranges/from_range_t.md]
 
 ## 概要
-`std::basic_string`クラステンプレートの型推論補助。イテレータ範囲から推論する。
+`std::basic_string`クラステンプレートの型推論補助。
+
+- (1) : イテレータ範囲からの推論
+- (2) : string_viewからの推論
+- (3) : string_viewとpos, countからの推論
+- (4) : Rangeからの推論
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- add deduction guide with range to some containers.</title>
      <link href="https://cpprefjp.github.io/reference/unordered_map/unordered_map/op_deduction_guide.html"/>
      <id>e44911377d9340e5f31ed3d125486bc1305c5a9c:reference/unordered_map/unordered_map/op_deduction_guide.md</id>
      <updated>2025-02-17T21:01:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_map/unordered_map/op_deduction_guide.md b/reference/unordered_map/unordered_map/op_deduction_guide.md
index 5378eadba..f31caacee 100644
--- a/reference/unordered_map/unordered_map/op_deduction_guide.md
+++ b/reference/unordered_map/unordered_map/op_deduction_guide.md
@@ -14,6 +14,10 @@ namespace std {
   template &amp;lt;class InputIterator&amp;gt;
   using iter_to_alloc_t = pair&amp;lt;add_const_t&amp;lt;typename iterator_traits&amp;lt;InputIterator&amp;gt;::value_type::first_type&amp;gt;,
                                typename iterator_traits&amp;lt;InputIterator&amp;gt;::value_type::second_type&amp;gt;;
+  template &amp;lt;ranges::input_range Range&amp;gt;
+  using range_key_t = remove_const_t&amp;lt;typename ranges::range_value_t&amp;lt;Range&amp;gt;::first_type&amp;gt;;
+  template &amp;lt;ranges::input_range Range&amp;gt;
+  using range_val_t = typename ranges::range_value_t&amp;lt;Range&amp;gt;::second_type;
 
   template &amp;lt;class InputIterator,
             class Hash = hash&amp;lt;iter_key_t&amp;lt;InputIterator&amp;gt;&amp;gt;,
@@ -75,6 +79,28 @@ namespace std {
   unordered_map(initializer_list&amp;lt;pair&amp;lt;Key, T&amp;gt;&amp;gt;, typename see below::size_type, Hash, Allocator)
     -&amp;gt; unordered_map&amp;lt;Key, T, Hash,
                      equal_to&amp;lt;Key&amp;gt;, Allocator&amp;gt;;      // (8)
+
+  template &amp;lt;ranges::input_range R, class Hash = hash&amp;lt;range_key_t&amp;lt;R&amp;gt;&amp;gt;,
+           class Pred = equal_to&amp;lt;range_key_t&amp;lt;R&amp;gt;&amp;gt;,
+           class Allocator = allocator&amp;lt;range-to-alloc-type&amp;lt;R&amp;gt;&amp;gt;&amp;gt;
+  unordered_map(from_range_t, R&amp;amp;&amp;amp;, typename see below::size_type = see below,
+                Hash = Hash(), Pred = Pred(), Allocator = Allocator())
+    -&amp;gt; unordered_map&amp;lt;range_key_t&amp;lt;R&amp;gt;, range_val_t&amp;lt;R&amp;gt;, Hash, Pred, Allocator&amp;gt;; // (9) C++23から
+
+  template &amp;lt;ranges::input_range R, class Allocator&amp;gt;
+  unordered_map(from_range_t, R&amp;amp;&amp;amp;, typename see below::size_type, Allocator)
+    -&amp;gt; unordered_map&amp;lt;range_key_t&amp;lt;R&amp;gt;, range_val_t&amp;lt;R&amp;gt;, hash&amp;lt;range_key_t&amp;lt;R&amp;gt;&amp;gt;,
+                     equal_to&amp;lt;range_key_t&amp;lt;R&amp;gt;&amp;gt;, Allocator&amp;gt;;                   // (10) C++23から
+
+  template &amp;lt;ranges::input_range R, class Allocator&amp;gt;
+  unordered_map(from_range_t, R&amp;amp;&amp;amp;, Allocator)
+    -&amp;gt; unordered_map&amp;lt;range_key_t&amp;lt;R&amp;gt;, range_val_t&amp;lt;R&amp;gt;, hash&amp;lt;range_key_t&amp;lt;R&amp;gt;&amp;gt;,
+                     equal_to&amp;lt;range_key_t&amp;lt;R&amp;gt;&amp;gt;, Allocator&amp;gt;;                   // (11) C++23から
+
+  template &amp;lt;ranges::input_range R, class Hash, class Allocator&amp;gt;
+  unordered_map(from_range_t, R&amp;amp;&amp;amp;, typename see below::size_type, Hash, Allocator)
+    -&amp;gt; unordered_map&amp;lt;range_key_t&amp;lt;R&amp;gt;, range_val_t&amp;lt;R&amp;gt;, Hash,
+                     equal_to&amp;lt;range_key_t&amp;lt;R&amp;gt;&amp;gt;, Allocator&amp;gt;;                   // (12) C++23から
 }
 ```
 * see below[italic]
@@ -86,6 +112,9 @@ namespace std {
 * equal_to[link /reference/functional/equal_to.md]
 * allocator[link /reference/memory/allocator.md]
 * initializer_list[link /reference/initializer_list/initializer_list.md]
+* ranges::input_range[link /reference/ranges/input_range.md]
+* ranges::range_value_t[link /reference/ranges/range_value_t.md]
+* from_range_t[link /reference/ranges/from_range_t.md]
 
 ## 概要
 `std::unordered_map`クラステンプレートの型推論補助。
@@ -98,6 +127,10 @@ namespace std {
 - (6) : 初期化子リストとバケット数、アロケータからの推論
 - (7) : 初期化子リストとアロケータからの推論
 - (8) : 初期化子リストとバケット数、ハッシュ関数、アロケータからの推論
+- (9) : Rangeからの推論
+- (10) : Rangeとバケット数、アロケータからの推論
+- (11) : Rangeとアロケータからの推論
+- (12) : Rangeとバケット数、ハッシュ関数、アロケータからの推論
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- add deduction guide with range to some containers.</title>
      <link href="https://cpprefjp.github.io/reference/unordered_map/unordered_multimap/op_deduction_guide.html"/>
      <id>e44911377d9340e5f31ed3d125486bc1305c5a9c:reference/unordered_map/unordered_multimap/op_deduction_guide.md</id>
      <updated>2025-02-17T21:01:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_map/unordered_multimap/op_deduction_guide.md b/reference/unordered_map/unordered_multimap/op_deduction_guide.md
index 3091f49eb..78ec0c7e6 100644
--- a/reference/unordered_map/unordered_multimap/op_deduction_guide.md
+++ b/reference/unordered_map/unordered_multimap/op_deduction_guide.md
@@ -14,6 +14,10 @@ namespace std {
   template &amp;lt;class InputIterator&amp;gt;
   using iter_to_alloc_t = pair&amp;lt;add_const_t&amp;lt;typename iterator_traits&amp;lt;InputIterator&amp;gt;::value_type::first_type&amp;gt;,
                                typename iterator_traits&amp;lt;InputIterator&amp;gt;::value_type::second_type&amp;gt;;
+  template &amp;lt;ranges::input_range Range&amp;gt;
+  using range_key_t = remove_const_t&amp;lt;typename ranges::range_value_t&amp;lt;Range&amp;gt;::first_type&amp;gt;;
+  template &amp;lt;ranges::input_range Range&amp;gt;
+  using range_val_t = typename ranges::range_value_t&amp;lt;Range&amp;gt;::second_type;
 
   template &amp;lt;class InputIterator,
             class Hash = hash&amp;lt;iter_key_t&amp;lt;InputIterator&amp;gt;&amp;gt;,
@@ -75,6 +79,28 @@ namespace std {
   unordered_multimap(initializer_list&amp;lt;pair&amp;lt;Key, T&amp;gt;&amp;gt;, typename see below::size_type, Hash, Allocator)
     -&amp;gt; unordered_multimap&amp;lt;Key, T, Hash,
                           equal_to&amp;lt;Key&amp;gt;, Allocator&amp;gt;;      // (8)
+
+  template &amp;lt;ranges::input_range R, class Hash = hash&amp;lt;range_key_t&amp;lt;R&amp;gt;&amp;gt;,
+           class Pred = equal_to&amp;lt;range_key_t&amp;lt;R&amp;gt;&amp;gt;,
+           class Allocator = allocator&amp;lt;range-to-alloc-type&amp;lt;R&amp;gt;&amp;gt;&amp;gt;
+  unordered_multimap(from_range_t, R&amp;amp;&amp;amp;, typename see below::size_type = see below,
+                     Hash = Hash(), Pred = Pred(), Allocator = Allocator())
+    -&amp;gt; unordered_multimap&amp;lt;range_key_t&amp;lt;R&amp;gt;, range_val_t&amp;lt;R&amp;gt;, Hash, Pred, Allocator&amp;gt;; // (9) C++23から
+
+  template &amp;lt;ranges::input_range R, class Allocator&amp;gt;
+  unordered_multimap(from_range_t, R&amp;amp;&amp;amp;, typename see below::size_type, Allocator)
+    -&amp;gt; unordered_multimap&amp;lt;range_key_t&amp;lt;R&amp;gt;, range_val_t&amp;lt;R&amp;gt;, hash&amp;lt;range_key_t&amp;lt;R&amp;gt;&amp;gt;,
+                          equal_to&amp;lt;range_key_t&amp;lt;R&amp;gt;&amp;gt;, Allocator&amp;gt;;                   // (10) C++23から
+
+  template &amp;lt;ranges::input_range R, class Allocator&amp;gt;
+  unordered_multimap(from_range_t, R&amp;amp;&amp;amp;, Allocator)
+    -&amp;gt; unordered_multimap&amp;lt;range_key_t&amp;lt;R&amp;gt;, range_val_t&amp;lt;R&amp;gt;, hash&amp;lt;range_key_t&amp;lt;R&amp;gt;&amp;gt;,
+                          equal_to&amp;lt;range_key_t&amp;lt;R&amp;gt;&amp;gt;, Allocator&amp;gt;;                   // (11) C++23から
+
+  template &amp;lt;ranges::input_range R, class Hash, class Allocator&amp;gt;
+  unordered_multimap(from_range_t, R&amp;amp;&amp;amp;, typename see below::size_type, Hash, Allocator)
+    -&amp;gt; unordered_multimap&amp;lt;range_key_t&amp;lt;R&amp;gt;, range_val_t&amp;lt;R&amp;gt;, Hash,
+                          equal_to&amp;lt;range_key_t&amp;lt;R&amp;gt;&amp;gt;, Allocator&amp;gt;;                   // (12) C++23から
 }
 ```
 * see below[italic]
@@ -86,6 +112,9 @@ namespace std {
 * equal_to[link /reference/functional/equal_to.md]
 * allocator[link /reference/memory/allocator.md]
 * initializer_list[link /reference/initializer_list/initializer_list.md]
+* ranges::input_range[link /reference/ranges/input_range.md]
+* ranges::range_value_t[link /reference/ranges/range_value_t.md]
+* from_range_t[link /reference/ranges/from_range_t.md]
 
 ## 概要
 `std::unordered_multimap`クラステンプレートの型推論補助。
@@ -98,6 +127,10 @@ namespace std {
 - (6) : 初期化子リストとバケット数、アロケータからの推論
 - (7) : 初期化子リストとアロケータからの推論
 - (8) : 初期化子リストとバケット数、ハッシュ関数、アロケータからの推論
+- (9) : Rangeからの推論
+- (10) : Rangeとバケット数、アロケータからの推論
+- (11) : Rangeとアロケータからの推論
+- (12) : Rangeとバケット数、ハッシュ関数、アロケータからの推論
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- add deduction guide with range to some containers.</title>
      <link href="https://cpprefjp.github.io/reference/unordered_set/unordered_multiset/op_deduction_guide.html"/>
      <id>e44911377d9340e5f31ed3d125486bc1305c5a9c:reference/unordered_set/unordered_multiset/op_deduction_guide.md</id>
      <updated>2025-02-17T21:01:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_set/unordered_multiset/op_deduction_guide.md b/reference/unordered_set/unordered_multiset/op_deduction_guide.md
index d572ad857..3e31c623a 100644
--- a/reference/unordered_set/unordered_multiset/op_deduction_guide.md
+++ b/reference/unordered_set/unordered_multiset/op_deduction_guide.md
@@ -46,6 +46,29 @@ namespace std {
   unordered_multiset(initializer_list&amp;lt;T&amp;gt;, typename see below::size_type, Hash, Allocator)
     -&amp;gt; unordered_multiset&amp;lt;T, Hash,
                           equal_to&amp;lt;T&amp;gt;, Allocator&amp;gt;;   // (6)
+
+  template &amp;lt;ranges::input_range R,
+           class Hash = hash&amp;lt;ranges::range_value_t&amp;lt;R&amp;gt;&amp;gt;,
+           class Pred = equal_to&amp;lt;ranges::range_value_t&amp;lt;R&amp;gt;&amp;gt;,
+           class Allocator = allocator&amp;lt;ranges::range_value_t&amp;lt;R&amp;gt;&amp;gt;&amp;gt;
+  unordered_multiset(from_range_t, R&amp;amp;&amp;amp;, typename see below::size_type = see below,
+                     Hash = Hash(), Pred = Pred(), Allocator = Allocator())
+    -&amp;gt; unordered_multiset&amp;lt;ranges::range_value_t&amp;lt;R&amp;gt;, Hash, Pred, Allocator&amp;gt;; // (7) C++23から
+
+  template &amp;lt;ranges::input_range R, class Allocator&amp;gt;
+  unordered_multiset(from_range_t, R&amp;amp;&amp;amp;, typename see below::size_type, Allocator)
+    -&amp;gt; unordered_multiset&amp;lt;ranges::range_value_t&amp;lt;R&amp;gt;, hash&amp;lt;ranges::range_value_t&amp;lt;R&amp;gt;&amp;gt;,
+                          equal_to&amp;lt;ranges::range_value_t&amp;lt;R&amp;gt;&amp;gt;, Allocator&amp;gt;;   // (8) C++23から
+
+  template &amp;lt;ranges::input_range R, class Allocator&amp;gt;
+  unordered_multiset(from_range_t, R&amp;amp;&amp;amp;, Allocator)
+    -&amp;gt; unordered_multiset&amp;lt;ranges::range_value_t&amp;lt;R&amp;gt;, hash&amp;lt;ranges::range_value_t&amp;lt;R&amp;gt;&amp;gt;,
+                          equal_to&amp;lt;ranges::range_value_t&amp;lt;R&amp;gt;&amp;gt;, Allocator&amp;gt;;   // (9) C++23から
+
+  template &amp;lt;ranges::input_range R, class Hash, class Allocator&amp;gt;
+  unordered_multiset(from_range_t, R&amp;amp;&amp;amp;, typename see below::size_type, Hash, Allocator)
+    -&amp;gt; unordered_multiset&amp;lt;ranges::range_value_t&amp;lt;R&amp;gt;, Hash,
+                          equal_to&amp;lt;ranges::range_value_t&amp;lt;R&amp;gt;&amp;gt;, Allocator&amp;gt;;   // (10) C++23から
 }
 ```
 * see below[italic]
@@ -54,15 +77,23 @@ namespace std {
 * iterator_traits[link /reference/iterator/iterator_traits.md]
 * allocator[link /reference/memory/allocator.md]
 * initializer_list[link /reference/initializer_list/initializer_list.md]
+* ranges::input_range[link /reference/ranges/input_range.md]
+* ranges::range_value_t[link /reference/ranges/range_value_t.md]
+* from_range_t[link /reference/ranges/from_range_t.md]
 
 ## 概要
 `std::unordered_multiset`クラステンプレートの型推論補助。
 
 - (1) : イテレータ範囲からの推論
-- (2) : 初期化子リスト、ハッシュ関数、比較関数オブジェクトからの推論
+- (2) : 初期化子リストからの推論
 - (3) : イテレータ範囲とアロケータからの推論
 - (4) : イテレータ範囲、ハッシュ関数、アロケータからの推論
 - (5) : 初期化子リストとアロケータからの推論
+- (6) : 初期化子リスト、ハッシュ関数、アロケータからの推論
+- (7) : Rangeからの推論
+- (8) : Rangeとアロケータからの推論
+- (9) : Rangeとハッシュ関数からの推論
+- (10) : Range、ハッシュ関数、アロケータからの推論
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- add deduction guide with range to some containers.</title>
      <link href="https://cpprefjp.github.io/reference/unordered_set/unordered_set/op_deduction_guide.html"/>
      <id>e44911377d9340e5f31ed3d125486bc1305c5a9c:reference/unordered_set/unordered_set/op_deduction_guide.md</id>
      <updated>2025-02-17T21:01:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_set/unordered_set/op_deduction_guide.md b/reference/unordered_set/unordered_set/op_deduction_guide.md
index d94582324..e5689e203 100644
--- a/reference/unordered_set/unordered_set/op_deduction_guide.md
+++ b/reference/unordered_set/unordered_set/op_deduction_guide.md
@@ -39,9 +39,32 @@ namespace std {
   unordered_set(initializer_list&amp;lt;T&amp;gt;, typename see below::size_type, Allocator)
     -&amp;gt; unordered_set&amp;lt;T, hash&amp;lt;T&amp;gt;, equal_to&amp;lt;T&amp;gt;, Allocator&amp;gt;; // (5)
 
-  template&amp;lt;class T, class Hash, class Allocator&amp;gt;
+  template &amp;lt;class T, class Hash, class Allocator&amp;gt;
   unordered_set(initializer_list&amp;lt;T&amp;gt;, typename see below::size_type, Hash, Allocator)
     -&amp;gt; unordered_set&amp;lt;T, Hash, equal_to&amp;lt;T&amp;gt;, Allocator&amp;gt;;    // (6)
+
+  template &amp;lt;ranges::input_range R,
+           class Hash = hash&amp;lt;ranges::range_value_t&amp;lt;R&amp;gt;&amp;gt;,
+           class Pred = equal_to&amp;lt;ranges::range_value_t&amp;lt;R&amp;gt;&amp;gt;,
+           class Allocator = allocator&amp;lt;ranges::range_value_t&amp;lt;R&amp;gt;&amp;gt;&amp;gt;
+  unordered_set(from_range_t, R&amp;amp;&amp;amp;, typename see below::size_type = see below,
+                Hash = Hash(), Pred = Pred(), Allocator = Allocator())
+    -&amp;gt; unordered_set&amp;lt;ranges::range_value_t&amp;lt;R&amp;gt;, Hash, Pred, Allocator&amp;gt;; // (7) C++23から
+
+  template &amp;lt;ranges::input_range R, class Allocator&amp;gt;
+  unordered_set(from_range_t, R&amp;amp;&amp;amp;, typename see below::size_type, Allocator)
+    -&amp;gt; unordered_set&amp;lt;ranges::range_value_t&amp;lt;R&amp;gt;, hash&amp;lt;ranges::range_value_t&amp;lt;R&amp;gt;&amp;gt;,
+                     equal_to&amp;lt;ranges::range_value_t&amp;lt;R&amp;gt;&amp;gt;, Allocator&amp;gt;;   // (8) C++23から
+
+  template &amp;lt;ranges::input_range R, class Allocator&amp;gt;
+  unordered_set(from_range_t, R&amp;amp;&amp;amp;, Allocator)
+    -&amp;gt; unordered_set&amp;lt;ranges::range_value_t&amp;lt;R&amp;gt;, hash&amp;lt;ranges::range_value_t&amp;lt;R&amp;gt;&amp;gt;,
+                     equal_to&amp;lt;ranges::range_value_t&amp;lt;R&amp;gt;&amp;gt;, Allocator&amp;gt;;   // (9) C++23から
+
+  template &amp;lt;ranges::input_range R, class Hash, class Allocator&amp;gt;
+  unordered_set(from_range_t, R&amp;amp;&amp;amp;, typename see below::size_type, Hash, Allocator)
+    -&amp;gt; unordered_set&amp;lt;ranges::range_value_t&amp;lt;R&amp;gt;, Hash,
+                     equal_to&amp;lt;ranges::range_value_t&amp;lt;R&amp;gt;&amp;gt;, Allocator&amp;gt;;   // (10) C++23から
 }
 ```
 * see below[italic]
@@ -50,15 +73,23 @@ namespace std {
 * iterator_traits[link /reference/iterator/iterator_traits.md]
 * allocator[link /reference/memory/allocator.md]
 * initializer_list[link /reference/initializer_list/initializer_list.md]
+* ranges::input_range[link /reference/ranges/input_range.md]
+* ranges::range_value_t[link /reference/ranges/range_value_t.md]
+* from_range_t[link /reference/ranges/from_range_t.md]
 
 ## 概要
 `std::unordered_set`クラステンプレートの型推論補助。
 
 - (1) : イテレータ範囲からの推論
-- (2) : 初期化子リスト、ハッシュ関数、比較関数オブジェクトからの推論
+- (2) : 初期化子リストからの推論
 - (3) : イテレータ範囲とアロケータからの推論
 - (4) : イテレータ範囲、ハッシュ関数、アロケータからの推論
 - (5) : 初期化子リストとアロケータからの推論
+- (6) : 初期化子リスト、ハッシュ関数、アロケータからの推論
+- (7) : Rangeからの推論
+- (8) : Rangeとアロケータからの推論
+- (9) : Rangeとハッシュ関数からの推論
+- (10) : Range、ハッシュ関数、アロケータからの推論
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- add deduction guide with range to some containers.</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/op_deduction_guide.html"/>
      <id>e44911377d9340e5f31ed3d125486bc1305c5a9c:reference/vector/vector/op_deduction_guide.md</id>
      <updated>2025-02-17T21:01:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/op_deduction_guide.md b/reference/vector/vector/op_deduction_guide.md
index f935a13e9..1276d700c 100644
--- a/reference/vector/vector/op_deduction_guide.md
+++ b/reference/vector/vector/op_deduction_guide.md
@@ -9,13 +9,24 @@ namespace std {
   template &amp;lt;class InputIterator,
             class Allocator = allocator&amp;lt;typename iterator_traits&amp;lt;InputIterator&amp;gt;::value_type&amp;gt;&amp;gt;
   vector(InputIterator, InputIterator, Allocator = Allocator())
-    -&amp;gt; vector&amp;lt;typename iterator_traits&amp;lt;InputIterator&amp;gt;::value_type, Allocator&amp;gt;;
+    -&amp;gt; vector&amp;lt;typename iterator_traits&amp;lt;InputIterator&amp;gt;::value_type, Allocator&amp;gt;; // (1)
 }
+
+  template &amp;lt;ranges::input_range R, class Allocator = allocator&amp;lt;ranges::range_value_t&amp;lt;R&amp;gt;&amp;gt;&amp;gt;
+  vector(from_range_t, R&amp;amp;&amp;amp;, Allocator = Allocator())
+    -&amp;gt; vector&amp;lt;ranges::range_value_t&amp;lt;R&amp;gt;, Allocator&amp;gt;;                            // (2) C++23から
 ```
 * iterator_traits[link /reference/iterator/iterator_traits.md]
+* ranges::input_range[link /reference/ranges/input_range.md]
+* allocator[link /reference/memory/allocator.md]
+* ranges::range_value_t[link /reference/ranges/range_value_t.md]
+* from_range_t[link /reference/ranges/from_range_t.md]
 
 ## 概要
-`std::vector`クラステンプレートの型推論補助。イテレータ範囲から推論する。
+`std::vector`クラステンプレートの型推論補助。
+
+- (1) : イテレータ範囲から推論する。
+- (2) : Rangeから推論する。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
</feed>
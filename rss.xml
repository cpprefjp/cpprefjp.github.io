<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2022-12-12T09:54:32.630684</updated>
  <id>25e0fc32-7c91-4c19-a107-acafa396a65a</id>

  
    <entry>
      <title>operator&lt;=&gt; -- multiset : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/map/map/op_compare_3way.html"/>
      <id>d7d070f144d341dfc2382dc7058e9c44726f8ea7:reference/map/map/op_compare_3way.md</id>
      <updated>2022-12-12T18:50:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/map/op_compare_3way.md b/reference/map/map/op_compare_3way.md
index 1f84c65bc..5706a7956 100644
--- a/reference/map/map/op_compare_3way.md
+++ b/reference/map/map/op_compare_3way.md
@@ -19,7 +19,7 @@ namespace std {
 
 
 ## テンプレートパラメータ制約
-- 型 (`const`) `T` の値に対して`operator&amp;lt;=&amp;gt;`が定義されるか、型 (`const`) `T` の値に対して`operator&amp;lt;`が定義され全順序をもつこと
+- 型 (`const`) `pair&amp;lt;const Key, T&amp;gt;` の値に対して`operator&amp;lt;=&amp;gt;`が定義されるか、型 (`const`) `pair&amp;lt;const Key, T&amp;gt;` の値に対して`operator&amp;lt;`が定義され全順序をもつこと
 
 
 ## 効果
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;=&gt; -- multiset : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/map/multimap/op_compare_3way.html"/>
      <id>d7d070f144d341dfc2382dc7058e9c44726f8ea7:reference/map/multimap/op_compare_3way.md</id>
      <updated>2022-12-12T18:50:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/multimap/op_compare_3way.md b/reference/map/multimap/op_compare_3way.md
index 9858938b3..374521a01 100644
--- a/reference/map/multimap/op_compare_3way.md
+++ b/reference/map/multimap/op_compare_3way.md
@@ -19,7 +19,7 @@ namespace std {
 
 
 ## テンプレートパラメータ制約
-- 型 (`const`) `T` の値に対して`operator&amp;lt;=&amp;gt;`が定義されるか、型 (`const`) `T` の値に対して`operator&amp;lt;`が定義され全順序をもつこと
+- 型 (`const`) `pair&amp;lt;const Key, T&amp;gt;` の値に対して`operator&amp;lt;=&amp;gt;`が定義されるか、型 (`const`) `pair&amp;lt;const Key, T&amp;gt;` の値に対して`operator&amp;lt;`が定義され全順序をもつこと
 
 
 ## 効果
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>multiset -- multiset : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/set/multiset.html"/>
      <id>d7d070f144d341dfc2382dc7058e9c44726f8ea7:reference/set/multiset.md</id>
      <updated>2022-12-12T18:50:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/multiset.md b/reference/set/multiset.md
index a4de2ae04..e8d765498 100644
--- a/reference/set/multiset.md
+++ b/reference/set/multiset.md
@@ -137,6 +137,7 @@ namespace std {
 |-------------------------------------------|--------------------------------------------|-------|
 | [`operator==`](multiset/op_equal.md)         | 左辺と右辺が等しいかの判定を行う | |
 | [`operator!=`](multiset/op_not_equal.md)     | 左辺と右辺が等しくないかの判定を行う | |
+| [`operator&amp;lt;=&amp;gt;`](multiset/op_compare_3way.md) | 三方比較を行う | C++20 |
 | [`operator&amp;lt;`](multiset/op_less.md)           | 左辺が右辺より小さいかの判定を行う | |
 | [`operator&amp;lt;=`](multiset/op_less_equal.md)    | 左辺が右辺より小さいか等しいかの判定を行う | |
 | [`operator&amp;gt;`](multiset/op_greater.md)        | 左辺が右辺より大きいかの判定を行う | |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;=&gt; -- multiset : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/set/multiset/op_compare_3way.html"/>
      <id>d7d070f144d341dfc2382dc7058e9c44726f8ea7:reference/set/multiset/op_compare_3way.md</id>
      <updated>2022-12-12T18:50:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/multiset/op_compare_3way.md b/reference/set/multiset/op_compare_3way.md
new file mode 100644
index 000000000..253902486
--- /dev/null
+++ b/reference/set/multiset/op_compare_3way.md
@@ -0,0 +1,77 @@
+# operator&amp;lt;=&amp;gt;
+* set[meta header]
+* std[meta namespace]
+* function template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;class Key, class Compare, class Allocator&amp;gt;
+  synth-three-way-result&amp;lt;Key&amp;gt;
+    operator&amp;lt;=&amp;gt;(const multiset&amp;lt;Key,Compare,Allocator&amp;gt;&amp;amp; x,
+                const multiset&amp;lt;Key,Compare,Allocator&amp;gt;&amp;amp; y); // (1) C++20
+}
+```
+
+## 概要
+`multiset`オブジェクトの三方比較を行う。
+
+
+## テンプレートパラメータ制約
+- 型 (`const`) `Key` の値に対して`operator&amp;lt;=&amp;gt;`が定義されるか、型 (`const`) `Key` の値に対して`operator&amp;lt;`が定義され全順序をもつこと
+
+
+## 効果
+```cpp
+return lexicographical_compare_three_way(
+    x.begin(), x.end(),
+    y.begin(), y.end(),
+    synth-three-way);
+```
+* lexicographical_compare_three_way[link /reference/algorithm/lexicographical_compare_three_way.md]
+* begin()[link begin.md]
+* end()[link end.md]
+
+
+## 計算量
+線形時間
+
+
+## 備考
+- この演算子により、以下の演算子が使用可能になる (C++20)：
+    - `operator&amp;lt;`
+    - `operator&amp;lt;=`
+    - `operator&amp;gt;`
+    - `operator&amp;gt;=`
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;set&amp;gt;
+
+int main()
+{
+  std::multiset&amp;lt;int&amp;gt; s1, s2;
+  s1.insert(10);
+  s1.insert(20);
+  s1.insert(30);
+  s2 = s1;
+
+  assert((s1 &amp;lt;=&amp;gt; s2) == 0);
+
+  s2.insert(40);
+
+  assert((s1 &amp;lt;=&amp;gt; s2) != 0);
+}
+```
+* insert[link insert.md]
+
+### 出力
+```
+```
+
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- multiset : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/set/multiset/op_equal.html"/>
      <id>d7d070f144d341dfc2382dc7058e9c44726f8ea7:reference/set/multiset/op_equal.md</id>
      <updated>2022-12-12T18:50:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/multiset/op_equal.md b/reference/set/multiset/op_equal.md
index 199c6e0f3..4ec2134ac 100644
--- a/reference/set/multiset/op_equal.md
+++ b/reference/set/multiset/op_equal.md
@@ -6,7 +6,9 @@
 ```cpp
 namespace std {
   template &amp;lt;class Key, class Compare, class Allocator&amp;gt;
-  bool operator==(const multiset&amp;lt;Key,Compare,Allocator&amp;gt;&amp;amp; x, const multiset&amp;lt;Key,Compare,Allocator&amp;gt;&amp;amp; y);
+  bool
+    operator==(const multiset&amp;lt;Key,Compare,Allocator&amp;gt;&amp;amp; x,
+               const multiset&amp;lt;Key,Compare,Allocator&amp;gt;&amp;amp; y); // (1) C++03
 }
 ```
 
@@ -23,6 +25,11 @@ namespace std {
 [`size()`](size.md) に対して線形時間。ただし、`x`と`y`のサイズが異なる場合は定数時間。
 
 
+## 備考
+- この演算子により、以下の演算子が使用可能になる (C++20)：
+    - `operator!=`
+
+
 ## 例
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
@@ -56,4 +63,5 @@ int main()
 ## 参照
 - [LWG Issue 2257. Simplify container requirements with the new algorithms](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2257)
     - C++14から、2つ目の範囲のendイテレータをとる`equal()`アルゴリズムを使用するようになった。
-
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt; -- multiset : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/set/multiset/op_greater.html"/>
      <id>d7d070f144d341dfc2382dc7058e9c44726f8ea7:reference/set/multiset/op_greater.md</id>
      <updated>2022-12-12T18:50:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/multiset/op_greater.md b/reference/set/multiset/op_greater.md
index 7896c654f..de9241d4f 100644
--- a/reference/set/multiset/op_greater.md
+++ b/reference/set/multiset/op_greater.md
@@ -5,8 +5,11 @@
 
 ```cpp
 namespace std {
+  // operator&amp;lt;=&amp;gt;により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class Key, class Compare, class Allocator&amp;gt;
-  bool operator&amp;gt; (const multiset&amp;lt;Key,Compare,Allocator&amp;gt;&amp;amp; x, const multiset&amp;lt;Key,Compare,Allocator&amp;gt;&amp;amp; y);
+  bool
+    operator&amp;gt;(const multiset&amp;lt;Key,Compare,Allocator&amp;gt;&amp;amp; x,
+              const multiset&amp;lt;Key,Compare,Allocator&amp;gt;&amp;amp; y); // (1) C++03
 }
 ```
 
@@ -55,3 +58,8 @@ int main()
 0
 1
 ```
+
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt;= -- multiset : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/set/multiset/op_greater_equal.html"/>
      <id>d7d070f144d341dfc2382dc7058e9c44726f8ea7:reference/set/multiset/op_greater_equal.md</id>
      <updated>2022-12-12T18:50:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/multiset/op_greater_equal.md b/reference/set/multiset/op_greater_equal.md
index 8c10ecbec..006133c7c 100644
--- a/reference/set/multiset/op_greater_equal.md
+++ b/reference/set/multiset/op_greater_equal.md
@@ -5,8 +5,11 @@
 
 ```cpp
 namespace std {
+  // operator&amp;lt;=&amp;gt;により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class Key, class Compare, class Allocator&amp;gt;
-  bool operator&amp;gt;=(const multiset&amp;lt;Key,Compare,Allocator&amp;gt;&amp;amp; x, const multiset&amp;lt;Key,Compare,Allocator&amp;gt;&amp;amp; y);
+  bool
+    operator&amp;gt;=(const multiset&amp;lt;Key,Compare,Allocator&amp;gt;&amp;amp; x,
+               const multiset&amp;lt;Key,Compare,Allocator&amp;gt;&amp;amp; y); // (1) C++03
 }
 ```
 
@@ -55,3 +58,8 @@ int main()
 1
 0
 ```
+
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt; -- multiset : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/set/multiset/op_less.html"/>
      <id>d7d070f144d341dfc2382dc7058e9c44726f8ea7:reference/set/multiset/op_less.md</id>
      <updated>2022-12-12T18:50:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/multiset/op_less.md b/reference/set/multiset/op_less.md
index eed8554a7..8daa1cb93 100644
--- a/reference/set/multiset/op_less.md
+++ b/reference/set/multiset/op_less.md
@@ -5,8 +5,11 @@
 
 ```cpp
 namespace std {
+  // operator&amp;lt;=&amp;gt;により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class Key, class Compare, class Allocator&amp;gt;
-  bool operator&amp;lt; (const multiset&amp;lt;Key,Compare,Allocator&amp;gt;&amp;amp; x, const multiset&amp;lt;Key,Compare,Allocator&amp;gt;&amp;amp; y);
+  bool
+    operator&amp;lt;(const multiset&amp;lt;Key,Compare,Allocator&amp;gt;&amp;amp; x,
+              const multiset&amp;lt;Key,Compare,Allocator&amp;gt;&amp;amp; y); // (1) C++03
 }
 ```
 
@@ -53,3 +56,8 @@ int main ()
 ```
 true
 ```
+
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;= -- multiset : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/set/multiset/op_less_equal.html"/>
      <id>d7d070f144d341dfc2382dc7058e9c44726f8ea7:reference/set/multiset/op_less_equal.md</id>
      <updated>2022-12-12T18:50:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/multiset/op_less_equal.md b/reference/set/multiset/op_less_equal.md
index 479aa7ff3..971590d3f 100644
--- a/reference/set/multiset/op_less_equal.md
+++ b/reference/set/multiset/op_less_equal.md
@@ -5,8 +5,11 @@
 
 ```cpp
 namespace std {
+  // operator&amp;lt;=&amp;gt;により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class Key, class Compare, class Allocator&amp;gt;
-  bool operator&amp;lt;=(const multiset&amp;lt;Key,Compare,Allocator&amp;gt;&amp;amp; x, const multiset&amp;lt;Key,Compare,Allocator&amp;gt;&amp;amp; y);
+  bool
+    operator&amp;lt;=(const multiset&amp;lt;Key,Compare,Allocator&amp;gt;&amp;amp; x,
+               const multiset&amp;lt;Key,Compare,Allocator&amp;gt;&amp;amp; y); // (1) C++03
 }
 ```
 
@@ -55,3 +58,8 @@ int main()
 1
 0
 ```
+
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator!= -- multiset : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/set/multiset/op_not_equal.html"/>
      <id>d7d070f144d341dfc2382dc7058e9c44726f8ea7:reference/set/multiset/op_not_equal.md</id>
      <updated>2022-12-12T18:50:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/multiset/op_not_equal.md b/reference/set/multiset/op_not_equal.md
index f8d215b62..a6fced787 100644
--- a/reference/set/multiset/op_not_equal.md
+++ b/reference/set/multiset/op_not_equal.md
@@ -5,8 +5,11 @@
 
 ```cpp
 namespace std {
+  // operator==により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class Key, class Compare, class Allocator&amp;gt;
-  bool operator!=(const multiset&amp;lt;Key,Compare,Allocator&amp;gt;&amp;amp; x, const multiset&amp;lt;Key,Compare,Allocator&amp;gt;&amp;amp; y);
+  bool
+    operator!=(const multiset&amp;lt;Key,Compare,Allocator&amp;gt;&amp;amp; x,
+               const multiset&amp;lt;Key,Compare,Allocator&amp;gt;&amp;amp; y); // (1) C++03
 }
 ```
 
@@ -55,3 +58,8 @@ int main()
 0
 1
 ```
+
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;=&gt; -- multiset : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/set/set/op_compare_3way.html"/>
      <id>d7d070f144d341dfc2382dc7058e9c44726f8ea7:reference/set/set/op_compare_3way.md</id>
      <updated>2022-12-12T18:50:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/set/op_compare_3way.md b/reference/set/set/op_compare_3way.md
index 8a9a66bc7..81aa66894 100644
--- a/reference/set/set/op_compare_3way.md
+++ b/reference/set/set/op_compare_3way.md
@@ -18,7 +18,7 @@ namespace std {
 
 
 ## テンプレートパラメータ制約
-- 型 (`const`) `T` の値に対して`operator&amp;lt;=&amp;gt;`が定義されるか、型 (`const`) `T` の値に対して`operator&amp;lt;`が定義され全順序をもつこと
+- 型 (`const`) `Key` の値に対して`operator&amp;lt;=&amp;gt;`が定義されるか、型 (`const`) `Key` の値に対して`operator&amp;lt;`が定義され全順序をもつこと
 
 
 ## 効果
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>set -- set : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/set/set.html"/>
      <id>821ede43ae5bd359e136905412463a5028f4d8df:reference/set/set.md</id>
      <updated>2022-12-12T18:41:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/set.md b/reference/set/set.md
index c59382071..ad6b0a5df 100644
--- a/reference/set/set.md
+++ b/reference/set/set.md
@@ -145,9 +145,10 @@ struct insert-return-type {
 ### 比較演算子
 
 | 名前 | 説明 | 対応バージョン |
-|-------------------------------------------|--------------------------------------------|-------|
+|-----------------------------------------|--------------------------------------------|-------|
 | [`operator==`](set/op_equal.md)         | 左辺と右辺が等しいかの判定を行う | |
 | [`operator!=`](set/op_not_equal.md)     | 左辺と右辺が等しくないかの判定を行う | |
+| [`operator&amp;lt;=&amp;gt;`](set/op_compare_3way.md) | 三方比較を行う | C++20 |
 | [`operator&amp;lt;`](set/op_less.md)           | 左辺が右辺より小さいかの判定を行う | |
 | [`operator&amp;lt;=`](set/op_less_equal.md)    | 左辺が右辺より小さいか等しいかの判定を行う | |
 | [`operator&amp;gt;`](set/op_greater.md)        | 左辺が右辺より大きいかの判定を行う | |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;=&gt; -- set : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/set/set/op_compare_3way.html"/>
      <id>821ede43ae5bd359e136905412463a5028f4d8df:reference/set/set/op_compare_3way.md</id>
      <updated>2022-12-12T18:41:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/set/op_compare_3way.md b/reference/set/set/op_compare_3way.md
new file mode 100644
index 000000000..8a9a66bc7
--- /dev/null
+++ b/reference/set/set/op_compare_3way.md
@@ -0,0 +1,87 @@
+# operator&amp;lt;=&amp;gt;
+* set[meta header]
+* std[meta namespace]
+* function template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;class Key, class Compare, class Allocator&amp;gt;
+  synth-three-way-result&amp;lt;Key&amp;gt;
+    operator&amp;lt;=&amp;gt;(const set&amp;lt;Key,Compare,Allocator&amp;gt;&amp;amp; x,
+                const set&amp;lt;Key,Compare,Allocator&amp;gt;&amp;amp; y); // (1) C++20
+}
+```
+
+## 概要
+`set`オブジェクトの三方比較を行う。
+
+
+## テンプレートパラメータ制約
+- 型 (`const`) `T` の値に対して`operator&amp;lt;=&amp;gt;`が定義されるか、型 (`const`) `T` の値に対して`operator&amp;lt;`が定義され全順序をもつこと
+
+
+## 効果
+```cpp
+return lexicographical_compare_three_way(
+    x.begin(), x.end(),
+    y.begin(), y.end(),
+    synth-three-way);
+```
+* lexicographical_compare_three_way[link /reference/algorithm/lexicographical_compare_three_way.md]
+* begin()[link begin.md]
+* end()[link end.md]
+
+
+## 計算量
+線形時間
+
+
+## 備考
+- この演算子により、以下の演算子が使用可能になる (C++20)：
+    - `operator&amp;lt;`
+    - `operator&amp;lt;=`
+    - `operator&amp;gt;`
+    - `operator&amp;gt;=`
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;set&amp;gt;
+
+int main()
+{
+  std::set&amp;lt;int&amp;gt; s1, s2;
+  s1.insert(10);
+  s1.insert(20);
+  s1.insert(30);
+  s2 = s1;
+
+  assert((s1 &amp;lt;=&amp;gt; s2) == 0);
+
+  s2.insert(40);
+
+  assert((s1 &amp;lt;=&amp;gt; s2) != 0);
+}
+```
+* insert[link insert.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang):
+- [GCC](/implementation.md#gcc): 10
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- set : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/set/set/op_equal.html"/>
      <id>821ede43ae5bd359e136905412463a5028f4d8df:reference/set/set/op_equal.md</id>
      <updated>2022-12-12T18:41:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/set/op_equal.md b/reference/set/set/op_equal.md
index 1a73d9f84..8c0fd1e0e 100644
--- a/reference/set/set/op_equal.md
+++ b/reference/set/set/op_equal.md
@@ -6,7 +6,9 @@
 ```cpp
 namespace std {
   template &amp;lt;class Key, class Compare, class Allocator&amp;gt;
-  bool operator==(const set&amp;lt;Key,Compare,Allocator&amp;gt;&amp;amp; x, const set&amp;lt;Key,Compare,Allocator&amp;gt;&amp;amp; y);
+  bool
+    operator==(const set&amp;lt;Key,Compare,Allocator&amp;gt;&amp;amp; x,
+               const set&amp;lt;Key,Compare,Allocator&amp;gt;&amp;amp; y); // (1) C++03
 }
 ```
 
@@ -23,6 +25,11 @@ namespace std {
 [`size()`](size.md) に対して線形時間。ただし、`x`と`y`のサイズが異なる場合は定数時間。
 
 
+## 備考
+- この演算子により、以下の演算子が使用可能になる (C++20)：
+    - `operator!=`
+
+
 ## 例
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
@@ -56,4 +63,5 @@ int main()
 ## 参照
 - [LWG Issue 2257. Simplify container requirements with the new algorithms](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2257)
     - C++14から、2つ目の範囲のendイテレータをとる`equal()`アルゴリズムを使用するようになった。
-
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt; -- set : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/set/set/op_greater.html"/>
      <id>821ede43ae5bd359e136905412463a5028f4d8df:reference/set/set/op_greater.md</id>
      <updated>2022-12-12T18:41:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/set/op_greater.md b/reference/set/set/op_greater.md
index 8dd136f91..040d0c5c7 100644
--- a/reference/set/set/op_greater.md
+++ b/reference/set/set/op_greater.md
@@ -5,8 +5,11 @@
 
 ```cpp
 namespace std {
+  // operator&amp;lt;=&amp;gt;により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class Key, class Compare, class Allocator&amp;gt;
-  bool operator&amp;gt; (const set&amp;lt;Key,Compare,Allocator&amp;gt;&amp;amp; x, const set&amp;lt;Key,Compare,Allocator&amp;gt;&amp;amp; y);
+  bool
+    operator&amp;gt;(const set&amp;lt;Key,Compare,Allocator&amp;gt;&amp;amp; x,
+              const set&amp;lt;Key,Compare,Allocator&amp;gt;&amp;amp; y); // (1) C++03
 }
 ```
 
@@ -55,3 +58,8 @@ int main()
 0
 1
 ```
+
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt;= -- set : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/set/set/op_greater_equal.html"/>
      <id>821ede43ae5bd359e136905412463a5028f4d8df:reference/set/set/op_greater_equal.md</id>
      <updated>2022-12-12T18:41:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/set/op_greater_equal.md b/reference/set/set/op_greater_equal.md
index ccad2f0a6..11d20fb00 100644
--- a/reference/set/set/op_greater_equal.md
+++ b/reference/set/set/op_greater_equal.md
@@ -6,7 +6,9 @@
 ```cpp
 namespace std {
   template &amp;lt;class Key, class Compare, class Allocator&amp;gt;
-  bool operator&amp;gt;=(const set&amp;lt;Key,Compare,Allocator&amp;gt;&amp;amp; x, const set&amp;lt;Key,Compare,Allocator&amp;gt;&amp;amp; y);
+  bool
+    operator&amp;gt;=(const set&amp;lt;Key,Compare,Allocator&amp;gt;&amp;amp; x,
+               const set&amp;lt;Key,Compare,Allocator&amp;gt;&amp;amp; y); // (1) C++03
 }
 ```
 
@@ -55,3 +57,8 @@ int main()
 1
 0
 ```
+
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt; -- set : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/set/set/op_less.html"/>
      <id>821ede43ae5bd359e136905412463a5028f4d8df:reference/set/set/op_less.md</id>
      <updated>2022-12-12T18:41:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/set/op_less.md b/reference/set/set/op_less.md
index 1d13f37ef..feb55fb29 100644
--- a/reference/set/set/op_less.md
+++ b/reference/set/set/op_less.md
@@ -5,8 +5,11 @@
 
 ```cpp
 namespace std {
+  // operator&amp;lt;=&amp;gt;により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class Key, class Compare, class Allocator&amp;gt;
-  bool operator&amp;lt; (const set&amp;lt;Key,Compare,Allocator&amp;gt;&amp;amp; x, const set&amp;lt;Key,Compare,Allocator&amp;gt;&amp;amp; y);
+  bool
+    operator&amp;lt;(const set&amp;lt;Key,Compare,Allocator&amp;gt;&amp;amp; x,
+              const set&amp;lt;Key,Compare,Allocator&amp;gt;&amp;amp; y); // (1) C++03
 }
 ```
 
@@ -53,3 +56,8 @@ int main ()
 ```
 true
 ```
+
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;= -- set : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/set/set/op_less_equal.html"/>
      <id>821ede43ae5bd359e136905412463a5028f4d8df:reference/set/set/op_less_equal.md</id>
      <updated>2022-12-12T18:41:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/set/op_less_equal.md b/reference/set/set/op_less_equal.md
index 862d1b7f1..a16faa12e 100644
--- a/reference/set/set/op_less_equal.md
+++ b/reference/set/set/op_less_equal.md
@@ -5,8 +5,11 @@
 
 ```cpp
 namespace std {
+  // operator&amp;lt;=&amp;gt;により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class Key, class Compare, class Allocator&amp;gt;
-  bool operator&amp;lt;=(const set&amp;lt;Key,Compare,Allocator&amp;gt;&amp;amp; x, const set&amp;lt;Key,Compare,Allocator&amp;gt;&amp;amp; y);
+  bool
+    operator&amp;lt;=(const set&amp;lt;Key,Compare,Allocator&amp;gt;&amp;amp; x,
+               const set&amp;lt;Key,Compare,Allocator&amp;gt;&amp;amp; y); // (1) C++03
 }
 ```
 
@@ -55,3 +58,8 @@ int main()
 1
 0
 ```
+
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator!= -- set : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/set/set/op_not_equal.html"/>
      <id>821ede43ae5bd359e136905412463a5028f4d8df:reference/set/set/op_not_equal.md</id>
      <updated>2022-12-12T18:41:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/set/op_not_equal.md b/reference/set/set/op_not_equal.md
index df6fa65aa..148d3ccc9 100644
--- a/reference/set/set/op_not_equal.md
+++ b/reference/set/set/op_not_equal.md
@@ -5,8 +5,11 @@
 
 ```cpp
 namespace std {
+  // operator==により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class Key, class Compare, class Allocator&amp;gt;
-  bool operator!=(const set&amp;lt;Key,Compare,Allocator&amp;gt;&amp;amp; x, const set&amp;lt;Key,Compare,Allocator&amp;gt;&amp;amp; y);
+  bool
+    operator!=(const set&amp;lt;Key,Compare,Allocator&amp;gt;&amp;amp; x,
+               const set&amp;lt;Key,Compare,Allocator&amp;gt;&amp;amp; y); // (1) C++03
 }
 ```
 
@@ -55,3 +58,8 @@ int main()
 0
 1
 ```
+
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>multimap -- multimap : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/map/multimap.html"/>
      <id>17f1c5d131f8cf99e5965be2598f021dbbd84425:reference/map/multimap.md</id>
      <updated>2022-12-12T18:35:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/multimap.md b/reference/map/multimap.md
index 1e6115444..b5381dce8 100644
--- a/reference/map/multimap.md
+++ b/reference/map/multimap.md
@@ -148,6 +148,7 @@ namespace std {
 |-------------------------------------------|--------------------------------------------|-------|
 | [`operator==`](multimap/op_equal.md)         | 左辺と右辺が等しいかの判定を行う           | |
 | [`operator!=`](multimap/op_not_equal.md)     | 左辺と右辺が等しくないかの判定を行う       | |
+| [`operator&amp;lt;=&amp;gt;`](multimap/op_compare_3way.md) | 三方比較を行う                             | C++20 |
 | [`operator&amp;lt;`](multimap/op_less.md)           | 左辺が右辺より小さいかの判定を行う         | |
 | [`operator&amp;lt;=`](multimap/op_less_equal.md)    | 左辺が右辺より小さいか等しいかの判定を行う | |
 | [`operator&amp;gt;`](multimap/op_greater.md)        | 左辺が右辺より大きいかの判定を行う         | |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;=&gt; -- multimap : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/map/multimap/op_compare_3way.html"/>
      <id>17f1c5d131f8cf99e5965be2598f021dbbd84425:reference/map/multimap/op_compare_3way.md</id>
      <updated>2022-12-12T18:35:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/multimap/op_compare_3way.md b/reference/map/multimap/op_compare_3way.md
new file mode 100644
index 000000000..9858938b3
--- /dev/null
+++ b/reference/map/multimap/op_compare_3way.md
@@ -0,0 +1,86 @@
+# operator&amp;lt;=&amp;gt;
+* map[meta header]
+* std[meta namespace]
+* function template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;class Key, class T, class Compare, class Allocator&amp;gt;
+  synth-three-way-result&amp;lt;pair&amp;lt;const Key, T&amp;gt;&amp;gt;
+    operator&amp;lt;=&amp;gt;(const multimap&amp;lt;Key,T,Compare,Allocator&amp;gt;&amp;amp; x,
+                const multimap&amp;lt;Key,T,Compare,Allocator&amp;gt;&amp;amp; y); // (1) C++20
+}
+```
+* pair[link /reference/utility/pair.md]
+
+## 概要
+`multimap`オブジェクトの三方比較を行う。
+
+
+## テンプレートパラメータ制約
+- 型 (`const`) `T` の値に対して`operator&amp;lt;=&amp;gt;`が定義されるか、型 (`const`) `T` の値に対して`operator&amp;lt;`が定義され全順序をもつこと
+
+
+## 効果
+```cpp
+return lexicographical_compare_three_way(
+    x.begin(), x.end(),
+    y.begin(), y.end(),
+    synth-three-way);
+```
+* lexicographical_compare_three_way[link /reference/algorithm/lexicographical_compare_three_way.md]
+* begin()[link begin.md]
+* end()[link end.md]
+
+
+## 計算量
+線形時間
+
+
+## 備考
+- この演算子により、以下の演算子が使用可能になる (C++20)：
+    - `operator&amp;lt;`
+    - `operator&amp;lt;=`
+    - `operator&amp;gt;`
+    - `operator&amp;gt;=`
+
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;map&amp;gt;
+
+int main()
+{
+  std::multimap&amp;lt;int, char&amp;gt; m1;
+  m1.insert(std::make_pair(0, &amp;#39;a&amp;#39;));
+
+  auto m2 = m1;
+
+  assert((m1 &amp;lt;=&amp;gt; m2) == 0);
+
+  m2.insert(std::make_pair(0, &amp;#39;b&amp;#39;));
+
+  assert((m1 &amp;lt;=&amp;gt; m2) != 0);
+
+  return 0;
+}
+```
+* insert[link insert.md]
+
+### 出力
+```
+```
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): 2012
+
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- multimap : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/map/multimap/op_equal.html"/>
      <id>17f1c5d131f8cf99e5965be2598f021dbbd84425:reference/map/multimap/op_equal.md</id>
      <updated>2022-12-12T18:35:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/multimap/op_equal.md b/reference/map/multimap/op_equal.md
index c55a6f55e..71c3b4e9a 100644
--- a/reference/map/multimap/op_equal.md
+++ b/reference/map/multimap/op_equal.md
@@ -6,7 +6,9 @@
 ```cpp
 namespace std {
   template &amp;lt;class Key, class T, class Compare, class Allocator&amp;gt;
-  bool operator==(const multimap&amp;lt;Key,T,Compare,Allocator&amp;gt;&amp;amp; x, const multimap&amp;lt;Key,T,Compare,Allocator&amp;gt;&amp;amp; y);
+  bool
+    operator==(const multimap&amp;lt;Key,T,Compare,Allocator&amp;gt;&amp;amp; x,
+               const multimap&amp;lt;Key,T,Compare,Allocator&amp;gt;&amp;amp; y); // (1) C++03
 }
 ```
 
@@ -23,6 +25,11 @@ namespace std {
 [`size()`](/reference/map/multimap/size.md) に対して線形時間。ただし、`x`と`y`のサイズが異なる場合は定数時間。
 
 
+## 備考
+- この演算子により、以下の演算子が使用可能になる (C++20)：
+    - `operator!=`
+
+
 ## 例
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
@@ -62,4 +69,5 @@ int main()
 ## 参照
 - [LWG Issue 2257. Simplify container requirements with the new algorithms](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2257)
     - C++14から、2つ目の範囲のendイテレータをとる`equal()`アルゴリズムを使用するようになった。
-
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt; -- multimap : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/map/multimap/op_greater.html"/>
      <id>17f1c5d131f8cf99e5965be2598f021dbbd84425:reference/map/multimap/op_greater.md</id>
      <updated>2022-12-12T18:35:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/multimap/op_greater.md b/reference/map/multimap/op_greater.md
index cc9acf025..967138ed4 100644
--- a/reference/map/multimap/op_greater.md
+++ b/reference/map/multimap/op_greater.md
@@ -5,8 +5,11 @@
 
 ```cpp
 namespace std {
+  // operator&amp;lt;=&amp;gt;により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class Key, class T, class Compare, class Allocator&amp;gt;
-  bool operator&amp;gt; (const multimap&amp;lt;Key,T,Compare,Allocator&amp;gt;&amp;amp; x, const multimap&amp;lt;Key,T,Compare,Allocator&amp;gt;&amp;amp; y);
+  bool
+    operator&amp;gt;(const multimap&amp;lt;Key,T,Compare,Allocator&amp;gt;&amp;amp; x,
+              const multimap&amp;lt;Key,T,Compare,Allocator&amp;gt;&amp;amp; y); // (1) C++03
 }
 ```
 
@@ -65,3 +68,6 @@ int main()
 - [Visual C++](/implementation.md#visual_cpp): 2012
 
 
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt;= -- multimap : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/map/multimap/op_greater_equal.html"/>
      <id>17f1c5d131f8cf99e5965be2598f021dbbd84425:reference/map/multimap/op_greater_equal.md</id>
      <updated>2022-12-12T18:35:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/multimap/op_greater_equal.md b/reference/map/multimap/op_greater_equal.md
index d5727416d..b4d48fdd0 100644
--- a/reference/map/multimap/op_greater_equal.md
+++ b/reference/map/multimap/op_greater_equal.md
@@ -5,8 +5,11 @@
 
 ```cpp
 namespace std {
+  // operator&amp;lt;=&amp;gt;により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class Key, class T, class Compare, class Allocator&amp;gt;
-  bool operator&amp;gt;=(const multimap&amp;lt;Key,T, Compare,Allocator&amp;gt;&amp;amp; x, const multimap&amp;lt;Key,T, Compare,Allocator&amp;gt;&amp;amp; y);
+  bool
+    operator&amp;gt;=(const multimap&amp;lt;Key,T, Compare,Allocator&amp;gt;&amp;amp; x,
+               const multimap&amp;lt;Key,T, Compare,Allocator&amp;gt;&amp;amp; y); // (1) C++03
 }
 ```
 
@@ -57,3 +60,7 @@ int main()
 0
 ```
 
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt; -- multimap : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/map/multimap/op_less.html"/>
      <id>17f1c5d131f8cf99e5965be2598f021dbbd84425:reference/map/multimap/op_less.md</id>
      <updated>2022-12-12T18:35:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/multimap/op_less.md b/reference/map/multimap/op_less.md
index 05a95afdc..a53e54856 100644
--- a/reference/map/multimap/op_less.md
+++ b/reference/map/multimap/op_less.md
@@ -5,8 +5,11 @@
 
 ```cpp
 namespace std {
+  // operator&amp;lt;=&amp;gt;により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class Key, class T, class Compare, class Allocator&amp;gt;
-  bool operator&amp;lt; (const multimap&amp;lt;Key,T,Compare,Allocator&amp;gt;&amp;amp; x, const multimap&amp;lt;Key,T,Compare,Allocator&amp;gt;&amp;amp; y);
+  bool
+    operator&amp;lt;(const multimap&amp;lt;Key,T,Compare,Allocator&amp;gt;&amp;amp; x,
+              const multimap&amp;lt;Key,T,Compare,Allocator&amp;gt;&amp;amp; y); // (1) C++03
 }
 ```
 
@@ -69,3 +72,6 @@ int main()
 - [Visual C++](/implementation.md#visual_cpp): 2012
 
 
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;= -- multimap : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/map/multimap/op_less_equal.html"/>
      <id>17f1c5d131f8cf99e5965be2598f021dbbd84425:reference/map/multimap/op_less_equal.md</id>
      <updated>2022-12-12T18:35:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/multimap/op_less_equal.md b/reference/map/multimap/op_less_equal.md
index 65224eef1..68e30da13 100644
--- a/reference/map/multimap/op_less_equal.md
+++ b/reference/map/multimap/op_less_equal.md
@@ -5,8 +5,11 @@
 
 ```cpp
 namespace std {
+  // operator&amp;lt;=&amp;gt;により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class Key, class T, class Compare, class Allocator&amp;gt;
-  bool operator&amp;lt;=(const multimap&amp;lt;Key,T, Compare,Allocator&amp;gt;&amp;amp; x, const multimap&amp;lt;Key,T, Compare,Allocator&amp;gt;&amp;amp; y);
+  bool
+    operator&amp;lt;=(const multimap&amp;lt;Key,T, Compare,Allocator&amp;gt;&amp;amp; x,
+               const multimap&amp;lt;Key,T, Compare,Allocator&amp;gt;&amp;amp; y); // (1) C++03
 }
 ```
 
@@ -57,3 +60,7 @@ int main()
 1
 ```
 
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator!= -- multimap : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/map/multimap/op_not_equal.html"/>
      <id>17f1c5d131f8cf99e5965be2598f021dbbd84425:reference/map/multimap/op_not_equal.md</id>
      <updated>2022-12-12T18:35:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/multimap/op_not_equal.md b/reference/map/multimap/op_not_equal.md
index 852bdf55c..cf1ea0315 100644
--- a/reference/map/multimap/op_not_equal.md
+++ b/reference/map/multimap/op_not_equal.md
@@ -5,8 +5,11 @@
 
 ```cpp
 namespace std {
+  // operator==により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class Key, class T, class Compare, class Allocator&amp;gt;
-  bool operator!=(const multimap&amp;lt;Key,T,Compare,Allocator&amp;gt;&amp;amp; x, const multimap&amp;lt;Key,T,Compare,Allocator&amp;gt;&amp;amp; y);
+  bool
+    operator!=(const multimap&amp;lt;Key,T,Compare,Allocator&amp;gt;&amp;amp; x,
+               const multimap&amp;lt;Key,T,Compare,Allocator&amp;gt;&amp;amp; y); // (1) C++03
 }
 ```
 
@@ -62,3 +65,7 @@ int main()
 - [ICC](/implementation.md#icc): ??
 - [Visual C++](/implementation.md#visual_cpp): 2012
 
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>map -- map : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/map/map.html"/>
      <id>6ed439fc77142b6ef3f1dfb89bc3b14e71173102:reference/map/map.md</id>
      <updated>2022-12-12T18:16:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/map.md b/reference/map/map.md
index cbc698dba..a3fc5f03c 100644
--- a/reference/map/map.md
+++ b/reference/map/map.md
@@ -159,9 +159,10 @@ struct insert-return-type {
 ### 比較演算子
 
 | 名前 | 説明 | 対応バージョン |
-|-------------------------------------------|--------------------------------------------|-------|
+|-----------------------------------------|--------------------------------------------|-------|
 | [`operator==`](map/op_equal.md)         | 左辺と右辺が等しいかの判定を行う           | |
 | [`operator!=`](map/op_not_equal.md)     | 左辺と右辺が等しくないかの判定を行う       | |
+| [`operator&amp;lt;=&amp;gt;`](map/op_compare_3way.md) | 三方比較を行う                             | C++20 |
 | [`operator&amp;lt;`](map/op_less.md)           | 左辺が右辺より小さいかの判定を行う         | |
 | [`operator&amp;lt;=`](map/op_less_equal.md)    | 左辺が右辺より小さいか等しいかの判定を行う | |
 | [`operator&amp;gt;`](map/op_greater.md)        | 左辺が右辺より大きいかの判定を行う         | |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;=&gt; -- map : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/map/map/op_compare_3way.html"/>
      <id>6ed439fc77142b6ef3f1dfb89bc3b14e71173102:reference/map/map/op_compare_3way.md</id>
      <updated>2022-12-12T18:16:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/map/op_compare_3way.md b/reference/map/map/op_compare_3way.md
new file mode 100644
index 000000000..1f84c65bc
--- /dev/null
+++ b/reference/map/map/op_compare_3way.md
@@ -0,0 +1,87 @@
+# operator&amp;lt;=&amp;gt;
+* map[meta header]
+* std[meta namespace]
+* function template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;class Key, class T, class Compare, class Allocator&amp;gt;
+  synth-three-way-result&amp;lt;pair&amp;lt;const Key, T&amp;gt;&amp;gt;
+    operator&amp;lt;=&amp;gt;(const map&amp;lt;Key,T,Compare,Allocator&amp;gt;&amp;amp; x,
+                const map&amp;lt;Key,T,Compare,Allocator&amp;gt;&amp;amp; y); // (1) C++20
+}
+```
+* pair[link /reference/utility/pair.md]
+
+## 概要
+`map`オブジェクトの三方比較を行う。
+
+
+## テンプレートパラメータ制約
+- 型 (`const`) `T` の値に対して`operator&amp;lt;=&amp;gt;`が定義されるか、型 (`const`) `T` の値に対して`operator&amp;lt;`が定義され全順序をもつこと
+
+
+## 効果
+```cpp
+return lexicographical_compare_three_way(
+    x.begin(), x.end(),
+    y.begin(), y.end(),
+    synth-three-way);
+```
+* lexicographical_compare_three_way[link /reference/algorithm/lexicographical_compare_three_way.md]
+* begin()[link begin.md]
+* end()[link end.md]
+
+
+## 計算量
+線形時間
+
+
+## 備考
+- この演算子により、以下の演算子が使用可能になる (C++20)：
+    - `operator&amp;lt;`
+    - `operator&amp;lt;=`
+    - `operator&amp;gt;`
+    - `operator&amp;gt;=`
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;map&amp;gt;
+
+int main()
+{
+  std::map&amp;lt;int,char&amp;gt; m1;
+  m1[0] = &amp;#39;a&amp;#39;;
+
+  auto m2 = m1;
+
+  assert((m1 &amp;lt;=&amp;gt; m2) == 0);
+
+  m2[0] = &amp;#39;b&amp;#39;;
+
+  assert((m1 &amp;lt;=&amp;gt; m2) != 0);
+
+  return 0;
+}
+```
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang):
+- [GCC](/implementation.md#gcc): 10
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- map : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/map/map/op_equal.html"/>
      <id>6ed439fc77142b6ef3f1dfb89bc3b14e71173102:reference/map/map/op_equal.md</id>
      <updated>2022-12-12T18:16:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/map/op_equal.md b/reference/map/map/op_equal.md
index 9f4787eb8..a0e188ba0 100644
--- a/reference/map/map/op_equal.md
+++ b/reference/map/map/op_equal.md
@@ -6,7 +6,9 @@
 ```cpp
 namespace std {
   template &amp;lt;class Key, class T, class Compare, class Allocator&amp;gt;
-  bool operator==(const map&amp;lt;Key,T,Compare,Allocator&amp;gt;&amp;amp; x, const map&amp;lt;Key,T,Compare,Allocator&amp;gt;&amp;amp; y);
+  bool
+    operator==(const map&amp;lt;Key,T,Compare,Allocator&amp;gt;&amp;amp; x,
+               const map&amp;lt;Key,T,Compare,Allocator&amp;gt;&amp;amp; y); // (1) C++03
 }
 ```
 
@@ -23,6 +25,11 @@ namespace std {
 [`size()`](/reference/map/map/size.md) に対して線形時間。ただし、`x`と`y`のサイズが異なる場合は定数時間。
 
 
+## 備考
+- この演算子により、以下の演算子が使用可能になる (C++20)：
+    - `operator!=`
+
+
 ## 例
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
@@ -61,4 +68,5 @@ int main()
 ## 参照
 - [LWG Issue 2257. Simplify container requirements with the new algorithms](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2257)
     - C++14から、2つ目の範囲のendイテレータをとる`equal()`アルゴリズムを使用するようになった。
-
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt; -- map : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/map/map/op_greater.html"/>
      <id>6ed439fc77142b6ef3f1dfb89bc3b14e71173102:reference/map/map/op_greater.md</id>
      <updated>2022-12-12T18:16:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/map/op_greater.md b/reference/map/map/op_greater.md
index fa852dcd3..eb2f31f34 100644
--- a/reference/map/map/op_greater.md
+++ b/reference/map/map/op_greater.md
@@ -5,8 +5,11 @@
 
 ```cpp
 namespace std {
+  // operator&amp;lt;=&amp;gt;により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class Key, class T, class Compare, class Allocator&amp;gt;
-  bool operator&amp;gt; (const map&amp;lt;Key,T,Compare,Allocator&amp;gt;&amp;amp; x, const map&amp;lt;Key,T,Compare,Allocator&amp;gt;&amp;amp; y);
+  bool
+    operator&amp;gt;(const map&amp;lt;Key,T,Compare,Allocator&amp;gt;&amp;amp; x,
+              const map&amp;lt;Key,T,Compare,Allocator&amp;gt;&amp;amp; y); // (1) C++03
 }
 ```
 
@@ -65,3 +68,6 @@ int main()
 - [Visual C++](/implementation.md#visual_cpp): 2012
 
 
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt;= -- map : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/map/map/op_greater_equal.html"/>
      <id>6ed439fc77142b6ef3f1dfb89bc3b14e71173102:reference/map/map/op_greater_equal.md</id>
      <updated>2022-12-12T18:16:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/map/op_greater_equal.md b/reference/map/map/op_greater_equal.md
index e91290edf..d266e3771 100644
--- a/reference/map/map/op_greater_equal.md
+++ b/reference/map/map/op_greater_equal.md
@@ -5,8 +5,11 @@
 
 ```cpp
 namespace std {
+  // operator&amp;lt;=&amp;gt;により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class Key, class T, class Compare, class Allocator&amp;gt;
-  bool operator&amp;gt;=(const map&amp;lt;Key,T, Compare,Allocator&amp;gt;&amp;amp; x, const map&amp;lt;Key,T, Compare,Allocator&amp;gt;&amp;amp; y);
+  bool
+    operator&amp;gt;=(const map&amp;lt;Key,T, Compare,Allocator&amp;gt;&amp;amp; x,
+               const map&amp;lt;Key,T, Compare,Allocator&amp;gt;&amp;amp; y);
 }
 ```
 
@@ -57,3 +60,7 @@ int main()
 0
 ```
 
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt; -- map : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/map/map/op_less.html"/>
      <id>6ed439fc77142b6ef3f1dfb89bc3b14e71173102:reference/map/map/op_less.md</id>
      <updated>2022-12-12T18:16:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/map/op_less.md b/reference/map/map/op_less.md
index bc55e71d0..ccb82bfae 100644
--- a/reference/map/map/op_less.md
+++ b/reference/map/map/op_less.md
@@ -5,8 +5,11 @@
 
 ```cpp
 namespace std {
+  // operator&amp;lt;=&amp;gt;により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class Key, class T, class Compare, class Allocator&amp;gt;
-  bool operator&amp;lt; (const map&amp;lt;Key,T,Compare,Allocator&amp;gt;&amp;amp; x, const map&amp;lt;Key,T,Compare,Allocator&amp;gt;&amp;amp; y);
+  bool
+    operator&amp;lt;(const map&amp;lt;Key,T,Compare,Allocator&amp;gt;&amp;amp; x,
+              const map&amp;lt;Key,T,Compare,Allocator&amp;gt;&amp;amp; y); // (1) C++03
 }
 ```
 
@@ -69,3 +72,6 @@ int main()
 - [Visual C++](/implementation.md#visual_cpp): 2012
 
 
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;= -- map : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/map/map/op_less_equal.html"/>
      <id>6ed439fc77142b6ef3f1dfb89bc3b14e71173102:reference/map/map/op_less_equal.md</id>
      <updated>2022-12-12T18:16:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/map/op_less_equal.md b/reference/map/map/op_less_equal.md
index f51b3c9e8..d9914a431 100644
--- a/reference/map/map/op_less_equal.md
+++ b/reference/map/map/op_less_equal.md
@@ -5,8 +5,11 @@
 
 ```cpp
 namespace std {
+  // operator&amp;lt;=&amp;gt;により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class Key, class T, class Compare, class Allocator&amp;gt;
-  bool operator&amp;lt;=(const map&amp;lt;Key,T, Compare,Allocator&amp;gt;&amp;amp; x, const map&amp;lt;Key,T, Compare,Allocator&amp;gt;&amp;amp; y);
+  bool
+    operator&amp;lt;=(const map&amp;lt;Key,T, Compare,Allocator&amp;gt;&amp;amp; x,
+               const map&amp;lt;Key,T, Compare,Allocator&amp;gt;&amp;amp; y); // (1) C++03
 }
 ```
 
@@ -57,3 +60,7 @@ int main()
 1
 ```
 
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator!= -- map : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/map/map/op_not_equal.html"/>
      <id>6ed439fc77142b6ef3f1dfb89bc3b14e71173102:reference/map/map/op_not_equal.md</id>
      <updated>2022-12-12T18:16:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/map/op_not_equal.md b/reference/map/map/op_not_equal.md
index 69a4db3d4..4897d7d51 100644
--- a/reference/map/map/op_not_equal.md
+++ b/reference/map/map/op_not_equal.md
@@ -5,8 +5,11 @@
 
 ```cpp
 namespace std {
+  // operator==により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class Key, class T, class Compare, class Allocator&amp;gt;
-  bool operator!=(const map&amp;lt;Key,T,Compare,Allocator&amp;gt;&amp;amp; x, const map&amp;lt;Key,T,Compare,Allocator&amp;gt;&amp;amp; y);
+  bool
+    operator!=(const map&amp;lt;Key,T,Compare,Allocator&amp;gt;&amp;amp; x,
+               const map&amp;lt;Key,T,Compare,Allocator&amp;gt;&amp;amp; y); // (1) C++03
 }
 ```
 
@@ -63,3 +66,7 @@ int main()
 - [ICC](/implementation.md#icc): ??
 - [Visual C++](/implementation.md#visual_cpp): 2012
 
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>synth-three-way-result -- synth-three-way-resultの修飾順を逆にした</title>
      <link href="https://cpprefjp.github.io/reference/exposition-only/synth-three-way-result.html"/>
      <id>07078f8099ce246a43fe729d9a9e1c1498b71ad9:reference/exposition-only/synth-three-way-result.md</id>
      <updated>2022-12-12T17:42:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/exposition-only/synth-three-way-result.md b/reference/exposition-only/synth-three-way-result.md
index 1254c8602..91ae71050 100644
--- a/reference/exposition-only/synth-three-way-result.md
+++ b/reference/exposition-only/synth-three-way-result.md
@@ -24,8 +24,8 @@ template &amp;lt;class T, class U=T&amp;gt;
 using synth-three-way-result =
   decltype(synth-three-way(declval&amp;lt;T&amp;amp;&amp;gt;(), declval&amp;lt;U&amp;amp;&amp;gt;())); // (2) C++20
 ```
-* synth-three-way[italic]
 * synth-three-way-result[italic]
+* synth-three-way[italic]
 * boolean-testable[link /reference/concepts/boolean-testable.md]
 * three_way_comparable_with[link /reference/compare/three_way_comparable.md]
 * weak_ordering[link /reference/compare/weak_ordering.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
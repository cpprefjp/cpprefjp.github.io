<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2020-05-13T14:34:29.266891</updated>
  <id>55daa441-6e2a-48b9-b897-41489b755dfb</id>

  
    <entry>
      <title>cout -- Merge pull request #759 from cpprefjp/fix/wide-io</title>
      <link href="https://cpprefjp.github.io/reference/iostream/cout.html"/>
      <id>7ef0c890b7b4d029eaab3bb2e75c9500917544a5:reference/iostream/cout.md</id>
      <updated>2020-05-11T22:32:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iostream/cout.md b/reference/iostream/cout.md
index 5f9d0b9e8..5d8b1e527 100644
--- a/reference/iostream/cout.md
+++ b/reference/iostream/cout.md
@@ -64,15 +64,11 @@ int main()
 
 のようにして設定しないと何も表示されない。
 
-`std::locale(&amp;#34;&amp;#34;)`とすると本来はOSに設定されたロケールが設定されるはずが、MinGWやLinux環境で実行すると、&amp;#34;C&amp;#34;ロケールになってしまう問題がある。
-
-また、上記プログラムで`std::locale(&amp;#34;ja&amp;#34;)`の行のコメントアウトを外してを実行すると、以下のようなエラーが出力されてしまう。
+`std::locale(&amp;#34;&amp;#34;)`とすると本来はOSに設定されたロケールが設定されるはずが、MinGW環境でコンパイルし実行すると、以下のようなエラーが出力されてしまう。
 
 ```
 terminate called after throwing an instance of &amp;#39;std::runtime_error&amp;#39;
   what():  locale::facet::_S_create_c_locale name not valid
-
-Aborted
 ```
 
 一方、以下のようなコードなら求める結果が得られる処理系もある。
@@ -95,14 +91,16 @@ int main()
 
 このように求める結果を得るためのlocaleの設定は処理系によって大きく異なる。
 
-#### 端末のロケールなど
+#### 端末のロケールやフォントなど
 
-`wcout`自体はUnicodeを扱うが、結局`stdout`に出力するので、その標準出力を受け取って表示する端末のロケールやフォントなどの設定も考える必要がある。
+`wcout`を使ったとしても、結局`stdout`に出力するので、その標準出力を受け取って表示する端末のロケールやフォントなどの設定も考える必要がある。
 
 ##### Windows
-WindowsではコマンドプロンプトのデフォルトのロケールがUTF-8(65001)ではない事が多い(日本語利用者なら932になっている事が多い)ため、そのロケールで対応していないUnicodeコードポイントは当然変換できないので文字化けする。
+Windowsでは`wchar_t`型といえばUTF-16でエンコードされた文字を指す。もし標準出力を受け取って表示するコンソールのロケールがUTF-8(65001)であるならばUTF-16からUTF-8への変換は一対一対応するため変換段階において問題は起きない。
+
+しかしながらデフォルトのロケールがUTF-8(65001)ではない事が多い(日本語利用者なら932になっている事が多い)ため、そのロケールで対応していないUnicodeコードポイントは当然変換できないので文字化けする。`chcp 65001`などでUTF-8にすることができる。
 
-またWindows10 1709より前では、`chcp 65001`などでUTF-8にしたときのフォントの指定に制約があり、実質日本語を表示することは不可能だった。
+こうしてUTF-8としてコンソールが文字列を受け取ったとしてもそれを正しく表示できるとは限らない。まずフォントが表示したい文字をすべて含んでいなければならない。またそうしたフォントを使えるようになっていなければならない。Windows10 1709より前では、ロケールをUTF-8にしたときのフォントの指定に制約があり、実質日本語を表示することは不可能だった。次に、🍣🍺のような色のついた絵文字を表示するためには、フォントの対応に加えて、それをDirectWriteなどを用いて描画されることが前提となる。例えばコマンドプロンプトはGDIで描画するため原理上不可能である。Microsoftが開発している[Windows Terminal](https://github.com/microsoft/terminal)ではこうした描画側の問題を克服しようとしている。
 
 ## 出典
 
@@ -114,3 +112,4 @@ WindowsではコマンドプロンプトのデフォルトのロケールがUTF-
 - [標準出力に書き込む | 株式会社きじねこ](http://www.kijineko.co.jp/tech/cppsamples/stdout.html)
 - [c++で日本語の処理（ロケール周り） 7/8追記 - nullnull7の日記](http://nullnull.hatenablog.com/entry/20120629/1340935277)
 - [std::locale constructor modifies global locale via &amp;#34;setlocale()&amp;#34; | Microsoft Connect](http://web.archive.org/web/20100328154628/http://connect.microsoft.com:80/VisualStudio/feedback/details/492128/std-locale-constructor-modifies-global-locale-via-setlocale)
+- [ASCII.jp：Windows 10に“まとも”に使えるコンソール「WindowsTerminal」が登場する (2/2)](https://ascii.jp/elem/000/001/868/1868623/2/)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yumetodo</name>
        <email>yume-wikijp@live.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>cout -- fix(wide-io): Cロケールになるバグ話を除去、Linux環境で例外が出る話は誤編集なので除去</title>
      <link href="https://cpprefjp.github.io/reference/iostream/cout.html"/>
      <id>68848485182cd38dd38f1d5de44f2f083af7d0d9:reference/iostream/cout.md</id>
      <updated>2020-05-09T14:43:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iostream/cout.md b/reference/iostream/cout.md
index 80f328f9c..5d8b1e527 100644
--- a/reference/iostream/cout.md
+++ b/reference/iostream/cout.md
@@ -64,15 +64,11 @@ int main()
 
 のようにして設定しないと何も表示されない。
 
-`std::locale(&amp;#34;&amp;#34;)`とすると本来はOSに設定されたロケールが設定されるはずが、MinGWやLinux環境で実行すると、&amp;#34;C&amp;#34;ロケールになってしまう問題がある。
-
-また、上記プログラムで`std::locale(&amp;#34;ja&amp;#34;)`の行のコメントアウトを外してを実行すると、以下のようなエラーが出力されてしまう。
+`std::locale(&amp;#34;&amp;#34;)`とすると本来はOSに設定されたロケールが設定されるはずが、MinGW環境でコンパイルし実行すると、以下のようなエラーが出力されてしまう。
 
 ```
 terminate called after throwing an instance of &amp;#39;std::runtime_error&amp;#39;
   what():  locale::facet::_S_create_c_locale name not valid
-
-Aborted
 ```
 
 一方、以下のようなコードなら求める結果が得られる処理系もある。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yumetodo</name>
        <email>yume-wikijp@live.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>cout -- fix(wide-io): wchar_t型がUnicodeであるとは限らないため避ける。また描画側についての記述を追記</title>
      <link href="https://cpprefjp.github.io/reference/iostream/cout.html"/>
      <id>e80102cb7f5bf895add587eae93bb09da520f413:reference/iostream/cout.md</id>
      <updated>2020-05-08T23:43:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iostream/cout.md b/reference/iostream/cout.md
index 5f9d0b9e8..80f328f9c 100644
--- a/reference/iostream/cout.md
+++ b/reference/iostream/cout.md
@@ -95,14 +95,16 @@ int main()
 
 このように求める結果を得るためのlocaleの設定は処理系によって大きく異なる。
 
-#### 端末のロケールなど
+#### 端末のロケールやフォントなど
 
-`wcout`自体はUnicodeを扱うが、結局`stdout`に出力するので、その標準出力を受け取って表示する端末のロケールやフォントなどの設定も考える必要がある。
+`wcout`を使ったとしても、結局`stdout`に出力するので、その標準出力を受け取って表示する端末のロケールやフォントなどの設定も考える必要がある。
 
 ##### Windows
-WindowsではコマンドプロンプトのデフォルトのロケールがUTF-8(65001)ではない事が多い(日本語利用者なら932になっている事が多い)ため、そのロケールで対応していないUnicodeコードポイントは当然変換できないので文字化けする。
+Windowsでは`wchar_t`型といえばUTF-16でエンコードされた文字を指す。もし標準出力を受け取って表示するコンソールのロケールがUTF-8(65001)であるならばUTF-16からUTF-8への変換は一対一対応するため変換段階において問題は起きない。
 
-またWindows10 1709より前では、`chcp 65001`などでUTF-8にしたときのフォントの指定に制約があり、実質日本語を表示することは不可能だった。
+しかしながらデフォルトのロケールがUTF-8(65001)ではない事が多い(日本語利用者なら932になっている事が多い)ため、そのロケールで対応していないUnicodeコードポイントは当然変換できないので文字化けする。`chcp 65001`などでUTF-8にすることができる。
+
+こうしてUTF-8としてコンソールが文字列を受け取ったとしてもそれを正しく表示できるとは限らない。まずフォントが表示したい文字をすべて含んでいなければならない。またそうしたフォントを使えるようになっていなければならない。Windows10 1709より前では、ロケールをUTF-8にしたときのフォントの指定に制約があり、実質日本語を表示することは不可能だった。次に、🍣🍺のような色のついた絵文字を表示するためには、フォントの対応に加えて、それをDirectWriteなどを用いて描画されることが前提となる。例えばコマンドプロンプトはGDIで描画するため原理上不可能である。Microsoftが開発している[Windows Terminal](https://github.com/microsoft/terminal)ではこうした描画側の問題を克服しようとしている。
 
 ## 出典
 
@@ -114,3 +116,4 @@ WindowsではコマンドプロンプトのデフォルトのロケールがUTF-
 - [標準出力に書き込む | 株式会社きじねこ](http://www.kijineko.co.jp/tech/cppsamples/stdout.html)
 - [c++で日本語の処理（ロケール周り） 7/8追記 - nullnull7の日記](http://nullnull.hatenablog.com/entry/20120629/1340935277)
 - [std::locale constructor modifies global locale via &amp;#34;setlocale()&amp;#34; | Microsoft Connect](http://web.archive.org/web/20100328154628/http://connect.microsoft.com:80/VisualStudio/feedback/details/492128/std-locale-constructor-modifies-global-locale-via-setlocale)
+- [ASCII.jp：Windows 10に“まとも”に使えるコンソール「WindowsTerminal」が登場する (2/2)](https://ascii.jp/elem/000/001/868/1868623/2/)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yumetodo</name>
        <email>yume-wikijp@live.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>畳み込み式 -- C++17 畳み込み式 : 使い方記事へのリンクを追加</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/folding_expressions.html"/>
      <id>5b1978eff1fdd2400ecb937a0bcaf57a8c43739f:lang/cpp17/folding_expressions.md</id>
      <updated>2020-05-07T15:08:51+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/folding_expressions.md b/lang/cpp17/folding_expressions.md
index 509d4b756..ba37f5a0f 100644
--- a/lang/cpp17/folding_expressions.md
+++ b/lang/cpp17/folding_expressions.md
@@ -243,3 +243,4 @@ auto res =  (std::string(args) + ...);
 * [N4295 Folding expressions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4295.html)
 * [N4358 Unary Folds and Empty Parameter Packs](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4358.pdf)
 * [P0036 Unary Folds and Empty Parameter Packs (revision 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0036r0.pdf)
+* [Nifty Fold Expression Tricks - foonathan::blog()](https://foonathan.net/2020/05/fold-tricks/)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-05-30T08:29:15.806835</updated>
  <id>d76cceb9-c944-49ff-ada4-7bb54e03813f</id>

  
    <entry>
      <title>transform_view -- transform_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/transform_view.html"/>
      <id>15c75ce0fc2fa8826cd2141d350b3ac22188975c:reference/ranges/transform_view.md</id>
      <updated>2025-05-30T17:25:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/transform_view.md b/reference/ranges/transform_view.md
index cefa5c55c..c4e9efe33 100644
--- a/reference/ranges/transform_view.md
+++ b/reference/ranges/transform_view.md
@@ -44,33 +44,33 @@ namespace std::ranges {
 
 ## メンバ関数
 
-| 名前                                             | 説明                             | 対応バージョン |
-|--------------------------------------------------|----------------------------------|----------------|
-| [`(constructor)`](transform_view/op_constructor.md.nolink)  | コンストラクタ                   | C++20          |
-| [`base`](transform_view/base.md.nolink)                     | `V`の参照を取得する              | C++20          |
-| [`begin`](transform_view/begin.md.nolink)                   | 先頭を指すイテレータを取得する   | C++20          |
-| [`end`](transform_view/end.md.nolink)                       | 番兵を取得する                   | C++20          |
-| [`size`](transform_view/size.md.nolink)                     | 要素数を取得する                 | C++20          |
+| 名前                                                | 説明                             | 対応バージョン |
+|-----------------------------------------------------|----------------------------------|----------------|
+| [`(constructor)`](transform_view/op_constructor.md) | コンストラクタ                   | C++20          |
+| [`base`](transform_view/base.md)                    | `V`の参照を取得する              | C++20          |
+| [`begin`](transform_view/begin.md)                  | 先頭を指すイテレータを取得する   | C++20          |
+| [`end`](transform_view/end.md)                      | 番兵を取得する                   | C++20          |
+| [`size`](transform_view/size.md)                    | 要素数を取得する                 | C++20          |
 
 `r`を元のRangeとする。`size`は[`ranges::size`](size.md)`(r)`が有効な式であるときに定義される。
 
 ## 継承しているメンバ関数
 
-| 名前                                         | 説明                             | 対応バージョン |
-|----------------------------------------------|----------------------------------|----------------|
+| 名前                                         | 説明                              | 対応バージョン |
+|----------------------------------------------|-----------------------------------|----------------|
 | [`empty`](view_interface/empty.md)           | Rangeが空かどうかを判定する       | C++20          |
 | [`operator bool`](view_interface/op_bool.md) | Rangeが空でないかどうかを判定する | C++20          |
-| [`front`](view_interface/front.md)           | 先頭要素への参照を取得する       | C++20          |
-| [`back`](view_interface/back.md)             | 末尾要素への参照を取得する       | C++20          |
-| [`operator[]`](view_interface/op_at.md)      | 要素へアクセスする               | C++20          |
-| [`cbegin`](view_interface/cbegin.md)         | 定数イテレータを取得する             | C++23          |
-| [`cend`](view_interface/cend.md)             | 定数イテレータ（番兵）を取得する      | C++23          |
+| [`front`](view_interface/front.md)           | 先頭要素への参照を取得する        | C++20          |
+| [`back`](view_interface/back.md)             | 末尾要素への参照を取得する        | C++20          |
+| [`operator[]`](view_interface/op_at.md)      | 要素へアクセスする                | C++20          |
+| [`cbegin`](view_interface/cbegin.md)         | 定数イテレータを取得する          | C++23          |
+| [`cend`](view_interface/cend.md)             | 定数イテレータ（番兵）を取得する  | C++23          |
 
 ## 推論補助
 
 | 名前                                                  | 説明                         | 対応バージョン |
 |-------------------------------------------------------|------------------------------|----------------|
-| [`(deduction_guide)`](transform_view/op_deduction_guide.md.nolink) | クラステンプレートの推論補助 | C++20          |
+| [`(deduction_guide)`](transform_view/op_deduction_guide.md) | クラステンプレートの推論補助 | C++20          |
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>base -- transform_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/transform_view/base.html"/>
      <id>15c75ce0fc2fa8826cd2141d350b3ac22188975c:reference/ranges/transform_view/base.md</id>
      <updated>2025-05-30T17:25:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/transform_view/base.md b/reference/ranges/transform_view/base.md
new file mode 100644
index 000000000..9f91a7494
--- /dev/null
+++ b/reference/ranges/transform_view/base.md
@@ -0,0 +1,67 @@
+# base
+* ranges[meta header]
+* std::ranges[meta namespace]
+* transform_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr V base() const &amp;amp;
+  requires copy_constructible&amp;lt;V&amp;gt;;  // (1) C++20
+
+constexpr V base() &amp;amp;&amp;amp;;             // (2) C++20
+```
+
+## 概要
+
+メンバ変数として保持している、元の`view`を取得する。
+
+## 効果
+
+入力`view`（`V`）のオブジェクトを`base_`というメンバに保持するとして
+
+- (1) : `return base_;` と等価
+- (2) : `return std::move(base_);` と等価
+
+## 例
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  using std::ranges::view;
+
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5};
+
+  std::ranges::transform_view r{vec, [](int i) { return i * 2; }};
+
+  // (1) コピーして取得
+  view auto b1 = r.base();
+
+  // (2) ムーブして取得
+  view auto b2 = std::move(r).base();
+
+  // 得られるのは元のRangeではなく、あくまでview
+  static_assert(not std::same_as&amp;lt;decltype(b1), std::vector&amp;lt;int&amp;gt;&amp;gt;);
+  static_assert(    std::same_as&amp;lt;decltype(b1), std::ranges::ref_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;&amp;gt;);
+  static_assert(    std::same_as&amp;lt;decltype(b2), std::ranges::ref_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;&amp;gt;);
+}
+```
+* base[color ff0000]
+
+### 出力
+
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin -- transform_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/transform_view/begin.html"/>
      <id>15c75ce0fc2fa8826cd2141d350b3ac22188975c:reference/ranges/transform_view/begin.md</id>
      <updated>2025-05-30T17:25:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/transform_view/begin.md b/reference/ranges/transform_view/begin.md
new file mode 100644
index 000000000..4eff1088a
--- /dev/null
+++ b/reference/ranges/transform_view/begin.md
@@ -0,0 +1,70 @@
+# begin
+* ranges[meta header]
+* std::ranges[meta namespace]
+* transform_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr iterator&amp;lt;false&amp;gt; begin();       // (1) C++20
+
+constexpr iterator&amp;lt;true&amp;gt; begin() const
+  requires range&amp;lt;const V&amp;gt; &amp;amp;&amp;amp;
+           regular_invocable&amp;lt;
+             const F&amp;amp;,
+             range_reference_t&amp;lt;const V&amp;gt;
+           &amp;gt;;                            // (2) C++20
+```
+
+## 概要
+
+`view`の先頭要素を指すイテレータを取得する。
+
+## 戻り値
+- (1) : 以下と等価：
+    ```cpp
+    return iterator&amp;lt;false&amp;gt;{*this, ranges::begin(base_)};
+    ```
+
+- (2) : 以下と等価：
+    ```cpp
+    return iterator&amp;lt;true&amp;gt;{*this, ranges::begin(base_)};
+    ```
+
+
+## 例
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;string&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5};
+
+  std::ranges::transform_view r{vec, [](int i) { return std::to_string(i); }};
+
+  auto it = r.begin();
+
+  std::string x = *it;
+  std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+}
+```
+* begin[color ff0000]
+
+### 出力
+
+```
+1
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- transform_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/transform_view/end.html"/>
      <id>15c75ce0fc2fa8826cd2141d350b3ac22188975c:reference/ranges/transform_view/end.md</id>
      <updated>2025-05-30T17:25:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/transform_view/end.md b/reference/ranges/transform_view/end.md
new file mode 100644
index 000000000..e27fca46b
--- /dev/null
+++ b/reference/ranges/transform_view/end.md
@@ -0,0 +1,97 @@
+# end
+* ranges[meta header]
+* std::ranges[meta namespace]
+* transform_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr sentinel&amp;lt;false&amp;gt; end();      // (1) C++20
+
+constexpr iterator&amp;lt;false&amp;gt; end()       // (2) C++20
+  requires common_range&amp;lt;V&amp;gt;;
+
+constexpr sentinel&amp;lt;true&amp;gt; end() const
+  requires range&amp;lt;const V&amp;gt; &amp;amp;&amp;amp;
+  regular_invocable&amp;lt;
+    const F&amp;amp;,
+    range_reference_t&amp;lt;const V&amp;gt;
+  &amp;gt;;                                   // (3) C++20
+
+constexpr iterator&amp;lt;true&amp;gt; end() const
+  requires common_range&amp;lt;const V&amp;gt; &amp;amp;&amp;amp;
+    regular_invocable&amp;lt;
+      const F&amp;amp;,
+      range_reference_t&amp;lt;const V&amp;gt;
+    &amp;gt;;                                 // (4) C++20
+```
+
+## 概要
+番兵を取得する。
+
+## 戻り値
+- (1) : 以下と等価：
+    ```cpp
+    return sentinel&amp;lt;false&amp;gt;{ranges::end(base_)};
+    ```
+
+- (2) : 以下と等価：
+    ```cpp
+    return iterator&amp;lt;false&amp;gt;{*this, ranges::end(base_)};
+    ```
+
+- (3) : 以下と等価：
+    ```cpp
+    return sentinel&amp;lt;true&amp;gt;{ranges::end(base_)};
+    ```
+
+- (4) : 以下と等価：
+    ```cpp
+    return iterator&amp;lt;true&amp;gt;{*this, ranges::end(base_)};
+    ```
+
+
+## 例
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;string&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5};
+
+  std::ranges::transform_view r{vec, [](int i) { return std::to_string(i); }};
+
+  auto it = r.begin();
+  auto end_it = r.end();
+  while (it != end_it) {
+    std::string x = *it;
+    std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl;
+    ++it;
+  }
+}
+```
+* end[color ff0000]
+* begin[link begin.md]
+
+### 出力
+
+```
+1
+2
+3
+4
+5
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- transform_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/transform_view/op_constructor.html"/>
      <id>15c75ce0fc2fa8826cd2141d350b3ac22188975c:reference/ranges/transform_view/op_constructor.md</id>
      <updated>2025-05-30T17:25:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/transform_view/op_constructor.md b/reference/ranges/transform_view/op_constructor.md
new file mode 100644
index 000000000..464b0b6f7
--- /dev/null
+++ b/reference/ranges/transform_view/op_constructor.md
@@ -0,0 +1,64 @@
+# コンストラクタ
+* ranges[meta header]
+* std::ranges[meta namespace]
+* transform_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+transform_view()
+  requires default_initializable&amp;lt;V&amp;gt; &amp;amp;&amp;amp;
+           default_initializable&amp;lt;F&amp;gt; = default; // (1) C++20
+
+constexpr explicit
+  transform_view(V base, F fun);               // (2) C++20
+```
+
+## 概要
+
+[`transform_view`](../transform_view.md)オブジェクトを構築する。
+
+- (1) : デフォルト構築
+- (2) : 元となるviewと変換関数を指定して構築
+
+
+## 効果
+
+- (2) : メンバ変数`base_`を`std::move(base)`で、メンバ変数`fun_`を`std::move(fun)`で初期化する
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5};
+
+  std::ranges::transform_view view{vec, [](int x){ return x * 2; }};
+  for (const auto&amp;amp; x : view) {
+    std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* transform_view[color ff0000]
+
+### 出力
+```
+2
+4
+6
+8
+10
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- transform_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/transform_view/op_deduction_guide.html"/>
      <id>15c75ce0fc2fa8826cd2141d350b3ac22188975c:reference/ranges/transform_view/op_deduction_guide.md</id>
      <updated>2025-05-30T17:25:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/transform_view/op_deduction_guide.md b/reference/ranges/transform_view/op_deduction_guide.md
new file mode 100644
index 000000000..0d51b1dfa
--- /dev/null
+++ b/reference/ranges/transform_view/op_deduction_guide.md
@@ -0,0 +1,56 @@
+# 推論補助
+* ranges[meta header]
+* std::ranges[meta namespace]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;class R, class F&amp;gt;
+  transform_view(R&amp;amp;&amp;amp;, F) -&amp;gt; transform_view&amp;lt;views::all_t&amp;lt;R&amp;gt;, F&amp;gt;;
+}
+```
+
+## 概要
+
+[`transform_view`](../transform_view.md)クラステンプレートの型推論補助。
+
+この推論補助によって、元のRangeが暗黙的に[all view](../all.md)でラップされる。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;concepts&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4};
+  auto fun = [](int i) { return i * 2; };
+
+  std::ranges::transform_view r1{vec, fun};
+  static_assert(std::same_as&amp;lt;
+    decltype(r1),
+    std::ranges::transform_view&amp;lt;std::ranges::ref_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;, decltype(fun)&amp;gt;
+  &amp;gt;);
+
+  std::ranges::transform_view r2{std::vector&amp;lt;int&amp;gt;{1, 2}, fun};
+  static_assert(std::same_as&amp;lt;
+    decltype(r2),
+    std::ranges::transform_view&amp;lt;std::ranges::owning_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;, decltype(fun)&amp;gt;
+  &amp;gt;);
+}
+```
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>size -- transform_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/transform_view/size.html"/>
      <id>15c75ce0fc2fa8826cd2141d350b3ac22188975c:reference/ranges/transform_view/size.md</id>
      <updated>2025-05-30T17:25:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/transform_view/size.md b/reference/ranges/transform_view/size.md
new file mode 100644
index 000000000..c03171959
--- /dev/null
+++ b/reference/ranges/transform_view/size.md
@@ -0,0 +1,58 @@
+# size
+* ranges[meta header]
+* std::ranges[meta namespace]
+* transform_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr auto size()
+  requires sized_range&amp;lt;V&amp;gt;;       // (1) C++20
+
+constexpr auto size() const
+  requires sized_range&amp;lt;const V&amp;gt;; // (2) C++20
+```
+
+## 概要
+要素数を取得する。
+
+
+## 効果
+入力`view`（`V`）のオブジェクトを`base_`というメンバに保持するとして、以下と等価：
+
+```cpp
+return ranges::size(base_);
+```
+
+
+## 例
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5};
+  std::ranges::transform_view r{vec, [](int i) { return i * 2; }};
+
+  std::size_t n = r.size();
+  std::cout &amp;lt;&amp;lt; n &amp;lt;&amp;lt; std::endl;
+}
+```
+* size[color ff0000]
+
+### 出力
+```
+5
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>with_awaitable_senders -- execution/with_awaitable_senders: remove forbid chars</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/with_awaitable_senders.html"/>
      <id>a1eaff0ecb6591461ea27f6eb861a47fdb57d1d9:reference/execution/execution/with_awaitable_senders.md</id>
      <updated>2025-05-30T17:17:23+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/with_awaitable_senders.md b/reference/execution/execution/with_awaitable_senders.md
index 429e09102..ec76e23ad 100644
--- a/reference/execution/execution/with_awaitable_senders.md
+++ b/reference/execution/execution/with_awaitable_senders.md
@@ -173,7 +173,7 @@ value=42
 
 
 ## 関連項目
-- [`execution::​as_awaitable`](​as_awaitable.md.nolink)
+- [`execution::as_awaitable`](as_awaitable.md.nolink)
 - [コルーチン](/lang/cpp20/coroutines.md)
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>execution -- execution: with_awaitable_senders (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution.html"/>
      <id>a6d6258134dcbcbee4bbec9658d3edcfe772961c:reference/execution/execution.md</id>
      <updated>2025-05-30T17:05:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution.md b/reference/execution/execution.md
index 16b4448d7..e596e690b 100644
--- a/reference/execution/execution.md
+++ b/reference/execution/execution.md
@@ -152,7 +152,7 @@ Senderコンシューマは名前空間 `std::this_thread` で定義される。
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
 | [`execution::as_awaitable`](execution/as_awaitable.md.nolink) | Senderを[Awaitable型](/lang/cpp20/coroutines.md)へ変換 (customization point object) | C++26 |
-| [`execution::with_awaitable_senders`](execution/with_awaitable_senders.md.nolink) | [Promise型](/lang/cpp20/coroutines.md)の基底クラス (class template) | C++26 |
+| [`execution::with_awaitable_senders`](execution/with_awaitable_senders.md) | [Promise型](/lang/cpp20/coroutines.md)の基底クラス (class template) | C++26 |
 
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>read_env -- execution: with_awaitable_senders (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/read_env.html"/>
      <id>a6d6258134dcbcbee4bbec9658d3edcfe772961c:reference/execution/execution/read_env.md</id>
      <updated>2025-05-30T17:05:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/read_env.md b/reference/execution/execution/read_env.md
index 367586589..e93d649f3 100644
--- a/reference/execution/execution/read_env.md
+++ b/reference/execution/execution/read_env.md
@@ -15,7 +15,7 @@ namespace std::execution {
 `read_env`は、非同期動作の[開始(start)](start.md)時に接続先[Receiver](receiver.md)の[環境](../queryable.md)に対して[クエリオブジェクト](../queryable.md)で問い合わせ、読み取った値を[値完了関数](set_value.md)で送信するSenderファクトリである。
 
 クエリオブジェクトによるReceiver環境への問い合わせは`read_env`[Sender](sender.md)の構築時ではなく、Receiverと接続されたのち非同期動作が開始されるタイミングまで遅延される。
-[`let_value`](let_value.md)Senderアダプタと組み合わせたり、[Sender Awaitableなコルーチン](with_awaitable_senders.md.nolink)での`co_await`式によって、[Scheduler](get_scheduler.md)や[停止トークン](../get_stop_token.md)を読み取ることができる。
+[`let_value`](let_value.md)Senderアダプタと組み合わせたり、[Sender Awaitableなコルーチン](with_awaitable_senders.md)での`co_await`式によって、[Scheduler](get_scheduler.md)や[停止トークン](../get_stop_token.md)を読み取ることができる。
 
 
 ## 効果
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sender_adaptor_closure -- execution: with_awaitable_senders (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/sender_adaptor_closure.html"/>
      <id>a6d6258134dcbcbee4bbec9658d3edcfe772961c:reference/execution/execution/sender_adaptor_closure.md</id>
      <updated>2025-05-30T17:05:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/sender_adaptor_closure.md b/reference/execution/execution/sender_adaptor_closure.md
index e0b6ecaee..d92530aef 100644
--- a/reference/execution/execution/sender_adaptor_closure.md
+++ b/reference/execution/execution/sender_adaptor_closure.md
@@ -10,6 +10,7 @@ namespace std::execution {
   struct sender_adaptor_closure { };
 }
 ```
+* class-type[link class-type.md.nolink]
 
 ## 概要
 `sender_adaptor_closure`は、ユーザ定義のパイプ可能Senderアダプタクロージャオブジェクトの実装を補助するクラステンプレートである。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>single-sender-value-type -- execution: with_awaitable_senders (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/single-sender-value-type.html"/>
      <id>a6d6258134dcbcbee4bbec9658d3edcfe772961c:reference/execution/execution/single-sender-value-type.md</id>
      <updated>2025-05-30T17:05:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/single-sender-value-type.md b/reference/execution/execution/single-sender-value-type.md
new file mode 100644
index 000000000..9687b191d
--- /dev/null
+++ b/reference/execution/execution/single-sender-value-type.md
@@ -0,0 +1,35 @@
+# single-sender-value-type
+* execution[meta header]
+* type-alias[meta id-type]
+* std::execution[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+template&amp;lt;class Sndr, class Env&amp;gt;
+using single-sender-value-type = see below;  // exposition only
+```
+* see below[italic]
+
+## 概要
+`single-sender-value-type`は、実行制御ライブラリの仕様定義で用いられる説明専用のエイリアステンプレートである。
+
+型`Sndr`と`Env`に対して、`single-sender-value-type&amp;lt;Sndr, Env&amp;gt;`は下記のエイリアスとなる。
+
+- [`value_types_of_t`](value_types_of_t.md)`&amp;lt;Sndr, Env,` [`decay_t`](/reference/type_traits/decay.md)`,` [`type_identity_t`](/reference/type_traits/type_identity.md)`&amp;gt;`が適格であるならば、その型。
+- そうではなく、[`value_types_of_t`](value_types_of_t.md)`&amp;lt;Sndr, Env,` [`tuple`](/reference/tuple/tuple.md)`,` [`variant`](/reference/variant/variant.md)`&amp;gt;`が`variant&amp;lt;tuple&amp;lt;&amp;gt;&amp;gt;`もしくは`variant&amp;lt;&amp;gt;`ならば、`void`型。
+- [`value_types_of_t`](value_types_of_t.md)`&amp;lt;Sndr, Env,` [`decayed-tuple`](decayed-tuple.md)`,` [`type_identity_t`](/reference/type_traits/type_identity.md)&amp;gt;`が適格であるならば、その型。
+- そうでなければ、`single-sender-value-type&amp;lt;Sndr, Env&amp;gt;`は不適格。
+
+
+## バージョン
+### 言語
+- C++26
+
+
+## 関連項目
+- [`execution::stopped_as_optional`](stopped_as_optional.md)
+- [`sender-awaitable`](sender-awaitable.md.nolink)
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stopped_as_optional -- execution: with_awaitable_senders (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/stopped_as_optional.html"/>
      <id>a6d6258134dcbcbee4bbec9658d3edcfe772961c:reference/execution/execution/stopped_as_optional.md</id>
      <updated>2025-05-30T17:05:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/stopped_as_optional.md b/reference/execution/execution/stopped_as_optional.md
index 1f056d35f..7cbab481f 100644
--- a/reference/execution/execution/stopped_as_optional.md
+++ b/reference/execution/execution/stopped_as_optional.md
@@ -30,7 +30,7 @@ transform_sender(get-domain-early(sndr), make-sender(stopped_as_optional, {}, sn
 
 
 ### Senderアルゴリズムタグ `stopped_as_optional`
-説明用の式`sndr`と`env`に対して、型`Sndr`を`decltype((sndr))`、型`Env`を`decltype((env))`とする。[`sender-for`](sender-for.md)`&amp;lt;Sndr, stopped_as_optional_t&amp;gt; == false`、もしくは[`single-sender-value-type`](single-sender-value-type.md.nolink)`&amp;lt;Sndr, Env&amp;gt;`が不適格または`void`のとき、式`stopped_as_optional.transform_sender(sndr, env)`は不適格となる。
+説明用の式`sndr`と`env`に対して、型`Sndr`を`decltype((sndr))`、型`Env`を`decltype((env))`とする。[`sender-for`](sender-for.md)`&amp;lt;Sndr, stopped_as_optional_t&amp;gt; == false`、もしくは[`single-sender-value-type`](single-sender-value-type.md)`&amp;lt;Sndr, Env&amp;gt;`が不適格または`void`のとき、式`stopped_as_optional.transform_sender(sndr, env)`は不適格となる。
 
 そうでなければ、式`stopped_as_optional.transform_sender(sndr, env)`は下記と等価。
 
@@ -44,7 +44,7 @@ return let_stopped(
          }),
     []() noexcept { return just(optional&amp;lt;V&amp;gt;()); });
 ```
-* single-sender-value-type[link single-sender-value-type.md.nolink]
+* single-sender-value-type[link single-sender-value-type.md]
 * let_stopped[link let_stopped.md.nolink]
 * then[link then.md]
 * just[link just.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>with_awaitable_senders -- execution: with_awaitable_senders (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/with_awaitable_senders.html"/>
      <id>a6d6258134dcbcbee4bbec9658d3edcfe772961c:reference/execution/execution/with_awaitable_senders.md</id>
      <updated>2025-05-30T17:05:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/with_awaitable_senders.md b/reference/execution/execution/with_awaitable_senders.md
new file mode 100644
index 000000000..429e09102
--- /dev/null
+++ b/reference/execution/execution/with_awaitable_senders.md
@@ -0,0 +1,183 @@
+# with_awaitable_senders
+* execution[meta header]
+* class template[meta id-type]
+* std::execution[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::execution {
+  template&amp;lt;class-type Promise&amp;gt;
+  struct with_awaitable_senders {
+    template&amp;lt;class OtherPromise&amp;gt;
+      requires (!same_as&amp;lt;OtherPromise, void&amp;gt;)
+    void set_continuation(coroutine_handle&amp;lt;OtherPromise&amp;gt; h) noexcept;
+
+    coroutine_handle&amp;lt;&amp;gt; continuation() const noexcept { return continuation; }
+
+    coroutine_handle&amp;lt;&amp;gt; unhandled_stopped() noexcept {
+      return stopped-handler(continuation.address());
+    }
+
+    template&amp;lt;class Value&amp;gt;
+    see below await_transform(Value&amp;amp;&amp;amp; value);
+
+  private:
+    [[noreturn]] static coroutine_handle&amp;lt;&amp;gt;
+      default-unhandled-stopped(void*) noexcept {  // exposition only
+      terminate();
+    }
+
+    coroutine_handle&amp;lt;&amp;gt; continuation{};                       // exposition only
+    coroutine_handle&amp;lt;&amp;gt; (*stopped-handler)(void*) noexcept =  // exposition only
+      &amp;amp;default-unhandled-stopped;
+  };
+}
+```
+* class-type[link class-type.md.nolink]
+* terminate()[link /reference/exception/terminate.md]
+* coroutine_handle[link /reference/coroutine/coroutine_handle.md]
+* address()[link /reference/coroutine/coroutine_handle/address.md]
+* see below[italic]
+
+## 概要
+`with_awaitable_senders`は、[コルーチンPromise型](/lang/cpp20/coroutines.md)の基底クラスとして利用することで、[Sender](sender.md)を`co_await`演算子でAwait可能とするクラステンプレートである。
+
+また`unhandled_stopped`のデフォルト実装を提供し、Senderが[`set_stopped`](set_stopped.md)を呼び出して停止完了したとき、Await式からキャッチできない &amp;#34;停止&amp;#34; 例外が送出されたかのように取り扱う。
+
+
+## メンバ関数
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|-------|
+| `(constructor)` | コンストラクタ | C++26 |
+| `(destructor)` | デストラクタ | C++26 |
+| [`set_continuation`](with_awaitable_senders/set_continuation.md) | 継続ハンドラを設定する | C++26 |
+| `continuation` | 継続ハンドラを返す | C++26 |
+| `unhandled_stopped` | 停止ハンドラを返す | C++26 |
+| [`await_transform`](with_awaitable_senders/await_transform.md) | [`co_await`演算子](/lang/cpp20/coroutines.md)へアダプトしAwaitableオブジェクトを返す | C++26 |
+
+
+## 静的メンバ関数
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|-------|
+| `default-unhandled-stopped` | 説明専用のデフォルト停止ハンドラ | C++26 |
+
+
+## 例
+```cpp example
+#include &amp;lt;coroutine&amp;gt;
+#include &amp;lt;print&amp;gt;
+#include &amp;lt;execution&amp;gt;
+namespace ex = std::execution;
+
+template&amp;lt;typename T&amp;gt;
+class Lazy {
+public:
+  struct promise_type;
+  using value_type = T;
+  using handle_type = std::coroutine_handle&amp;lt;promise_type&amp;gt;;
+
+  struct promise_type : ex::with_awaitable_senders&amp;lt;promise_type&amp;gt; {
+    value_type value_;
+    auto get_return_object() { return Lazy{handle_type::from_promise(*this)}; }
+    auto initial_suspend() noexcept { return std::suspend_always{}; }
+    auto final_suspend() noexcept { return std::suspend_always{}; }
+    void unhandled_exception() { throw; }
+    void return_value(value_type v) noexcept { value_ = v; }
+  };
+
+private:
+  Lazy(handle_type h) : coro_{h} {}
+
+public:
+  Lazy(Lazy&amp;amp;&amp;amp; rhs)
+    : coro_{std::exchange(rhs.coro_, nullptr)} {}
+  Lazy&amp;amp; operator=(Lazy&amp;amp;&amp;amp; rhs) {
+    if (coro_) { std::exchange(coro_, nullptr).destroy(); }
+    std::swap(rhs.coro_, coro_);
+    return *this;
+  }
+  ~Lazy()
+    { if (coro_) { coro_.destroy(); } }
+
+  value_type get() {
+    assert(coro_);
+    if (!coro_.done()) {
+      coro_.resume();
+    }
+    return coro_.promise().value_;
+  }
+
+private:
+  handle_type coro_;
+};
+
+// SenderをAwait可能なコルーチン
+Lazy&amp;lt;int&amp;gt; coro(int n)
+{
+  std::println(&amp;#34;coro start&amp;#34;);
+  ex::sender auto sndr =
+    ex::just(n)
+    | ex::then([](int m){ return m * 3; });
+
+  // Senderを開始して値取得を待機
+  int val = co_await sndr;
+
+  std::println(&amp;#34;coro end&amp;#34;);
+  co_return val * 7;
+}
+
+int main()
+{
+  try {
+    auto task = coro(2);
+    std::println(&amp;#34;get&amp;#34;);
+    auto value = task.get();
+    std::println(&amp;#34;value={}&amp;#34;, value);
+  } catch (...) {
+    std::println(&amp;#34;&amp;lt;exception&amp;gt;&amp;#34;);
+  }
+}
+```
+* ex::with_awaitable_senders[color ff0000]
+* ex::sender[link sender.md]
+* ex::just[link just.md]
+* ex::then[link then.md]
+* std::coroutine_handle[link /reference/coroutine/coroutine_handle.md]
+* from_promise[link /reference/coroutine/coroutine_handle/from_promise.md]
+* destroy()[link /reference/coroutine/coroutine_handle/destroy.md]
+* done()[link /reference/coroutine/coroutine_handle/done.md]
+* resume()[link /reference/coroutine/coroutine_handle/resume.md]
+* promise()[link /reference/coroutine/coroutine_handle/promise.md]
+* std::suspend_always[link /reference/coroutine/suspend_always.md]
+
+### 出力
+```
+get
+coro start
+coro end
+value=42
+```
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution::​as_awaitable`](​as_awaitable.md.nolink)
+- [コルーチン](/lang/cpp20/coroutines.md)
+
+
+## 参照
+- [P3325R5 A Utility for Creating Execution Environments](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3325r5.html)
+
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>await_transform -- execution: with_awaitable_senders (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/with_awaitable_senders/await_transform.html"/>
      <id>a6d6258134dcbcbee4bbec9658d3edcfe772961c:reference/execution/execution/with_awaitable_senders/await_transform.md</id>
      <updated>2025-05-30T17:05:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/with_awaitable_senders/await_transform.md b/reference/execution/execution/with_awaitable_senders/await_transform.md
new file mode 100644
index 000000000..4127777e5
--- /dev/null
+++ b/reference/execution/execution/with_awaitable_senders/await_transform.md
@@ -0,0 +1,45 @@
+# await_transform
+* execution[meta header]
+* function template[meta id-type]
+* std::execution[meta namespace]
+* with_awaitable_senders[meta class]
+* cpp26[meta cpp]
+
+```cpp
+template&amp;lt;class Value&amp;gt;
+call-result-t&amp;lt;as_awaitable_t, Value, Promise&amp;amp;&amp;gt;
+  await_transform(Value&amp;amp;&amp;amp; value);
+```
+* call-result-t[link /reference/functional/call-result-t.md]
+* as_awaitable_t[link ../as_awaitable.md.nolink]
+
+## 概要
+コルーチンの[`co_await`演算子](/lang/cpp20/coroutines.md)にアダプトし、[`as_awaitable`](../as_awaitable.md.nolink)で変換したAwaitableオブジェクトを返す。
+
+
+## 効果
+下記と等価。
+
+```cpp
+return as_awaitable(std::forward&amp;lt;Value&amp;gt;(value), static_cast&amp;lt;Promise&amp;amp;&amp;gt;(*this));
+```
+* as_awaitable[link ../as_awaitable.md.nolink]
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution::as_awaitable`](../as_awaitable.md.nolink)
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>set_continuation -- execution: with_awaitable_senders (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/with_awaitable_senders/set_continuation.html"/>
      <id>a6d6258134dcbcbee4bbec9658d3edcfe772961c:reference/execution/execution/with_awaitable_senders/set_continuation.md</id>
      <updated>2025-05-30T17:05:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/with_awaitable_senders/set_continuation.md b/reference/execution/execution/with_awaitable_senders/set_continuation.md
new file mode 100644
index 000000000..e52034c95
--- /dev/null
+++ b/reference/execution/execution/with_awaitable_senders/set_continuation.md
@@ -0,0 +1,58 @@
+# set_continuation
+* execution[meta header]
+* function template[meta id-type]
+* std::execution[meta namespace]
+* with_awaitable_senders[meta class]
+* cpp26[meta cpp]
+
+```cpp
+template&amp;lt;class OtherPromise&amp;gt;
+  requires (!same_as&amp;lt;OtherPromise, void&amp;gt;)
+void set_continuation(coroutine_handle&amp;lt;OtherPromise&amp;gt; h) noexcept;
+```
+* coroutine_handle[link /reference/coroutine/coroutine_handle.md]
+
+## 概要
+継続処理のコルーチンハンドルを設定する。
+
+
+## テンプレートパラメータ制約
+`!`[`same_as`](/reference/concepts/same_as.md)`&amp;lt;OtherPromise, void&amp;gt;`
+
+
+## 効果
+下記と等価。
+
+```cpp
+continuation = h;
+if constexpr ( requires(OtherPromise&amp;amp; other) { other.unhandled_stopped(); } ) {
+  stopped-handler = [](void* p) noexcept -&amp;gt; coroutine_handle&amp;lt;&amp;gt; {
+    return coroutine_handle&amp;lt;OtherPromise&amp;gt;::from_address(p)
+      .promise().unhandled_stopped();
+  };
+} else {
+  stopped-handler = &amp;amp;default-unhandled-stopped;
+}
+```
+* coroutine_handle[link /reference/coroutine/coroutine_handle.md]
+* from_address[link /reference/coroutine/coroutine_handle/from_address.md]
+* promise()[link /reference/coroutine/coroutine_handle/promise.md]
+
+
+## 例外
+投げない
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>base -- filter_view::base : 等しい → 等価</title>
      <link href="https://cpprefjp.github.io/reference/ranges/filter_view/base.html"/>
      <id>8b6a865c87955b2ae276e89362e95dcb6b8940de:reference/ranges/filter_view/base.md</id>
      <updated>2025-05-30T15:54:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/filter_view/base.md b/reference/ranges/filter_view/base.md
index d9f3dac03..f65497439 100644
--- a/reference/ranges/filter_view/base.md
+++ b/reference/ranges/filter_view/base.md
@@ -18,8 +18,8 @@ constexpr V base() &amp;amp;&amp;amp;;                                      // (2)
 
 入力`view`（`V`）のオブジェクトを`base_`というメンバに保持するとして
 
-- (1) : `return base_;` と等しい
-- (2) : `return std::move(base_);` と等しい
+- (1) : `return base_;` と等価
+- (2) : `return std::move(base_);` と等価
 
 ## 例
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- filter_viewのコンストラクタ : 改行調整</title>
      <link href="https://cpprefjp.github.io/reference/ranges/filter_view/op_constructor.html"/>
      <id>fce3c6abf9f880e8ca54fd97a1eb8f8dc35eec09:reference/ranges/filter_view/op_constructor.md</id>
      <updated>2025-05-30T15:46:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/filter_view/op_constructor.md b/reference/ranges/filter_view/op_constructor.md
index f3c4002a5..a3441e273 100644
--- a/reference/ranges/filter_view/op_constructor.md
+++ b/reference/ranges/filter_view/op_constructor.md
@@ -6,9 +6,12 @@
 * cpp20[meta cpp]
 
 ```cpp
-filter_view() requires default_initializable&amp;lt;V&amp;gt; &amp;amp;&amp;amp; default_initializable&amp;lt;Pred&amp;gt; = default;    // (1)
+filter_view()
+  requires default_initializable&amp;lt;V&amp;gt; &amp;amp;&amp;amp;
+           default_initializable&amp;lt;Pred&amp;gt; = default; // (1) C++20
 
-constexpr explicit filter_view(V base, Pred pred);                                           // (2)
+constexpr explicit
+  filter_view(V base, Pred pred);                 // (2) C++20
 ```
 
 ## 概要
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
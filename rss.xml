<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2022-07-23T06:25:18.279446</updated>
  <id>0995180f-8bfd-46b7-af81-10049debd4fb</id>

  
    <entry>
      <title>operator== -- add missing</title>
      <link href="https://cpprefjp.github.io/reference/memory/allocator/op_equal.html"/>
      <id>f04988a625fe9ab6a883ee4a6337886ba4c77062:reference/memory/allocator/op_equal.md</id>
      <updated>2022-07-23T15:20:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/allocator/op_equal.md b/reference/memory/allocator/op_equal.md
index a40c87d29..3cfb146f0 100644
--- a/reference/memory/allocator/op_equal.md
+++ b/reference/memory/allocator/op_equal.md
@@ -4,13 +4,15 @@
 * function template[meta id-type]
 
 ```cpp
-// C++03
-template &amp;lt;class T1, class T2&amp;gt;
-bool operator==(const allocator&amp;lt;T1&amp;gt;&amp;amp;, const allocator&amp;lt;T2&amp;gt;&amp;amp;) throw();
-
-// C++11
-template &amp;lt;class T, class U&amp;gt;
-bool operator==(const allocator&amp;lt;T&amp;gt;&amp;amp;, const allocator&amp;lt;U&amp;gt;&amp;amp;) noexcept;
+namespace std {
+  // C++03
+  template &amp;lt;class T1, class T2&amp;gt;
+  bool operator==(const allocator&amp;lt;T1&amp;gt;&amp;amp;, const allocator&amp;lt;T2&amp;gt;&amp;amp;) throw();
+
+  // C++11
+  template &amp;lt;class T, class U&amp;gt;
+  bool operator==(const allocator&amp;lt;T&amp;gt;&amp;amp;, const allocator&amp;lt;U&amp;gt;&amp;amp;) noexcept;
+}
 ```
 
 ## 概要
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator!= -- add missing</title>
      <link href="https://cpprefjp.github.io/reference/memory/allocator/op_not_equal.html"/>
      <id>f04988a625fe9ab6a883ee4a6337886ba4c77062:reference/memory/allocator/op_not_equal.md</id>
      <updated>2022-07-23T15:20:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/allocator/op_not_equal.md b/reference/memory/allocator/op_not_equal.md
index 0dba1a2da..d819aa05f 100644
--- a/reference/memory/allocator/op_not_equal.md
+++ b/reference/memory/allocator/op_not_equal.md
@@ -4,13 +4,15 @@
 * function template[meta id-type]
 
 ```cpp
-// C++03
-template &amp;lt;class T1, class T2&amp;gt;
-bool operator!=(const allocator&amp;lt;T1&amp;gt;&amp;amp;, const allocator&amp;lt;T2&amp;gt;&amp;amp;) throw();
-
-// C++11
-template &amp;lt;class T, class U&amp;gt;
-bool operator!=(const allocator&amp;lt;T&amp;gt;&amp;amp;, const allocator&amp;lt;U&amp;gt;&amp;amp;) noexcept;
+namespace std {
+  // C++03
+  template &amp;lt;class T1, class T2&amp;gt;
+  bool operator!=(const allocator&amp;lt;T1&amp;gt;&amp;amp;, const allocator&amp;lt;T2&amp;gt;&amp;amp;) throw();
+
+  // C++11
+  template &amp;lt;class T, class U&amp;gt;
+  bool operator!=(const allocator&amp;lt;T&amp;gt;&amp;amp;, const allocator&amp;lt;U&amp;gt;&amp;amp;) noexcept;
+}
 ```
 
 ## 概要
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator+ -- add missing</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/op_plus.html"/>
      <id>f04988a625fe9ab6a883ee4a6337886ba4c77062:reference/string/basic_string/op_plus.md</id>
      <updated>2022-07-23T15:20:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/op_plus.md b/reference/string/basic_string/op_plus.md
index da8d2c48b..da716ec55 100644
--- a/reference/string/basic_string/op_plus.md
+++ b/reference/string/basic_string/op_plus.md
@@ -4,65 +4,67 @@
 * function template[meta id-type]
 
 ```cpp
-template &amp;lt;class charT, class traits, class Allocator&amp;gt;
-basic_string&amp;lt;charT, traits, Allocator&amp;gt;
-  operator+(const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; lhs,
-            const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; rhs); // (1)
-
-template &amp;lt;class charT, class traits, class Allocator&amp;gt;
-basic_string&amp;lt;charT, traits, Allocator&amp;gt;
-  operator+(basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; lhs,
-            const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; rhs); // (2) C++11 から
-
-template &amp;lt;class charT, class traits, class Allocator&amp;gt;
-basic_string&amp;lt;charT, traits, Allocator&amp;gt;
-  operator+(const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; lhs,
-            basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; rhs);      // (3) C++11 から
-
-template &amp;lt;class charT, class traits, class Allocator&amp;gt;
-basic_string&amp;lt;charT, traits, Allocator&amp;gt;
-  operator+(basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; lhs,
-            basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; rhs);      // (4) C++11 から
-
-template &amp;lt;class charT, class traits, class Allocator&amp;gt;
-basic_string&amp;lt;charT, traits, Allocator&amp;gt;
-  operator+(const charT* lhs,
-            const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; rhs); // (5)
-
-template &amp;lt;class charT, class traits, class Allocator&amp;gt;
-basic_string&amp;lt;charT, traits, Allocator&amp;gt;
-  operator+(const charT* lhs,
-            basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; rhs);      // (6) C++11 から
-
-template &amp;lt;class charT, class traits, class Allocator&amp;gt;
-basic_string&amp;lt;charT, traits, Allocator&amp;gt;
-  operator+(charT lhs,
-            const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; rhs); // (7)
-
-template &amp;lt;class charT, class traits, class Allocator&amp;gt;
-basic_string&amp;lt;charT, traits, Allocator&amp;gt;
-  operator+(charT lhs,
-            basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; rhs);      // (8) C++11 から
-
-template &amp;lt;class charT, class traits, class Allocator&amp;gt;
-basic_string&amp;lt;charT, traits, Allocator&amp;gt;
-  operator+(const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; lhs,
-            const charT* rhs);                                  // (9)
-
-template &amp;lt;class charT, class traits, class Allocator&amp;gt;
-basic_string&amp;lt;charT, traits, Allocator&amp;gt;
-  operator+(basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; lhs,
-            const charT* rhs);                                  // (10) C++11 から
-
-template &amp;lt;class charT, class traits, class Allocator&amp;gt;
-basic_string&amp;lt;charT, traits, Allocator&amp;gt;
-  operator+(const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; lhs,
-            charT rhs);                                         // (11)
-
-template &amp;lt;class charT, class traits, class Allocator&amp;gt;
-basic_string&amp;lt;charT, traits, Allocator&amp;gt;
-  operator+(basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; lhs,
-            charT rhs);                                         // (12) C++11 から
+namespace std {
+  template &amp;lt;class charT, class traits, class Allocator&amp;gt;
+  basic_string&amp;lt;charT, traits, Allocator&amp;gt;
+    operator+(const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; lhs,
+              const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; rhs); // (1)
+
+  template &amp;lt;class charT, class traits, class Allocator&amp;gt;
+  basic_string&amp;lt;charT, traits, Allocator&amp;gt;
+    operator+(basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; lhs,
+              const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; rhs); // (2) C++11 から
+
+  template &amp;lt;class charT, class traits, class Allocator&amp;gt;
+  basic_string&amp;lt;charT, traits, Allocator&amp;gt;
+    operator+(const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; lhs,
+              basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; rhs);      // (3) C++11 から
+
+  template &amp;lt;class charT, class traits, class Allocator&amp;gt;
+  basic_string&amp;lt;charT, traits, Allocator&amp;gt;
+    operator+(basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; lhs,
+              basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; rhs);      // (4) C++11 から
+
+  template &amp;lt;class charT, class traits, class Allocator&amp;gt;
+  basic_string&amp;lt;charT, traits, Allocator&amp;gt;
+    operator+(const charT* lhs,
+              const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; rhs); // (5)
+
+  template &amp;lt;class charT, class traits, class Allocator&amp;gt;
+  basic_string&amp;lt;charT, traits, Allocator&amp;gt;
+    operator+(const charT* lhs,
+              basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; rhs);      // (6) C++11 から
+
+  template &amp;lt;class charT, class traits, class Allocator&amp;gt;
+  basic_string&amp;lt;charT, traits, Allocator&amp;gt;
+    operator+(charT lhs,
+              const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; rhs); // (7)
+
+  template &amp;lt;class charT, class traits, class Allocator&amp;gt;
+  basic_string&amp;lt;charT, traits, Allocator&amp;gt;
+    operator+(charT lhs,
+              basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; rhs);      // (8) C++11 から
+
+  template &amp;lt;class charT, class traits, class Allocator&amp;gt;
+  basic_string&amp;lt;charT, traits, Allocator&amp;gt;
+    operator+(const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; lhs,
+              const charT* rhs);                                  // (9)
+
+  template &amp;lt;class charT, class traits, class Allocator&amp;gt;
+  basic_string&amp;lt;charT, traits, Allocator&amp;gt;
+    operator+(basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; lhs,
+              const charT* rhs);                                  // (10) C++11 から
+
+  template &amp;lt;class charT, class traits, class Allocator&amp;gt;
+  basic_string&amp;lt;charT, traits, Allocator&amp;gt;
+    operator+(const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; lhs,
+              charT rhs);                                         // (11)
+
+  template &amp;lt;class charT, class traits, class Allocator&amp;gt;
+  basic_string&amp;lt;charT, traits, Allocator&amp;gt;
+    operator+(basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; lhs,
+              charT rhs);                                         // (12) C++11 から
+}
 ```
 
 ## 概要
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin -- modify std::basic_string::begin. now specify C++ versions</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/begin.html"/>
      <id>1d6628e33a442ab8ae10cf111bfcae2cff2139b8:reference/string/basic_string/begin.md</id>
      <updated>2022-07-23T14:58:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/begin.md b/reference/string/basic_string/begin.md
index b1b2bb874..f9ee9f8f7 100644
--- a/reference/string/basic_string/begin.md
+++ b/reference/string/basic_string/begin.md
@@ -5,8 +5,11 @@
 * function[meta id-type]
 
 ```cpp
-iterator begin() noexcept;
-const_iterator begin() const noexcept;
+iterator begin();                      // (1) C++03
+iterator begin() noexcept;             // (1) C++11
+
+const_iterator begin() const;          // (2) C++03
+const_iterator begin() const noexcept; // (2) C++11
 ```
 
 ## 概要
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>substr -- add section about exception to std::string_view::substr.md</title>
      <link href="https://cpprefjp.github.io/reference/string_view/basic_string_view/substr.html"/>
      <id>1eace299bfc7e1a5b1672aabb19d2a23fe89c7a3:reference/string_view/basic_string_view/substr.md</id>
      <updated>2022-07-23T14:49:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string_view/basic_string_view/substr.md b/reference/string_view/basic_string_view/substr.md
index e6111a965..9f7941186 100644
--- a/reference/string_view/basic_string_view/substr.md
+++ b/reference/string_view/basic_string_view/substr.md
@@ -20,6 +20,10 @@ constexpr basic_string_view substr(size_type pos = 0, size_type n = npos) const;
 [`size()`](size.md) `- pos`と`n`うち、小さい方を`rlen`とし、`basic_string_view(`[`data()`](data.md) `+ pos, rlen)`を返す。
 
 
+## 例外
+`pos &amp;gt;` [`size()`](size.md)の場合、[`std::out_of_range`](/reference/stdexcept.md)例外を送出する。
+
+
 ## 例
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>max_exponent10 -- Update max_exponent10.md</title>
      <link href="https://cpprefjp.github.io/reference/limits/numeric_limits/max_exponent10.html"/>
      <id>8ece85df6624669b6d77095c59dd44d9d454e81e:reference/limits/numeric_limits/max_exponent10.md</id>
      <updated>2022-07-23T09:49:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/limits/numeric_limits/max_exponent10.md b/reference/limits/numeric_limits/max_exponent10.md
index dd44f0cc0..f0cb82875 100644
--- a/reference/limits/numeric_limits/max_exponent10.md
+++ b/reference/limits/numeric_limits/max_exponent10.md
@@ -13,7 +13,7 @@ static constexpr int max_exponent10;
 ```
 
 ## 概要
-浮動小数点数型において、型`T`の指数下限値を得る。  
+浮動小数点数型において、型`T`の指数上限値を得る。  
 基数10を`max_exponent`の値で累乗した値が、型`T`で表現可能な正規化された値となる最大の正の値。  
 浮動小数点数型以外は0になる。  
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>pea-sys</name>
        <email>49807271+pea-sys@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>max_exponent -- Update max_exponent.md</title>
      <link href="https://cpprefjp.github.io/reference/limits/numeric_limits/max_exponent.html"/>
      <id>7c0f28d6eef5eef42c5a8d911177405676e0dc00:reference/limits/numeric_limits/max_exponent.md</id>
      <updated>2022-07-23T09:48:51+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/limits/numeric_limits/max_exponent.md b/reference/limits/numeric_limits/max_exponent.md
index 938d4f69f..9a0e69216 100644
--- a/reference/limits/numeric_limits/max_exponent.md
+++ b/reference/limits/numeric_limits/max_exponent.md
@@ -13,7 +13,7 @@ static constexpr int max_exponent;
 ```
 
 ## 概要
-浮動小数点数型において、型`T`の指数下限値を得る。  
+浮動小数点数型において、型`T`の指数上限値を得る。  
 基数[`radix`](radix.md)を`max_exponent`の値で累乗した値が、型`T`で表現可能な正規化された値となる最大の正の値。  
 浮動小数点数型以外は0になる。  
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>pea-sys</name>
        <email>49807271+pea-sys@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="http://cpprefjp.github.io" />
  <updated>2015-08-05T15:29:19.427528</updated>
  <id>50139e40-e754-4966-a10c-bc0f03dd271c</id>

  
    <entry>
      <title>operator[] -- valarrayの添字演算子 : C++11でconst T&amp;を返すようになった経緯を追加</title>
      <link href="http://cpprefjp.github.io/reference/valarray/valarray/op_at.html"/>
      <id>9ba175fc313d8ba20b246ed6ab7c045621fb2b0a:reference/valarray/valarray/op_at.md</id>
      <updated>2015-08-05 15:29:04 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;valarray&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class valarray&#34;&gt;valarray::&lt;/span&gt;operator[]&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;T &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;[](&lt;a href=&#34;http://cpprefjp.github.io/reference/cstddef/size_t.html&#34;&gt;size_t&lt;/a&gt; n) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;                               &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) C++03&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;[](&lt;a href=&#34;http://cpprefjp.github.io/reference/cstddef/size_t.html&#34;&gt;size_t&lt;/a&gt; n) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;                        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) C++11&lt;/span&gt;

T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;[](&lt;a href=&#34;http://cpprefjp.github.io/reference/cstddef/size_t.html&#34;&gt;size_t&lt;/a&gt; n);                                    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;

valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;[](&lt;a href=&#34;http://cpprefjp.github.io/reference/valarray/slice.html&#34;&gt;slice&lt;/a&gt; ar) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;                     &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;
&lt;a href=&#34;http://cpprefjp.github.io/reference/valarray/slice_array.html&#34;&gt;slice_array&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;[](&lt;a href=&#34;http://cpprefjp.github.io/reference/valarray/slice.html&#34;&gt;slice&lt;/a&gt; ar);                        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4)&lt;/span&gt;

valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;[](&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/valarray/gslice.html&#34;&gt;gslice&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; ar) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;             &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (5)&lt;/span&gt;
&lt;a href=&#34;http://cpprefjp.github.io/reference/valarray/gslice_array.html&#34;&gt;gslice_array&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;[](&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/valarray/gslice.html&#34;&gt;gslice&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; ar);               &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (6)&lt;/span&gt;

valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;[](&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; mask) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (7)&lt;/span&gt;
&lt;a href=&#34;http://cpprefjp.github.io/reference/valarray/mask_array.html&#34;&gt;mask_array&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;[](&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; mask);       &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (8)&lt;/span&gt;

valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;[](&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstddef/size_t.html&#34;&gt;size_t&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; mask) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (9)&lt;/span&gt;
&lt;a href=&#34;http://cpprefjp.github.io/reference/valarray/indirect_array.html&#34;&gt;indirect_array&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;[](&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstddef/size_t.html&#34;&gt;size_t&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; mask); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (10)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;一部の要素を抽出する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(1), (2) : &lt;code&gt;*this&lt;/code&gt;に含まれる&lt;code&gt;n&lt;/code&gt;番目の要素への参照を取得する。&lt;/li&gt;
&lt;li&gt;(3), (4) : &lt;code&gt;*this&lt;/code&gt;に含まれる要素を、&lt;a href=&#34;http://cpprefjp.github.io/reference/valarray/slice.html&#34;&gt;&lt;code&gt;slice&lt;/code&gt;&lt;/a&gt;の条件に基いてスライスする。&lt;/li&gt;
&lt;li&gt;(5), (6) : &lt;code&gt;*this&lt;/code&gt;に含まれる要素を、&lt;a href=&#34;http://cpprefjp.github.io/reference/valarray/gslice.html&#34;&gt;&lt;code&gt;gslice&lt;/code&gt;&lt;/a&gt;の条件に基いてスライスする。&lt;/li&gt;
&lt;li&gt;(7), (8) : &lt;code&gt;*this&lt;/code&gt;に含まれる、&lt;code&gt;mask&lt;/code&gt;の&lt;code&gt;true&lt;/code&gt;となっている要素のみを抽出する。&lt;/li&gt;
&lt;li&gt;(9), (10) : &lt;code&gt;*this&lt;/code&gt;に含まれる、&lt;code&gt;mask&lt;/code&gt;に含まれるインデックス値の要素のみを抽出する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1), (2) :&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;*this&lt;/code&gt;に含まれる&lt;code&gt;n&lt;/code&gt;番目の要素への参照を返す。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;n &amp;gt;=&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/valarray/valarray/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt;の場合、その挙動は未定義。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(3) : &lt;code&gt;*this&lt;/code&gt;に含まれる要素を、&lt;a href=&#34;http://cpprefjp.github.io/reference/valarray/slice.html&#34;&gt;&lt;code&gt;slice&lt;/code&gt;&lt;/a&gt;の条件に基いてスライスする。このオーバーロードでは、条件一致した要素をコピー抽出した&lt;code&gt;valarray&lt;/code&gt;オブジェクトを返す。&lt;/li&gt;
&lt;li&gt;(4) : &lt;code&gt;*this&lt;/code&gt;に含まれる要素を、&lt;a href=&#34;http://cpprefjp.github.io/reference/valarray/slice.html&#34;&gt;&lt;code&gt;slice&lt;/code&gt;&lt;/a&gt;の条件に基いてスライスする。このオーバーロードでは、条件一致した要素への参照を管理する&lt;a href=&#34;http://cpprefjp.github.io/reference/valarray/slice_array.html&#34;&gt;&lt;code&gt;slice_array&lt;/code&gt;&lt;/a&gt;オブジェクトを返す。&lt;/li&gt;
&lt;li&gt;(5) : &lt;code&gt;*this&lt;/code&gt;に含まれる要素を、&lt;a href=&#34;http://cpprefjp.github.io/reference/valarray/gslice.html&#34;&gt;&lt;code&gt;gslice&lt;/code&gt;&lt;/a&gt;の条件に基いてスライスする。このオーバーロードでは、条件一致した要素をコピー抽出した&lt;code&gt;valarray&lt;/code&gt;オブジェクトを返す。&lt;/li&gt;
&lt;li&gt;(6) : &lt;code&gt;*this&lt;/code&gt;に含まれる要素を、&lt;a href=&#34;http://cpprefjp.github.io/reference/valarray/gslice.html&#34;&gt;&lt;code&gt;gslice&lt;/code&gt;&lt;/a&gt;の条件に基いてスライスする。このオーバーロードでは、条件一致した要素への参照を管理する&lt;a href=&#34;http://cpprefjp.github.io/reference/valarray/gslice_array.html&#34;&gt;&lt;code&gt;gslice_array&lt;/code&gt;&lt;/a&gt;オブジェクトを返す。&lt;/li&gt;
&lt;li&gt;(7) : &lt;code&gt;*this&lt;/code&gt;に含まれる、&lt;code&gt;mask&lt;/code&gt;の&lt;code&gt;true&lt;/code&gt;となっている要素のみを抽出する。このオーバーロードでは、条件一致した要素をコピー抽出した&lt;code&gt;valarray&lt;/code&gt;オブジェクトを返す。&lt;/li&gt;
&lt;li&gt;(8) : &lt;code&gt;*this&lt;/code&gt;に含まれる、&lt;code&gt;mask&lt;/code&gt;の&lt;code&gt;true&lt;/code&gt;となっている要素のみを抽出する。このオーバーロードでは、条件一致した要素への参照を管理する&lt;a href=&#34;http://cpprefjp.github.io/reference/valarray/mask_array.html&#34;&gt;&lt;code&gt;mask_array&lt;/code&gt;&lt;/a&gt;オブジェクトを返す。&lt;/li&gt;
&lt;li&gt;(9) : &lt;code&gt;*this&lt;/code&gt;に含まれる、&lt;code&gt;mask&lt;/code&gt;に含まれるインデックス値の要素のみを抽出する。このオーバーロードでは、条件一致した要素をコピー抽出した&lt;code&gt;valarray&lt;/code&gt;オブジェクトを返す。&lt;/li&gt;
&lt;li&gt;(10) : &lt;code&gt;*this&lt;/code&gt;に含まれる、&lt;code&gt;mask&lt;/code&gt;に含まれるインデックス値の要素のみを抽出する。このオーバーロードでは、条件一致した要素への参照を管理する&lt;a href=&#34;http://cpprefjp.github.io/reference/valarray/indirect_array.html&#34;&gt;&lt;code&gt;indirect_array&lt;/code&gt;&lt;/a&gt;オブジェクトを返す。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(7), (8) : &lt;a href=&#34;http://cpprefjp.github.io/reference/valarray/valarray/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt; &lt;code&gt;!= mask.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/valarray/valarray/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt;の場合、その挙動は未定義。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;cassert&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;numeric&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;valarray&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// n番目の要素へのconst左辺値参照を取得&lt;/span&gt;
  {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;};
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; v[&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;];
    assert(x &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// n番目の要素への非const左辺値参照を取得&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;};
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; v[&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;];
    assert(x &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 開始位置、要素数、何個置きに処理するかを指定して、&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 条件一致した要素をコピー抽出&lt;/span&gt;
  {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;};

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; start &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1u&lt;/span&gt;;  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 開始位置&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; length &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3u&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 要素数&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; stride &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;2u&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 何個置きに処理するか&lt;/span&gt;

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; v[std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;slice(start, length, stride)];

    assert(result.size() &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);
    assert(result[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);
    assert(result[&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;);
    assert(result[&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;);
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4)&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 開始位置、要素数、何個置きに処理するかを指定して、&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 条件一致した要素への参照を抽出&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;};

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; start &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1u&lt;/span&gt;;  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 開始位置&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; length &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3u&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 要素数&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; stride &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;2u&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 何個置きに処理するか&lt;/span&gt;

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;slice_array&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; v[std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;slice(start, length, stride)];

    result &lt;span style=&#34;color: #666666&#34;&gt;*=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, length); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 抽出した要素を書き換える&lt;/span&gt;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 参照元が書き換わっていることを確認&lt;/span&gt;
    assert(v[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
    assert(v[&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// result[0]&lt;/span&gt;
    assert(v[&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);
    assert(v[&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;8&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// result[1]&lt;/span&gt;
    assert(v[&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;);
    assert(v[&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;12&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// result[2]&lt;/span&gt;
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (5)&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 開始位置、要素数のシーケンス、何個置きに処理するかのシーケンスを指定して、&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 条件一致した要素をコピー抽出&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v_org(&lt;span style=&#34;color: #666666&#34;&gt;15&lt;/span&gt;);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iota(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(v_org), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;end(v_org), &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; v_org;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; start &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1u&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; lengths &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;3u&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2u&lt;/span&gt;};
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; strides &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;5u&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3u&lt;/span&gt;};

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; v[std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;gslice(start, lengths, strides)];

    assert(result[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
    assert(result[&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;); 
    assert(result[&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;);
    assert(result[&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;9&lt;/span&gt;);
    assert(result[&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;11&lt;/span&gt;);
    assert(result[&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;14&lt;/span&gt;);
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (6)&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 開始位置、要素数のシーケンス、何個置きに処理するかのシーケンスを指定して、&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 条件一致した要素への参照を抽出&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v(&lt;span style=&#34;color: #666666&#34;&gt;15&lt;/span&gt;);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iota(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(v), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;end(v), &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 0からの連番にする&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; start &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1u&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; lengths &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;3u&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2u&lt;/span&gt;};
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; strides &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;5u&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1u&lt;/span&gt;};

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;gslice_array&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; v[std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;gslice(start, lengths, strides)];

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 抽出した要素を99で埋める&lt;/span&gt;
    result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;99&lt;/span&gt;;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 参照元が書き換わっていることを確認する&lt;/span&gt;
    assert(v[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;);
    assert(v[&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;99&lt;/span&gt;);
    assert(v[&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;99&lt;/span&gt;);
    assert(v[&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);
    assert(v[&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;);
    assert(v[&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;);
    assert(v[&lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;99&lt;/span&gt;);
    assert(v[&lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;99&lt;/span&gt;);
    assert(v[&lt;span style=&#34;color: #666666&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;8&lt;/span&gt;);
    assert(v[&lt;span style=&#34;color: #666666&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;9&lt;/span&gt;);
    assert(v[&lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;);
    assert(v[&lt;span style=&#34;color: #666666&#34;&gt;11&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;99&lt;/span&gt;);
    assert(v[&lt;span style=&#34;color: #666666&#34;&gt;12&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;99&lt;/span&gt;);
    assert(v[&lt;span style=&#34;color: #666666&#34;&gt;13&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;13&lt;/span&gt;);
    assert(v[&lt;span style=&#34;color: #666666&#34;&gt;14&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;14&lt;/span&gt;);
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (7)&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 同じ要素数のbool配列を指定して、&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// bool配列のうち、trueの要素に対応する位置の要素をコピー抽出&lt;/span&gt;
  {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;};
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; mask &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;};

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; v[mask];

    assert(result.size() &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);
    assert(result[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
    assert(result[&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);
    assert(result[&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;);
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (8)&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 同じ要素数のbool配列を指定して、&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// bool配列のうち、trueの要素に対応する位置の要素への参照を抽出&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;};
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; mask &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;};

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mask_array&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; v[mask];

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 抽出した要素を99で埋める&lt;/span&gt;
    result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;99&lt;/span&gt;;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 参照元が書き換わっていることを確認する&lt;/span&gt;
    assert(v[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;99&lt;/span&gt;);
    assert(v[&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);
    assert(v[&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;99&lt;/span&gt;);
    assert(v[&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;);
    assert(v[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;99&lt;/span&gt;);
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (9)&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 抽出する要素のインデックス値からなる配列を指定して、&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 対応する位置の要素をコピー抽出&lt;/span&gt;
  {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;};
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; mask &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;};

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; v[mask];

    assert(result.size() &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);
    assert(result[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
    assert(result[&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);
    assert(result[&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;);
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (10)&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 抽出する要素のインデックス値からなる配列を指定して、&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 対応する位置の要素をコピー抽出&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;};
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; mask &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;};

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;indirect_array&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; v[mask];

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 抽出した要素を99で埋める&lt;/span&gt;
    result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;99&lt;/span&gt;;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 参照元が書き換わっていることを確認する&lt;/span&gt;
    assert(v[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;99&lt;/span&gt;);
    assert(v[&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);
    assert(v[&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;99&lt;/span&gt;);
    assert(v[&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;);
    assert(v[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;99&lt;/span&gt;);
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h3&gt;備考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;GCC 4.8.2時点のlibstdc++において、(8)と(10)のオーバーロードにおいて、一時オブジェクトのマスク配列を渡すと、ぶら下がり参照が発生する問題がある(&lt;a href=&#34;https://gcc.gnu.org/bugzilla/show_bug.cgi?id=63314&#34; target=&#34;_blank&#34;&gt;#Bug 63314&lt;/a&gt;, &lt;a href=&#34;http://stackoverflow.com/questions/25918764/mask-array-behavior-in-libstdc&#34; target=&#34;_blank&#34;&gt;mask_array behavior in libstdc++&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#389&#34; target=&#34;_blank&#34;&gt;LWG Issue 389. Const overload of &lt;code&gt;valarray::operator[]&lt;/code&gt; returns by value&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;(1)の戻り値の型が、C++03の&lt;code&gt;T&lt;/code&gt;から、C++11の&lt;code&gt;const T&amp;amp;&lt;/code&gt;に変更された経緯のレポート&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>minmax (C++11) -- minmax(_element)の経緯を追加</title>
      <link href="http://cpprefjp.github.io/reference/algorithm/minmax.html"/>
      <id>64a911bad73dd11fb8e56394e1c2525d39fe58ec:reference/algorithm/minmax.md</id>
      <updated>2015-08-05 15:18:39 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function template&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;minmax (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;gt;&lt;/span&gt; minmax(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; b);                         &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) C++11&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  constexpr &lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;gt;&lt;/span&gt; minmax(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; b);               &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) C++14&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Compare&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;gt;&lt;/span&gt; minmax(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; b, Compare comp);           &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) C++11&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Compare&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  constexpr &lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;gt;&lt;/span&gt; minmax(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; b, Compare comp); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) C++14&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T, T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; minmax(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; t);                                        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3) C++11&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  constexpr &lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T, T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; minmax(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; t);                              &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3) C++14&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Compare&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T, T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; minmax(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; t, Compare comp);                          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4) C++11&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Compare&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  constexpr &lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T, T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; minmax(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; t, Compare comp);                &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4) C++14&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;同じ型の2つの値、もしくは&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;&lt;code&gt;initializer_list&lt;/code&gt;&lt;/a&gt;によるN個の値のうち、最小値と最大値の組を取得する。&lt;/p&gt;
&lt;p&gt;最後の引数&lt;code&gt;comp&lt;/code&gt;は、2項の述語関数オブジェクトであり、これを使用して比較演算をカスタマイズすることができる。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;型&lt;code&gt;T&lt;/code&gt;が&lt;code&gt;operator&amp;lt;&lt;/code&gt;による比較が可能であること。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;&lt;code&gt;initializer_list&lt;/code&gt;&lt;/a&gt;バージョンはそれに加えて、要素数が1以上であり、&lt;code&gt;T&lt;/code&gt;がコピーコンストラクト可能であること。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;first&lt;/code&gt;が最小値、&lt;code&gt;second&lt;/code&gt;が最大値となる&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;&lt;code&gt;pair&lt;/code&gt;&lt;/a&gt;オブジェクト&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2値比較バージョンは1操作。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;initializer_list&lt;/code&gt;バージョンは高々&lt;code&gt;(3/2) * t.size()&lt;/code&gt;回の述語適用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;cassert&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;algorithm&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;functional&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; result1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;minmax(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);
  assert(result1.first &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; result1.second &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; result2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;minmax(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;greater&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;());
  assert(result2.first &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; result2.second &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; result3 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;minmax({&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;});
  assert(result3.first &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; result3.second &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; result4 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;minmax({&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;}, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;greater&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;());
  assert(result4.first &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; result4.second &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;実装例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;gt;&lt;/span&gt; minmax(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; b)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; b &lt;span style=&#34;color: #666666&#34;&gt;?&lt;/span&gt;
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;gt;&lt;/span&gt;(a, b) &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt;
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;gt;&lt;/span&gt;(b, a);
}

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Compare&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;gt;&lt;/span&gt; minmax(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; b, Compare comp)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; comp(a, b) &lt;span style=&#34;color: #666666&#34;&gt;?&lt;/span&gt;
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;gt;&lt;/span&gt;(a, b) &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt;
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;gt;&lt;/span&gt;(b, a);
}

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T, T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; minmax(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;initializer_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; init)
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&lt;/span&gt; p &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;minmax_element(init.begin(), init.end());
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;p.first, &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;p.second);
}

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Compare&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T, T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; minmax(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;initializer_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; init, Compare comp)
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&lt;/span&gt; p &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;minmax_element(init.begin(), init.end(), comp);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;p.first, &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;p.second);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1840.pdf&#34; target=&#34;_blank&#34;&gt;N1840 C++0x Proposal: Function template &lt;code&gt;std::minmax&lt;/code&gt; and / or algorithm &lt;code&gt;std::minmax_element&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n1990.htm&#34; target=&#34;_blank&#34;&gt;N1990 Proposed Text for &lt;code&gt;minmax&lt;/code&gt; (N1840)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2551.pdf&#34; target=&#34;_blank&#34;&gt;N2551 A Variadic &lt;code&gt;std::min(T, ...)&lt;/code&gt; for the C++ Standard Library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2772.pdf&#34; target=&#34;_blank&#34;&gt;N2772 Variadic functions: Variadic templates or initializer lists? -- Revision 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cplusplus.github.io/LWG/lwg-defects.html#2350&#34; target=&#34;_blank&#34;&gt;LWG2350 - min, max, and minmax should be constexpr&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>minmax_element (C++11) -- minmax(_element)の経緯を追加</title>
      <link href="http://cpprefjp.github.io/reference/algorithm/minmax_element.html"/>
      <id>64a911bad73dd11fb8e56394e1c2525d39fe58ec:reference/algorithm/minmax_element.md</id>
      <updated>2015-08-05 15:18:39 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function template&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;minmax_element (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ForwardIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;ForwardIterator, ForwardIterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
    minmax_element(ForwardIterator first, ForwardIterator last);

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ForwardIterator&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Compare&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;ForwardIterator, ForwardIterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
    minmax_element(ForwardIterator first, ForwardIterator last, Compare comp);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;[first, last)&lt;/code&gt; の範囲において、最小要素を指すイテレータと最大要素を指すイテレータの組を取得する。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;operator&amp;lt;&lt;/code&gt; もしくは &lt;code&gt;comp&lt;/code&gt; を比較基準とした際の、最小の要素を指すイテレータを &lt;code&gt;first&lt;/code&gt;、最大の要素を指すイテレータを &lt;code&gt;second&lt;/code&gt; に持つ &lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;&lt;code&gt;pair&lt;/code&gt;&lt;/a&gt; オブジェクト&lt;br /&gt;
ただし、&lt;code&gt;first == last&lt;/code&gt; の場合には、&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/make_pair.html&#34;&gt;&lt;code&gt;make_pair&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(first, first)&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;n&lt;/code&gt; を範囲の要素数とする場合、&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/max.html&#34;&gt;&lt;code&gt;max&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(3(n / 2) - 1, 0)&lt;/code&gt; 回の述語適用を行う。&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;comp&lt;/code&gt; は 2 引数の関数オブジェクトで、1 番目の引数が 2 番目の引数「より小さい」場合に &lt;code&gt;true&lt;/code&gt; を、そうでない場合に &lt;code&gt;false&lt;/code&gt; を返すものとして扱われる。&lt;/li&gt;
&lt;li&gt;最小の要素が複数ある場合、&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/min_element.html&#34;&gt;&lt;code&gt;min_element&lt;/code&gt;&lt;/a&gt; と同様、最も左側（&lt;code&gt;first&lt;/code&gt; に近い方）にある要素を指すイテレータを返す。&lt;br /&gt;
    一方、最大の要素が複数ある場合、&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/max_element.html&#34;&gt;&lt;code&gt;max_element&lt;/code&gt;&lt;/a&gt; と&lt;strong&gt;異なり&lt;/strong&gt;、最も右側（&lt;code&gt;last&lt;/code&gt; に近い方）にあるイテレータを返す。&lt;/li&gt;
&lt;li&gt;最小の要素と最大の要素の両方が必要な場合には、&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/min_element.html&#34;&gt;&lt;code&gt;min_element&lt;/code&gt;&lt;/a&gt; と &lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/max_element.html&#34;&gt;&lt;code&gt;max_element&lt;/code&gt;&lt;/a&gt; をそれぞれ呼び出すよりも本関数を呼び出した方が、計算量の点で効率的である。&lt;br /&gt;
    ただし、上記の通り最大の要素に関しては &lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/max_element.html&#34;&gt;&lt;code&gt;max_element&lt;/code&gt;&lt;/a&gt; と結果が異なる可能性があるため、注意する必要がある。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;cassert&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;algorithm&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;};

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;minmax_element&lt;/span&gt;(v.begin(), v.end());
  assert(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;i.first &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
  assert(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;i.second &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;);

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; j &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;minmax_element&lt;/span&gt;(v.begin(), v.end(), [](&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; a, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; b) {
                                &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; b;
                              });
  assert(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;j.first &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;);
  assert(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;j.second &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;実装例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ForwardIterator&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Compare&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;ForwardIterator, ForwardIterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
minmax_element(ForwardIterator first, ForwardIterator last, Compare comp)
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 結果用オブジェクト&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;ForwardIterator, ForwardIterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; result(first, first);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 範囲の要素数が 0 か 1 だったら、そのまま result を返す&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (first &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; last &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;first &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; last) {
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 最初の 2 個を比較して、小さい方を .first に、大きい方を .second に設定&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (comp(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;first, &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;result.first))
      result.first &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; first;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt;
      result.second &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; first;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 残りの要素を 2 個ずつ繰り返し&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;first &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; last) {
      ForwardIterator prev &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; first;

      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 残りの要素が 1 個しか無かったら、.first と .second の両方の要素と比較して、&lt;/span&gt;
      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 必要に応じで結果を更新後、ループを抜ける&lt;/span&gt;
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;first &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; last) {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (comp(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;prev, &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;result.first))
          result.first &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; prev;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;comp(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;prev, &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;result.second))
          result.second &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; prev;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;break&lt;/span&gt;;
      }

      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 残りの要素が 2 個以上あれば、まずその 2 個を比較してから、小さい方を .first と、&lt;/span&gt;
      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 大きい方を .second と比較して、必要に応じて結果を更新&lt;/span&gt;
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (comp(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;first, &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;prev)) {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (comp(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;first, &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;result.first))
          result.first &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; first;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;comp(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;prev, &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;result.second))
          result.second &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; prev;
      } &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (comp(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;prev, &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;result.first))
          result.first &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; prev;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;comp(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;first, &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;result.second))
          result.second &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; first;
      }
    }
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; result;
}

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// operator&amp;lt; 用の関数オブジェクト（std::less は特殊化されているかもしれないので）&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; less_inner {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;()(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; lhs, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; rhs) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt;(lhs &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; rhs); }
};

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ForwardIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;inline&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;ForwardIterator, ForwardIterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
minmax_element(ForwardIterator first, ForwardIterator last)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;minmax_element(first, last, less_inner());
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1840.pdf&#34; target=&#34;_blank&#34;&gt;N1840 C++0x Proposal: Function template &lt;code&gt;std::minmax&lt;/code&gt; and / or algorithm &lt;code&gt;std::minmax_element&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n1990.htm&#34; target=&#34;_blank&#34;&gt;N1990 Proposed Text for &lt;code&gt;minmax&lt;/code&gt; (N1840)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#715&#34; target=&#34;_blank&#34;&gt;LWG Issue 715. &lt;code&gt;minmax_element&lt;/code&gt; complexity is too lax&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>digits10 -- numeric_limits::digits10の経緯を追加</title>
      <link href="http://cpprefjp.github.io/reference/limits/numeric_limits/digits10.html"/>
      <id>e1fd4a3239fbc4ff767ebd55a6d8cfc0e58a6479:reference/limits/numeric_limits/digits10.md</id>
      <updated>2015-08-05 15:15:25 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;variable&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;limits&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class numeric_limits&#34;&gt;numeric_limits::&lt;/span&gt;digits10&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++03&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; digits10;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;static&lt;/span&gt; constexpr &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; digits10;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;10進数を型&lt;code&gt;T&lt;/code&gt;の値に変換し、また10進数に戻すことを考える。&lt;br /&gt;
&lt;code&gt;digits10&lt;/code&gt;は、10進でn桁の「任意の」数に上の変換を行った場合値が変わらないようなnのうち、最大のものを表す。&lt;/p&gt;
&lt;p&gt;ただし、&lt;code&gt;T&lt;/code&gt;が整数型の場合は元の「任意の」数は整数に限る。&lt;br /&gt;
また、浮動小数点数の場合は小数でもよいが、浮動小数点数に変換したときに指数部が巨大になって&lt;code&gt;T&lt;/code&gt;で表せなくなったり、非正規化数になったりするような数は除外して考える。&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;is_specialized == false&lt;/code&gt;の場合は&lt;code&gt;0&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;対応するマクロを次の表に挙げる。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;型&lt;/th&gt;
&lt;th&gt;対応するマクロ&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;float&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cfloat/flt_dig.html&#34;&gt;&lt;code&gt;FLT_DIG&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;double&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cfloat/dbl_dig.html&#34;&gt;&lt;code&gt;DBL_DIG&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;long double&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cfloat/ldbl_dig.html&#34;&gt;&lt;code&gt;LDBL_DIG&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;limits&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  constexpr &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;numeric_limits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;digits10&lt;/span&gt;;
  constexpr &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; d &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;numeric_limits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;digits10&lt;/span&gt;;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; d &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力例&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;9
15
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1822.pdf&#34; target=&#34;_blank&#34;&gt;N1822 A Proposal to add a max significant decimal digits value to the C++ Standard Library Numeric limits&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>equal_range -- lower_bound, upper_bound, equal_range : C++11から計算量が見直された経緯を追加</title>
      <link href="http://cpprefjp.github.io/reference/algorithm/equal_range.html"/>
      <id>3e1b4c1483f86477aa535021c98477b9ae6a3bac:reference/algorithm/equal_range.md</id>
      <updated>2015-08-05 15:10:16 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function template&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;equal_range&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ForwardIterator&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;ForwardIterator, ForwardIterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; equal_range(
      ForwardIterator first, ForwardIterator last, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; value); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ForwardIterator&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Compare&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;ForwardIterator, ForwardIterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; equal_range(
      ForwardIterator first, ForwardIterator last, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; value,  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;
      Compare comp);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/lower_bound.html&#34;&gt;&lt;code&gt;lower_bound()&lt;/code&gt;&lt;/a&gt;と&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/upper_bound.html&#34;&gt;&lt;code&gt;upper_bound()&lt;/code&gt;&lt;/a&gt;の結果を組で取得する。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;[first,last)&lt;/code&gt; の要素 &lt;code&gt;e&lt;/code&gt; は &lt;code&gt;e &amp;lt; value&lt;/code&gt; および &lt;code&gt;!(value &amp;lt; e)&lt;/code&gt; 、あるいは &lt;code&gt;comp(e, value)&lt;/code&gt; および &lt;code&gt;!comp(value, e)&lt;/code&gt; によって&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm.html#sequence-is-partitioned&#34;&gt;区分化&lt;/a&gt;されていなければならない。&lt;/p&gt;
&lt;p&gt;また、&lt;code&gt;[first, last)&lt;/code&gt; の要素 &lt;code&gt;e&lt;/code&gt; は全て暗黙に、&lt;code&gt;e &amp;lt; value&lt;/code&gt; が &lt;code&gt;!(value &amp;lt; e)&lt;/code&gt; または &lt;code&gt;comp(e, value)&lt;/code&gt; が &lt;code&gt;!comp(value, e)&lt;/code&gt; を意味している必要がある。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : &lt;a href=&#34;http://cpprefjp.github.io/reference/utility/make_pair.html&#34;&gt;&lt;code&gt;make_pair&lt;/code&gt;&lt;/a&gt;(&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/lower_bound.html&#34;&gt;&lt;code&gt;lower_bound&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(first, last, value),&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/upper_bound.html&#34;&gt;&lt;code&gt;upper_bound&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(first, last, value))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(2) : &lt;a href=&#34;http://cpprefjp.github.io/reference/utility/make_pair.html&#34;&gt;&lt;code&gt;make_pair&lt;/code&gt;&lt;/a&gt;(&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/lower_bound.html&#34;&gt;&lt;code&gt;lower_bound&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(first, last, value, comp),&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/upper_bound.html&#34;&gt;&lt;code&gt;upper_bound&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(first, last, value, comp))&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;最大で 2 * log2(&lt;code&gt;last - first&lt;/code&gt;) + O(1) 回の比較を行う&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;algorithm&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;};

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sort(v.begin(), v.end());

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 3以上の要素と、3より大きい要素を二分探索で検索&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;equal_range&lt;/span&gt;(v.begin(), v.end(), &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;result.first &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;result.second &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;3
4
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#384&#34; target=&#34;_blank&#34;&gt;LWG Issue 384. &lt;code&gt;equal_range&lt;/code&gt; has unimplementable runtime complexity&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>lower_bound -- lower_bound, upper_bound, equal_range : C++11から計算量が見直された経緯を追加</title>
      <link href="http://cpprefjp.github.io/reference/algorithm/lower_bound.html"/>
      <id>3e1b4c1483f86477aa535021c98477b9ae6a3bac:reference/algorithm/lower_bound.md</id>
      <updated>2015-08-05 15:10:16 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function template&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;lower_bound&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ForwardIterator&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  ForwardIterator lower_bound(ForwardIterator first, ForwardIterator last,
                              &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; value);

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ForwardIterator&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Compare&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  ForwardIterator lower_bound(ForwardIterator first, ForwardIterator last,
                              &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; value, Compare comp);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;指定された要素以上の値が現れる最初の位置のイテレータを取得する&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++03 まで&lt;ul&gt;
&lt;li&gt;&lt;code&gt;first&lt;/code&gt;、&lt;code&gt;last&lt;/code&gt; は前方向イテレータの要件を満たすこと。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;comp&lt;/code&gt; は 2 引数の関数オブジェクトで、結果の型は &lt;code&gt;bool&lt;/code&gt; 型に変換可能であること。また、引数に非 &lt;code&gt;const&lt;/code&gt; の関数を適用しないこと。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;T&lt;/code&gt; は　&lt;code&gt;LessThanComparable&lt;/code&gt; であること。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;operator&amp;lt;&lt;/code&gt; または &lt;code&gt;comp&lt;/code&gt; は「&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm.html#strict-weak-ordering&#34;&gt;狭義の弱順序&lt;/a&gt;」であること。&lt;/li&gt;
&lt;li&gt;範囲 &lt;code&gt;[first, last)&lt;/code&gt; は &lt;code&gt;operator&amp;lt;&lt;/code&gt; または &lt;code&gt;comp&lt;/code&gt; を基準として昇順に並んでいること。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;C++11 から  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;first&lt;/code&gt;、&lt;code&gt;last&lt;/code&gt; は前方向イテレータの要件を満たすこと。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;comp&lt;/code&gt; は 2 引数の関数オブジェクトで、結果の型は &lt;code&gt;bool&lt;/code&gt; 型に変換可能であること。また、引数に非 &lt;code&gt;const&lt;/code&gt; の関数を適用しないこと。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[first,last)&lt;/code&gt; の要素 &lt;code&gt;e&lt;/code&gt; は &lt;code&gt;e &amp;lt; value&lt;/code&gt; または &lt;code&gt;comp(e, value)&lt;/code&gt; によって&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm.html#sequence-is-partitioned&#34;&gt;区分化&lt;/a&gt;されていること。
    つまり、&lt;code&gt;e &amp;lt; value&lt;/code&gt; または &lt;code&gt;comp(e, value)&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; となる全ての要素 &lt;code&gt;e&lt;/code&gt; は、&lt;code&gt;false&lt;/code&gt; となる全ての要素よりも左側（&lt;code&gt;first&lt;/code&gt; に近い方）になければならない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;[first, last]&lt;/code&gt; 内のイテレータ &lt;code&gt;i&lt;/code&gt; のうち、以下の条件を満たす、最も右側（&lt;code&gt;first&lt;/code&gt; から遠い方）のもの&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[first, i)&lt;/code&gt; 内の全てのイテレータ &lt;code&gt;j&lt;/code&gt; が &lt;code&gt;*j &amp;lt; value&lt;/code&gt; または &lt;code&gt;comp(*j, value) != false&lt;/code&gt; である&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;（つまり、&lt;code&gt;value&lt;/code&gt; 以上の要素のうち最初のものを指すイテレータ。&lt;code&gt;value&lt;/code&gt; 以上の要素が無ければ &lt;code&gt;last&lt;/code&gt;）&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;最大で log2(&lt;code&gt;last - first&lt;/code&gt;) + O(1) 回の比較を行う&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;本関数は、本質的に C++11 で追加された &lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/partition_point.html&#34;&gt;&lt;code&gt;partition_point&lt;/code&gt;&lt;/a&gt; と同一である。&lt;br /&gt;
    具体的には、&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/partition_point.html&#34;&gt;&lt;code&gt;partition_point&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(first, last, [value](const T&amp;amp; e) { return e &amp;lt; value; })&lt;/code&gt;、あるいは、&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/partition_point.html&#34;&gt;&lt;code&gt;partition_point&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(first, last, [value, comp](const T&amp;amp; e) { return comp(e, value); })&lt;/code&gt; とすることで同一の結果が得られる。&lt;/li&gt;
&lt;li&gt;本関数の要件は、上記の通り C++03 までの方が C++11 よりも厳しい。
    しかし、本アルゴリズムの特性上、処理系が C++03 までにしか準拠していない場合でも、昇順に並んでいなくても正常に動作する可能性は高いものと思われる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector.html&#34;&gt;vector&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm.html&#34;&gt;algorithm&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &lt;span style=&#34;color:#ff0000&#34;&gt;lower_bound&lt;/span&gt; で 4 以上の要素の位置を検索する場合、&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 4 より小さい物と 4 以上の物がその順に並んでいれば、&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 必ずしもソートされている必要はない。&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector.html&#34;&gt;vector&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;};

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 4以上の要素を二分探索で検索&lt;/span&gt;
  decltype(v)&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator it &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;lower_bound&lt;/span&gt;(v.&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/begin.html&#34;&gt;begin&lt;/a&gt;(), v.&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/end.html&#34;&gt;end&lt;/a&gt;(), &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;);

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, pos = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (it &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; v.&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/begin.html&#34;&gt;begin&lt;/a&gt;()) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;4, pos = 2
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;実装例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ForwardIterator&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Compare&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
ForwardIterator
lower_bound(ForwardIterator first, ForwardIterator last, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; value, Compare comp)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/iterator_traits.html&#34;&gt;iterator_traits&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;ForwardIterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;difference_type diff;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (diff len &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/distance.html&#34;&gt;distance&lt;/a&gt;(first, last); len &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; ) {
    diff half &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; len &lt;span style=&#34;color: #666666&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;;
    ForwardIterator mid &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; first;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/advance.html&#34;&gt;advance&lt;/a&gt;(mid, half);
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (comp(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;mid, value)) {
      len &lt;span style=&#34;color: #666666&#34;&gt;-=&lt;/span&gt; half &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;;
      first &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;mid;
    } &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
      len &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; half;
    }
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; first;
}

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// operator&amp;lt; 用の関数オブジェクト（std::less は特殊化されているかもしれないので）&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; less_inner {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;U&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;()(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; lhs, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; U&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; rhs) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt;(lhs &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; rhs); }
};

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ForwardIterator&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;inline&lt;/span&gt; ForwardIterator
lower_bound(ForwardIterator first, ForwardIterator last, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; value)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;lower_bound(first, last, value, less_inner());
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#384&#34; target=&#34;_blank&#34;&gt;LWG Issue 384. &lt;code&gt;equal_range&lt;/code&gt; has unimplementable runtime complexity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2150&#34; target=&#34;_blank&#34;&gt;LWG Issue 2150. Unclear specification of &lt;code&gt;find_end&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>upper_bound -- lower_bound, upper_bound, equal_range : C++11から計算量が見直された経緯を追加</title>
      <link href="http://cpprefjp.github.io/reference/algorithm/upper_bound.html"/>
      <id>3e1b4c1483f86477aa535021c98477b9ae6a3bac:reference/algorithm/upper_bound.md</id>
      <updated>2015-08-05 15:10:16 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function template&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;upper_bound&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ForwardIterator&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  ForwardIterator upper_bound(ForwardIterator first, ForwardIterator last,
                              &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; value);

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ForwardIterator&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Compare&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  ForwardIterator upper_bound(ForwardIterator first, ForwardIterator last,
                              &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; value, Compare comp);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;指定された要素より大きい値が現れる最初の位置のイテレータを取得する&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++03 まで&lt;ul&gt;
&lt;li&gt;&lt;code&gt;first&lt;/code&gt;、&lt;code&gt;last&lt;/code&gt; は前方向イテレータの要件を満たすこと。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;comp&lt;/code&gt; は 2 引数の関数オブジェクトで、結果の型は &lt;code&gt;bool&lt;/code&gt; 型に変換可能であること。また、引数に非 &lt;code&gt;const&lt;/code&gt; の関数を適用しないこと。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;T&lt;/code&gt; は　&lt;code&gt;LessThanComparable&lt;/code&gt; であること。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;operator&amp;lt;&lt;/code&gt; または &lt;code&gt;comp&lt;/code&gt; は「&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm.html#strict-weak-ordering&#34;&gt;狭義の弱順序&lt;/a&gt;」であること。&lt;/li&gt;
&lt;li&gt;範囲 &lt;code&gt;[first, last)&lt;/code&gt; は &lt;code&gt;operator&amp;lt;&lt;/code&gt; または &lt;code&gt;comp&lt;/code&gt; を基準として昇順に並んでいること。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;C++11 から&lt;ul&gt;
&lt;li&gt;&lt;code&gt;first&lt;/code&gt;、&lt;code&gt;last&lt;/code&gt; は前方向イテレータの要件を満たすこと。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;comp&lt;/code&gt; は 2 引数の関数オブジェクトで、結果の型は &lt;code&gt;bool&lt;/code&gt; 型に変換可能であること。また、引数に非 &lt;code&gt;const&lt;/code&gt; の関数を適用しないこと。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[first,last)&lt;/code&gt; の要素 &lt;code&gt;e&lt;/code&gt; は &lt;code&gt;!(value &amp;lt; e)&lt;/code&gt; または &lt;code&gt;!comp(value, e)&lt;/code&gt; によって&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm.html#sequence-is-partitioned&#34;&gt;区分化&lt;/a&gt;されていること。&lt;br /&gt;
    つまり、&lt;code&gt;!(value &amp;lt; e)&lt;/code&gt; または &lt;code&gt;!comp(value, e)&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; となる全ての要素 &lt;code&gt;e&lt;/code&gt; は、&lt;code&gt;false&lt;/code&gt; となる全ての要素よりも左側（&lt;code&gt;first&lt;/code&gt; に近い方）になければならない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;[first, last]&lt;/code&gt; 内のイテレータ &lt;code&gt;i&lt;/code&gt; のうち、以下の条件を満た、最も右側（&lt;code&gt;first&lt;/code&gt; から遠い方）のもの&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[first, i)&lt;/code&gt; 内の全てのイテレータ &lt;code&gt;j&lt;/code&gt; が &lt;code&gt;!(value &amp;lt; *j)&lt;/code&gt; または &lt;code&gt;comp(value, *j) == false&lt;/code&gt; である&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;（つまり、&lt;code&gt;value&lt;/code&gt; より大きい要素のうち最初のものを指すイテレータ。&lt;code&gt;value&lt;/code&gt; より大きい要素が無ければ &lt;code&gt;last&lt;/code&gt;）&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;最大で log2(&lt;code&gt;last - first&lt;/code&gt;) + O(1) 回の比較を行う&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;本関数は、本質的に C++11 で追加された &lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/partition_point.html&#34;&gt;&lt;code&gt;partition_point&lt;/code&gt;&lt;/a&gt; と同一である。&lt;br /&gt;
    具体的には、&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/partition_point.html&#34;&gt;&lt;code&gt;partition_point&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(first, last, [value](const T&amp;amp; e) { return !bool(value &amp;lt; e); })&lt;/code&gt;、あるいは、&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/partition_point.html&#34;&gt;&lt;code&gt;partition_point&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(first, last, [value, comp](const T&amp;amp; e) { return !bool(comp(value, e)); })&lt;/code&gt; とすることで同一の結果が得られる。&lt;/li&gt;
&lt;li&gt;本関数の要件は、上記の通り C++03 までの方が C++11 よりも厳しい。&lt;br /&gt;
    しかし、本アルゴリズムの特性上、処理系が C++03 までにしか準拠していない場合でも、昇順に並んでいなくても正常に動作する可能性は高いものと思われる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector.html&#34;&gt;vector&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm.html&#34;&gt;algorithm&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &lt;span style=&#34;color:#ff0000&#34;&gt;upper_bound&lt;/span&gt; で 3 より大きい要素の位置を検索する場合、&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 3 以下の物と 3 より大きい物がその順に並んでいれば、&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 必ずしもソートされている必要はない。&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector.html&#34;&gt;vector&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;};

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 3より大きい要素を二分探索で検索&lt;/span&gt;
  decltype(v)&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator it &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;upper_bound&lt;/span&gt;(v.&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/begin.html&#34;&gt;begin&lt;/a&gt;(), v.&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/end.html&#34;&gt;end&lt;/a&gt;(), &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;4
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;実装例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ForwardIterator&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Compare&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
ForwardIterator
upper_bound(ForwardIterator first, ForwardIterator last, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; value, Compare comp)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/iterator_traits.html&#34;&gt;iterator_traits&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;ForwardIterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;difference_type diff;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (diff len &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/distance.html&#34;&gt;distance&lt;/a&gt;(first, last); len &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; ) {
    diff half &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; len &lt;span style=&#34;color: #666666&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;;
    ForwardIterator mid &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; first;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/advance.html&#34;&gt;advance&lt;/a&gt;(mid, half);
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt;(comp(value, &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;mid))) {
      len &lt;span style=&#34;color: #666666&#34;&gt;-=&lt;/span&gt; half &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;;
      first &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;mid;
    } &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
      len &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; half;
    }
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; first;
}

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// operator&amp;lt; 用の関数オブジェクト&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; less_inner {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;U&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;()(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; lhs, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; U&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; rhs) { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt;(lhs &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; rhs); }
};

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ForwardIterator&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
ForwardIterator
upper_bound(ForwardIterator first, ForwardIterator last, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; value)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;upper_bound(first, last, value, less_inner());
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#384&#34; target=&#34;_blank&#34;&gt;LWG Issue 384. &lt;code&gt;equal_range&lt;/code&gt; has unimplementable runtime complexity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2150&#34; target=&#34;_blank&#34;&gt;LWG Issue 2150. Unclear specification of &lt;code&gt;find_end&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt;&gt; -- 標準ライブラリがlong longに対応した経緯を追加</title>
      <link href="http://cpprefjp.github.io/reference/istream/basic_istream/op_istream.html"/>
      <id>bc6ce53ee4067cb87f079a250efb0cebfb312e52:reference/istream/basic_istream/op_istream.md</id>
      <updated>2015-08-04 18:43:25 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;istream&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class basic_istream&#34;&gt;basic_istream::&lt;/span&gt;operator&amp;gt;&amp;gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;CharT&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Traits&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; char_traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;basic_istream&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; basic_ios&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; {
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// マニピュレータ&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 3つとも関数へのポインタを引数に取る。&lt;/span&gt;
    basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;(basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;pf)(basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt;));
    basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;(basic_ios&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;pf)(basic_ios&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt;));
    basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;(ios_base&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;pf)(ios_base&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;));

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// bool値・数値・ポインタ&lt;/span&gt;
    basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; n);
    basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;short&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; n);
    basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;short&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; n);
    basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; n);
    basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; n);
    basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; n);
    basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; n);
    basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; n); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11&lt;/span&gt;
    basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; n); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11&lt;/span&gt;
    basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;float&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; f);
    basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; f);
    basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; f);
    basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;amp;&lt;/span&gt; p);

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ストリームバッファ&lt;/span&gt;
    basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;(basic_streambuf&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;char_type, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;*&lt;/span&gt; sb);

    &lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;……&lt;/span&gt;
  };

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 文字&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;CharT&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Traits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;(basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; is, CharT&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; c);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Traits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;(basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; is, &lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; c);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Traits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;(basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; is, &lt;span style=&#34;color: #B00040&#34;&gt;signed&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; c);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 文字列&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;CharT&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Traits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;(basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; is, CharT&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; c);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Traits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;(basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; is, &lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; c);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Traits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;(basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; is, &lt;span style=&#34;color: #B00040&#34;&gt;signed&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; c);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ストリームへの右辺値参照 (C++11)&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;CharT&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Traits&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;(basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&amp;amp;&lt;/span&gt; is, T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;ストリームからの入力またはマニピュレータの実行を行う。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;マニピュレータを実行する多重定義それ自体は、書式化入力関数・非書式化入力関数いずれにも該当しない。&lt;ul&gt;
&lt;li&gt;マニピュレータが書式化入力関数・非書式化入力関数であるということはあり得る（例: &lt;a href=&#34;http://cpprefjp.github.io/reference/istream/ws.html&#34;&gt;&lt;code&gt;ws&lt;/code&gt;&lt;/a&gt;）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;数値型（&lt;code&gt;bool&lt;/code&gt;も含む）と&lt;code&gt;void*&lt;/code&gt;に対する多重定義は、書式化入力関数である。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_streambuf&lt;/code&gt;に対する多重定義は、非書式化入力関数である。&lt;/li&gt;
&lt;li&gt;文字に対する多重定義は、書式化入力関数である。&lt;/li&gt;
&lt;li&gt;文字列に対する多重定義は、書式化入力関数である。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;文字列入力における注意&lt;/h3&gt;
&lt;p&gt;ここで説明する多重定義（&lt;code&gt;CharT*&lt;/code&gt;、&lt;code&gt;unsigned char*&lt;/code&gt;、&lt;code&gt;signed char*&lt;/code&gt;）で文字列への入力を行う場合、必ずマニピュレータ&lt;code&gt;setw&lt;/code&gt;で配列の要素数を指定すること（この記事の下方にある例（文字列）を参照）。
さもなくば、バッファオーバーフローの可能性があり、大変危険である。&lt;/p&gt;
&lt;p&gt;あるいは、これらの代わりに&lt;code&gt;basic_string&lt;/code&gt; (&lt;code&gt;std::string&lt;/code&gt;、&lt;code&gt;std::wstring&lt;/code&gt;など)に対して&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;演算子を使用することでも、この危険を回避できる。
参考: &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/op_istream.html&#34;&gt;&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;演算子 (&lt;code&gt;basic_string&lt;/code&gt;)&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;h3&gt;マニピュレータ&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;pf(*this)&lt;/code&gt;を呼び出す。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;bool値・数値・ポインタ&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;sentry&lt;/code&gt;オブジェクトを構築する。&lt;code&gt;sentry&lt;/code&gt;オブジェクトが失敗を示した場合、何もしない。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;num_get::get&lt;/code&gt;を使用して入力のパース・数値への変換を行う。&lt;ul&gt;
&lt;li&gt;ただし、&lt;code&gt;int&lt;/code&gt;と&lt;code&gt;short&lt;/code&gt;の場合は、&lt;code&gt;long&lt;/code&gt;を実引数に取るものを使用する。結果が&lt;code&gt;int&lt;/code&gt;と&lt;code&gt;short&lt;/code&gt;それぞれの範囲外の値になった場合、&lt;code&gt;failbit&lt;/code&gt;を追加する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;num_get::get&lt;/code&gt;から得られた&lt;code&gt;iostate&lt;/code&gt;値を実引数にして&lt;code&gt;setstate&lt;/code&gt;関数を呼び出す。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;ストリームバッファ&lt;/h3&gt;
&lt;p&gt;ストリームからの入力を別のストリームバッファに出力する。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;仮引数&lt;code&gt;sb&lt;/code&gt;がヌルポインタの場合、&lt;code&gt;setstate(failbit)&lt;/code&gt;を呼び出して終了する。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sentry&lt;/code&gt;オブジェクトを構築する。&lt;code&gt;sentry&lt;/code&gt;オブジェクトが失敗を示した場合、何もしない。&lt;/li&gt;
&lt;li&gt;以下のいずれかを満たすまで、&lt;code&gt;this&lt;/code&gt;内のストリームバッファから文字を入力して&lt;code&gt;sb&lt;/code&gt;へ出力する。&lt;ul&gt;
&lt;li&gt;EOFに達した。&lt;/li&gt;
&lt;li&gt;出力処理に失敗した（この場合、失敗したときの文字は入力側のストリームバッファに戻される）。&lt;/li&gt;
&lt;li&gt;例外が発生した。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;入力がなされなかった場合、&lt;code&gt;setstate(failbit)&lt;/code&gt;を呼び出す。&lt;/p&gt;
&lt;h3&gt;文字&lt;/h3&gt;
&lt;p&gt;文字型&lt;code&gt;CharT&lt;/code&gt;への参照を実引数として受け取る。
ただし、&lt;code&gt;CharT&lt;/code&gt;がcharの場合に限り&lt;code&gt;unsigned char&lt;/code&gt;および&lt;code&gt;signed char&lt;/code&gt;への参照も受け付ける。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;sentry&lt;/code&gt;オブジェクトを構築する。&lt;code&gt;sentry&lt;/code&gt;オブジェクトが失敗を示した場合、何もしない。&lt;/li&gt;
&lt;li&gt;ストリームバッファから1文字取り出し、仮引数&lt;code&gt;c&lt;/code&gt;に書き込む。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;入力がなされなかった場合、&lt;code&gt;setstate(failbit)&lt;/code&gt;を呼び出す。&lt;/p&gt;
&lt;h3&gt;文字列&lt;/h3&gt;
&lt;p&gt;文字型&lt;code&gt;CharT&lt;/code&gt;の配列の要素を指し示すポインタを実引数として受け取る。
ただし、&lt;code&gt;CharT&lt;/code&gt;が&lt;code&gt;char&lt;/code&gt;の場合に限り、&lt;code&gt;unsigned char&lt;/code&gt;および&lt;code&gt;signed char&lt;/code&gt;の配列の要素を指し示すポインタも受け付ける。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;sentry&lt;/code&gt;オブジェクトを構築する。&lt;code&gt;sentry&lt;/code&gt;オブジェクトが失敗を示した場合、何もしない。&lt;/li&gt;
&lt;li&gt;ストリームバッファから文字を読み取り、仮引数&lt;code&gt;s&lt;/code&gt;が指し示す配列の要素に順に書き込む。これを以下いずれかを満たすまで繰り返す。&lt;ul&gt;
&lt;li&gt;最大文字数より1文字少ない文字数だけ書き込んだ。最大文字数は以下のようにして決まる。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;width()&lt;/code&gt;が1以上であれば、その値を最大文字数とする。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;width()&lt;/code&gt;が0以下であれば、ストリームの&lt;code&gt;CharT&lt;/code&gt;型においてあり得る最大の配列の要素数とする。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;EOFに達した。&lt;/li&gt;
&lt;li&gt;空白文字に達した。空白文字の判定にはストリームに設定されているロケールが考慮される。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt;の末尾にヌル文字&lt;code&gt;CharT()&lt;/code&gt;を書き込む。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;width(0)&lt;/code&gt;を呼び出す。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;1文字も入力がなされなかった場合、&lt;code&gt;setstate(failbit)&lt;/code&gt;を呼び出す。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;width()&lt;/code&gt;の値を変更するには、&lt;code&gt;setw&lt;/code&gt;マニピュレータまたは&lt;code&gt;width()&lt;/code&gt;メンバ関数を使用する。&lt;/p&gt;
&lt;h3&gt;ストリームへの右辺値参照 (C++11)&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;is &amp;gt;&amp;gt; x&lt;/code&gt;を実行する。この多重定義は、一時オブジェクトなどに対して&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;演算子を利用可能にするためのものである。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;*this&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;例（数値）&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 好きな整数を入力してください&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cin &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; x) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;が入力されました。&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;入力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1が入力されました。
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;例（文字列）&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iomanip&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; s[&lt;span style=&#34;color: #666666&#34;&gt;8&lt;/span&gt;];
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 好きな文字を入力してください&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cin &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;setw(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;sizeof&lt;/span&gt; (s)) &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; s) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;が入力されました。&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;入力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;Kerberos
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;Kerberoが入力されました。
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;実装例&lt;/h2&gt;
&lt;p&gt;TBD&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++98&lt;/li&gt;
&lt;li&gt;C++11: &lt;code&gt;long long&lt;/code&gt;、&lt;code&gt;unsigned long long&lt;/code&gt;、ストリームへの右辺値参照を実引数として受け取るものが追加された&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;このほかの&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;演算子関数&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/op_istream.html&#34;&gt;&lt;code&gt;std::basic_string&lt;/code&gt;に対するもの&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;入力対象の型&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/streambuf/basic_streambuf.html&#34;&gt;&lt;code&gt;basic_streambuf&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n2114.html&#34; target=&#34;_blank&#34;&gt;N2114 &lt;code&gt;long long&lt;/code&gt; Goes to the Library, Revision 1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>numeric_limits -- 標準ライブラリがlong longに対応した経緯を追加</title>
      <link href="http://cpprefjp.github.io/reference/limits/numeric_limits.html"/>
      <id>bc6ce53ee4067cb87f079a250efb0cebfb312e52:reference/limits/numeric_limits.md</id>
      <updated>2015-08-04 18:43:25 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;class template&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;limits&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;numeric_limits&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;numeric_limits&lt;/span&gt;;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;numeric_limits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;numeric_limits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;numeric_limits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;signed&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;numeric_limits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;numeric_limits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char16_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11から追加&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;numeric_limits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char32_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11から追加&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;numeric_limits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;wchar_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;numeric_limits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;short&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;numeric_limits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;numeric_limits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;numeric_limits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11から追加&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;numeric_limits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;short&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;numeric_limits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;numeric_limits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;numeric_limits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11から追加&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;numeric_limits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;float&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;numeric_limits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;numeric_limits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;numeric_limits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;;          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11から追加&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;numeric_limits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;volatile&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;;       &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11から追加&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;numeric_limits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;volatile&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11から追加&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;std::numeric_limits&lt;/code&gt;クラスは以下の特徴を持つ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;実装が提供する算術型の性質を提供する&lt;/li&gt;
&lt;li&gt;浮動小数点型、整数型、&lt;code&gt;bool&lt;/code&gt;型について特殊化が提供され、&lt;code&gt;is_specialized=true&lt;/code&gt;になる&lt;/li&gt;
&lt;li&gt;このクラスのメンバは全て &lt;code&gt;static constexpr&lt;/code&gt; として定義されているため、定数式として使いやすい (C++11)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex.html&#34;&gt;&lt;code&gt;std::complex&lt;/code&gt;&lt;/a&gt;のような非算術型については特殊化は提供されない&lt;/li&gt;
&lt;li&gt;CV修飾された型をテンプレート引数として指定した場合、CV修飾されていない型を指定した場合と同じになる (C++11)&lt;/li&gt;
&lt;/ul&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;静的メンバ&lt;/th&gt;
&lt;th&gt;性質&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/min.html&#34;&gt;&lt;code&gt;min()&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最小値を返す。 浮動小数点型については最小の正の正規化数を返す。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/max.html&#34;&gt;&lt;code&gt;max()&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最大値を返す。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/lowest.html&#34;&gt;&lt;code&gt;lowest()&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最小値を返す。&lt;code&gt;-max()&lt;/code&gt;と等しい必要は無い&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/digits.html&#34;&gt;&lt;code&gt;digits&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;基数 &lt;strong&gt;radix&lt;/strong&gt; において表現できる桁数を示す。 整数型であれば、符号ビット以外のビット数である。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/digits10.html&#34;&gt;&lt;code&gt;digits10&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;10進数において表現できる桁数を示す。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/max_digits10.html&#34;&gt;&lt;code&gt;max_digits10&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;浮動小数点数の10進数表現における正確さを損なわない最大の桁数を示す&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/is_signed.html&#34;&gt;&lt;code&gt;is_signed&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;符号付き型かどうかを判定する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/is_integer.html&#34;&gt;&lt;code&gt;is_integer&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;整数型かどうかを判定する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/is_exact.html&#34;&gt;&lt;code&gt;is_exact&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型が正確かどうかを判定する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/radix.html&#34;&gt;&lt;code&gt;radix&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;digits&lt;/code&gt;を表現する基数を示す&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/epsilon.html&#34;&gt;&lt;code&gt;epsilon()&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;機械イプシロン。1より大きい数の中で最小の値と1との差。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/round_error.html&#34;&gt;&lt;code&gt;round_error()&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最大の丸め誤差。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/min_exponent.html&#34;&gt;&lt;code&gt;min_exponent&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指数下限&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/min_exponent10.html&#34;&gt;&lt;code&gt;min_exponent10&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;10進指数下限&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/max_exponent.html&#34;&gt;&lt;code&gt;max_exponent&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指数上限&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/max_exponent10.html&#34;&gt;&lt;code&gt;max_exponent10&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;10進指数上限&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/has_infinity.html&#34;&gt;&lt;code&gt;has_infinity&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;正の無限表現を持っているかを判定する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/has_quiet_nan.html&#34;&gt;&lt;code&gt;has_quiet_NaN&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;シグナルを発生させないNaNを持っているかを判定する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/has_signaling_nan.html&#34;&gt;&lt;code&gt;has_signaling_NaN&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;シグナルを発生させるNaNを持っているかを判定する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/has_denorm.html&#34;&gt;&lt;code&gt;has_denorm&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;非正規化数のサポート状況を判定する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/has_denorm_loss.html&#34;&gt;&lt;code&gt;has_denorm_loss&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;精度の損失が非正規化数によるものかを判定する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/infinity.html&#34;&gt;&lt;code&gt;infinity()&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;正の無限表現を取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/quiet_nan.html&#34;&gt;&lt;code&gt;quiet_NaN()&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;シグナルを発生させないNaNを取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/signaling_nan.html&#34;&gt;&lt;code&gt;signaling_NaN()&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;シグナルを発生させるNaNを取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/denorm_min.html&#34;&gt;&lt;code&gt;denorm_min()&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最小の非正規化数を取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/is_iec559.html&#34;&gt;&lt;code&gt;is_iec559&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;IEC 559標準に準拠しているかを判定する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/is_bounded.html&#34;&gt;&lt;code&gt;is_bounded&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;値のなす集合が有限であるかを判定する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/is_modulo.html&#34;&gt;&lt;code&gt;is_modulo&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;常に合同関係にある型かを判定する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/traps.html&#34;&gt;&lt;code&gt;traps&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;トラップが実装されている型かを判定する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/tinyness_before.html&#34;&gt;&lt;code&gt;tinyness_before&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;丸めが行われる前に小さな値になることを検出できるかを判定する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/round_style.html&#34;&gt;&lt;code&gt;round_style&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;丸めスタイルを取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n2114.html&#34; target=&#34;_blank&#34;&gt;N2114 &lt;code&gt;long long&lt;/code&gt; Goes to the Library, Revision 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#559&#34; target=&#34;_blank&#34;&gt;LWG Issue 559. &lt;code&gt;numeric_limits&amp;lt;const T&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;&lt; -- 標準ライブラリがlong longに対応した経緯を追加</title>
      <link href="http://cpprefjp.github.io/reference/ostream/basic_ostream/op_ostream.html"/>
      <id>bc6ce53ee4067cb87f079a250efb0cebfb312e52:reference/ostream/basic_ostream/op_ostream.md</id>
      <updated>2015-08-04 18:43:25 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;ostream&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class basic_ostream&#34;&gt;basic_ostream::&lt;/span&gt;operator&amp;lt;&amp;lt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;CharT&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Traits&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; char_traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;basic_ostream&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; basic_ios&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; {
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// マニピュレータ&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 3つとも関数へのポインタを引数に取る。&lt;/span&gt;
    basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;pf)(basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt;));
    basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(basic_ios&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;pf)(basic_ios&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt;));
    basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(ios_base&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;pf)(ios_base&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;));

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// bool値・数値・ポインタ&lt;/span&gt;
    basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; n);
    basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;short&lt;/span&gt; n);
    basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;short&lt;/span&gt; n);
    basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; n);
    basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; n);
    basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; n);
    basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; n);
    basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; n); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11&lt;/span&gt;
    basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; n); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11&lt;/span&gt;
    basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;float&lt;/span&gt; f);
    basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; f);
    basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; f);
    basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; p);

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ストリームバッファ&lt;/span&gt;
    basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(basic_streambuf&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;*&lt;/span&gt; sb);

    &lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;……&lt;/span&gt;
  };

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 文字&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;CharT&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Traits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; os, CharT c);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Traits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; os, &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; c);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Traits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; os, &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; c);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;CharT&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Traits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; os, &lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; c);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;CharT&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Traits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; os, &lt;span style=&#34;color: #B00040&#34;&gt;signed&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; c);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 文字列&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;CharT&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Traits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; os, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; CharT s);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Traits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; os, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; s);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Traits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; os, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; s);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;CharT&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Traits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; os, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; s);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;CharT&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Traits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; os, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;signed&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; s);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ストリームへの右辺値参照 (C++11)&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;CharT&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Traits&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&amp;amp;&lt;/span&gt; is, T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;ストリームへの出力またはマニピュレータの実行を行う。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;マニピュレータを実行する多重定義それ自体は、書式化出力関数・非書式化出力関数いずれにも該当しない。&lt;/li&gt;
&lt;li&gt;数値型（&lt;code&gt;bool&lt;/code&gt;も含む）と&lt;code&gt;void*&lt;/code&gt;に対する多重定義は、書式化出力関数である。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_streambuf&lt;/code&gt;に対する多重定義は、非書式化出力関数である。&lt;/li&gt;
&lt;li&gt;文字に対する多重定義は、書式化出力関数である。&lt;/li&gt;
&lt;li&gt;文字列に対する多重定義は、書式化出力関数である。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;h3&gt;マニピュレータ&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;pf(*this)&lt;/code&gt;を呼び出す。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;bool値・数値・ポインタ&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;sentry&lt;/code&gt;オブジェクトを構築する。&lt;code&gt;sentry&lt;/code&gt;オブジェクトが失敗を示した場合、何もしない。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;num_put::put&lt;/code&gt;を使用して入力のパース・数値への変換を行う。実引数を渡すに際し、一部の型では以下のように型変換を行う。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;short&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;flags()&lt;/code&gt;に&lt;code&gt;hex&lt;/code&gt;または&lt;code&gt;oct&lt;/code&gt;が設定されていれば&lt;code&gt;static_cast&amp;lt;long&amp;gt;(static_cast&amp;lt;unsigned short&amp;gt;(n))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;それ以外では&lt;code&gt;static_cast&amp;lt;long&amp;gt;(n)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;flags()&lt;/code&gt;に&lt;code&gt;hex&lt;/code&gt;または&lt;code&gt;oct&lt;/code&gt;が設定されていれば&lt;code&gt;static_cast&amp;lt;long&amp;gt;(static_cast&amp;lt;unsigned int&amp;gt;(n))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;それ以外では&lt;code&gt;static_cast&amp;lt;long&amp;gt;(n)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unsigned short&lt;/code&gt;、&lt;code&gt;unsigned int&lt;/code&gt;: &lt;code&gt;static_cast&amp;lt;unsigned long&amp;gt;(n)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;float&lt;/code&gt;: &lt;code&gt;static_cast&amp;lt;double&amp;gt;(n)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;num_put::put&lt;/code&gt;から得られた&lt;code&gt;iostate&lt;/code&gt;値を実引数にして&lt;code&gt;setstate&lt;/code&gt;関数を呼び出す。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;ストリームバッファ&lt;/h3&gt;
&lt;p&gt;別のストリームバッファからの入力をストリームに出力する。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;sentry&lt;/code&gt;オブジェクトを構築する。&lt;code&gt;sentry&lt;/code&gt;オブジェクトが失敗を示した場合、何もしない。&lt;/li&gt;
&lt;li&gt;仮引数&lt;code&gt;sb&lt;/code&gt;がヌルポインタの場合、&lt;code&gt;setstate(badbit)&lt;/code&gt;を呼び出して終了する。&lt;/li&gt;
&lt;li&gt;以下のいずれかを満たすまで、&lt;code&gt;sb&lt;/code&gt;から文字を入力して&lt;code&gt;this&lt;/code&gt;へ出力する。&lt;ul&gt;
&lt;li&gt;EOFに達した。&lt;/li&gt;
&lt;li&gt;出力処理に失敗した（この場合、失敗したときの文字は入力側のストリームバッファに戻される）。&lt;/li&gt;
&lt;li&gt;例外が発生した。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;入力がなされなかった場合、&lt;code&gt;setstate(failbit)&lt;/code&gt;を呼び出す。&lt;/p&gt;
&lt;h3&gt;文字&lt;/h3&gt;
&lt;p&gt;文字型&lt;code&gt;CharT&lt;/code&gt;、&lt;code&gt;char&lt;/code&gt;を実引数として受け取る。
ただし、&lt;code&gt;CharT&lt;/code&gt;がcharの場合に限り、&lt;code&gt;unsigned char&lt;/code&gt;および&lt;code&gt;signed char&lt;/code&gt;も受け付ける。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;sentry&lt;/code&gt;オブジェクトを構築する。&lt;code&gt;sentry&lt;/code&gt;オブジェクトが失敗を示した場合、何もしない。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c&lt;/code&gt;を出力する。ただし、入力が&lt;code&gt;char&lt;/code&gt;、&lt;code&gt;singed char&lt;/code&gt;、&lt;code&gt;unsigned char&lt;/code&gt;で出力先の&lt;code&gt;char_type&lt;/code&gt;が&lt;code&gt;char&lt;/code&gt;以外なら、&lt;code&gt;os.widen(c)&lt;/code&gt;を出力する。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;width()&lt;/code&gt;と&lt;code&gt;flags() &amp;amp; (ios_base::adjustfield)&lt;/code&gt;に従ってパディングの出力も行う。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;width(0)&lt;/code&gt;を呼び出す。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;文字列&lt;/h3&gt;
&lt;p&gt;ヌル終端の文字列（文字型の配列の要素を指し示すポインタ）を実引数として受け取る。
文字型として&lt;code&gt;CharT&lt;/code&gt;、&lt;code&gt;char&lt;/code&gt;に対応している。
ただし、&lt;code&gt;CharT&lt;/code&gt;がcharの場合に限り&lt;code&gt;unsigned char&lt;/code&gt;および&lt;code&gt;signed char&lt;/code&gt;も受け付ける。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;sentry&lt;/code&gt;オブジェクトを構築する。&lt;code&gt;sentry&lt;/code&gt;オブジェクトが失敗を示した場合、何もしない。&lt;/li&gt;
&lt;li&gt;仮引数&lt;code&gt;s&lt;/code&gt;が指し示す文字列を出力する。&lt;ul&gt;
&lt;li&gt;文字数は以下で求める。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CharT&lt;/code&gt;文字列: &lt;code&gt;traits_type::length(s)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;char&lt;/code&gt;文字列: &lt;code&gt;std::char_traits&amp;lt;char&amp;gt;::length(s)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;signed char&lt;/code&gt;と&lt;code&gt;unsigned char&lt;/code&gt;文字列: &lt;code&gt;std::char_traits&amp;lt;char&amp;gt;::length(s)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;width()&lt;/code&gt;と&lt;code&gt;flags() &amp;amp; (ios_base::adjustfield)&lt;/code&gt;に従ってパディングの出力も行う。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;width(0)&lt;/code&gt;を呼び出す。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;ストリームへの右辺値参照 (C++11)&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;os &amp;lt;&amp;lt; x&lt;/code&gt;を実行する。この多重定義は、一時オブジェクトなどに対して&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;演算子を利用可能にするためのものである。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;*this&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;() {
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;101&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力例&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;101
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;実装例&lt;/h2&gt;
&lt;p&gt;TBD&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++98&lt;/li&gt;
&lt;li&gt;C++11: &lt;code&gt;long long&lt;/code&gt;、&lt;code&gt;unsigned long long&lt;/code&gt;、ストリームへの右辺値参照を実引数として受け取るものが追加された&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;このほかの&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;演算子関数&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/op_ostream.html&#34;&gt;&lt;code&gt;std::basic_string&lt;/code&gt;に対するもの&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;出力対象の型&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/streambuf/basic_streambuf.html&#34;&gt;&lt;code&gt;basic_streambuf&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n2114.html&#34; target=&#34;_blank&#34;&gt;N2114 &lt;code&gt;long long&lt;/code&gt; Goes to the Library, Revision 1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
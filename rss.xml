<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2024-04-16T14:38:48.302177</updated>
  <id>a7f10f01-cdc1-4acf-98b8-fd0d7a5b9532</id>

  
    <entry>
      <title>constexpr関数が定数実行できない場合でも適格とする -- refactor: simplify explanation of P2448R2</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/relaxing_some_constexpr_restrictions.html"/>
      <id>d9744ca36b456eba18cfe64c461085b490716361:lang/cpp23/relaxing_some_constexpr_restrictions.md</id>
      <updated>2024-04-15T23:57:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/relaxing_some_constexpr_restrictions.md b/lang/cpp23/relaxing_some_constexpr_restrictions.md
index 6f909e8d0..205a7e237 100644
--- a/lang/cpp23/relaxing_some_constexpr_restrictions.md
+++ b/lang/cpp23/relaxing_some_constexpr_restrictions.md
@@ -25,7 +25,7 @@ constexpr int g(int x) { return f(x); } // error! fはいかなるxについて
 しかし、多くの標準ライブラリが`constexpr`対応を進めていくようになり、状況が変化した。
 
 例えば、`std::optional`の`reset`メンバメソッドが`constexpr`に対応するのはC++23以降である。
-これは`std::optional`の内部実装が`union`のアクティブメンバを更新しているからであり、[これを定数式内で実行するにはC++20を待たねばならなかった](/lang/cpp20/changing_the_active_member_of_a_union_inside_constexpr.md)。
+これは`std::optional`の内部実装が`union`のアクティブメンバを更新しているからであり、これを定数式内で実行するにはC++20を待たねばならなかった（参考：[定数式内での共用体のアクティブメンバの変更を許可](/lang/cpp20/changing_the_active_member_of_a_union_inside_constexpr.md)）。
 
 よって、以下のコードはC++17では不適格だが、C++23では正しいコードとなる。
 
@@ -37,7 +37,7 @@ constexpr void f(std::optional&amp;lt;T&amp;gt;&amp;amp; opt)
 }
 ```
 
-これを正しく記述するには、`constexpr`指定をするかどうかをマクロで変更しなければならない。
+多くのバージョンで使われることが想定されるライブラリにおいてこれを最大限活用できるよう記述するには、`constexpr`指定するかどうかをマクロで変更しなければならない。
 例えばC++23から`constexpr`になる関数群に対して以下のようなマクロを使うか、
 
 ```cpp
@@ -77,9 +77,9 @@ void f(std::optional&amp;lt;T&amp;gt;&amp;amp; opt)
 このような状況では上記のような解決策を用いてもミスを避けることは容易ではない。
 
 現在、登場時点では定数式内で実行できなかったために`constexpr`されていなかった多くの標準ライブラリ関数が、のちにコア言語機能が追加されて`constexpr`指定されている。
-現時点で`constexpr`されていない関数は次のバージョンで`constexpr`になるかもしれず、よって現在使用されているバージョンである関数が`constexpr`ではないということを指摘することの意味は薄れている。
+そのため、現時点で`constexpr`ではない関数も次のバージョンで`constexpr`になるかもしれず、よって関数が`constexpr`指定されているだけでエラーにする意義は薄れてきた。
 
-以上を鑑みて、`constexpr`関数が定数式実行可能かどうかを判断するのは、実際に定数式内で実行されてからにした方がよいという結論に至った。
+以上から、コンパイル時に実行できない`constexpr`をエラーとするのは、実際にコンパイル時に呼びだされてからでよい、ということになった。
 
 実際に定数式内で実行できない関数が定数式内で呼び出された場合、これは従来通りエラーとするほかない。
 しかし、定数式内で呼び出されていないのならば、定数式内で実行できない関数が存在していてもプログラムを不適格とはしない。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>ToruNiina</name>
        <email>niina.toru.68u@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>constexpr関数が定数実行できない場合でも適格とする -- fix: typo in an example code</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/relaxing_some_constexpr_restrictions.html"/>
      <id>8ed33cbe79c326dec1ea1e0aa6ef48fdd6d8c29a:lang/cpp23/relaxing_some_constexpr_restrictions.md</id>
      <updated>2024-04-15T23:54:27+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/relaxing_some_constexpr_restrictions.md b/lang/cpp23/relaxing_some_constexpr_restrictions.md
index 254dec4eb..6f909e8d0 100644
--- a/lang/cpp23/relaxing_some_constexpr_restrictions.md
+++ b/lang/cpp23/relaxing_some_constexpr_restrictions.md
@@ -64,7 +64,7 @@ constexpr
 #endif
 void f(std::optional&amp;lt;T&amp;gt;&amp;amp; opt)
 {
-  o.reset();
+  opt.reset();
 }
 ```
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>ToruNiina</name>
        <email>niina.toru.68u@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>parent_path -- parent_path() : パス名末尾/の挙動について追記</title>
      <link href="https://cpprefjp.github.io/reference/filesystem/path/parent_path.html"/>
      <id>ee8e4dcb4e6cbedc3d0bfa3f3903137349bcc2fd:reference/filesystem/path/parent_path.md</id>
      <updated>2024-04-15T14:46:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/filesystem/path/parent_path.md b/reference/filesystem/path/parent_path.md
index 70f644153..54dbd7913 100644
--- a/reference/filesystem/path/parent_path.md
+++ b/reference/filesystem/path/parent_path.md
@@ -32,6 +32,7 @@ int main()
   fs::path ps[] = {
     &amp;#34;/foo/bar.txt&amp;#34;, // ファイル名を含むパス
     &amp;#34;/foo/bar/&amp;#34;,    // ディレクトリパス
+    &amp;#34;/foo/bar&amp;#34;,     // ディレクトリパス（末尾/なし）
     &amp;#34;/&amp;#34;             // ルートパスのみ (ルートパスの親はルートパスなのでそのまま返る)
   };
 
@@ -46,6 +47,7 @@ int main()
 ```
 &amp;#34;/foo/bar.txt&amp;#34; : &amp;#34;/foo&amp;#34;
 &amp;#34;/foo/bar/&amp;#34; : &amp;#34;/foo/bar&amp;#34;
+&amp;#34;/foo/bar&amp;#34; : &amp;#34;/foo&amp;#34;
 &amp;#34;/&amp;#34; : &amp;#34;/&amp;#34;
 ```
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>nextafter -- Merge pull request #1266 from yknishidate/master</title>
      <link href="https://cpprefjp.github.io/reference/cmath/nextafter.html"/>
      <id>c18cdd781de7d8c2792f9f24fe83a0931700a6df:reference/cmath/nextafter.md</id>
      <updated>2024-04-11T21:00:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/nextafter.md b/reference/cmath/nextafter.md
index abecec649..f7c91349f 100644
--- a/reference/cmath/nextafter.md
+++ b/reference/cmath/nextafter.md
@@ -61,7 +61,7 @@ namespace std {
 
 
 ## 戻り値
-パラメータ`x`の値をパラメータ`x`の方向に、表現可能な最小の値だけ進めた値を返す。
+パラメータ`x`の値をパラメータ`y`の方向に、表現可能な最小の値だけ進めた値を返す。
 
 `x`と`y`が等値である場合、`y`を返す。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>nextafter -- nextafterの説明を修正</title>
      <link href="https://cpprefjp.github.io/reference/cmath/nextafter.html"/>
      <id>329b44ce48b582b4ca9c35fdb311eaa446be0017:reference/cmath/nextafter.md</id>
      <updated>2024-04-11T08:11:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/nextafter.md b/reference/cmath/nextafter.md
index abecec649..f7c91349f 100644
--- a/reference/cmath/nextafter.md
+++ b/reference/cmath/nextafter.md
@@ -61,7 +61,7 @@ namespace std {
 
 
 ## 戻り値
-パラメータ`x`の値をパラメータ`x`の方向に、表現可能な最小の値だけ進めた値を返す。
+パラメータ`x`の値をパラメータ`y`の方向に、表現可能な最小の値だけ進めた値を返す。
 
 `x`と`y`が等値である場合、`y`を返す。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuki Nishidate</name>
        <email>asta18425@gmail.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-01-01T14:39:45.946619</updated>
  <id>63756113-0930-4afe-9448-504cd30c415b</id>

  
    <entry>
      <title>generator::promise_type -- generator/promise_type: 各メンバ関数の概要WIP</title>
      <link href="https://cpprefjp.github.io/reference/generator/generator/promise_type.html"/>
      <id>bd48ead94b7324c18006cdcfe08aa8560cf1f303:reference/generator/generator/promise_type.md</id>
      <updated>2023-01-01T15:05:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/generator/generator/promise_type.md b/reference/generator/generator/promise_type.md
index 0887a9b46..a5ac475d5 100644
--- a/reference/generator/generator/promise_type.md
+++ b/reference/generator/generator/promise_type.md
@@ -24,13 +24,13 @@ namespace std {
 
 | 名前            | 説明           | 対応バージョン |
 |-----------------|----------------|----------------|
-| `get_return_object` | [`generator`](../generator.md)戻り値の取得 | C++23 |
-| `initial_suspend` | 初期サスペンドポイント動作の制御 | C++23 |
-| `final_suspend` | 最終サスペンドポイント動作の制御 | C++23 |
-| `yield_value` | co_yield式動作の制御 | C++23 |
-| `await_transform` | co_await式動作の制御 | C++23 |
-| `return_void` | コルーチンreturn動作の制御 | C++23 |
-| `unhandled_exception` | 未処理例外の制御 | C++23 |
+| [`get_return_object`](promise_type/get_return_object.md) | [`generator`](../generator.md)戻り値の取得 | C++23 |
+| [`initial_suspend`](promise_type/initial_suspend.md) | 初期サスペンドポイント動作の制御 | C++23 |
+| [`final_suspend`](promise_type/final_suspend.md) | 最終サスペンドポイント動作の制御 | C++23 |
+| [`yield_value`](promise_type/yield_value.md) | co_yield式動作の制御 | C++23 |
+| [`await_transform`](promise_type/await_transform.md) | co_await式動作の制御 | C++23 |
+| [`return_void`](promise_type/return_void.md) | コルーチンreturn動作の制御 | C++23 |
+| [`unhandled_exception`](promise_type/unhandled_exception.md) | 未処理例外の制御 | C++23 |
 | `operator new` | カスタムnew演算子 | C++23 |
 | `operator delete` | カスタムdelete演算子 | C++23 |
 
@@ -45,8 +45,10 @@ namespace std {
 - [ICC](/implementation.md#icc):
 - [Visual C++](/implementation.md#visual_cpp):
 
+
 ## 関連項目
 - [`std::ranges::elements_of`](/reference/ranges/elements_of.md)
 
+
 ## 参照
 - [P2502R2 `std::generator`: Synchronous Coroutine Generator for Ranges](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2502r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>await_transform -- generator/promise_type: 各メンバ関数の概要WIP</title>
      <link href="https://cpprefjp.github.io/reference/generator/generator/promise_type/await_transform.html"/>
      <id>bd48ead94b7324c18006cdcfe08aa8560cf1f303:reference/generator/generator/promise_type/await_transform.md</id>
      <updated>2023-01-01T15:05:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/generator/generator/promise_type/await_transform.md b/reference/generator/generator/promise_type/await_transform.md
new file mode 100644
index 000000000..34f4ac8d2
--- /dev/null
+++ b/reference/generator/generator/promise_type/await_transform.md
@@ -0,0 +1,24 @@
+# await_transform
+* generator[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* generator::promise_type[meta class]
+* cpp23[meta cpp]
+
+```cpp
+void await_transform() = delete;
+```
+
+## 概要
+ジェネレータコルーチンでは[co_await式](/lang/cpp20/coroutines.md)をサポートしない。
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>final_suspend -- generator/promise_type: 各メンバ関数の概要WIP</title>
      <link href="https://cpprefjp.github.io/reference/generator/generator/promise_type/final_suspend.html"/>
      <id>bd48ead94b7324c18006cdcfe08aa8560cf1f303:reference/generator/generator/promise_type/final_suspend.md</id>
      <updated>2023-01-01T15:05:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/generator/generator/promise_type/final_suspend.md b/reference/generator/generator/promise_type/final_suspend.md
new file mode 100644
index 000000000..59110efc0
--- /dev/null
+++ b/reference/generator/generator/promise_type/final_suspend.md
@@ -0,0 +1,36 @@
+# final_suspend
+* generator[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* generator::promise_type[meta class]
+* cpp23[meta cpp]
+
+```cpp
+auto final_suspend() noexcept;
+```
+
+## 概要
+ジェネレータコルーチンの[最終サスペンドポイント](/lang/cpp20/coroutines.md)を制御するAwaitableオブジェクトを返す。
+
+
+## 事前条件
+（執筆中）
+
+
+## 戻り値
+（執筆中）
+
+
+## 例外
+投げない
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>get_return_object -- generator/promise_type: 各メンバ関数の概要WIP</title>
      <link href="https://cpprefjp.github.io/reference/generator/generator/promise_type/get_return_object.html"/>
      <id>bd48ead94b7324c18006cdcfe08aa8560cf1f303:reference/generator/generator/promise_type/get_return_object.md</id>
      <updated>2023-01-01T15:05:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/generator/generator/promise_type/get_return_object.md b/reference/generator/generator/promise_type/get_return_object.md
new file mode 100644
index 000000000..77d606c3f
--- /dev/null
+++ b/reference/generator/generator/promise_type/get_return_object.md
@@ -0,0 +1,33 @@
+# get_return_object
+* generator[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* generator::promise_type[meta class]
+* cpp23[meta cpp]
+
+```cpp
+generator get_return_object() noexcept;
+```
+* generator[link ../../generator.md]
+
+## 概要
+ジェネレータ[コルーチン](/lang/cpp20/coroutines.md)の戻り値オブジェクトを生成する。
+
+
+## 戻り値
+[`coroutine_handle`](/reference/coroutine/coroutine_handle.md)`&amp;lt;promise_type&amp;gt;::`[`from_promise`](/reference/coroutine/coroutine_handle/from_promise.md)`(*this)`で取得したコルーチンハンドルを保持する[`generator`](../../generator.md)オブジェクト。
+
+
+## 例外
+投げない
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>initial_suspend -- generator/promise_type: 各メンバ関数の概要WIP</title>
      <link href="https://cpprefjp.github.io/reference/generator/generator/promise_type/initial_suspend.html"/>
      <id>bd48ead94b7324c18006cdcfe08aa8560cf1f303:reference/generator/generator/promise_type/initial_suspend.md</id>
      <updated>2023-01-01T15:05:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/generator/generator/promise_type/initial_suspend.md b/reference/generator/generator/promise_type/initial_suspend.md
new file mode 100644
index 000000000..c22b2cc8c
--- /dev/null
+++ b/reference/generator/generator/promise_type/initial_suspend.md
@@ -0,0 +1,33 @@
+# initial_suspend
+* generator[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* generator::promise_type[meta class]
+* cpp23[meta cpp]
+
+```cpp
+suspend_always initial_suspend() const noexcept;
+```
+* suspend_always[link /reference/coroutine/suspend_always.md]
+
+## 概要
+ジェネレータコルーチンの[初期サスペンドポイント](/lang/cpp20/coroutines.md)を制御するAwaitableオブジェクトを返す。
+
+
+## 戻り値
+[`suspend_always`](/reference/coroutine/suspend_always.md)
+
+
+## 例外
+投げない
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>return_void -- generator/promise_type: 各メンバ関数の概要WIP</title>
      <link href="https://cpprefjp.github.io/reference/generator/generator/promise_type/return_void.html"/>
      <id>bd48ead94b7324c18006cdcfe08aa8560cf1f303:reference/generator/generator/promise_type/return_void.md</id>
      <updated>2023-01-01T15:05:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/generator/generator/promise_type/return_void.md b/reference/generator/generator/promise_type/return_void.md
new file mode 100644
index 000000000..b2a6c982f
--- /dev/null
+++ b/reference/generator/generator/promise_type/return_void.md
@@ -0,0 +1,32 @@
+# return_void
+* generator[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* generator::promise_type[meta class]
+* cpp23[meta cpp]
+
+```cpp
+void return_void() const noexcept;
+```
+
+## 概要
+ジェネレータコルーチンからreturn時の動作を制御する。
+
+
+## 効果
+何もしない
+
+
+## 例外
+投げない
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>unhandled_exception -- generator/promise_type: 各メンバ関数の概要WIP</title>
      <link href="https://cpprefjp.github.io/reference/generator/generator/promise_type/unhandled_exception.html"/>
      <id>bd48ead94b7324c18006cdcfe08aa8560cf1f303:reference/generator/generator/promise_type/unhandled_exception.md</id>
      <updated>2023-01-01T15:05:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/generator/generator/promise_type/unhandled_exception.md b/reference/generator/generator/promise_type/unhandled_exception.md
new file mode 100644
index 000000000..fce2ef35c
--- /dev/null
+++ b/reference/generator/generator/promise_type/unhandled_exception.md
@@ -0,0 +1,32 @@
+# unhandled_exception
+* generator[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* generator::promise_type[meta class]
+* cpp23[meta cpp]
+
+```cpp
+void unhandled_exception();
+```
+
+## 概要
+ジェネレータコルーチンから送出された例外を処理する。
+
+
+## 事前条件
+（執筆中）
+
+
+## 効果
+（執筆中）
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>unhandled_exception -- generator/promise_type: 各メンバ関数の概要WIP</title>
      <link href="https://cpprefjp.github.io/reference/generator/generator/promise_type/yield_value.html"/>
      <id>bd48ead94b7324c18006cdcfe08aa8560cf1f303:reference/generator/generator/promise_type/yield_value.md</id>
      <updated>2023-01-01T15:05:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/generator/generator/promise_type/yield_value.md b/reference/generator/generator/promise_type/yield_value.md
new file mode 100644
index 000000000..70f9a3fa7
--- /dev/null
+++ b/reference/generator/generator/promise_type/yield_value.md
@@ -0,0 +1,57 @@
+# unhandled_exception
+* generator[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* generator::promise_type[meta class]
+* cpp23[meta cpp]
+
+```cpp
+suspend_always yield_value(yielded val) noexcept; // (1)
+
+auto yield_value(const remove_reference_t&amp;lt;yielded&amp;gt;&amp;amp; lval)
+  requires is_rvalue_reference_v&amp;lt;yielded&amp;gt; &amp;amp;&amp;amp;
+    constructible_from&amp;lt;remove_cvref_t&amp;lt;yielded&amp;gt;, const remove_reference_t&amp;lt;yielded&amp;gt;&amp;amp;&amp;gt;;  // (2)
+
+template&amp;lt;class T2, class V2, class Alloc2, class Unused&amp;gt;
+  requires same_as&amp;lt;typename generator&amp;lt;T2, V2, Alloc2&amp;gt;::yielded, yielded&amp;gt;
+auto yield_value(ranges::elements_of&amp;lt;generator&amp;lt;T2, V2, Alloc2&amp;gt;&amp;amp;&amp;amp;, Unused&amp;gt; g) noexcept; // (3)
+
+template&amp;lt;ranges::input_range Rng, class Alloc&amp;gt;
+  requires convertible_to&amp;lt;ranges::range_reference_t&amp;lt;Rng&amp;gt;, yielded&amp;gt;
+auto yield_value(ranges::elements_of&amp;lt;Rng, Alloc&amp;gt; r) noexcept; // (4)
+```
+* generator[link ../../generator.md]
+* yielded[link ../../generator.md]
+* suspend_always[link /reference/coroutine/suspend_always.md]
+* ranges::input_range[link /reference/ranges/input_range.md]
+* ranges::elements_of[link /reference/ranges/elements_of.md]
+* ranges::range_reference_t[link /reference/ranges/range_reference_t.md]
+* remove_reference_t[link /reference/type_traits/remove_reference.md]
+* is_rvalue_reference_v[link /reference/type_traits/is_rvalue_reference.md]
+* remove_cvref_t[link /reference/type_traits/remove_cvref.md]
+* constructible_from[link /reference/concepts/constructible_from.md]
+* same_as[link /reference/concepts/same_as.md]
+* convertible_to[link /reference/concepts/convertible_to.md]
+
+
+## 概要
+ジェネレータコルーチンにおける[co_yield式](/lang/cpp20/coroutines.md)の動作を制御する。
+
+
+## 事前条件
+（執筆中）
+
+
+## 効果
+（執筆中）
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin -- generator/begin: fix typo</title>
      <link href="https://cpprefjp.github.io/reference/generator/generator/begin.html"/>
      <id>41bca76b22c72220203c7d2e369e6a76e9b645b2:reference/generator/generator/begin.md</id>
      <updated>2023-01-01T12:35:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/generator/generator/begin.md b/reference/generator/generator/begin.md
index fc99bdf61..735e5e94b 100644
--- a/reference/generator/generator/begin.md
+++ b/reference/generator/generator/begin.md
@@ -20,7 +20,7 @@ iterator begin();
 
 
 ## 効果
-ジェネレータ子ルーチンを再開(resume)する。
+ジェネレータコルーチンを再開(resume)する。
 
 
 ## 戻り値
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>generator -- generator: promise_type概要</title>
      <link href="https://cpprefjp.github.io/reference/generator/generator.html"/>
      <id>41683cd54cbc189d2cfc22f8a47f9b8b05cb5000:reference/generator/generator.md</id>
      <updated>2022-12-31T23:17:53+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/generator/generator.md b/reference/generator/generator.md
index 8de067e34..2479b08d9 100644
--- a/reference/generator/generator.md
+++ b/reference/generator/generator.md
@@ -30,7 +30,7 @@ namespace std {
 
 - `value` == [`conditional_t`](/reference/type_traits/conditional.md)`&amp;lt;`[`is_void_v`](/reference/type_traits/is_void.md)`&amp;lt;V&amp;gt;,` [`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;Ref&amp;gt;, V&amp;gt;`
 - `reference` == [`conditional_t`](/reference/type_traits/conditional.md)`&amp;lt;`[`is_void_v`](/reference/type_traits/is_void.md)`&amp;lt;V&amp;gt;, Ref&amp;amp;&amp;amp;, Ref&amp;gt;`
-- [`iterator`](generator/iterator.md)
+- [`iterator`](generator/iterator.md) : ジェネレータが返すイテレータ型。
 
 
 ## 適格要件
@@ -53,6 +53,10 @@ namespace std {
 | [`(constructor)`](generator/op_constructor.md) | コンストラクタ | C++23 |
 | `(destructor)` | デストラクタ | C++23 |
 | `operator=(generator other) noexcept;` | ムーブ代入演算子 | C++23 |
+
+### イテレータ
+| 名前            | 説明           | 対応バージョン |
+|-----------------|----------------|----------------|
 | [`begin`](generator/begin.md) | Viewの先頭を指すイテレータを取得する | C++23 |
 | [`end`](generator/end.md) | Viewの番兵を取得する | C++23 |
 
@@ -60,8 +64,15 @@ namespace std {
 
 | 名前            | 説明        | 対応バージョン |
 |-----------------|-------------|-------|
-| `yielded`      | `co_yield`式の引数型  | C++23 |
-| `promise_type` | コルーチンのPromise型 | C++23 |
+| `yielded`      | `co_yield`式の引数型（後述） | C++23 |
+| [`promise_type`](generator/promise_type.md) | ジェネレータコルーチンのPromise型 | C++23 |
+
+``` cpp
+using yielded =
+  conditional_t&amp;lt;is_reference_v&amp;lt;reference&amp;gt;, reference, const reference&amp;amp;&amp;gt;;
+```
+* conditional_t[link /reference/type_traits/conditional.md]
+* is_reference_v[link /reference/type_traits/is_reference.md]
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>generator::iterator -- generator: promise_type概要</title>
      <link href="https://cpprefjp.github.io/reference/generator/generator/iterator.html"/>
      <id>41683cd54cbc189d2cfc22f8a47f9b8b05cb5000:reference/generator/generator/iterator.md</id>
      <updated>2022-12-31T23:17:53+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/generator/generator/iterator.md b/reference/generator/generator/iterator.md
index 9929ae7ff..7393e73a8 100644
--- a/reference/generator/generator/iterator.md
+++ b/reference/generator/generator/iterator.md
@@ -41,6 +41,11 @@ namespace std {
 | `(constructor)` | コンストラクタ | C++23 |
 | `(destructor)`  | デストラクタ   | C++23 |
 | `operator=`     | 代入演算子     | C++23 |
+
+### イテレータ
+
+| 名前            | 説明           | 対応バージョン |
+|-----------------|----------------|----------------|
 | `operator*()` | 間接参照 | C++23 |
 | `operator++()` | 前置インクリメント | C++23 |
 | `operator++(int)` | 後置インクリメント | C++23 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>generator::promise_type -- generator: promise_type概要</title>
      <link href="https://cpprefjp.github.io/reference/generator/generator/promise_type.html"/>
      <id>41683cd54cbc189d2cfc22f8a47f9b8b05cb5000:reference/generator/generator/promise_type.md</id>
      <updated>2022-12-31T23:17:53+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/generator/generator/promise_type.md b/reference/generator/generator/promise_type.md
new file mode 100644
index 000000000..0887a9b46
--- /dev/null
+++ b/reference/generator/generator/promise_type.md
@@ -0,0 +1,52 @@
+# generator::promise_type
+* generator[meta header]
+* class template[meta id-type]
+* std[meta namespace]
+* cpp23[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;class Ref, class V, class Allocator&amp;gt;
+  class generator&amp;lt;Ref, V, Allocator&amp;gt;::promise_type {
+    ...
+  };
+}
+```
+* generator[link ../generator.md]
+
+
+## 概要
+ジェネレータコルーチン動作を制御する[Promise型](/lang/cpp20/coroutines.md)。
+
+
+## メンバ関数
+### コルーチン
+
+| 名前            | 説明           | 対応バージョン |
+|-----------------|----------------|----------------|
+| `get_return_object` | [`generator`](../generator.md)戻り値の取得 | C++23 |
+| `initial_suspend` | 初期サスペンドポイント動作の制御 | C++23 |
+| `final_suspend` | 最終サスペンドポイント動作の制御 | C++23 |
+| `yield_value` | co_yield式動作の制御 | C++23 |
+| `await_transform` | co_await式動作の制御 | C++23 |
+| `return_void` | コルーチンreturn動作の制御 | C++23 |
+| `unhandled_exception` | 未処理例外の制御 | C++23 |
+| `operator new` | カスタムnew演算子 | C++23 |
+| `operator delete` | カスタムdelete演算子 | C++23 |
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang):
+- [GCC](/implementation.md#gcc):
+- [ICC](/implementation.md#icc):
+- [Visual C++](/implementation.md#visual_cpp):
+
+## 関連項目
+- [`std::ranges::elements_of`](/reference/ranges/elements_of.md)
+
+## 参照
+- [P2502R2 `std::generator`: Synchronous Coroutine Generator for Ranges](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2502r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コルーチン -- cpp20/coroutines: C++23 &lt;generator&gt;へ言及</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/coroutines.html"/>
      <id>15bc9d8a0c10cff544ff15b77ee48c9de54233d3:lang/cpp20/coroutines.md</id>
      <updated>2022-12-31T17:03:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/coroutines.md b/lang/cpp20/coroutines.md
index e1a25d02f..302629405 100644
--- a/lang/cpp20/coroutines.md
+++ b/lang/cpp20/coroutines.md
@@ -8,7 +8,7 @@ C++20時点では、コルーチン動作に関する言語仕様と新キーワ
 
 ```cpp
 // コルーチンiotaを定義
-generator iota(int end)
+my_generator iota(int end)
 {
   for (int n = 0; n &amp;lt; end; ++n) {
     co_yield n;
@@ -21,13 +21,16 @@ for (int v: g) {
   std::cout &amp;lt;&amp;lt; v;
 }
 
-// &amp;#34;generator&amp;#34;はライブラリが提供するべきクラス。
+// &amp;#34;my_generator&amp;#34;はライブラリが提供するべきクラス。
 // 動作可能なサンプルコード全体は後述例を参照のこと。
 ```
 * co_yield[color ff0000]
 
 一般的なアプリケーション実装者からの利用を想定した、ジェネレータや非同期タスク・非同期I/Oといったハイレベルなコルーチンライブラリは、C++23以降での導入にむけて検討されている。
 
+C++23ではジェネレータコルーチンを実現する[`&amp;lt;generetor&amp;gt;`](/reference/generator.md)が追加された。
+
+
 ### 特徴
 C++コルーチンの特徴は次の通り：
 
@@ -63,7 +66,7 @@ C++コルーチン動作理解の助けとなるよう、ここでは細部を
 
 ```cpp
 // プログラマが記述するコルーチン
-generator iota(int end)
+my_generator iota(int end)
 {
   for (int n = 0; n &amp;lt; end; ++n) {
     co_yield n;
@@ -71,13 +74,13 @@ generator iota(int end)
 }
 
 // C++コンパイラにより展開されたコード
-generator iota(int end)
+my_generator iota(int end)
 {
   // コルーチンに対応するPromiseオブジェクトを初期化
-  generator::promise_type promise;
+  my_generator::promise_type promise;
 
   // 戻り値型オブジェクトの初期化
-  generator result = promise.get_return_object();
+  my_generator result = promise.get_return_object();
   // コルーチンハンドルをget_return_object内で取得し、resultメンバで保持する。
   // 生成したresultオブジェクトは、初回のコルーチン中断時に呼出元へ返される。
 
@@ -445,7 +448,7 @@ _p_`.return_void()`が有効な式のとき、コルーチン本体の終端到
 #include &amp;lt;utility&amp;gt;
 
 // コルーチン利用ライブラリ: ジェネレータ型
-struct generator {
+struct my_generator {
   // ジェネレータに関連付けられるPromise型
   struct promise_type {
     // co_yield式で指定されるint値を保持する変数
@@ -455,7 +458,7 @@ struct generator {
     {
       // コルーチンに紐づくPromiseオブジェクト(*this)から
       // ジェネレータ型のコルーチン戻り値オブジェクトを生成
-      return generator{*this};
+      return my_generator{*this};
     };
     auto initial_suspend()
     {
@@ -505,14 +508,14 @@ struct generator {
     }
   };
 
-  ~generator()
+  ~my_generator()
   {
     if (coro_)
       coro_.destroy();
   }
 
-  generator(generator const&amp;amp;) = delete;
-  generator(generator&amp;amp;&amp;amp; rhs) 
+  my_generator(my_generator const&amp;amp;) = delete;
+  my_generator(my_generator&amp;amp;&amp;amp; rhs) 
     : coro_(std::exchange(rhs.coro_, nullptr)) {}
 
   // 範囲for構文サポート用のメンバ関数
@@ -531,7 +534,7 @@ struct generator {
 
 private:
   // Promiseオブジェクト経由でコルーチンハンドルを取得する
-  explicit generator(promise_type&amp;amp; p)
+  explicit my_generator(promise_type&amp;amp; p)
     : coro_(coro_handle::from_promise(p)) {}
 
   coro_handle coro_;
@@ -539,7 +542,7 @@ private:
 
 
 // ユーザ定義コルーチン
-generator iota(int end)
+my_generator iota(int end)
 {
   // コルーチンに対応したPromise型 generator::promise_typeの
   // Promiseオブジェクト(p)が生成される。
@@ -606,7 +609,8 @@ C++20コルーチンに関するキーワードは、いずれも接頭辞`co_`
 
 
 ## 関連項目
-- [`&amp;lt;coroutine&amp;gt;`](/reference/coroutine.md)
+- C++20 [`&amp;lt;coroutine&amp;gt;`](/reference/coroutine.md)
+- C++23 [`&amp;lt;generator&amp;gt;`](/reference/generator.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>generator -- generator: iteratorの説明</title>
      <link href="https://cpprefjp.github.io/reference/generator/generator.html"/>
      <id>8271607fde00661007d033e76843e007b4c17334:reference/generator/generator.md</id>
      <updated>2022-12-31T16:53:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/generator/generator.md b/reference/generator/generator.md
index 812d9e28e..8de067e34 100644
--- a/reference/generator/generator.md
+++ b/reference/generator/generator.md
@@ -20,8 +20,9 @@ namespace std {
 特殊化された`generator`は[`view`](/reference/ranges/view.md)および[`input_range`](/reference/ranges/input_range.md)のモデルである。
 
 戻り値型`generator`のコルーチン（以下、ジェネレータコルーチン）では`co_yield`式を用いて値を生成する。`co_yield` [`std::ranges::elements_of`](/reference/ranges/elements_of.md)`(rng)`式を用いると、ジェネレータコルーチンから入れ子Range(`rng`)の各要素を逐次生成する。
+ジェネレータコルーチンでは`co_await`式を利用できない。
 
-ジェネレータコルーチンは遅延評価される。ジェネレータコルーチンが返す`generator`オブジェクトの利用側（以下、呼び出し側）で先頭要素[`begin`](generator/begin.md.nolink)を指すイテレータを間接参照するまで、ジェネレータコルーチンの本体処理は実行されない。
+ジェネレータコルーチンは遅延評価される。ジェネレータコルーチンが返す`generator`オブジェクトの利用側（以下、呼び出し側）で先頭要素[`begin`](generator/begin.md)を指すイテレータを間接参照するまで、ジェネレータコルーチンの本体処理は実行されない。
 呼び出し側がイテレータの間接参照を試みるとジェネレータコルーチンを再開(resume)し、ジェネレータコルーチン本体処理において`co_yield`式に到達すると生成値を保持して再び中断(suspend)する。呼び出し側ではイテレータの間接参照の結果として生成値を取得する。
 
 
@@ -29,6 +30,7 @@ namespace std {
 
 - `value` == [`conditional_t`](/reference/type_traits/conditional.md)`&amp;lt;`[`is_void_v`](/reference/type_traits/is_void.md)`&amp;lt;V&amp;gt;,` [`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;Ref&amp;gt;, V&amp;gt;`
 - `reference` == [`conditional_t`](/reference/type_traits/conditional.md)`&amp;lt;`[`is_void_v`](/reference/type_traits/is_void.md)`&amp;lt;V&amp;gt;, Ref&amp;amp;&amp;amp;, Ref&amp;gt;`
+- [`iterator`](generator/iterator.md)
 
 
 ## 適格要件
@@ -48,11 +50,11 @@ namespace std {
 
 | 名前            | 説明           | 対応バージョン |
 |-----------------|----------------|----------------|
-| `(constructor)` | コンストラクタ | C++23 |
-| `(destructor)`  | デストラクタ   | C++23 |
-| `operator=`     | 代入演算子     | C++23 |
-| [`begin`](generator/begin.md.nolink) | Viewの先頭を指すイテレータを取得する | C++23 |
-| [`end`](generator/end.md.nolink) | Viewの番兵を取得する | C++23 |
+| [`(constructor)`](generator/op_constructor.md) | コンストラクタ | C++23 |
+| `(destructor)` | デストラクタ | C++23 |
+| `operator=(generator other) noexcept;` | ムーブ代入演算子 | C++23 |
+| [`begin`](generator/begin.md) | Viewの先頭を指すイテレータを取得する | C++23 |
+| [`end`](generator/end.md) | Viewの番兵を取得する | C++23 |
 
 ## メンバ型
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin -- generator: iteratorの説明</title>
      <link href="https://cpprefjp.github.io/reference/generator/generator/begin.html"/>
      <id>8271607fde00661007d033e76843e007b4c17334:reference/generator/generator/begin.md</id>
      <updated>2022-12-31T16:53:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/generator/generator/begin.md b/reference/generator/generator/begin.md
new file mode 100644
index 000000000..fc99bdf61
--- /dev/null
+++ b/reference/generator/generator/begin.md
@@ -0,0 +1,42 @@
+# begin
+* generator[meta header]
+* std[meta namespace]
+* generator[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+iterator begin();
+```
+* iterator[link iterator.md]
+
+
+## 概要
+ジェネレータコルーチンが生成するViewの先頭を指すイテレータを取得する。
+
+
+## 事前条件
+ジェネレータコルーチンは[初期サスペンドポイント](/lang/cpp20/coroutines.md)で中断している。
+
+
+## 効果
+ジェネレータ子ルーチンを再開(resume)する。
+
+
+## 戻り値
+ジェネレータコルーチンに対応する[`iterator`](iterator.md)オブジェクト。
+
+
+## 備考
+同じジェネレータ上で`begin`を複数回呼び出すと、プログラムは未定義の動作を引き起こす。
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- generator: iteratorの説明</title>
      <link href="https://cpprefjp.github.io/reference/generator/generator/end.html"/>
      <id>8271607fde00661007d033e76843e007b4c17334:reference/generator/generator/end.md</id>
      <updated>2022-12-31T16:53:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/generator/generator/end.md b/reference/generator/generator/end.md
new file mode 100644
index 000000000..c7289fa6d
--- /dev/null
+++ b/reference/generator/generator/end.md
@@ -0,0 +1,33 @@
+# end
+* generator[meta header]
+* std[meta namespace]
+* generator[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+default_sentinel_t end() const noexcept;
+```
+* default_sentinel_t[link /reference/iterator/default_sentinel_t.md]
+
+## 概要
+ジェネレータコルーチンが生成するViewの番兵を取得する。
+
+
+## 戻り値
+[`default_sentinel`](/reference/iterator/default_sentinel_t.md)
+
+
+## 例外
+投げない
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>generator::iterator -- generator: iteratorの説明</title>
      <link href="https://cpprefjp.github.io/reference/generator/generator/iterator.html"/>
      <id>8271607fde00661007d033e76843e007b4c17334:reference/generator/generator/iterator.md</id>
      <updated>2022-12-31T16:53:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/generator/generator/iterator.md b/reference/generator/generator/iterator.md
new file mode 100644
index 000000000..9929ae7ff
--- /dev/null
+++ b/reference/generator/generator/iterator.md
@@ -0,0 +1,75 @@
+# generator::iterator
+* generator[meta header]
+* class template[meta id-type]
+* std[meta namespace]
+* cpp23[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;class Ref, class V, class Allocator&amp;gt;
+  class generator&amp;lt;Ref, V, Allocator&amp;gt;::iterator {
+  public:
+    using value_type = value;
+    using difference_type = ptrdiff_t;
+
+    iterator(iterator&amp;amp;&amp;amp; other) noexcept;
+    iterator&amp;amp; operator=(iterator&amp;amp;&amp;amp; other) noexcept;
+
+    reference operator*() const noexcept(is_nothrow_copy_constructible_v&amp;lt;reference&amp;gt;);
+    iterator&amp;amp; operator++();
+    void operator++(int);
+
+    friend bool operator==(const iterator&amp;amp; i, default_sentinel_t);
+  };
+}
+```
+* generator[link ../generator.md]
+* value[link ../generator.md]
+* reference[link ../generator.md]
+* is_nothrow_copy_constructible_v[link /reference/type_traits/is_nothrow_copy_constructible.md]
+
+
+## 概要
+[`generator`](../generator.md)に対応する説明専用のイテレータ型。
+
+
+## メンバ関数
+### 構築・破棄
+
+| 名前            | 説明           | 対応バージョン |
+|-----------------|----------------|----------------|
+| `(constructor)` | コンストラクタ | C++23 |
+| `(destructor)`  | デストラクタ   | C++23 |
+| `operator=`     | 代入演算子     | C++23 |
+| `operator*()` | 間接参照 | C++23 |
+| `operator++()` | 前置インクリメント | C++23 |
+| `operator++(int)` | 後置インクリメント | C++23 |
+
+## メンバ型
+
+| 名前            | 説明           | 対応バージョン |
+|-----------------|----------------|----------------|
+| `value_type` | 要素型となる説明用の型[`value`](../generator.md) | C++23 |
+| `difference_type` | 2つの値の差を表す整数型`ptrdiff_t` | C++23 |
+
+### 比較演算子
+
+| 名前 | 説明 | 対応バージョン |
+|-----|-----|-----|
+| `bool operator==(const iterator&amp;amp; i, default_sentinel_t)` | 等値比較 | C++23 |
+| `bool operator!=(const iterator&amp;amp; i, default_sentinel_t)` | 非等値比較 (`==`により使用可能) | C++23 |
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang):
+- [GCC](/implementation.md#gcc):
+- [ICC](/implementation.md#icc):
+- [Visual C++](/implementation.md#visual_cpp):
+
+
+## 参照
+- [P2502R2 `std::generator`: Synchronous Coroutine Generator for Ranges](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2502r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- generator: iteratorの説明</title>
      <link href="https://cpprefjp.github.io/reference/generator/generator/op_constructor.html"/>
      <id>8271607fde00661007d033e76843e007b4c17334:reference/generator/generator/op_constructor.md</id>
      <updated>2022-12-31T16:53:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/generator/generator/op_constructor.md b/reference/generator/generator/op_constructor.md
new file mode 100644
index 000000000..1b7886930
--- /dev/null
+++ b/reference/generator/generator/op_constructor.md
@@ -0,0 +1,36 @@
+# コンストラクタ
+* generator[meta header]
+* std[meta namespace]
+* generator[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+generator(const generator&amp;amp;) = delete;   // (1)
+generator(generator&amp;amp;&amp;amp; other) noexcept;  // (2)
+```
+
+## 概要
+有効な`generator`オブジェクトは、ジェネレータ[コルーチン](/lang/cpp20/coroutines.md)呼び出しによってのみ生成される。
+
+- (1) コピーコンストラクタ : コピー禁止。
+- (2) ムーブコンストラクタ
+
+
+## 例外
+投げない
+
+
+## 備考
+- (2) ムーブ前に`other`から取得したイテレータは無効化されず、`*this`に対応するイテレータとなる。
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2024-07-28T08:06:53.193795</updated>
  <id>3c278a74-560a-44d5-8e37-ce711854b2fc</id>

  
    <entry>
      <title>コンストラクタ -- add range constructor to stack and queue (#1069)</title>
      <link href="https://cpprefjp.github.io/reference/queue/priority_queue/op_constructor.html"/>
      <id>14cc1a065c03a11cdaed748034843e3a66e125bd:reference/queue/priority_queue/op_constructor.md</id>
      <updated>2024-07-28T17:03:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/queue/priority_queue/op_constructor.md b/reference/queue/priority_queue/op_constructor.md
index 1c92229a6..ef3ff162e 100644
--- a/reference/queue/priority_queue/op_constructor.md
+++ b/reference/queue/priority_queue/op_constructor.md
@@ -79,7 +79,21 @@ priority_queue(InputIterator first, InputIterator last,
                const Compare&amp;amp; x,
                Container&amp;amp;&amp;amp; other,
                const Alloc&amp;amp; alloc);                       // (17) C++23
+
+template &amp;lt;container-compatible-range&amp;lt;T&amp;gt; R&amp;gt;
+priority_queue(from_range_t, R&amp;amp;&amp;amp; rg,
+               const Compare&amp;amp; x = Compare());             // (18) C++23
+
+template &amp;lt;container-compatible-range&amp;lt;T&amp;gt; R, class Alloc&amp;gt;
+priority_queue(from_range_t, R&amp;amp;&amp;amp; rg,
+               const Compare&amp;amp; x,
+               const Alloc&amp;amp; alloc);                       // (19) C++23
+
+template &amp;lt;container-compatible-range&amp;lt;T&amp;gt; R, class Alloc&amp;gt;
+priority_queue(from_range_t, R&amp;amp;&amp;amp; rg,
+               const Alloc&amp;amp; alloc);                       // (20) C++23
 ```
+* from_range_t[link ../../ranges/from_range_t.md]
 
 ## 概要
 - (1) : デフォルトコンストラクタ
@@ -98,6 +112,7 @@ priority_queue(InputIterator first, InputIterator last,
 - (13) : アロケータ指定でコピー構築する
 - (14) : アロケータ指定でムーブ構築する
 - (15), (16), (17) : アロケータ指定でイテレータ範囲から優先順位付きキューを構築する
+- (18), (19), (20) : Rangeから優先順位付きキューを構築する
 
 
 ## 要件
@@ -166,7 +181,6 @@ priority_queue(InputIterator first, InputIterator last,
     2. メンバ変数`c`のメモリアロケートに`alloc`を使用する。
     3. `c.insert(c.end(), first, last)`を呼び出す。
     4. [`make_heap`](/reference/algorithm/make_heap.md)`(c.begin(), c.end(), comp)`を呼び出す。
-    5. メンバ変数`c`のメモリアロケートに`alloc`を使用する。
 - (16) :
     1. メンバ変数`comp`を`x`でコピー構築する。
     2. メンバ変数`c`を`other`でコピー構築する。
@@ -179,6 +193,20 @@ priority_queue(InputIterator first, InputIterator last,
     3. メンバ変数`c`のメモリアロケートに`alloc`を使用する。
     4. `c.insert(c.end(), first, last)`を呼び出す。
     5. [`make_heap`](/reference/algorithm/make_heap.md)`(c.begin(), c.end(), comp)`を呼び出す。
+- (18) :
+    1. メンバ変数`comp`を`x`でコピー構築する。
+    2. `c.insert(c.end(), ranges::begin(rg), ranges::end(rg))`を呼び出す。
+    3. [`make_heap`](/reference/algorithm/make_heap.md)`(c.begin(), c.end(), comp)`を呼び出す。
+- (19) :
+    1. メンバ変数`comp`を`x`でコピー構築する。
+    2. メンバ変数`c`のメモリアロケートに`alloc`を使用する。
+    3. `c.insert(c.end(), ranges::begin(rg), ranges::end(rg))`を呼び出す。
+    4. [`make_heap`](/reference/algorithm/make_heap.md)`(c.begin(), c.end(), comp)`を呼び出す。
+- (20) :
+    1. メンバ変数`comp`を値初期化する。
+    2. メンバ変数`c`のメモリアロケートに`alloc`を使用する。
+    3. `c.insert(c.end(), ranges::begin(rg), ranges::end(rg))`を呼び出す。
+    4. [`make_heap`](/reference/algorithm/make_heap.md)`(c.begin(), c.end(), comp)`を呼び出す。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- add range constructor to stack and queue (#1069)</title>
      <link href="https://cpprefjp.github.io/reference/queue/queue/op_constructor.html"/>
      <id>14cc1a065c03a11cdaed748034843e3a66e125bd:reference/queue/queue/op_constructor.md</id>
      <updated>2024-07-28T17:03:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/queue/queue/op_constructor.md b/reference/queue/queue/op_constructor.md
index a5f74dd5e..0dfe840c6 100644
--- a/reference/queue/queue/op_constructor.md
+++ b/reference/queue/queue/op_constructor.md
@@ -33,7 +33,13 @@ queue(queue&amp;amp;&amp;amp; que, const Alloc&amp;amp; alloc);            // (9) C++11
 
 template&amp;lt;class InputIterator, class Alloc&amp;gt;
 queue(InputIterator first, InputIterator last, const Alloc&amp;amp;);  // (10) C++23
+
+template &amp;lt;container-compatible-range&amp;lt;T&amp;gt; R&amp;gt;
+queue(from_range_t, R&amp;amp;&amp;amp; rg);                       // (11) C++23
+template &amp;lt;container-compatible-range&amp;lt;T&amp;gt; R, class Alloc&amp;gt;
+queue(from_range_t, R&amp;amp;&amp;amp; rg, const Alloc&amp;amp; alloc);   // (12) C++23
 ```
+* from_range_t[link ../../ranges/from_range_t.md]
 
 ## 概要
 `queue` コンテナアダプタのオブジェクトを構築する。 
@@ -46,6 +52,7 @@ queue(InputIterator first, InputIterator last, const Alloc&amp;amp;);  // (10) C++23
 `alloc`: 内部のコンテナで使用するアロケータオブジェクト
 `que`: コピー・ムーブ元の`queue`オブジェクト
 `first`, `last`: 初期化に用いるイテレータのペア
+`rg`: 初期化に用いるRange
 
 ## 計算量
 線形 O(n)。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- add range constructor to stack and queue (#1069)</title>
      <link href="https://cpprefjp.github.io/reference/stack/stack/op_constructor.html"/>
      <id>14cc1a065c03a11cdaed748034843e3a66e125bd:reference/stack/stack/op_constructor.md</id>
      <updated>2024-07-28T17:03:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stack/stack/op_constructor.md b/reference/stack/stack/op_constructor.md
index c5da7122c..14b0c8d2f 100644
--- a/reference/stack/stack/op_constructor.md
+++ b/reference/stack/stack/op_constructor.md
@@ -17,7 +17,7 @@ stack() : stack(Container()) {}    // (1)
 explicit stack(const Container&amp;amp;);  // (2)
 explicit stack(Container&amp;amp;&amp;amp;);       // (3)
 
-template&amp;lt;class InputIterator&amp;gt;
+template &amp;lt;class InputIterator&amp;gt;
 stack(InputIterator first, InputIterator last);       // (4) C++23
 
 template &amp;lt;class Allocator&amp;gt;
@@ -35,9 +35,16 @@ stack(const stack&amp;amp; st, const Allocator&amp;amp; alloc);       // (8) C++11
 template &amp;lt;class Allocator&amp;gt;
 stack(stack&amp;amp;&amp;amp; st, const Allocator&amp;amp; alloc);            // (9) C++11
 
-template&amp;lt;class InputIterator, class Alloc&amp;gt;
+template &amp;lt;class InputIterator, class Alloc&amp;gt;
 stack(InputIterator first, InputIterator last, const Alloc&amp;amp;);  // (10) C++23
+
+template &amp;lt;container-compatible-range&amp;lt;T&amp;gt; R&amp;gt;
+stack(from_range_t, R&amp;amp;&amp;amp; rg);                          // (11) C++23
+
+template &amp;lt;container-compatible-range&amp;lt;T&amp;gt; R, class Alloc&amp;gt;
+stack(from_range_t, R&amp;amp;&amp;amp; rg, const Alloc&amp;amp; alloc);      // (12) C++23
 ```
+* from_range_t[link ../../ranges/from_range_t.md]
 
 ## 概要
 - (1) : デフォルトコンストラクタ。
@@ -50,6 +57,8 @@ stack(InputIterator first, InputIterator last, const Alloc&amp;amp;);  // (10) C++23
 - (8) : アロケータを受け取るコピーコンストラクタ。
 - (9) : アロケータを受け取るムーブコンストラクタ。
 - (10) : 元となるコンテナのイテレータペアとアロケータを受け取るコンストラクタ。
+- (11) : 元となるRangeを受け取るコンストラクタ。
+- (12) : 元となるRangeとアロケータを受け取るコンストラクタ。
 
 
 ## 効果
@@ -62,6 +71,8 @@ stack(InputIterator first, InputIterator last, const Alloc&amp;amp;);  // (10) C++23
 - (8) : メンバ変数`c`を`Container(st.c, alloc)`で初期化する。
 - (9) : メンバ変数`c`を`Container(`[`std::move`](/reference/utility/move.md)`(st.c), alloc)`で初期化する。
 - (10) : メンバ変数`c`を3つの引数`first`, `last`, `alloc`で初期化する。
+- (11) : メンバ変数`c`を`Container(from_range, rg)`で初期化する。
+- (12) : メンバ変数`c`を`Container(from_range, rg, alloc)`で初期化する。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- add iterator and allocator constructor to priority_queue</title>
      <link href="https://cpprefjp.github.io/reference/queue/priority_queue/op_constructor.html"/>
      <id>001b9fe895ef0d4d81555b5e06d76ee1a92d068d:reference/queue/priority_queue/op_constructor.md</id>
      <updated>2024-07-28T16:42:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/queue/priority_queue/op_constructor.md b/reference/queue/priority_queue/op_constructor.md
index 0623ab810..1c92229a6 100644
--- a/reference/queue/priority_queue/op_constructor.md
+++ b/reference/queue/priority_queue/op_constructor.md
@@ -62,6 +62,23 @@ priority_queue(const priority_queue&amp;amp; que,
 template &amp;lt;class Alloc&amp;gt;
 priority_queue(priority_queue&amp;amp;&amp;amp; que,
                const Alloc&amp;amp; alloc);                       // (14) C++11
+
+template &amp;lt;class InputIterator, class Alloc&amp;gt;
+priority_queue(InputIterator first, InputIterator last,
+               const Compare&amp;amp; x,
+               const Alloc&amp;amp; alloc);                       // (15) C++23
+
+template &amp;lt;class InputIterator, class Alloc&amp;gt;
+priority_queue(InputIterator first, InputIterator last,
+               const Compare&amp;amp; x,
+               const Container&amp;amp; other,
+               const Alloc&amp;amp; alloc);                       // (16) C++23
+
+template &amp;lt;class InputIterator, class Alloc&amp;gt;
+priority_queue(InputIterator first, InputIterator last,
+               const Compare&amp;amp; x,
+               Container&amp;amp;&amp;amp; other,
+               const Alloc&amp;amp; alloc);                       // (17) C++23
 ```
 
 ## 概要
@@ -80,6 +97,7 @@ priority_queue(priority_queue&amp;amp;&amp;amp; que,
 - (12) : 比較関数、元となるコンテナの一時オブジェクト、アロケータを受け取るコンストラクタ
 - (13) : アロケータ指定でコピー構築する
 - (14) : アロケータ指定でムーブ構築する
+- (15), (16), (17) : アロケータ指定でイテレータ範囲から優先順位付きキューを構築する
 
 
 ## 要件
@@ -143,6 +161,24 @@ priority_queue(priority_queue&amp;amp;&amp;amp; que,
     2. メンバ変数`c`を`que.c`でムーブ構築する。
     3. メンバ変数`c`のメモリアロケートに`alloc`を使用する。
     4. [`make_heap`](/reference/algorithm/make_heap.md)`(c.begin(), c.end(), comp)`を呼び出す。
+- (15) :
+    1. メンバ変数`comp`を`x`でコピー構築する。
+    2. メンバ変数`c`のメモリアロケートに`alloc`を使用する。
+    3. `c.insert(c.end(), first, last)`を呼び出す。
+    4. [`make_heap`](/reference/algorithm/make_heap.md)`(c.begin(), c.end(), comp)`を呼び出す。
+    5. メンバ変数`c`のメモリアロケートに`alloc`を使用する。
+- (16) :
+    1. メンバ変数`comp`を`x`でコピー構築する。
+    2. メンバ変数`c`を`other`でコピー構築する。
+    3. メンバ変数`c`のメモリアロケートに`alloc`を使用する。
+    4. `c.insert(c.end(), first, last)`を呼び出す。
+    5. [`make_heap`](/reference/algorithm/make_heap.md)`(c.begin(), c.end(), comp)`を呼び出す。
+- (17) :
+    1. メンバ変数`comp`を`x`でコピー構築する。
+    2. メンバ変数`c`を`other`でムーブ構築する。
+    3. メンバ変数`c`のメモリアロケートに`alloc`を使用する。
+    4. `c.insert(c.end(), first, last)`を呼び出す。
+    5. [`make_heap`](/reference/algorithm/make_heap.md)`(c.begin(), c.end(), comp)`を呼び出す。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- add range constructor to vector (#1069)</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/op_constructor.html"/>
      <id>4cf72eb1b866639d4cb3232cb4742af484697727:reference/vector/vector/op_constructor.md</id>
      <updated>2024-07-28T16:13:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/op_constructor.md b/reference/vector/vector/op_constructor.md
index 6c76bec67..0e73477f4 100644
--- a/reference/vector/vector/op_constructor.md
+++ b/reference/vector/vector/op_constructor.md
@@ -56,8 +56,13 @@ vector(initializer_list&amp;lt;T&amp;gt; il,
        const Allocator&amp;amp; a = Allocator());            // (10) C++11
 constexpr vector(initializer_list&amp;lt;T&amp;gt; il,
                  const Allocator&amp;amp; a = Allocator());  // (10) C++20
+
+template &amp;lt;container-compatible-range&amp;lt;T&amp;gt; R&amp;gt;
+constexpr vector(std::from_range_t, R&amp;amp;&amp;amp; rg,
+                 const Allocator&amp;amp; a = Allocator());  // (11) C++23
 ```
 * initializer_list[link /reference/initializer_list/initializer_list.md]
+* from_range_t[link ../../ranges/from_range_t.md]
 
 ## 概要
 `vector`オブジェクトを次に示す通りの要素で初期化する。
@@ -79,6 +84,7 @@ constexpr vector(initializer_list&amp;lt;T&amp;gt; il,
 - (8) : アロケータを別で受け取り、`vector` オブジェクトをコピー構築する。
 - (9) : アロケータを別で受け取り、`vector` オブジェクトをムーブ構築する。
 - (10) : 初期化子リストを受け取るコンストラクタ。`vector(il.`[`begin`](/reference/initializer_list/initializer_list/begin.md)`(), li.`[`end`](/reference/initializer_list/initializer_list/end.md)`(), a)` と等価。
+- (11) : Rangeコンストラクタ。アロケータ `a` を使用して、Range `rg` の要素から `vector` オブジェクトを構築する。
 
 
 ## 計算量
@@ -90,6 +96,7 @@ constexpr vector(initializer_list&amp;lt;T&amp;gt; il,
 - (8) : `x.`[`size`](size.md)`()` に対して線形時間
 - (9) : 定数時間。ただし、`a == x.`[`get_allocator`](get_allocator.md)`()` でなければ `x.`[`size`](size.md)`()` に対して線形時間。
 - (10) : `il.`[`size`](/reference/initializer_list/initializer_list/size.md)`()` に対して線形時間
+- (11) : [`ranges::distance`](../../iterator/ranges_distance.md)`(rg)` に対して線形時間。`R` のモデルが [`ranges::forward_range`](../../ranges/forward_range.md) でも [`ranges::sized_range`](../../ranges/sized_range.md) でもなければ、あらかじめ要素数が分からないため、再確保のコストが(対数オーダで)別途発生する。
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- add range constructor to list, deque, and string (#1069)</title>
      <link href="https://cpprefjp.github.io/reference/unordered_map/unordered_map/op_constructor.html"/>
      <id>3cac84021a71976657fcb10d7411ed4642e214b8:reference/unordered_map/unordered_map/op_constructor.md</id>
      <updated>2024-07-28T14:09:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_map/unordered_map/op_constructor.md b/reference/unordered_map/unordered_map/op_constructor.md
index e7bc4911e..34b0d996e 100644
--- a/reference/unordered_map/unordered_map/op_constructor.md
+++ b/reference/unordered_map/unordered_map/op_constructor.md
@@ -67,8 +67,27 @@ unordered_map(initializer_list&amp;lt;value_type&amp;gt; il,
               size_type n,
               const hasher&amp;amp; hf, 
               const allocator_type&amp;amp; a);                             // (15) C++14
+
+template &amp;lt;container-compatible-range&amp;lt;value_type&amp;gt; R&amp;gt;
+unordered_map(std::from_range_t, R&amp;amp;&amp;amp; rg,
+              size_type n = 実装依存の既定値,
+              const hasher&amp;amp; hf = hasher(),
+              const key_equal&amp;amp; eql = key_equal(),
+              const allocator_type&amp;amp; a = allocator_type());          // (16) C++23
+
+template &amp;lt;container-compatible-range&amp;lt;value_type&amp;gt; R&amp;gt;
+unordered_map(std::from_range_t, R&amp;amp;&amp;amp; rg,
+              size_type n,
+              const allocator_type&amp;amp; a);                             // (17) C++23
+
+template &amp;lt;container-compatible-range&amp;lt;value_type&amp;gt; R&amp;gt;
+unordered_map(std::from_range_t, R&amp;amp;&amp;amp; rg,
+              size_type n,
+              const hasher&amp;amp; hf,
+              const allocator_type&amp;amp; a);                             // (18) C++23
 ```
 * initializer_list[link /reference/initializer_list/initializer_list.md]
+* from_range_t[link ../../ranges/from_range_t.md]
 
 ## 概要
 `unordered_map` オブジェクトを構築する
@@ -133,6 +152,12 @@ unordered_map(initializer_list&amp;lt;value_type&amp;gt; il,
 
 - (15) : (5) の形式を `unordered_map(il, n, hf, key_equal(), a)` として呼び出した場合と等価である。
 
+- (16) : バケット数最低 `n`、ハッシュ関数オブジェクト `hf`、キー比較用関数オブジェクト `eql`、アロケータオブジェクト `a` で `unordered_map` が構築された後、Range `rg` の要素が挿入される。
+
+- (17) : (16) の形式を `unordered_map(from_range, std::forward&amp;lt;R&amp;gt;(rg), n, hasher(), key_equal(), a)` として呼び出した場合と等価である。
+
+- (18) : (16) の形式を `unordered_map(from_range, std::forward&amp;lt;R&amp;gt;(rg), n, hf, key_equal(), a)` として呼び出した場合と等価である。
+
 
 ## 事後条件
 以下では構築されたオブジェクトを `u` とする。
@@ -190,6 +215,7 @@ unordered_map(initializer_list&amp;lt;value_type&amp;gt; il,
 - (13) : (3) の形式を `unordered_map(f, l, n, hf, key_equal(), a)` として呼び出した場合と等価。
 - (14) : (5) の形式を `unordered_map(il, n, hasher(), key_equal(), a)` として呼び出した場合と等価。
 - (15) : (5) の形式を `unordered_map(il, n, hf, key_equal(), a)` として呼び出した場合と等価。
+- (16), (17), (18) : 平均的には O(n)、ここで、n は [`ranges::distance`](../../iterator/ranges_distance.md)`(rg)`。最悪のケースでは O(n&amp;lt;sup&amp;gt;2&amp;lt;/sup&amp;gt;)
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- add range constructor to list, deque, and string (#1069)</title>
      <link href="https://cpprefjp.github.io/reference/unordered_map/unordered_multimap/op_constructor.html"/>
      <id>3cac84021a71976657fcb10d7411ed4642e214b8:reference/unordered_map/unordered_multimap/op_constructor.md</id>
      <updated>2024-07-28T14:09:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_map/unordered_multimap/op_constructor.md b/reference/unordered_map/unordered_multimap/op_constructor.md
index 766900cdf..0e44aed11 100644
--- a/reference/unordered_map/unordered_multimap/op_constructor.md
+++ b/reference/unordered_map/unordered_multimap/op_constructor.md
@@ -68,8 +68,27 @@ unordered_multimap(initializer_list&amp;lt;value_type&amp;gt; il,
                    size_type n,
                    const hasher&amp;amp; hf, 
                    const allocator_type&amp;amp; a);                              // (15) C++14
+
+template &amp;lt;container-compatible-range&amp;lt;value_type&amp;gt; R&amp;gt;
+unordered_multimap(std::from_range_t, R&amp;amp;&amp;amp; rg,
+                   size_type n = 実装依存の既定値,
+                   const hasher&amp;amp; hf = hasher(),
+                   const key_equal&amp;amp; eql = key_equal(),
+                   const allocator_type&amp;amp; a = allocator_type());           // (16) C++23
+
+template &amp;lt;container-compatible-range&amp;lt;value_type&amp;gt; R&amp;gt;
+unordered_multimap(std::from_range_t, R&amp;amp;&amp;amp; rg,
+                   size_type n,
+                   const allocator_type&amp;amp; a);                              // (17) C++23
+
+template &amp;lt;container-compatible-range&amp;lt;value_type&amp;gt; R&amp;gt;
+unordered_multimap(std::from_range_t, R&amp;amp;&amp;amp; rg,
+                   size_type n,
+                   const hasher&amp;amp; hf,
+                   const allocator_type&amp;amp; a);                              // (18) C++23
 ```
 * initializer_list[link /reference/initializer_list/initializer_list.md]
+* from_range_t[link ../../ranges/from_range_t.md]
 
 ## 概要
 `unordered_multimap` オブジェクトを構築する
@@ -136,6 +155,12 @@ unordered_multimap(initializer_list&amp;lt;value_type&amp;gt; il,
 
 - (15) : (5) の形式を `unordered_multimap(il, n, hf, key_equal(), a)` として呼び出した場合と等価である。
 
+- (16) : バケット数最低 `n`、ハッシュ関数オブジェクト `hf`、キー比較用関数オブジェクト `eql`、アロケータオブジェクト `a` で `unordered_multimap` が構築された後、Range `rg` の要素が挿入される。
+
+- (17) : (16) の形式を `unordered_multimap(from_range, std::forward&amp;lt;R&amp;gt;(rg), n, hasher(), key_equal(), a)` として呼び出した場合と等価である。
+
+- (18) : (16) の形式を `unordered_multimap(from_range, std::forward&amp;lt;R&amp;gt;(rg), n, hf, key_equal(), a)` として呼び出した場合と等価である。
+
 
 ## 事後条件
 以下では構築されたオブジェクトを `u` とする。
@@ -194,6 +219,7 @@ unordered_multimap(initializer_list&amp;lt;value_type&amp;gt; il,
 - (13) : (3) の形式を `unordered_multimap(f, l, n, hf, key_equal(), a)` として呼び出した場合と等価。
 - (14) : (5) の形式を `unordered_multimap(il, n, hasher(), key_equal(), a)` として呼び出した場合と等価。
 - (15) : (5) の形式を `unordered_multimap(il, n, hf, key_equal(), a)` として呼び出した場合と等価。
+- (16), (17), (18) : 平均的には O(n)、ここで、n は [`ranges::distance`](../../iterator/ranges_distance.md)`(rg)`。最悪のケースでは O(n&amp;lt;sup&amp;gt;2&amp;lt;/sup&amp;gt;)
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- add range constructor to list, deque, and string (#1069)</title>
      <link href="https://cpprefjp.github.io/reference/unordered_set/unordered_multiset/op_constructor.html"/>
      <id>3cac84021a71976657fcb10d7411ed4642e214b8:reference/unordered_set/unordered_multiset/op_constructor.md</id>
      <updated>2024-07-28T14:09:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_set/unordered_multiset/op_constructor.md b/reference/unordered_set/unordered_multiset/op_constructor.md
index e6fe7d5fb..3cbeb1ced 100644
--- a/reference/unordered_set/unordered_multiset/op_constructor.md
+++ b/reference/unordered_set/unordered_multiset/op_constructor.md
@@ -69,8 +69,27 @@ unordered_multiset(initializer_list&amp;lt;value_type&amp;gt; il,
                    size_type n,
                    const hasher&amp;amp; hf, 
                    const allocator_type&amp;amp; a);                              // (15) C++14
+
+template &amp;lt;container-compatible-range&amp;lt;value_type&amp;gt; R&amp;gt;
+unordered_multiset(std::from_range_t, R&amp;amp;&amp;amp; rg,
+                   size_type n = 実装依存の既定値,
+                   const hasher&amp;amp; hf = hasher(),
+                   const key_equal&amp;amp; eql = key_equal(),
+                   const allocator_type&amp;amp; a = allocator_type());           // (16) C++23
+
+template &amp;lt;container-compatible-range&amp;lt;value_type&amp;gt; R&amp;gt;
+unordered_multiset(std::from_range_t, R&amp;amp;&amp;amp; rg,
+                   size_type n,
+                   const allocator_type&amp;amp; a);                              // (17) C++23
+
+template &amp;lt;container-compatible-range&amp;lt;value_type&amp;gt; R&amp;gt;
+unordered_multiset(std::from_range_t, R&amp;amp;&amp;amp; rg,
+                   size_type n,
+                   const hasher&amp;amp; hf,
+                   const allocator_type&amp;amp; a);                              // (18) C++23
 ```
 * initializer_list[link /reference/initializer_list/initializer_list.md]
+* from_range_t[link ../../ranges/from_range_t.md]
 
 ## 概要
 `unordered_multiset` オブジェクトを構築する
@@ -137,6 +156,12 @@ unordered_multiset(initializer_list&amp;lt;value_type&amp;gt; il,
 
 - (15) : (5) の形式を `unordered_multiset(il, n, hf, key_equal(), a)` として呼び出した場合と等価である。
 
+- (16) : バケット数最低 `n`、ハッシュ関数オブジェクト `hf`、キー比較用関数オブジェクト `eql`、アロケータオブジェクト `a` で `unordered_multiset` が構築された後、Range `rg` の要素が挿入される。
+
+- (17) : (16) の形式を `unordered_multiset(from_range, std::forward&amp;lt;R&amp;gt;(rg), n, hasher(), key_equal(), a)` として呼び出した場合と等価である。
+
+- (18) : (16) の形式を `unordered_multiset(from_range, std::forward&amp;lt;R&amp;gt;(rg), n, hf, key_equal(), a)` として呼び出した場合と等価である。
+
 
 ## 事後条件
 以下では構築されたオブジェクトを `u` とする。
@@ -195,6 +220,7 @@ unordered_multiset(initializer_list&amp;lt;value_type&amp;gt; il,
 - (13) : (3) の形式を `unordered_multiset(f, l, n, hf, key_equal(), a)` として呼び出した場合と等価。
 - (14) : (5) の形式を `unordered_multiset(il, n, hasher(), key_equal(), a)` として呼び出した場合と等価。
 - (15) : (5) の形式を `unordered_multiset(il, n, hf, key_equal(), a)` として呼び出した場合と等価。
+- (16), (17), (18) : 平均的には O(n)、ここで、n は [`ranges::distance`](../../iterator/ranges_distance.md)`(rg)`。最悪のケースでは O(n&amp;lt;sup&amp;gt;2&amp;lt;/sup&amp;gt;)
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- add range constructor to list, deque, and string (#1069)</title>
      <link href="https://cpprefjp.github.io/reference/unordered_set/unordered_set/op_constructor.html"/>
      <id>3cac84021a71976657fcb10d7411ed4642e214b8:reference/unordered_set/unordered_set/op_constructor.md</id>
      <updated>2024-07-28T14:09:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_set/unordered_set/op_constructor.md b/reference/unordered_set/unordered_set/op_constructor.md
index 83ceb4e1e..e55faf15e 100644
--- a/reference/unordered_set/unordered_set/op_constructor.md
+++ b/reference/unordered_set/unordered_set/op_constructor.md
@@ -69,8 +69,27 @@ unordered_set(initializer_list&amp;lt;value_type&amp;gt; il,
               size_type n,
               const hasher&amp;amp; hf, 
               const allocator_type&amp;amp; a);                             // (15) C++14
+
+template &amp;lt;container-compatible-range&amp;lt;value_type&amp;gt; R&amp;gt;
+unordered_set(std::from_range_t, R&amp;amp;&amp;amp; rg,
+              size_type n = 実装依存の既定値,
+              const hasher&amp;amp; hf = hasher(),
+              const key_equal&amp;amp; eql = key_equal(),
+              const allocator_type&amp;amp; a = allocator_type());          // (16) C++23
+
+template &amp;lt;container-compatible-range&amp;lt;value_type&amp;gt; R&amp;gt;
+unordered_set(std::from_range_t, R&amp;amp;&amp;amp; rg,
+              size_type n,
+              const allocator_type&amp;amp; a);                             // (17) C++23
+
+template &amp;lt;container-compatible-range&amp;lt;value_type&amp;gt; R&amp;gt;
+unordered_set(std::from_range_t, R&amp;amp;&amp;amp; rg,
+              size_type n,
+              const hasher&amp;amp; hf,
+              const allocator_type&amp;amp; a);                             // (18) C++23
 ```
 * initializer_list[link /reference/initializer_list/initializer_list.md]
+* from_range_t[link ../../ranges/from_range_t.md]
 
 ## 概要
 `unordered_set` オブジェクトを構築する
@@ -137,6 +156,12 @@ unordered_set(initializer_list&amp;lt;value_type&amp;gt; il,
 
 - (15) : (5) の形式を `unordered_set(il, n, hf, key_equal(), a)` として呼び出した場合と等価である。
 
+- (16) : バケット数最低 `n`、ハッシュ関数オブジェクト `hf`、キー比較用関数オブジェクト `eql`、アロケータオブジェクト `a` で `unordered_set` が構築された後、Range `rg` の要素が挿入される。
+
+- (17) : (16) の形式を `unordered_set(from_range, std::forward&amp;lt;R&amp;gt;(rg), n, hasher(), key_equal(), a)` として呼び出した場合と等価である。
+
+- (18) : (16) の形式を `unordered_set(from_range, std::forward&amp;lt;R&amp;gt;(rg), n, hf, key_equal(), a)` として呼び出した場合と等価である。
+
 
 ## 事後条件
 以下では構築されたオブジェクトを `u` とする。
@@ -195,6 +220,7 @@ unordered_set(initializer_list&amp;lt;value_type&amp;gt; il,
 - (13) : (3) の形式を `unordered_set(f, l, n, hf, key_equal(), a)` として呼び出した場合と等価。
 - (14) : (5) の形式を `unordered_set(il, n, hasher(), key_equal(), a)` として呼び出した場合と等価。
 - (15) : (5) の形式を `unordered_set(il, n, hf, key_equal(), a)` として呼び出した場合と等価。
+- (16), (17), (18) : 平均的には O(n)、ここで、n は [`ranges::distance`](../../iterator/ranges_distance.md)`(rg)`。最悪のケースでは O(n&amp;lt;sup&amp;gt;2&amp;lt;/sup&amp;gt;)
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- add range constructor to list, deque, and string</title>
      <link href="https://cpprefjp.github.io/reference/deque/deque/op_constructor.html"/>
      <id>d0f20fcc442cbdefaf64774e01e0e908de46b3e5:reference/deque/deque/op_constructor.md</id>
      <updated>2024-07-27T23:46:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/deque/deque/op_constructor.md b/reference/deque/deque/op_constructor.md
index 8841fdf4f..81bb9d044 100644
--- a/reference/deque/deque/op_constructor.md
+++ b/reference/deque/deque/op_constructor.md
@@ -31,8 +31,13 @@ deque(deque&amp;amp;&amp;amp; y, const Allocator&amp;amp; a);             // (9) C++11 から
 
 deque(initializer_list&amp;lt;T&amp;gt; il,
       const Allocator&amp;amp; a = Allocator());          // (10) C++11 から
+
+template &amp;lt;container-compatible-range&amp;lt;T&amp;gt; R&amp;gt;
+deque(from_range_t, R&amp;amp;&amp;amp; rg,
+      const Allocator&amp;amp; a = Allocator());          // (11) C++23 から
 ```
 * initializer_list[link /reference/initializer_list/initializer_list.md]
+* from_range_t[link ../../ranges/from_range_t.md]
 
 
 ## 概要
@@ -55,6 +60,7 @@ deque(initializer_list&amp;lt;T&amp;gt; il,
 - (8) : コピーコンストラクタ。アロケータに `a` を使用して、`x` と同じ要素を保持した `deque` を構築する。
 - (9) : ムーブコンストラクタ。アロケータに `a` を使用して、ムーブセマンティクスを使って `y` の要素でコンテナを構築する。
 - (10) : 初期化子リストで要素を構築するコンストラクタ。`deque(il.`[`begin`](../../initializer_list/initializer_list/begin.md)`(), il.`[`end`](../../initializer_list/initializer_list/end.md)`(), a)` と等価。
+- (11) : Rangeコンストラクタ。アロケータに `a` を使用して、`rg` の要素で `deque` を構築する。
 
 
 ## 計算量
@@ -68,7 +74,8 @@ deque(initializer_list&amp;lt;T&amp;gt; il,
 - (7) : 定数時間
 - (8) : `x` の要素数に対して線形時間
 - (9) : `a == y.`[`get_allocator`](get_allocator.md)`()` の場合、定数時間、そうでなければ `y` の要素数に対して線形時間
-- (10) : `il`の要素数に対して線形時間
+- (10) : `il` の要素数に対して線形時間
+- (11) : `rg` の要素数に対して線形時間
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- add range constructor to list, deque, and string</title>
      <link href="https://cpprefjp.github.io/reference/forward_list/forward_list/op_constructor.html"/>
      <id>d0f20fcc442cbdefaf64774e01e0e908de46b3e5:reference/forward_list/forward_list/op_constructor.md</id>
      <updated>2024-07-27T23:46:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/forward_list/forward_list/op_constructor.md b/reference/forward_list/forward_list/op_constructor.md
index 8429ac4d3..8c5aea629 100644
--- a/reference/forward_list/forward_list/op_constructor.md
+++ b/reference/forward_list/forward_list/op_constructor.md
@@ -32,8 +32,13 @@ forward_list(forward_list&amp;amp;&amp;amp; x, const Allocator&amp;amp; a);      // (9) C++11
 
 forward_list(initializer_list&amp;lt;T&amp;gt; il,
              const Allocator&amp;amp; a = Allocator());          // (10) C++11
+
+template &amp;lt;container-compatible-range&amp;lt;T&amp;gt; R&amp;gt;
+forward_list(from_range_t, R&amp;amp;&amp;amp; rg,
+             const Allocator&amp;amp; a = Allocator());          // (11) C++23
 ```
 * initializer_list[link /reference/initializer_list/initializer_list.md]
+* from_range_t[link ../../ranges/from_range_t.md]
 
 ## 概要
 `forward_list`オブジェクトを、以下に示す通りの要素で初期化する。
@@ -53,6 +58,7 @@ forward_list(initializer_list&amp;lt;T&amp;gt; il,
 - (8) : アロケータを指定したコピーコンストラクタ  
 - (9) : アロケータを指定したムーブコンストラクタ  
 - (10) : 初期化子リストを受け取るコンストラクタ。`forward_list(il.`[`begin`](../../initializer_list/initializer_list/begin.md)`(), il.`[`end`](../../initializer_list/initializer_list/end.md)`(), a)` と等価。
+- (11) : Range `rg` の要素をコピーした `forward_list` オブジェクトを構築する。
 
 
 ## 計算量
@@ -65,6 +71,7 @@ forward_list(initializer_list&amp;lt;T&amp;gt; il,
 - (8) : `x` の要素数に対して線形時間
 - (9) : `x.`[`get_allocator`](get_allocator.md)`() == a` であれば、定数時間。そうでなければ `x` の要素数に対して線形時間
 - (10) : `il` の要素数に対して線形時間
+- (11) : `rg` の要素数に対して線形時間
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- add range constructor to list, deque, and string</title>
      <link href="https://cpprefjp.github.io/reference/list/list/op_constructor.html"/>
      <id>d0f20fcc442cbdefaf64774e01e0e908de46b3e5:reference/list/list/op_constructor.md</id>
      <updated>2024-07-27T23:46:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/list/list/op_constructor.md b/reference/list/list/op_constructor.md
index 2ec356e95..a881629f4 100644
--- a/reference/list/list/op_constructor.md
+++ b/reference/list/list/op_constructor.md
@@ -29,8 +29,13 @@ list(list&amp;amp;&amp;amp; x, const Allocator&amp;amp; a);              // (9) C++11 から
 
 list(initializer_list&amp;lt;T&amp;gt; il,
      const Allocator&amp;amp; a = Allocator());          // (10) C++11 から
+
+template &amp;lt;container-compatible-range&amp;lt;T&amp;gt; R&amp;gt;
+list(from_range_t, R&amp;amp;&amp;amp; rg,
+     const Allocator&amp;amp; a = Allocator());          // (11) C++23 から
 ```
 * initializer_list[link /reference/initializer_list/initializer_list.md]
+* from_range_t[link ../../ranges/from_range_t.md]
 
 
 ## 概要
@@ -48,6 +53,7 @@ list オブジェクトの構築
 - (8) : アロケータを指定したコピーコンストラクタ。
 - (9) : アロケータを指定したムーブコンストラクタ。
 - (10) : 初期化子リストを受け取るコンストラクタ。`list(il.`[`begin`](../../initializer_list/initializer_list/begin.md)`(), il.`[`end`](../../initializer_list/initializer_list/end.md)`(), a)` と等価。
+- (11) : Rangeコンストラクタ。Range `rg` の要素で `list` を構築する。
 
 
 ## 計算量
@@ -57,6 +63,8 @@ list オブジェクトの構築
 - (6), (8) : `x.`[`size`](size.md)`()` に対して線形時間
 - (7) : 定数時間
 - (9) : `a == x.`[`get_allocator`](get_allocator.md)`()` であれば定数時間。そうでなければ `x.`[`size`](size.md)`()` に対して線形時間
+- (10) : `il.`[`size`](../../initializer_list/initializer_list/size.md)`()` に対して線形時間
+- (11) : [`ranges::distance`](../../iterator/ranges_distance.md)`(rg)` に対して線形時間
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- add range constructor to list, deque, and string</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/op_constructor.html"/>
      <id>d0f20fcc442cbdefaf64774e01e0e908de46b3e5:reference/string/basic_string/op_constructor.md</id>
      <updated>2024-07-27T23:46:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/op_constructor.md b/reference/string/basic_string/op_constructor.md
index a4d4337da..5bf500824 100644
--- a/reference/string/basic_string/op_constructor.md
+++ b/reference/string/basic_string/op_constructor.md
@@ -118,8 +118,13 @@ constexpr basic_string(const T&amp;amp; t,
                        size_type pos,
                        size_type n,
                        const Allocator&amp;amp; a = Allocator());        // (15) C++20
+
+template &amp;lt;container-compatible-range&amp;lt;CharT&amp;gt; R&amp;gt;
+constexpr basic_string(from_range_t, R&amp;amp;&amp;amp; rg,
+                       const Allocator&amp;amp; a = Allocator());        // (19) C++23
 ```
 * initializer_list[link /reference/initializer_list/initializer_list.md]
+* from_range_t[link ../../ranges/from_range_t.md]
 
 ## 概要
 - (1) : デフォルトコンストラクタ。アロケータをデフォルト構築して空の`basic_string`オブジェクトを構築する。
@@ -139,6 +144,7 @@ constexpr basic_string(const T&amp;amp; t,
 - (15) : [`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;`に変換可能な`t`が参照する範囲の文字列の`pos`番目から`n`文字の部分文字列がコピーされる。`n == npos`の場合、`pos`番目から末尾までの部分文字列がコピーされる。
 - (17) : `str`オブジェクトの部分文字列のコピーから`basic_string`オブジェクトを構築する。`str`オブジェクトの`pos`番目から`n`文字の部分文字列がコピーされる。`n == npos`の場合、`pos`番目から末尾までの部分文字列がコピーされる。`str`は未規定の値になる。
 - (18) : `str`オブジェクトの部分文字列のコピーから`basic_string`オブジェクトを構築する。`str`オブジェクトの`pos`番目から末尾までの部分文字列がコピーされる。`str`は未規定の値になる。
+- (19) : Range`rg`から`basic_string`オブジェクトを構築する。
 
 
 ## テンプレートパラメータ制約
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
</feed>
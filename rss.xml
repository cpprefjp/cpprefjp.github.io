<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2024-10-09T14:42:30.357529</updated>
  <id>46e2aa6f-bc97-4ae9-bcfd-8dbd606c0483</id>

  
    <entry>
      <title>remove_cvref -- remove_cvref : 動作確認</title>
      <link href="https://cpprefjp.github.io/reference/type_traits/remove_cvref.html"/>
      <id>867bb4aca24d09a55f4c2cc8dd99370224a48b23:reference/type_traits/remove_cvref.md</id>
      <updated>2024-10-08T21:52:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/type_traits/remove_cvref.md b/reference/type_traits/remove_cvref.md
index bebdacd05..f2e95b9e1 100644
--- a/reference/type_traits/remove_cvref.md
+++ b/reference/type_traits/remove_cvref.md
@@ -55,8 +55,8 @@ int main() {}
 
 ### 処理系
 - [Clang](/implementation.md#clang): 6.0 [mark verified]
-- [GCC](/implementation.md#gcc):
-- [Visual C++](/implementation.md#visual_cpp): ??
+- [GCC](/implementation.md#gcc): 9 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2019 [mark verified]
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>初期化文での型の別名宣言を許可 [P2360R0] -- コメントの誤りを修正</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/extend_init_statement_to_allow_alias_declaration.html"/>
      <id>f9d46be05c3582e2150173beadd51475358fb1f2:lang/cpp23/extend_init_statement_to_allow_alias_declaration.md</id>
      <updated>2024-10-07T18:18:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/extend_init_statement_to_allow_alias_declaration.md b/lang/cpp23/extend_init_statement_to_allow_alias_declaration.md
index 484797e3e..fac074117 100644
--- a/lang/cpp23/extend_init_statement_to_allow_alias_declaration.md
+++ b/lang/cpp23/extend_init_statement_to_allow_alias_declaration.md
@@ -38,7 +38,7 @@ int main()
     std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl;
   }
 
-  // C++20 : OK
+  // C++20 : NG
   // C++23 : OK
   if (using T = int; T x = f()) {
     std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>format -- コード修飾を追加</title>
      <link href="https://cpprefjp.github.io/reference/chrono/format.html"/>
      <id>5d13ce90b81a3f49bec9aab0c6284ef829ae5edc:reference/chrono/format.md</id>
      <updated>2024-09-24T17:40:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/format.md b/reference/chrono/format.md
index 4871d0814..491b7d90c 100644
--- a/reference/chrono/format.md
+++ b/reference/chrono/format.md
@@ -115,6 +115,9 @@ int main()
   std::cout &amp;lt;&amp;lt; std::format(&amp;#34;8. {:%A}&amp;#34;, now) &amp;lt;&amp;lt; std::endl; // 曜日の完全名
 }
 ```
+* std::chrono::system_clock[link /reference/chrono/system_clock.md]
+* now()[link /reference/chrono/system_clock/now.md]
+* std::chrono::time_point_cast[link /reference/chrono/time_point_cast.md]
 
 ### 出力例
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>format -- chronoのformat : 世紀のロケール表現で元号はいまのところ扱われないので削除 #1352</title>
      <link href="https://cpprefjp.github.io/reference/chrono/format.html"/>
      <id>e97eeba76a8bcd059b3445d6f0f845c2fd3a1baa:reference/chrono/format.md</id>
      <updated>2024-09-24T17:38:30+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/format.md b/reference/chrono/format.md
index 09f1d46ef..4871d0814 100644
--- a/reference/chrono/format.md
+++ b/reference/chrono/format.md
@@ -44,8 +44,8 @@ chronoライブラリではこれに加え、たとえばデフォルトでは
 | `%A` | ロケール依存の曜日の完全名。&amp;lt;br/&amp;gt; 値に有効な曜日が含まれていない場合、[`std::format_error`](/reference/format/format_error.md)例外を送出する | `&amp;#34;Friday&amp;#34;`, `&amp;#34;金曜日&amp;#34;` |
 | `%b` | ロケール依存の月の略称。&amp;lt;br/&amp;gt; 値に有効な月が含まれていない場合、[`std::format_error`](/reference/format/format_error.md)例外を送出する | `&amp;#34;Apr&amp;#34;`, `&amp;#34;4月&amp;#34;` |
 | `%B` | ロケール依存の月の完全名。&amp;lt;br/&amp;gt; 値に有効な月が含まれていない場合、[`std::format_error`](/reference/format/format_error.md)例外を送出する | `&amp;#34;April&amp;#34;`, `&amp;#34;4月&amp;#34;` |
-| `%c` | ロケール依存の日付・時間の表現。改良コマンド`%Ec`を指定すると、異なる表現を出力する | `&amp;#34;Fri Apr 24 17:14:44 2020&amp;#34;`&amp;lt;br/&amp;gt; `&amp;#34;2020年04月24日 17時14分44秒&amp;#34;`&amp;lt;br/&amp;gt; `%Ec`では`&amp;#34;令和02年04月24日 17時14分44秒&amp;#34;` |
-| `%C` | 100で切り下げ除算した年 (世紀)。結果が10進数で1桁の場合、先頭に`0`がつく。改良コマンド`%EC`を指定すると、ロケール依存の世紀の異なる表現を出力する | `&amp;#34;21&amp;#34;`&amp;lt;br/&amp;gt; `%EC`では`&amp;#34;令和&amp;#34;` (元号) |
+| `%c` | ロケール依存の日付・時間の表現。改良コマンド`%Ec`を指定すると、異なる表現を出力する | `&amp;#34;Fri Apr 24 17:14:44 2020&amp;#34;`&amp;lt;br/&amp;gt; `&amp;#34;2020年04月24日 17時14分44秒&amp;#34;` |
+| `%C` | 100で切り下げ除算した年 (世紀)。結果が10進数で1桁の場合、先頭に`0`がつく。改良コマンド`%EC`を指定すると、ロケール依存の世紀の異なる表現を出力する | 2020年では`&amp;#34;20&amp;#34;`) |
 | `%d` | 10進数での月の日。結果が10進数で1桁の場合、先頭に`0`がつく。改良コマンド`%Od`を指定すると、ロケール依存の異なる表現を出力する | `&amp;#34;24&amp;#34;` |
 | `%D` | `%m/%d/%y`と等価 | `&amp;#34;04/24/20&amp;#34;` |
 | `%e` | 10進数での月の日。結果が10進数で1桁の場合、先頭にスペースがつく。改良コマンド`%Oe`を指定すると、ロケール依存の異なる表現を出力する | `&amp;#34; 1&amp;#34;` |
@@ -72,10 +72,10 @@ chronoライブラリではこれに加え、たとえばデフォルトでは
 | `%V` | 10進数でのISO週ベースの週番号。結果が1桁の場合、先頭に`0`がつく。改良コマンド`%OV`を指定すると、ロケール依存の異なる表現を出力する | `&amp;#34;17&amp;#34;` |
 | `%w` | 10進数での日曜を0とする曜日番号 (0-6)。改良コマンド`%Ow`を指定すると、ロケール依存の異なる表現を出力する | `&amp;#34;5&amp;#34;` |
 | `%W` | 10進数での年の週番号。年の最初の月曜日が最初の曜日であるとして`01`、同年のそれより前の日は`00`となる。結果が1桁の場合、先頭に`0`がつく。改良コマンド`%OW`を指定すると、ロケール依存の異なる表現を出力する | `&amp;#34;16&amp;#34;` |
-| `%x` | ロケール依存の日付表現。改良コマンド`%Ex`を指定すると、ロケール依存の異なる表現が出力される | `&amp;#34;04/24/20&amp;#34;`&amp;lt;br/&amp;gt; `&amp;#34;2020年04月24日&amp;#34;`&amp;lt;br/&amp;gt; `%Ex`では`&amp;#34;令和02年04月24日&amp;#34;` |
+| `%x` | ロケール依存の日付表現。改良コマンド`%Ex`を指定すると、ロケール依存の異なる表現が出力される | `&amp;#34;04/24/20&amp;#34;` |
 | `%X` | ロケール依存の時間表現。改良コマンド`%EX`を指定すると、ロケール依存の異なる表現が出力される | `&amp;#34;17:14:44&amp;#34;`&amp;lt;br/&amp;gt; `&amp;#34;17時14分44秒&amp;#34;` |
 | `%y` | 10進数での年のうしろ2桁。結果が1桁の場合、先頭に`0`がつく。改良コマンド`%Oy`を指定すると、ロケール依存の異なる表現を出力する。改良コマンド`%Ey`を指定すると、`%EC`からのオフセットとしてロケール依存の異なる表現を出力する。 | `&amp;#34;20&amp;#34;`&amp;lt;br/&amp;gt; `%Ey`では`&amp;#34;02&amp;#34;` |
-| `%Y` | 10進数での年。結果が4桁未満の場合、4桁になるよう左が`0`で埋められる。改良コマンド`%EY`を指定すると、ロケール依存の異なる表現の完全な年を出力する | `&amp;#34;2020&amp;#34;`&amp;lt;br/&amp;gt; `%EY`では`&amp;#34;令和02年&amp;#34;` |
+| `%Y` | 10進数での年。結果が4桁未満の場合、4桁になるよう左が`0`で埋められる。改良コマンド`%EY`を指定すると、ロケール依存の異なる表現の完全な年を出力する | `&amp;#34;2020&amp;#34;` |
 | `%z` | ISO 8601フォーマットでのUTCからのオフセット。例として`-0430`はUTCから4時間30分遅れていることを表す。オフセットがゼロの場合は`+0000`が使用される。改良コマンド`%Ez`と`%Oz`を指定すると、時と分の間にコロン (`:`) が挿入される。オフセット情報が利用可能でない場合、[`std::format_error`](/reference/format/format_error.md)例外を送出する | `&amp;#34;+0900&amp;#34;`&amp;lt;br/&amp;gt;`%Ez`では`&amp;#34;+09:00&amp;#34;` |
 | `%Z` | タイムゾーンの略称。タイムゾーンの略称が利用可能でない場合、[`std::format_error`](/reference/format/format_error.md)例外を送出する | `&amp;#34;JST&amp;#34;` |
 | `%%` | 文字`%` | `&amp;#34;%&amp;#34;` |
@@ -83,30 +83,58 @@ chronoライブラリではこれに加え、たとえばデフォルトでは
 - 便宜上のリテラルキャスト`STATICALLY-WIDEN`を導入する。`STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;...&amp;#34;)`は、`charT`が`char`である場合は`&amp;#34;...&amp;#34;`、`charT`が`wchar_t`である場合は`L&amp;#34;...&amp;#34;`を意味する。
 - [`hh_mm_ss`](hh_mm_ss.md)オブジェクトの[`is_negative()`](hh_mm_ss/is_negative.md)が`true`である場合、出力される文字列の先頭に`STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;-&amp;#34;)`が挿入される
 
+## 例外
+- 指定されたフォーマットフラグに必要な情報が含まれていない場合、[`format_error`](/reference/format/format_error.md)例外が送出される (例として、[`duration`](duration.md)には曜日をフォーマットするために必要な情報が含まれていない)
+    - ただし、フラグが時刻に関するもの (`%H`, `%I`, `%p`など) である場合、`duration`の特殊化は深夜0時からの経過した時刻として解釈する
+
+
+## 例
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;format&amp;gt;
 #include &amp;lt;chrono&amp;gt;
+
 int main()
 {
-  const auto now = std::chrono::system_clock::now();
-  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{:%Y}&amp;#34;, now); // =&amp;gt; 2021
+  auto now = std::chrono::system_clock::now(); // UTC時間の現在日時
+
+  // 日付を出力
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;1. {:%Y年%m月%d日}&amp;#34;, now) &amp;lt;&amp;lt; std::endl;
+
+  // 時間を出力。
+  // 秒単位のtime_pointに変換しないと、小数点以下の秒も出力される
+  auto now_sec = std::chrono::time_point_cast&amp;lt;std::chrono::seconds&amp;gt;(now);
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;2. {:%H時%M分%S秒}&amp;#34;, now) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;3. {:%H時%M分%S秒}&amp;#34;, now_sec) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;4. {:%p %I時%M分%S秒}&amp;#34;, now_sec) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;4. {:%p %I時%M分%S秒}&amp;#34;, now_sec) &amp;lt;&amp;lt; std::endl;
+
+  // その他要素
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;6. {:%C}&amp;#34;, now) &amp;lt;&amp;lt; std::endl; // 世紀 (100で割って切り下げた値)
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;7. {:%a}&amp;#34;, now) &amp;lt;&amp;lt; std::endl; // 曜日の略称
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;8. {:%A}&amp;#34;, now) &amp;lt;&amp;lt; std::endl; // 曜日の完全名
 }
 ```
 
-## 例外
-- 指定されたフォーマットフラグに必要な情報が含まれていない場合、[`format_error`](/reference/format/format_error.md)例外が送出される (例として、[`duration`](duration.md)には曜日をフォーマットするために必要な情報が含まれていない)
-    - ただし、フラグが時刻に関するもの (`%H`, `%I`, `%p`など) である場合、`duration`の特殊化は深夜0時からの経過した時刻として解釈する
-
+### 出力例
+```
+1. 2024年09月24日
+2. 08時27分28.1822610秒
+3. 08時27分28秒
+4. AM 08時27分28秒
+6. 20
+7. Tue
+8. Tuesday
+```
 
 ## バージョン
 ### 言語
 - C++20
 
 ### 処理系
-- [Clang](/implementation.md#clang): 9.0 [mark noimpl]
-- [GCC](/implementation.md#gcc): 9.2 [mark noimpl]
-- [Visual C++](/implementation.md#visual_cpp): 2019 Update 3 [mark noimpl]
+- [Clang](/implementation.md#clang): 17 [mark mark verified]
+- [GCC](/implementation.md#gcc): 13 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert -- リンク修正</title>
      <link href="https://cpprefjp.github.io/reference/map/map/insert.html"/>
      <id>2a58e28728e1be271dde61b672746c67b1672a1c:reference/map/map/insert.md</id>
      <updated>2024-09-24T15:38:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/map/insert.md b/reference/map/map/insert.md
index ab50a09df..b8c44319b 100644
--- a/reference/map/map/insert.md
+++ b/reference/map/map/insert.md
@@ -93,7 +93,7 @@ iterator           insert(const_iterator hint, node_type&amp;amp;&amp;amp; nh); // (10) C++17
     - 挿入された場合には、新しく挿入された要素を指すイテレータを返す。
     - 挿入されなかった場合には、`x`のキーと等価のキーを持つ要素へのイテレータを返す。
 - (7), (8) : なし
-- (9) : 戻り値としては、[`insert_return_type`](map.md)を返す。`insert_return_type`のイテレータ型メンバ変数`position`、`bool`型メンバ変数`inserted`に格納される値は(1), (2)のものと同じ情報である。`nh`が空の場合は、`position`は終端イテレータである。`node_type`型メンバ変数`node`には、
+- (9) : 戻り値としては、[`insert_return_type`](/reference/map/map.md)を返す。`insert_return_type`のイテレータ型メンバ変数`position`、`bool`型メンバ変数`inserted`に格納される値は(1), (2)のものと同じ情報である。`nh`が空の場合は、`position`は終端イテレータである。`node_type`型メンバ変数`node`には、
     - 挿入された場合には、空の[ノードハンドル](/reference/node_handle/node_handle.md)。
     - 挿入されなかった場合には、`nh`の値である。 
 - (10) : `nh`が空の場合、`(*this).end()`を返す。そうではない場合、`nh`と等価のキーの要素を指すイテレータを常に返す。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>key_comp -- リンク修正</title>
      <link href="https://cpprefjp.github.io/reference/map/map/key_comp.html"/>
      <id>2a58e28728e1be271dde61b672746c67b1672a1c:reference/map/map/key_comp.md</id>
      <updated>2024-09-24T15:38:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/map/key_comp.md b/reference/map/map/key_comp.md
index d0f784d0d..d752ac16d 100644
--- a/reference/map/map/key_comp.md
+++ b/reference/map/map/key_comp.md
@@ -54,7 +54,7 @@ int main()
 | 名前                            | 説明                                                     |
 |---------------------------------|----------------------------------------------------------|
 | [`value_comp`](value_comp.md)   | 要素比較用の関数オブジェクトを返す                       |
-| [`find`](map/find.md)           | 指定したキーで要素を探す                                 |
+| [`find`](find.md)               | 指定したキーで要素を探す                                 |
 | [`count`](count.md)             | 指定したキーにマッチする要素の数を返す                   |
 | [`lower_bound`](lower_bound.md) | 与えられた値より小さく無い最初の要素へのイテレータを返す |
 | [`upper_bound`](upper_bound.md) | 特定の値よりも大きい最初の要素へのイテレータを返す       |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
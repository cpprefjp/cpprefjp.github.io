<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-01-27T07:32:24.698506</updated>
  <id>abe9f8cb-562a-4bcb-ab6c-98103b3be585</id>

  
    <entry>
      <title>format -- &lt;format&gt; : range-default-formatterを追加 #1085</title>
      <link href="https://cpprefjp.github.io/reference/format.html"/>
      <id>2513346aaefb6f93d4740367084d9f30d30a05aa:reference/format.md</id>
      <updated>2023-01-27T16:28:04+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;format&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;format&amp;gt;&lt;/code&gt;ヘッダでは、書式文字列を使って引数をフォーマットする、いわゆる&lt;code&gt;printf&lt;/code&gt;スタイルのフォーマット関数を提供する。
このフォーマット関数は型安全であり、ユーザー定義型への拡張も可能である。&lt;/p&gt;
&lt;p&gt;書式文字列については&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/format.html&#34;&gt;format&lt;/a&gt;&lt;/code&gt;を参照。&lt;/p&gt;
&lt;h2&gt;フォーマット関数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/format.html&#34;&gt;format&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式文字列を使って引数をフォーマットした文字列を返す (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/format_to.html&#34;&gt;format_to&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式文字列を使って引数をフォーマットし、出力イテレータに出力する (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/format_to_n.html&#34;&gt;format_to_n&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式文字列を使って引数をフォーマットし、指定した文字数を超えないように出力イテレータに出力する (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/format_to_n_result.html&#34;&gt;format_to_n_result&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;format_to_n&lt;/code&gt;の結果を表す (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/formatted_size.html&#34;&gt;formatted_size&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式文字列を使って引数をフォーマットした文字列を保存するのに必要な文字数を返す (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/vformat.html&#34;&gt;vformat&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/format.html&#34;&gt;format&lt;/a&gt;&lt;/code&gt;の非テンプレート版 (function)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/vformat_to.html&#34;&gt;vformat_to&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/format_to.html&#34;&gt;format_to&lt;/a&gt;&lt;/code&gt;の非テンプレート版 (function)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;フォーマッター&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/formattable.html&#34;&gt;formattable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列フォーマット可能 (concept)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/formatter.html&#34;&gt;formatter&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;引数の型に対応する書式文字列の解析、値のフォーマットを担う (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/basic_format_parse_context.html&#34;&gt;basic_format_parse_context&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式文字列の解析のコンテキスト (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/basic_format_parse_context.html&#34;&gt;format_parse_context&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;basic_format_parse_context&lt;/code&gt;のマルチバイト文字列版 (type-alias)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/basic_format_parse_context.html&#34;&gt;wformat_parse_context&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;basic_format_parse_context&lt;/code&gt;のワイド文字列版 (type-alias)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/basic_format_context.html&#34;&gt;basic_format_context&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;引数のフォーマットのコンテキスト (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/basic_format_context.html&#34;&gt;format_context&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;basic_format_context&lt;/code&gt;のマルチバイト文字列版 (type-alias)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/basic_format_context.html&#34;&gt;wformat_context&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;basic_format_context&lt;/code&gt;のワイド文字列版 (type-alias)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/range_format.html&#34;&gt;range_format&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Rangeの書式種別 (enum)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/format_kind.html&#34;&gt;format_kind&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定したRangeの書式種別を取得する (variable)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/const-formattable-range.html&#34;&gt;const-formattable-range&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;const Range&lt;/code&gt;の要素型が文字列フォーマット可能 (concept)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/fmt-maybe-const.html&#34;&gt;fmt-maybe-const&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;formatter::format()&lt;/code&gt;関数のパラメータ型として使用するための(const) Range型を取得 (type-alias)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/range_formatter.html&#34;&gt;range_formatter&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Rangeに対する書式文字列の解析、値のフォーマットを行う (class template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/range-default-formatter.html&#34;&gt;range-default-formatter&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Rangeに対する共通の書式文字列の解析、値のフォーマットを行う説明専用クラス (class template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;引数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/basic_format_arg.html&#34;&gt;basic_format_arg&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;引数1つへのアクセスを提供する (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/visit_format_arg.html&#34;&gt;visit_format_arg&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;basic_format_arg&lt;/code&gt;オブジェクトが現在保持している型に対応する関数を呼び出す (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/make_format_args.html&#34;&gt;make_format_args&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;可変長引数から&lt;code&gt;basic_format_arg&lt;/code&gt;の列を構築する (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/make_format_args.html&#34;&gt;make_wformat_args&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;make_wformat_args&lt;/code&gt;のワイド文字列版 (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/basic_format_args.html&#34;&gt;basic_format_args&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;引数列へのアクセスを提供する (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/basic_format_args.html&#34;&gt;format_args&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;basic_format_args&lt;/code&gt;のマルチバイト文字列版 (type-alias)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/basic_format_args.html&#34;&gt;wformat_args&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;basic_format_args&lt;/code&gt;のワイド文字列版 (type-alias)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/format_error.html&#34;&gt;format_error&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;フォーマットの失敗を表す例外クラス (class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++20&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://timsong-cpp.github.io/cppwp/format&#34; target=&#34;_blank&#34;&gt;Working Draft, Standard for Programming Language C++ [format]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0645r10.html&#34; target=&#34;_blank&#34;&gt;P0645R10 Text Formatting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>formatter -- &lt;format&gt; : range-default-formatterを追加 #1085</title>
      <link href="https://cpprefjp.github.io/reference/format/formatter.html"/>
      <id>2513346aaefb6f93d4740367084d9f30d30a05aa:reference/format/formatter.md</id>
      <updated>2023-01-27T16:28:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/formatter.md b/reference/format/formatter.md
index 053e1069f..0106bb135 100644
--- a/reference/format/formatter.md
+++ b/reference/format/formatter.md
@@ -31,13 +31,13 @@ namespace std {
 * range_format[link range_format.md]
 * formattable[link formattable.md]
 * ranges::range_reference_t[link /reference/ranges/range_reference_t.md]
-* range-default-formatter[link range-default-formatter.md.nolink]
+* range-default-formatter[link range-default-formatter.md]
 
 ## 概要
 フォーマット引数の個々の型に対応する書式文字列の解析と値のフォーマットを担うクラス。
 
 - (1) : デフォルトのフォーマット
-- (2) : Range用のフォーマット。実装は[`range-default-formatter`](range-default-formatter.md.nolink)クラスが行う
+- (2) : Range用のフォーマット。実装は[`range-default-formatter`](range-default-formatter.md)クラスが行う
 - (3) : [`std::pair`](/reference/utility/pair.md)と[`std::tuple`](/reference/tuple/tuple.md)に対する特殊化
 - (4) : コンテナアダプタである[`std::queue`](/reference/queue/queue.md)、[`std::priority_queue`](/reference/queue/priority_queue.md)、[`std::stack`](/reference/stack/stack.md)に対する特殊化
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>range-default-formatter -- &lt;format&gt; : range-default-formatterを追加 #1085</title>
      <link href="https://cpprefjp.github.io/reference/format/range-default-formatter.html"/>
      <id>2513346aaefb6f93d4740367084d9f30d30a05aa:reference/format/range-default-formatter.md</id>
      <updated>2023-01-27T16:28:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/range-default-formatter.md b/reference/format/range-default-formatter.md
new file mode 100644
index 000000000..3d5c97b1e
--- /dev/null
+++ b/reference/format/range-default-formatter.md
@@ -0,0 +1,97 @@
+# range-default-formatter
+* format[meta header]
+* class template[meta id-type]
+* std[meta namespace]
+* cpp23[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;range_format K, ranges::input_range R, class charT&amp;gt;
+  struct range-default-formatter;      // (1) C++23
+
+  template &amp;lt;ranges::input_range R, class charT&amp;gt;
+  struct range-default-formatter&amp;lt;
+    range_format::sequence, R, charT&amp;gt;; // (2) C++23
+
+  template &amp;lt;ranges::input_range R, class charT&amp;gt;
+  struct range-default-formatter&amp;lt;
+    range_format::map, R, charT&amp;gt;;      // (3) C++23
+
+  template &amp;lt;ranges::input_range R, class charT&amp;gt;
+  struct range-default-formatter&amp;lt;
+    range_format::set, R, charT&amp;gt;;      // (4) C++23
+
+  template &amp;lt;range_format K, ranges::input_range R, class charT&amp;gt;
+    requires (K == range_format::string || K == range_format::debug_string)
+  struct range-default-formatter&amp;lt;
+    K, R, charT&amp;gt;;                      // (5) C++23
+}
+```
+* range_format[link range_format.md]
+* ranges::input_range[link /reference/ranges/input_range.md]
+
+## 概要
+`range-default-formatter`は、Range・コンテナに対するデフォルトの書式解析と書式文字列化を行う説明専用クラスである。
+
+このクラスは、[`formatter`](formatter.md)クラスのRange・コンテナに対する特殊化実装として標準ライブラリの内部で使用される。
+
+このクラスの内部実装として[`range_formatter`](range_formatter.md)が使用される。
+
+
+- (1) : プライマリテンプレート。宣言のみ
+- (2) : Range・シーケンスコンテナに対する特殊化。デバッグ出力の有効化と、`[a, b, c]`形式の出力を行う
+- (3) : [`std::map`](/reference/map/map.md)や[`std::flat_map`](/reference/flat_map/flat_map.md.nolink)などの連想コンテナに対する特殊化。デバッグ出力の有効化と、`{1: a, 2: b}`形式での出力を行う
+- (4) : [`std::set`](/reference/set/set.md)や[`std::flat_set`](/reference/flat_set/flat_set.md.nolink)などの集合コンテナに対する特殊化。デバッグ出力の有効化と、`{a, b, c}`形式の出力を行う
+- (5) : 文字列形式の出力を行うRangeに対する特殊化。Rangeを文字列として出力し、[`range_format::debug_string`](range_format.md)指定であればデバッグ文字列として出力する
+
+
+## 備考
+- (5) : この特殊化は規格上、標準ライブラリ内では使用されないが ([`formatter`](formatter.md)`&amp;lt;`[`string`](/reference/string/basic_string.md)`, charT&amp;gt;`がすでにある)、以下のような用途が考えられる
+    - ユーザー定義の文字列クラスを定義する場合に、[`format_kind`](format_kind.md)で値として[`range_format::string`](range_format.md)もしくは[`range_format::debug_string`](range_format.md)をもつよう特殊化するか ([`formatter`](formatter.md)`&amp;lt;`[`string`](/reference/string/basic_string.md)`, charT&amp;gt;`をラップする方がかんたんではある)
+    - [`std::vector&amp;lt;char&amp;gt;`](/reference/vector/vector.md)のような文字を要素とするシーケンスコンテナで、文字列形式で出力する書式オプション ([`s`や`?s`](format.md#range-format-options)) を指定した際に`range-default-formatter&amp;lt;range_format::sequence, R, charT&amp;gt;`の内部で使用される
+
+
+## メンバ関数
+
+| メンバ関数 | 説明 | 対応バージョン |
+|------------|------|----------------|
+| `parse`    | 書式の解析を行う | C++23 |
+| `format`   | 書式化を行う | C++23 |
+
+
+### sequenceに対する特殊化
+
+| メンバ関数 | 説明 | 対応バージョン |
+|------------|------|----------------|
+| `constexpr void set_separator(basic_string_view&amp;lt;charT&amp;gt; sep);` | 要素の区切り文字を設定する | C++23 |
+| `constexpr void set_brackets(basic_string_view&amp;lt;charT&amp;gt; opening, basic_string_view&amp;lt;charT&amp;gt; closing);` | 全体の囲み文字を設定する | C++23 |
+
+
+### mapに対する特殊化
+
+| メンバ関数 | 説明 | 対応バージョン |
+|------------|------|----------------|
+| `constexpr range-default-formatter();` | 全体の囲み文字を`{}`、要素の囲み文字を空、要素同士の区切り文字を`&amp;#34;: &amp;#34;`に設定する | C++23 |
+
+### setに対する特殊化
+
+| メンバ関数 | 説明 | 対応バージョン |
+|------------|------|----------------|
+| `constexpr range-default-formatter();` | 全体の囲み文字を`{}`に設定する | C++23 |
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P2286R8 Formatting Ranges](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2286r8.html)
+- [P2585R1 Improve default container formatting](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2585r1.html)
+    - C++23から、Range・コンテナ、`pair`、`tuple`のフォーマット出力、および文字・文字列のデバッグ指定 (`&amp;#34;?&amp;#34;`) が追加された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>range_formatter -- &lt;format&gt; : range-default-formatterを追加 #1085</title>
      <link href="https://cpprefjp.github.io/reference/format/range_formatter.html"/>
      <id>2513346aaefb6f93d4740367084d9f30d30a05aa:reference/format/range_formatter.md</id>
      <updated>2023-01-27T16:28:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/range_formatter.md b/reference/format/range_formatter.md
index c2d5c38f5..71ff8a66f 100644
--- a/reference/format/range_formatter.md
+++ b/reference/format/range_formatter.md
@@ -16,6 +16,8 @@ namespace std {
 ## 概要
 `range_formatter`は、Range・コンテナに対する[`formatter`](formatter.md)クラスの特殊化を実装するためのユーティリティクラスである。
 
+このクラスは、説明専用クラス[`range-default-formatter`](range-default-formatter.md)の内部実装として使用される。
+
 ユーザー定義のコンテナ・RangeをRange書式に対応する場合は、以下のようにする：
 
 - オリジナル書式を定義しないのであれば、このクラスではなく、[`format_kind`](format_kind.md)を特殊化する
@@ -148,7 +150,7 @@ aa:bb:cc:dd:ee:ff
 - [Visual C++](/implementation.md#visual_cpp): ??
 
 ## 関連項目
-- [`range-default-formatter`](range-default-formatter.md.nolink)
+- [`range-default-formatter`](range-default-formatter.md)
 - [`formatter`](formatter.md)
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>expected -- add link</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected.html"/>
      <id>c0e60600cf7f49f89512999e5cf3aa13dcff1747:reference/expected/expected.md</id>
      <updated>2023-01-27T01:35:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected.md b/reference/expected/expected.md
index d05209c37..3984d89de 100644
--- a/reference/expected/expected.md
+++ b/reference/expected/expected.md
@@ -118,6 +118,7 @@ int main()
 ```
 * std::expected[color ff0000]
 * std::unexpected[link unexpected.md]
+* std::quoted[link ../iomanip/quoted.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>I</name>
        <email>1091761+wx257osn2@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>unexpected -- add link</title>
      <link href="https://cpprefjp.github.io/reference/expected/unexpected.html"/>
      <id>c0e60600cf7f49f89512999e5cf3aa13dcff1747:reference/expected/unexpected.md</id>
      <updated>2023-01-27T01:35:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/unexpected.md b/reference/expected/unexpected.md
index d38727ae3..5b82dc97d 100644
--- a/reference/expected/unexpected.md
+++ b/reference/expected/unexpected.md
@@ -98,6 +98,7 @@ int main()
 ```
 * std::unexpected[color ff0000]
 * std::expected[link expected.md]
+* std::quoted[link ../iomanip/quoted.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>I</name>
        <email>1091761+wx257osn2@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_string -- add link</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string.html"/>
      <id>c0e60600cf7f49f89512999e5cf3aa13dcff1747:reference/string/basic_string.md</id>
      <updated>2023-01-27T01:35:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string.md b/reference/string/basic_string.md
index 3480d5efd..9e656c1df 100644
--- a/reference/string/basic_string.md
+++ b/reference/string/basic_string.md
@@ -287,6 +287,7 @@ int main()
   static_assert(f());
 }
 ```
+* s.data()[link basic_string/data.md]
 
 ## 参照
 - [N2668 Concurrency Modifications to Basic String](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2668.htm)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>I</name>
        <email>1091761+wx257osn2@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>unexpected -- add link</title>
      <link href="https://cpprefjp.github.io/reference/expected/unexpected.html"/>
      <id>e92dbda8d6943d59800e65802678279cbec5ee7d:reference/expected/unexpected.md</id>
      <updated>2023-01-27T01:00:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/unexpected.md b/reference/expected/unexpected.md
index 101eb5115..d38727ae3 100644
--- a/reference/expected/unexpected.md
+++ b/reference/expected/unexpected.md
@@ -97,6 +97,7 @@ int main()
 }
 ```
 * std::unexpected[color ff0000]
+* std::expected[link expected.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>I</name>
        <email>1091761+wx257osn2@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>unexpect_t -- fix missing variable name</title>
      <link href="https://cpprefjp.github.io/reference/expected/unexpect_t.html"/>
      <id>1d666c610ffc9418a8f2b397b11e613ccfa6ca84:reference/expected/unexpect_t.md</id>
      <updated>2023-01-27T01:00:27+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/unexpect_t.md b/reference/expected/unexpect_t.md
index 9dd3e2d9b..03ee4f5c6 100644
--- a/reference/expected/unexpect_t.md
+++ b/reference/expected/unexpect_t.md
@@ -10,7 +10,7 @@ namespace std {
     explicit unexpect_t() = default;
   };
 
-  inline constexpr unexpect_t {};
+  inline constexpr unexpect_t unexpect{};
 }
 ```
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>I</name>
        <email>1091761+wx257osn2@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>expected -- expected: unexpected,unexpect_t,bad_expected_access概要(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected.html"/>
      <id>f34854cf613a91f73823e1270b3eee6bca9dac9b:reference/expected.md</id>
      <updated>2023-01-26T22:51:58+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;expected&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;expected&lt;/span&gt;&lt;span class=&#34;cpp cpp23&#34; title=&#34;C++23で追加&#34;&gt;(C++23)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;expected&amp;gt;&lt;/code&gt;ヘッダでは、任意の正常値または任意のエラー値のどちらかを持たせられるオブジェクトの型を定義する。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/expected/expected.html&#34;&gt;expected&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;正常値かエラー値を保持するオブジェクト (class template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/expected/unexpected.html&#34;&gt;unexpected&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;エラー値の代入補助クラス (class template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/expected/unexpect_t.html&#34;&gt;unexpect_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;エラー値の直接構築を指示するタグ型 (class)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/expected/bad_expected_access.html&#34;&gt;bad_expected_access&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;エラー値保持時に正常値へアクセスした場合に発生する例外 (class template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++23&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: 16.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: 12.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/optional.html&#34;&gt;optional&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0323r12.html&#34; target=&#34;_blank&#34;&gt;P0323R12 std::expected&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2549r1.html&#34; target=&#34;_blank&#34;&gt;P2549R1 &lt;code&gt;std::unexpected&amp;lt;E&amp;gt;&lt;/code&gt; should have &lt;code&gt;error()&lt;/code&gt; as member accessor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2505r5.html&#34; target=&#34;_blank&#34;&gt;P2505R5 Monadic Functions for &lt;code&gt;std::expected&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>bad_expected_access -- expected: unexpected,unexpect_t,bad_expected_access概要(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/bad_expected_access.html"/>
      <id>f34854cf613a91f73823e1270b3eee6bca9dac9b:reference/expected/bad_expected_access.md</id>
      <updated>2023-01-26T22:51:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/bad_expected_access.md b/reference/expected/bad_expected_access.md
new file mode 100644
index 000000000..b4ec99ce1
--- /dev/null
+++ b/reference/expected/bad_expected_access.md
@@ -0,0 +1,81 @@
+# bad_expected_access
+* expected[meta header]
+* class template[meta id-type]
+* std[meta namespace]
+* cpp23[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;class E&amp;gt;
+  class bad_expected_access : public bad_expected_access&amp;lt;void&amp;gt; { ... };
+
+  // void特殊化
+  template&amp;lt;&amp;gt;
+  class bad_expected_access&amp;lt;void&amp;gt; : public exception { ... };
+}
+```
+* exception[link /reference/exception/exception.md]
+
+## 概要
+`bad_expected_access`は、[`expected`](expected.md)オブジェクトがエラー値を保持しているとき正常値にアクセスした場合に発生する例外である。
+
+
+## メンバ関数
+
+| 名前            | 説明           | 対応バージョン |
+|-----------------|----------------|-------|
+| [`(constructor)`](bad_expected_access/op_constructor.md.nolink) | コンストラクタ | C++23 |
+| `(destructor)` | デストラクタ | C++23 |
+| [`error`](bad_expected_access/error.md.nolink) | エラー値を取得する | C++23 |
+| [`what`](bad_expected_access/what.md.nolink) | エラー理由の文字列を取得する | C++23 |
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;expected&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+int main()
+{
+  std::expected&amp;lt;int, std::string&amp;gt; x = std::unexpected{&amp;#34;invalid&amp;#34;};
+
+  try {
+    assert(not x.has_value());
+    int value = x.value();  // bad_expected_access例外発生
+    std::cout &amp;lt;&amp;lt; &amp;#34;value: &amp;#34; &amp;lt;&amp;lt; value &amp;lt;&amp;lt; std::endl;
+  }
+  catch (const std::bad_expected_access&amp;lt;std::string&amp;gt;&amp;amp; ex) {
+    std::cout &amp;lt;&amp;lt; &amp;#34;error: &amp;#34; &amp;lt;&amp;lt; ex.error() &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* std::bad_expected_access[color ff0000]
+* std::unexpected[link unexpected.md]
+
+### 出力
+```
+error: invalid
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 16.0
+- [GCC](/implementation.md#gcc): 12.1
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`expected`](expected.md)
+- [`bad_optional_access`](/reference/optional/bad_optional_access.md)
+
+
+## 参照
+- [P0323R12 std::expected](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0323r12.html)
+- [P2549R1 `std::unexpected&amp;lt;E&amp;gt;` should have `error()` as member accessor](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2549r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>expected -- expected: unexpected,unexpect_t,bad_expected_access概要(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected.html"/>
      <id>f34854cf613a91f73823e1270b3eee6bca9dac9b:reference/expected/expected.md</id>
      <updated>2023-01-26T22:51:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected.md b/reference/expected/expected.md
index b10bda892..d05209c37 100644
--- a/reference/expected/expected.md
+++ b/reference/expected/expected.md
@@ -67,8 +67,8 @@ namespace std {
 
 | 名前         | 説明       | 対応バージョン |
 |--------------|------------|-------|
-| `operator==` | 等値比較   | C++23 |
-| `operator!=` | 非等値比較 | C++23 |
+| [`operator==`](unexpected/op_equal.md.nolink) | 等値比較 | C++23 |
+| [`operator!=`](unexpected/op_not_equal.md.nolink) | 非等値比較 | C++23 |
 
 
 ## メンバ型
@@ -77,7 +77,7 @@ namespace std {
 |-------------------|-----------------|-------|
 | `value_type`      | 正常値の型`T`   | C++23 |
 | `error_type`      | エラー値の型`E` | C++23 |
-| `unexpected_type` | [`unexpected&amp;lt;E&amp;gt;`](unexpected.md.nolink) | C++23 |
+| `unexpected_type` | [`unexpected&amp;lt;E&amp;gt;`](unexpected.md) | C++23 |
 | `template&amp;lt;class U&amp;gt; rebind` | `expected&amp;lt;U, error_type&amp;gt;` | C++23 |
 
 
@@ -117,12 +117,13 @@ int main()
 }
 ```
 * std::expected[color ff0000]
+* std::unexpected[link unexpected.md]
 
 ### 出力
 ```
 5
-out of domain
-divide by zero
+&amp;#34;out of domain&amp;#34;
+&amp;#34;divide by zero&amp;#34;
 ```
 
 
@@ -138,6 +139,7 @@ divide by zero
 
 
 ## 関連項目
+- [`unexpected`](unexpected.md)
 - [`optional`](/reference/optional/optional.md)
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>unexpect_t -- expected: unexpected,unexpect_t,bad_expected_access概要(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/unexpect_t.html"/>
      <id>f34854cf613a91f73823e1270b3eee6bca9dac9b:reference/expected/unexpect_t.md</id>
      <updated>2023-01-26T22:51:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/unexpect_t.md b/reference/expected/unexpect_t.md
new file mode 100644
index 000000000..9dd3e2d9b
--- /dev/null
+++ b/reference/expected/unexpect_t.md
@@ -0,0 +1,61 @@
+# unexpect_t
+* expected[meta header]
+* class[meta id-type]
+* std[meta namespace]
+* cpp23[meta cpp]
+
+```cpp
+namespace std {
+  struct unexpect_t {
+    explicit unexpect_t() = default;
+  };
+
+  inline constexpr unexpect_t {};
+}
+```
+
+## 概要
+`unexpected_t`は、[`expected`コンストラクタ](expected/op_constructor.md.nolink)において、エラー値型のコンストラクタ引数を受け取って構築するためのタグ型である。
+
+`unexpected_t`型の定数`unexpect`が提供される。
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;expected&amp;gt;
+#include &amp;lt;system_error&amp;gt;
+
+int main()
+{
+  std::expected&amp;lt;int, std::error_code&amp;gt; x{std::unexpect, ETIMEDOUT, std::system_category()};
+  assert(not x.has_value());
+  assert(x.error().value() == ETIMEDOUT);
+  assert(x.error().category() == std::system_category());
+}
+```
+* std::unexpect[color ff0000]
+* ETIMEDOUT[link /reference/system_error/errc.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 16.0
+- [GCC](/implementation.md#gcc): 12.1
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`expected`](expected.md)
+
+
+## 参照
+- [P0323R12 std::expected](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0323r12.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>unexpected -- expected: unexpected,unexpect_t,bad_expected_access概要(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/unexpected.html"/>
      <id>f34854cf613a91f73823e1270b3eee6bca9dac9b:reference/expected/unexpected.md</id>
      <updated>2023-01-26T22:51:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/unexpected.md b/reference/expected/unexpected.md
new file mode 100644
index 000000000..101eb5115
--- /dev/null
+++ b/reference/expected/unexpected.md
@@ -0,0 +1,126 @@
+# unexpected
+* expected[meta header]
+* class template[meta id-type]
+* std[meta namespace]
+* cpp23[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;class E&amp;gt;
+  class unexpected;
+}
+```
+
+## 概要
+`unexpected`クラスは、任意の型`E`の値をエラー値として表現する。
+
+
+## 適格要件
+`E`は非オブジェクト型、配列型、`unexpected&amp;lt;U&amp;gt;`、CV修飾された型のいずれでもないこと。
+
+
+## メンバ関数
+### 構築・破棄
+
+| 名前            | 説明           | 対応バージョン |
+|-----------------|----------------|-------|
+| [`(constructor)`](unexpected/op_constructor.md.nolink) | コンストラクタ | C++23 |
+| [`(destructor)`](unexpected/op_destructor.md.nolink)   | デストラクタ | C++23 |
+
+### 代入
+
+| 名前            | 説明           | 対応バージョン |
+|-----------------|----------------|-------|
+| [`operator=`](unexpected/op_assign.md.nolink) | 代入演算子     | C++23 |
+| [`swap`](unexpected/swap.md.nolink) | 他の`unexpected`オブジェクトとデータを入れ替える | C++23 |
+
+### 値の観測
+
+| 名前            | 説明           | 対応バージョン |
+|-----------------|----------------|-------|
+| [`error`](unexpected/error.md.nolink) | エラー値を取得する | C++23 |
+
+### 比較
+
+| 名前         | 説明       | 対応バージョン |
+|--------------|------------|-------|
+| [`operator==`](unexpected/op_equal.md.nolink) | 等値比較 | C++23 |
+| [`operator!=`](unexpected/op_not_equal.md.nolink) | 非等値比較 | C++23 |
+
+
+## 非メンバ関数
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|-------|
+| [`swap`](unexpected/swap_free.md.nolink) | 他の`unexpected`オブジェクトとデータを入れ替える | C++23 |
+
+## 推論補助
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|-------|
+| [`(deduction_guide)`](unexpected/op_deduction_guide.md.nolink) | クラステンプレートの推論補助 | C++23 |
+
+
+## 例
+```cpp example
+#include &amp;lt;expected&amp;gt;
+#include &amp;lt;iomanip&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+// 整数除算
+std::expected&amp;lt;int, std::string&amp;gt; idiv(int a, int b)
+{
+  if (b == 0) {
+    return std::unexpected{&amp;#34;divide by zero&amp;#34;};
+  }
+  if (a % b != 0) {
+    return std::unexpected{&amp;#34;out of domain&amp;#34;};        
+  }
+  return a / b;
+}
+
+void dump_result(const std::expected&amp;lt;int, std::string&amp;gt;&amp;amp; v)
+{
+  if (v) {
+    std::cout &amp;lt;&amp;lt; *v &amp;lt;&amp;lt; std::endl;
+  } else {
+    std::cout &amp;lt;&amp;lt; std::quoted(v.error()) &amp;lt;&amp;lt; std::endl;        
+  }
+}
+
+int main()
+{
+  dump_result(idiv(10, 2));
+  dump_result(idiv(10, 3));
+  dump_result(idiv(10, 0));
+}
+```
+* std::unexpected[color ff0000]
+
+### 出力
+```
+5
+&amp;#34;out of domain&amp;#34;
+&amp;#34;divide by zero&amp;#34;
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 16.0
+- [GCC](/implementation.md#gcc): 12.1
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`expected`](expected.md)
+
+
+## 参照
+- [P0323R12 std::expected](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0323r12.html)
+- [P2549R1 `std::unexpected&amp;lt;E&amp;gt;` should have `error()` as member accessor](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2549r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
</feed>
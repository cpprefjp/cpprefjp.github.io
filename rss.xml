<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-05-15T02:52:25.060825</updated>
  <id>626b7424-6fb6-45a0-aa3c-46cc0f9429c6</id>

  
    <entry>
      <title>flat_multiset -- flat_set / flat_multiset : 概要文章を追加 #1448</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_multiset.html"/>
      <id>f529f5d9fea79c03660a64477e0afacfc787351a:reference/flat_set/flat_multiset.md</id>
      <updated>2025-05-14T16:24:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_multiset.md b/reference/flat_set/flat_multiset.md
index 60d49067e..5c10721b4 100644
--- a/reference/flat_set/flat_multiset.md
+++ b/reference/flat_set/flat_multiset.md
@@ -16,6 +16,32 @@ namespace std {
 * vector[link /reference/vector/vector.md]
 
 ## 概要
+`std::flat_multiset`は、重複する要素を許可する連想コンテナの一種であり、要素自身がキーとなる、集合を表すクラスである。
+
+`std::flat_multiset`は、ノードベースで実装される[`std::multiset`](/reference/set/multiset.md)、ハッシュテーブルで実装される[`std::unordered_multiset`](/reference/unordered_set/unordered_multiset.md)とは異なり、ソート済み配列と二分探索の組み合わせで実装される。これはほかの実装と比較して、メモリ使用量と列挙速度において優位であり、一方で挿入速度と検索速度はほかの実装に劣る。
+
+また、このクラスは分類としては[`std::queue`](/reference/queue/queue.md)や[`std::skack`](/reference/stack/stack.md)と同様のコンテナアダプタに分類され、キーの配列をラップして扱う実装となっている。
+
+このコンテナクラスは、ランダムアクセスイテレータをサポートする。
+
+
+### ほかの連想コンテナとの要件の違い
+このクラスは要件として、コンテナクラスと、逆順コンテナクラスであることは満たすが、連想コンテナの要件としては以下を満たさない：
+
+- node handleに関する要件
+- イテレータ無効化に関する要件
+- 単一要素の挿入と削除に線形時間かかる (挿入位置のイテレータを指定したとしても)
+
+また、このコンテナはメモリアロケータを指定できない設計にもなっている。
+
+## テンプレートパラメータ制約
+- `KeyContainer`に指定するコンテナ型は、
+    - シーケンスコンテナの要件を満たし、
+    - ランダムアクセスイテレータをもつこと
+
+
+## 適格要件
+- `Key`が`KeyContainer::value_type`と同じ型であること
 
 
 ## メンバ関数
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>flat_set -- flat_set / flat_multiset : 概要文章を追加 #1448</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_set.html"/>
      <id>f529f5d9fea79c03660a64477e0afacfc787351a:reference/flat_set/flat_set.md</id>
      <updated>2025-05-14T16:24:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_set.md b/reference/flat_set/flat_set.md
index ece18174a..50e95d4bd 100644
--- a/reference/flat_set/flat_set.md
+++ b/reference/flat_set/flat_set.md
@@ -16,6 +16,32 @@ namespace std {
 * vector[link /reference/vector/vector.md]
 
 ## 概要
+`std::flat_set`は、重複しない要素を格納する連想コンテナの一種であり、要素自身がキーとなる、集合を表すクラスである。
+
+`std::flat_set`は、ノードベースで実装される[`std::set`](/reference/set/set.md)、ハッシュテーブルで実装される[`std::unordered_set`](/reference/unordered_set/unordered_set.md)とは異なり、ソート済み配列と二分探索の組み合わせで実装される。これはほかの実装と比較して、メモリ使用量と列挙速度において優位であり、一方で挿入速度と検索速度はほかの実装に劣る。
+
+また、このクラスは分類としては[`std::queue`](/reference/queue/queue.md)や[`std::skack`](/reference/stack/stack.md)と同様のコンテナアダプタに分類され、キーの配列をラップして扱う実装となっている。
+
+このコンテナクラスは、ランダムアクセスイテレータをサポートする。
+
+
+### ほかの連想コンテナとの要件の違い
+このクラスは要件として、コンテナクラスと、逆順コンテナクラスであることは満たすが、連想コンテナの要件としては以下を満たさない：
+
+- node handleに関する要件
+- イテレータ無効化に関する要件
+- 単一要素の挿入と削除に線形時間かかる (挿入位置のイテレータを指定したとしても)
+
+また、このコンテナはメモリアロケータを指定できない設計にもなっている。
+
+## テンプレートパラメータ制約
+- `KeyContainer`に指定するコンテナ型は、
+    - シーケンスコンテナの要件を満たし、
+    - ランダムアクセスイテレータをもつこと
+
+
+## 適格要件
+- `Key`が`KeyContainer::value_type`と同じ型であること
 
 
 ## メンバ関数
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>multiset -- set / multiset : 「集合」という言葉がでてきていなかったので補足</title>
      <link href="https://cpprefjp.github.io/reference/set/multiset.html"/>
      <id>fb9b7a8dbb69406653571dd3f1950a53175d6aee:reference/set/multiset.md</id>
      <updated>2025-05-14T16:21:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/multiset.md b/reference/set/multiset.md
index 595668e35..8afb5598e 100644
--- a/reference/set/multiset.md
+++ b/reference/set/multiset.md
@@ -19,8 +19,8 @@ namespace std {
 * allocator[link /reference/memory/allocator.md]
 * polymorphic_allocator[link /reference/memory_resource/polymorphic_allocator.md]
 
-
-`multiset` は連想コンテナの一種であり、要素自身がキーとなる。
+## 概要
+`multiset` は重複を許可する連想コンテナの一種であり、要素自身がキーとなる、集合を表すクラスである。
 
 連想コンテナは特にそれらキーによる要素アクセスが効率的になるよう設計されたコンテナである（要素への相対位置または絶対位置によるアクセスが効率的であるシーケンシャルコンテナとは異なる）。
 
@@ -33,8 +33,8 @@ namespace std {
 
 このコンテナクラスは、双方向イテレータをサポートする。
 
-各テンプレートパラメータは以下のような意味である。
 
+## テンプレートパラメータ
 - `Key`: キーの型。このコンテナに格納されれる要素の型。`multiset` に格納される要素はそれぞれはキーでもある。
 - `Compare`: 比較クラス。このクラスは 2 つの引数（同じ型であり、コンテナの要素型でもある）をとり `bool` 値を返す。[狭義の弱順序](/reference/algorithm.md#strict-weak-ordering)において `a` が `b` よりも前の場所に位置づけられる場合に `true` である。これはクラスが関数呼び出しオブジェクトを実装したクラスであっても良いし関数ポインタであっても良い（例は コンストラクタ を参照）。これは、`operator&amp;lt;()` を適用( `a &amp;lt; b` )したときと同じ値を返す [`less`](/reference/functional/less.md)`&amp;lt;Key&amp;gt;` がデフォルトである。
 - `Allocator`: ストレージアロケーションモデルを決定づける、アロケータオブジェクトの型である。デフォルトでは、`Key` への [`allocator`](/reference/memory/allocator.md) クラステンプレート（これは値に依存しないシンプルなメモリ確保モデルを定義する）が使われる。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>set -- set / multiset : 「集合」という言葉がでてきていなかったので補足</title>
      <link href="https://cpprefjp.github.io/reference/set/set.html"/>
      <id>fb9b7a8dbb69406653571dd3f1950a53175d6aee:reference/set/set.md</id>
      <updated>2025-05-14T16:21:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/set.md b/reference/set/set.md
index e564e5944..c1b6460fb 100644
--- a/reference/set/set.md
+++ b/reference/set/set.md
@@ -19,8 +19,8 @@ namespace std {
 * allocator[link /reference/memory/allocator.md]
 * polymorphic_allocator[link /reference/memory_resource/polymorphic_allocator.md]
 
-
-`set` はユニークな要素を格納する連想コンテナの一種であり、要素自身がキーとなる。
+## 概要
+`set` はユニークな要素を格納する連想コンテナの一種であり、要素自身がキーとなる、集合を表すクラスである。
 
 連想コンテナは特にそれらキーによる要素アクセスが効率的になるよう設計されたコンテナである（要素への相対位置または絶対位置によるアクセスが効率的であるシーケンシャルコンテナとは異なる）。
 
@@ -34,8 +34,8 @@ namespace std {
 
 このコンテナクラスは、双方向イテレータをサポートする。
 
-各テンプレートパラメータは以下のような意味である。
 
+## テンプレートパラメータ
 - `Key`: キーの型。このコンテナに格納されれる要素の型。`set` に格納される要素はそれぞれはキーでもある。
 - `Compare`: 比較クラス。このクラスは 2 つの引数（同じ型であり、コンテナの要素型でもある）をとり `bool` 値を返す。[狭義の弱順序](/reference/algorithm.md#strict-weak-ordering)において `a` が `b` よりも前の場所に位置づけられる場合に `true` である。これはクラスが関数呼び出しオブジェクトを実装したクラスであっても良いし関数ポインタであっても良い（例は コンストラクタ を参照）。これは、`operator&amp;lt;()` を適用( `a &amp;lt; b` )したときと同じ値を返す [`less`](/reference/functional/less.md)`&amp;lt;Key&amp;gt;` がデフォルトである。
 - `Allocator`: ストレージアロケーションモデルを決定づける、アロケータオブジェクトの型である。デフォルトでは、`Key` への [`allocator`](/reference/memory/allocator.md) クラステンプレート（これは値に依存しないシンプルなメモリ確保モデルを定義する）が使われる。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>flat_multimap -- flat_multimap : 概要文章を追加 #1448</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_multimap.html"/>
      <id>bfed2f08a048f683bae9c9c3c7cb845b51127ebc:reference/flat_map/flat_multimap.md</id>
      <updated>2025-05-14T15:56:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_multimap.md b/reference/flat_map/flat_multimap.md
index cc49593b5..e4ef34f39 100644
--- a/reference/flat_map/flat_multimap.md
+++ b/reference/flat_map/flat_multimap.md
@@ -18,6 +18,43 @@ namespace std {
 * vector[link /reference/vector/vector.md]
 
 ## 概要
+`flat_multimap` は同一キーの要素を複数格納できる連想コンテナの一種であり、キーとそれに対応する値を格納する。
+
+`std::flat_multimap`は、ノードベースで実装される[`std::multimap`](/reference/map/multimap.md)、ハッシュテーブルで実装される[`std::unordered_multimap`](/reference/unordered_map/unordered_multimap.md)とは異なり、ソート済み配列と二分探索の組み合わせで実装される。これはほかの実装と比較して、メモリ使用量と列挙速度において優位であり、一方で挿入速度と検索速度はほかの実装に劣る。
+
+また、このクラスは分類としては[`std::queue`](/reference/queue/queue.md)や[`std::skack`](/reference/stack/stack.md)と同様のコンテナアダプタに分類され、キーの配列と値の配列の2つを内部で持ち、それを[`std::ranges::zip_view`](/reference/ranges/zip_view.md)で綴じあわせて扱う実装となっている。
+
+このコンテナクラスは、ランダムアクセスイテレータをサポートする。
+
+
+### ほかの連想コンテナとの要件の違い
+このクラスは要件として、コンテナクラスと、逆順コンテナクラスであることは満たすが、連想コンテナの要件としては以下を満たさない：
+
+- node handleに関する要件
+- イテレータ無効化に関する要件
+- 単一要素の挿入と削除に線形時間かかる (挿入位置のイテレータを指定したとしても)
+
+また、このコンテナはメモリアロケータを指定できない設計にもなっている。
+
+`value_type`は、[`std::multimap`](/reference/map/multimap.md)では[`std::pair`](/reference/utility/pair.md)`&amp;lt;const Key, T&amp;gt;`だが、このクラスは[`std::pair`](/reference/utility/pair.md)`&amp;lt;Key, T&amp;gt;`である (`const`がつかない)。
+
+以下の不変条件をもち、メンバ関数のいずれかが例外によって終了した場合には不変条件の状態に復元される (ただし、その復元操作によってコンテナが空になる可能性がある)：
+
+- キーの配列と値の配列が、同じ要素数をもつ
+- キーの配列が、指定された比較関数オブジェクトを尊重してソートを行う
+- 値の配列内のオフセット`off`の値は、キー配列内のオフセット`off`のキーに関連付けられた値である
+
+
+## テンプレートパラメータ制約
+- `KeyContainer`と`MappedContainer`に指定するコンテナ型は、
+    - シーケンスコンテナの要件を満たし、
+    - ランダムアクセスイテレータをもち、
+    - 例外を送出しないメンバ関数`size()`と`max_size()`をもつこと
+
+
+## 適格要件
+- `Key`が`KeyContainer::value_type`と同じ型であること
+- `T`が`MappedContainer::value_type`と同じ型であること
 
 
 ## メンバ関数
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>map -- map / multimap : 概要の上にテンプレートパラメータの説明があったのを概要の下に移動</title>
      <link href="https://cpprefjp.github.io/reference/map/map.html"/>
      <id>f5e7d4484f1748b98381c24f4a61ce37f57518d0:reference/map/map.md</id>
      <updated>2025-05-14T15:51:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/map.md b/reference/map/map.md
index b0996ee65..75c8b0825 100644
--- a/reference/map/map.md
+++ b/reference/map/map.md
@@ -25,16 +25,6 @@ namespace std {
 * pair[link /reference/utility/pair.md]
 * polymorphic_allocator[link /reference/memory_resource/polymorphic_allocator.md]
 
-`map` コンテナは 4 つのテンプレートパラメータを取る。
-
-各テンプレートパラメータは以下のような意味である。
-
-- `Key`: キーの型。キーの値の大小に従って自動的に並び替えられる。
-- `T`: 値の型。
-- `pair&amp;lt;const Key, T&amp;gt;`: 要素の型。
-- `Compare`: 比較クラス。このクラスは 2 つの引数（同じ型）をとり `bool` 値を返す。[狭義の弱順序](/reference/algorithm.md#strict-weak-ordering)において `a` が `b` よりも前の場所に位置づけられる場合に `true` である。これはクラスが関数呼び出しオブジェクトを実装したクラスであっても良いし関数ポインタであっても良い（例は コンストラクタ を参照）。これは、`operator&amp;lt;()` を適用( `a &amp;lt; b` )したときと同じ値を返す `less&amp;lt;Key&amp;gt;` がデフォルトである。
-- `Allocator`: ストレージアロケーションモデルを決定づける、アロケータオブジェクトの型である。デフォルトでは、`pair&amp;lt;const Key, T&amp;gt;` への [`allocator`](/reference/memory/allocator.md) クラステンプレート（これは値に依存しないシンプルなメモリ確保モデルを定義する）が使われる。
-
 ## 概要
 `map` はユニークな要素を格納する連想コンテナの一種であり、キーとそれに対応する値を格納する。
 
@@ -52,6 +42,14 @@ namespace std {
 このコンテナクラスは、双方向イテレータをサポートする。
 
 
+## テンプレートパラメータ
+- `Key`: キーの型。キーの値の大小に従って自動的に並び替えられる。
+- `T`: 値の型。
+- `pair&amp;lt;const Key, T&amp;gt;`: 要素の型。
+- `Compare`: 比較クラス。このクラスは 2 つの引数（同じ型）をとり `bool` 値を返す。[狭義の弱順序](/reference/algorithm.md#strict-weak-ordering)において `a` が `b` よりも前の場所に位置づけられる場合に `true` である。これはクラスが関数呼び出しオブジェクトを実装したクラスであっても良いし関数ポインタであっても良い（例は コンストラクタ を参照）。これは、`operator&amp;lt;()` を適用( `a &amp;lt; b` )したときと同じ値を返す `less&amp;lt;Key&amp;gt;` がデフォルトである。
+- `Allocator`: ストレージアロケーションモデルを決定づける、アロケータオブジェクトの型である。デフォルトでは、`pair&amp;lt;const Key, T&amp;gt;` への [`allocator`](/reference/memory/allocator.md) クラステンプレート（これは値に依存しないシンプルなメモリ確保モデルを定義する）が使われる。
+
+
 ## メンバ関数
 ### 構築・破棄
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>multimap -- map / multimap : 概要の上にテンプレートパラメータの説明があったのを概要の下に移動</title>
      <link href="https://cpprefjp.github.io/reference/map/multimap.html"/>
      <id>f5e7d4484f1748b98381c24f4a61ce37f57518d0:reference/map/multimap.md</id>
      <updated>2025-05-14T15:51:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/multimap.md b/reference/map/multimap.md
index caf7eaede..e494b51b5 100644
--- a/reference/map/multimap.md
+++ b/reference/map/multimap.md
@@ -27,14 +27,6 @@ namespace std {
 
 `multimap` コンテナは 4 つのテンプレートパラメータを取る。
 
-各テンプレートパラメータは以下のような意味である。
-
-- `Key`: キーの型。キーの値の大小に従って自動的に並び替えられる。
-- `T`: 値の型。
-- `pair&amp;lt;const Key, T&amp;gt;`: 要素の型。
-- `Compare`: 比較クラス。このクラスは 2 つの引数（同じ型）をとり `bool` 値を返す。[狭義の弱順序](/reference/algorithm.md#strict-weak-ordering)において `a` が `b` よりも前の場所に位置づけられる場合に `true` である。これはクラスが関数呼び出しオブジェクトを実装したクラスであっても良いし関数ポインタであっても良い（例は コンストラクタ を参照）。これは、`operator&amp;lt;()` を適用( `a &amp;lt; b` )したときと同じ値を返す `less&amp;lt;Key&amp;gt;` がデフォルトである。
-- `Allocator`: ストレージアロケーションモデルを決定づける、アロケータオブジェクトの型である。デフォルトでは、`pair&amp;lt;const Key, T&amp;gt;` への [`allocator`](/reference/memory/allocator.md) クラステンプレート（これは値に依存しないシンプルなメモリ確保モデルを定義する）が使われる。
-
 ## 概要
 `multimap` は同一キーの要素を複数格納できる連想コンテナの一種であり、キーとそれに対応する値を格納する。
 
@@ -51,6 +43,14 @@ namespace std {
 このコンテナクラスは、双方向イテレータをサポートする。
 
 
+## テンプレートパラメータ
+- `Key`: キーの型。キーの値の大小に従って自動的に並び替えられる。
+- `T`: 値の型。
+- `pair&amp;lt;const Key, T&amp;gt;`: 要素の型。
+- `Compare`: 比較クラス。このクラスは 2 つの引数（同じ型）をとり `bool` 値を返す。[狭義の弱順序](/reference/algorithm.md#strict-weak-ordering)において `a` が `b` よりも前の場所に位置づけられる場合に `true` である。これはクラスが関数呼び出しオブジェクトを実装したクラスであっても良いし関数ポインタであっても良い（例は コンストラクタ を参照）。これは、`operator&amp;lt;()` を適用( `a &amp;lt; b` )したときと同じ値を返す `less&amp;lt;Key&amp;gt;` がデフォルトである。
+- `Allocator`: ストレージアロケーションモデルを決定づける、アロケータオブジェクトの型である。デフォルトでは、`pair&amp;lt;const Key, T&amp;gt;` への [`allocator`](/reference/memory/allocator.md) クラステンプレート（これは値に依存しないシンプルなメモリ確保モデルを定義する）が使われる。
+
+
 ## メンバ関数
 ### 構築・破棄
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
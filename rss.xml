<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2021-11-04T14:37:52.443737</updated>
  <id>b9fe0a30-e42b-408a-b8f9-2f35df21536c</id>

  
    <entry>
      <title>コルーチン -- cpp20/coroutines: final_suspendをnoexcept修飾</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/coroutines.html"/>
      <id>1480513c09a29e42c63f234822ef89782d0bc75e:lang/cpp20/coroutines.md</id>
      <updated>2021-11-04T15:10:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/coroutines.md b/lang/cpp20/coroutines.md
index 7146d8f5e..c4529885a 100644
--- a/lang/cpp20/coroutines.md
+++ b/lang/cpp20/coroutines.md
@@ -217,7 +217,7 @@ struct generator {
     static auto get_return_object_on_allocation_failure() { return generator{nullptr}; }
     auto get_return_object() { return generator{handle::from_promise(*this)}; }
     auto initial_suspend() { return std::suspend_always{}; }
-    auto final_suspend() { return std::suspend_always{}; }
+    auto final_suspend() noexcept { return std::suspend_always{}; }
     void unhandled_exception() { std::terminate(); }
     void return_void() {}
     auto yield_value(int value) {
@@ -462,7 +462,7 @@ struct generator {
       // コルーチン本体処理の開始前に無条件サスペンド
       return std::suspend_always{};
     }
-    auto final_suspend()
+    auto final_suspend() noexcept
     {
       // コルーチン本体処理の終了後に無条件サスペンド
       return std::suspend_always{};
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>coroutine_handle -- cpp20/coroutines: final_suspendをnoexcept修飾</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/coroutine_handle.html"/>
      <id>1480513c09a29e42c63f234822ef89782d0bc75e:reference/coroutine/coroutine_handle.md</id>
      <updated>2021-11-04T15:10:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/coroutine_handle.md b/reference/coroutine/coroutine_handle.md
index 5ef02aa28..f5acc3d11 100644
--- a/reference/coroutine/coroutine_handle.md
+++ b/reference/coroutine/coroutine_handle.md
@@ -115,7 +115,7 @@ struct task {
     int value_;
     auto get_return_object() { return task{*this}; }
     auto initial_suspend() { return std::suspend_never{}; }
-    auto final_suspend() { return std::suspend_always{}; }
+    auto final_suspend() noexcept { return std::suspend_always{}; }
     void return_value(int x) { value_ = x; }
     void unhandled_exception() { std::terminate(); }
   };
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>coroutine_traits -- cpp20/coroutines: final_suspendをnoexcept修飾</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/coroutine_traits.html"/>
      <id>1480513c09a29e42c63f234822ef89782d0bc75e:reference/coroutine/coroutine_traits.md</id>
      <updated>2021-11-04T15:10:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/coroutine_traits.md b/reference/coroutine/coroutine_traits.md
index 52f7b9cb9..06554cf6d 100644
--- a/reference/coroutine/coroutine_traits.md
+++ b/reference/coroutine/coroutine_traits.md
@@ -41,7 +41,7 @@ struct task;
 struct task_promise {
   task get_return_object();
   auto initial_suspend() { return std::suspend_never{}; }
-  auto final_suspend() { return std::suspend_always{}; }
+  auto final_suspend() noexcept { return std::suspend_always{}; }
   auto yield_value(int) { return std::suspend_always{}; }
   void return_void() {}
   void unhandled_exception() { std::terminate(); }
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>noop_coroutine -- cpp20/coroutines: final_suspendをnoexcept修飾</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/noop_coroutine.html"/>
      <id>1480513c09a29e42c63f234822ef89782d0bc75e:reference/coroutine/noop_coroutine.md</id>
      <updated>2021-11-04T15:10:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/noop_coroutine.md b/reference/coroutine/noop_coroutine.md
index d2f76f83c..b950820cc 100644
--- a/reference/coroutine/noop_coroutine.md
+++ b/reference/coroutine/noop_coroutine.md
@@ -39,7 +39,7 @@ struct task {
     std::coroutine_handle&amp;lt;&amp;gt; next_;
     auto get_return_object() { return task{*this}; }
     auto initial_suspend() { return std::suspend_always{}; }
-    auto final_suspend() { return std::suspend_always{}; }
+    auto final_suspend() noexcept { return std::suspend_always{}; }
     auto yield_value(bool cont)
     {
       struct awaiter {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>suspend_always -- cpp20/coroutines: final_suspendをnoexcept修飾</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/suspend_always.html"/>
      <id>1480513c09a29e42c63f234822ef89782d0bc75e:reference/coroutine/suspend_always.md</id>
      <updated>2021-11-04T15:10:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/suspend_always.md b/reference/coroutine/suspend_always.md
index 7ea7c21df..ed82a7406 100644
--- a/reference/coroutine/suspend_always.md
+++ b/reference/coroutine/suspend_always.md
@@ -42,7 +42,7 @@ struct task {
     {
       return std::suspend_always{};
     }
-    auto final_suspend()
+    auto final_suspend() noexcept
     {
       return std::suspend_always{};
     }
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>suspend_never -- cpp20/coroutines: final_suspendをnoexcept修飾</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/suspend_never.html"/>
      <id>1480513c09a29e42c63f234822ef89782d0bc75e:reference/coroutine/suspend_never.md</id>
      <updated>2021-11-04T15:10:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/suspend_never.md b/reference/coroutine/suspend_never.md
index a0219d5da..e398116f4 100644
--- a/reference/coroutine/suspend_never.md
+++ b/reference/coroutine/suspend_never.md
@@ -42,7 +42,7 @@ struct task {
     {
       return std::suspend_never{};
     }
-    auto final_suspend()
+    auto final_suspend() noexcept
     {
       return std::suspend_always{};
     }
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>byteswap -- byteswap : 宣言に名前空間を追加</title>
      <link href="https://cpprefjp.github.io/reference/bit/byteswap.html"/>
      <id>418b2a9acd0ee9ed058c5fabb4f2736a33a58b3f:reference/bit/byteswap.md</id>
      <updated>2021-10-28T19:08:27+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/bit/byteswap.md b/reference/bit/byteswap.md
index 28f729b78..c9bd67dd9 100644
--- a/reference/bit/byteswap.md
+++ b/reference/bit/byteswap.md
@@ -5,8 +5,10 @@
 * cpp23[meta cpp]
 
 ```cpp
-template &amp;lt;class T&amp;gt;
-constexpr T byteswap (T value) noexcept;
+namespace std {
+  template &amp;lt;class T&amp;gt;
+  constexpr T byteswap(T value) noexcept;
+}
 ```
 
 ## 概要
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>bit -- bit/byteswap: P1272R4対応</title>
      <link href="https://cpprefjp.github.io/reference/bit.html"/>
      <id>ebcb758d433f6ff9df4ae001816a3356a1bd0c72:reference/bit.md</id>
      <updated>2021-10-28T18:45:16+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;bit&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;bit&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;bit&amp;gt;&lt;/code&gt;ヘッダでは、ビット操作のための機能を定義する。&lt;/p&gt;
&lt;h2&gt;変換&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit/bit_cast.html&#34;&gt;bit_cast&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ビットレベルの再解釈キャスト (functional template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バイト入替&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit/byteswap.html&#34;&gt;byteswap&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;バイト単位入れ替え (functional template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;2の累乗整数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit/has_single_bit.html&#34;&gt;has_single_bit&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1ビットだけ立っている値をもっているか判定する (functional template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit/bit_ceil.html&#34;&gt;bit_ceil&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;整数値を2の累乗値に切り上げる (functional template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit/bit_floor.html&#34;&gt;bit_floor&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;整数値を2の累乗値に切り下げる (functional template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit/bit_width.html&#34;&gt;bit_width&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;値を表現するために必要なビット幅を求める (functional template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;循環ビットシフト&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit/rotl.html&#34;&gt;rotl&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;左循環ビットシフト (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit/rotr.html&#34;&gt;rotr&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;右循環ビットシフト (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;ビットカウント&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit/countl_zero.html&#34;&gt;countl_zero&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;左から連続した0のビットを数える (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit/countl_one.html&#34;&gt;countl_one&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;左から連続した1のビットを数える (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit/countr_zero.html&#34;&gt;countr_zero&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;右から連続した0のビットを数える (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit/countr_one.html&#34;&gt;countr_one&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;右から連続した1のビットを数える (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit/popcount.html&#34;&gt;popcount&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;立っているビットを数える (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;エンディアン&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit/endian.html&#34;&gt;endian&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;バイトの並び順を表す列挙型 (enum)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++20&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>byteswap -- bit/byteswap: P1272R4対応</title>
      <link href="https://cpprefjp.github.io/reference/bit/byteswap.html"/>
      <id>ebcb758d433f6ff9df4ae001816a3356a1bd0c72:reference/bit/byteswap.md</id>
      <updated>2021-10-28T18:45:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/bit/byteswap.md b/reference/bit/byteswap.md
new file mode 100644
index 000000000..28f729b78
--- /dev/null
+++ b/reference/bit/byteswap.md
@@ -0,0 +1,67 @@
+# byteswap
+* bit[meta header]
+* function template[meta id-type]
+* std[meta namespace]
+* cpp23[meta cpp]
+
+```cpp
+template &amp;lt;class T&amp;gt;
+constexpr T byteswap (T value) noexcept;
+```
+
+## 概要
+値`value`のオブジェクト表現に対してバイト単位で逆順並び替え（エンディアン変換）を行う。
+
+
+## テンプレートパラメータ制約
+型`T`が[`integral`](/reference/concepts/integral.md)のモデルであること
+
+
+## 適格要件
+型`T`がパディングビットを含まないこと
+
+
+## 戻り値
+`value`のオブジェクト表現をバイト単位で逆順に並び替えた整数型`T`の値を返す。
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;bit&amp;gt;
+#include &amp;lt;format&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  std::uint32_t src = 0x12345678u;
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{:x}&amp;#34;, src) &amp;lt;&amp;lt; std::endl;
+
+  std::uint32_t dst = std::byteswap(src);
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{:x}&amp;#34;, dst) &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::byteswap[color ff0000]
+* std::format[link /reference/format/format.md]
+
+### 出力
+```
+12345678
+78563412
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+## 参照
+- [P1272R4 Byteswapping for fun&amp;amp;&amp;amp;nuf](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p1272r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>参照メンバをもつクラスの置き換え -- C++17 参照メンバをもつクラスの置き換え : 行末スペースを削除</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/replacement_of_class_objects_containing_reference_members.html"/>
      <id>d320bd23b3a261c13310e963399079f9bc02c372:lang/cpp17/replacement_of_class_objects_containing_reference_members.md</id>
      <updated>2021-10-28T18:21:50+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/replacement_of_class_objects_containing_reference_members.md b/lang/cpp17/replacement_of_class_objects_containing_reference_members.md
index 1c395a19f..ecf1f23c2 100644
--- a/lang/cpp17/replacement_of_class_objects_containing_reference_members.md
+++ b/lang/cpp17/replacement_of_class_objects_containing_reference_members.md
@@ -31,16 +31,16 @@ int main()
 {
   int n = 12;
   X *p = new X{n};
-    
+
   int m = 34;
   new (p) X{m};
-    
+
   n = 56;
   m = 78;
-  
+
   // const int a = p-&amp;gt;n;  // 未定義動作
   const int a = std::launder(p)-&amp;gt;n;  // OK
-    
+
   std::cout &amp;lt;&amp;lt; a &amp;lt;&amp;lt; std::endl;
 }
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="http://cpprefjp.github.io" />
  <updated>2016-02-16T19:26:34.302885</updated>
  <id>4300d272-ebcd-4020-830f-e72ed3af0ce2</id>

  
    <entry>
      <title>noexcept -- C++11 noexcept : 整数定数式を考慮していなかった文章がまだあったので修正(#317)</title>
      <link href="http://cpprefjp.github.io/lang/cpp11/noexcept.html"/>
      <id>77c9c847279cb05118491e11d423354adbb0bcd9:lang/cpp11/noexcept.md</id>
      <updated>2016-02-16 19:26:29 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;noexcept&lt;span class=&#34;cpp cpp11&#34; title=&#34;C++11で追加&#34;&gt;(C++11)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;C++11で導入された&lt;code&gt;noexcept&lt;/code&gt;キーワードには、以下の2つの意味がある：&lt;/p&gt;
&lt;p&gt;ひとつは、&lt;code&gt;throw&lt;/code&gt;キーワードによる例外仕様の代替。関数がどの例外を送出する可能性があるかを列挙するのではなく、例外を送出する可能性があるかないかのみを指定する。例外を送出する可能性がある関数には&lt;code&gt;noexcept(false)&lt;/code&gt;を指定し、例外を送出する可能性がある関数には&lt;code&gt;noexcept(true)&lt;/code&gt;もしくは&lt;code&gt;noexcept&lt;/code&gt;を指定する：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Integer&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value_&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nl&#34;&gt;public:&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// getValue()メンバ関数は、例外を送出しない&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;getValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;noexcept&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;noexcept&lt;/code&gt;キーワードのもうひとつの意味は、式が例外を送出する可能性があるかどうかを判定する演算子である。&lt;code&gt;noexcept(f(arg))&lt;/code&gt;のように&lt;code&gt;noexcept&lt;/code&gt;演算子に式を指定することで、その式が例外を送出する可能性があるかどうかを、コンパイル時定数の&lt;code&gt;bool&lt;/code&gt;値として取得できる。つまり、関数に対して指定された&lt;code&gt;noexcept&lt;/code&gt;の情報を取得する：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://cpprefjp.github.io/lang/cpp11/static_assert.html&#34;&gt;static_assert&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;noexcept&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()),&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;getValue() function never throw exception&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;noexcept&lt;/code&gt;は、代表的には以下の2つの用途で使用できる：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;パフォーマンス向上&lt;ul&gt;
&lt;li&gt;例外を送出しないという保証があることで、コンパイラは例外送出によるスタック巻き戻しのためのスタックを確保する必要がなくなる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;例外を決して送出しない強い例外安全性の保証(No-throw guarantee)&lt;ul&gt;
&lt;li&gt;例外安全性で有名な問題として&lt;code&gt;stack&lt;/code&gt;の&lt;code&gt;pop&lt;/code&gt;操作がある。要素型&lt;code&gt;T&lt;/code&gt;のコピーコンストラクタが例外を送出する可能性があるために&lt;code&gt;pop&lt;/code&gt;の関数は&lt;code&gt;T&lt;/code&gt;を返すのではなく戻り値型&lt;code&gt;void&lt;/code&gt;とする必要があった。しかし&lt;code&gt;return&lt;/code&gt;文に指定する式が決して例外を送出しないという保証があることで、&lt;code&gt;pop&lt;/code&gt;の関数は&lt;code&gt;T&lt;/code&gt;型のオブジェクトを返せるようになる。&lt;/li&gt;
&lt;li&gt;参照： &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/document/generic_exception_safety.html&#34; target=&#34;_blank&#34;&gt;ジェネリックコンポーネントにおける例外安全性 - boostjp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;仕様&lt;/h2&gt;
&lt;h3&gt;例外仕様としてのnoexcept&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;例外仕様としての&lt;code&gt;noexcept&lt;/code&gt;には、整数定数式を引数として指定できる。整数定数式は、&lt;code&gt;bool&lt;/code&gt;に変換可能であること。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;noexcept&lt;/code&gt;例外仕様に対して&lt;code&gt;false&lt;/code&gt;に評価される整数定数式を指定した関数は、あらゆる例外を送出する可能性がある。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;noexcept&lt;/code&gt;例外仕様に対して&lt;code&gt;true&lt;/code&gt;に評価される整数定数式を指定した関数、もしくは引数なしで&lt;code&gt;noexcept&lt;/code&gt;を指定した関数は、いかなる例外も送出してはならない。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;noexcept&lt;/code&gt;例外仕様を指定しない関数は、一部の例外を除いて、&lt;code&gt;noexcept(false)&lt;/code&gt;を意味する。&lt;ul&gt;
&lt;li&gt;デストラクタと&lt;code&gt;delete&lt;/code&gt;演算子は、明示的に&lt;code&gt;noexcept(falseに評価される整数定数式)&lt;/code&gt;を指定しない限り、デフォルトで&lt;code&gt;noexcept&lt;/code&gt;である。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;X&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// デストラクタはデフォルトで&lt;span style=&#34;color:#ff0000&#34;&gt;noexcept&lt;/span&gt;(true)&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// 例外を送出する可能性がある&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// ※ &lt;a href=&#34;http://cpprefjp.github.io/reference/vector.html&#34;&gt;std::vector&lt;/a&gt;のコピーコンストラクタは例外を送出する&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector.html&#34;&gt;std::vector&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;getVector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//  &lt;a href=&#34;http://cpprefjp.github.io/reference/vector.html&#34;&gt;std::vector&lt;/a&gt;&amp;lt;T&amp;gt; getVector() const &lt;span style=&#34;color:#ff0000&#34;&gt;noexcept&lt;/span&gt;(false);&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// 例外を送出しない&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;getValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;noexcept&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//  int getValue() const &lt;span style=&#34;color:#ff0000&#34;&gt;noexcept&lt;/span&gt;(true);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;noexcept&lt;/code&gt;もしくは&lt;code&gt;noexcept(trueに評価される整数定数式)&lt;/code&gt;が指定された関数が例外を送出した場合、&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/exception/terminate.html&#34;&gt;std::terminate()&lt;/a&gt;&lt;/code&gt;関数を呼び出してプログラムを異常終了させる。その際、&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/exception/terminate.html&#34;&gt;std::terminate()&lt;/a&gt;&lt;/code&gt;関数が呼び出される前に、スタックの巻き戻しは起こらない可能性がある。&lt;/li&gt;
&lt;li&gt;従来の&lt;code&gt;throw&lt;/code&gt;キーワードによる例外仕様(C++03ではexception specification、C++11ではdynamic exception specificationと呼ばれる仕様)は、C++11以降で非推奨である。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;式が例外を送出する可能性があるか判定するnoexcept演算子&lt;/h3&gt;
&lt;p&gt;(執筆中)&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;(執筆中)&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;この機能が必要になった背景・経緯&lt;/h2&gt;
&lt;p&gt;(執筆中)&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3050.html&#34; target=&#34;_blank&#34;&gt;N3050 Allowing Move Constructors to Throw (Rev. 1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3166.html&#34; target=&#34;_blank&#34;&gt;N3166 Destructors default to &lt;code&gt;noexcept&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3167.html&#34; target=&#34;_blank&#34;&gt;N3167 Delete operators default to &lt;code&gt;noexcept&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3204.htm&#34; target=&#34;_blank&#34;&gt;N3204 Deducing &#34;&lt;code&gt;noexcept&lt;/code&gt;&#34; for destructors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3205.htm&#34; target=&#34;_blank&#34;&gt;N3205 Delete operators default to &lt;code&gt;noexcept&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3103.pdf&#34; target=&#34;_blank&#34;&gt;N3103 Security impact of &lt;code&gt;noexcept&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>noexcept -- C++11 noexcept : noexceptの関数で例外が送出された場合に、スタックの巻き戻しが起こらない可能性があることを記載(#317)</title>
      <link href="http://cpprefjp.github.io/lang/cpp11/noexcept.html"/>
      <id>8a1496f1ee76bd579418d9044559f4b00b23c4b0:lang/cpp11/noexcept.md</id>
      <updated>2016-02-16 19:16:04 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;noexcept&lt;span class=&#34;cpp cpp11&#34; title=&#34;C++11で追加&#34;&gt;(C++11)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;C++11で導入された&lt;code&gt;noexcept&lt;/code&gt;キーワードには、以下の2つの意味がある：&lt;/p&gt;
&lt;p&gt;ひとつは、&lt;code&gt;throw&lt;/code&gt;キーワードによる例外仕様の代替。関数がどの例外を送出する可能性があるかを列挙するのではなく、例外を送出する可能性があるかないかのみを指定する。例外を送出する可能性がある関数には&lt;code&gt;noexcept(false)&lt;/code&gt;を指定し、例外を送出する可能性がある関数には&lt;code&gt;noexcept(true)&lt;/code&gt;もしくは&lt;code&gt;noexcept&lt;/code&gt;を指定する：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Integer&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value_&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nl&#34;&gt;public:&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// getValue()メンバ関数は、例外を送出しない&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;getValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;noexcept&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;noexcept&lt;/code&gt;キーワードのもうひとつの意味は、式が例外を送出する可能性があるかどうかを判定する演算子である。&lt;code&gt;noexcept(f(arg))&lt;/code&gt;のように&lt;code&gt;noexcept&lt;/code&gt;演算子に式を指定することで、その式が例外を送出する可能性があるかどうかを、コンパイル時定数の&lt;code&gt;bool&lt;/code&gt;値として取得できる。つまり、関数に対して指定された&lt;code&gt;noexcept&lt;/code&gt;の情報を取得する：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://cpprefjp.github.io/lang/cpp11/static_assert.html&#34;&gt;static_assert&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;noexcept&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()),&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;getValue() function never throw exception&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;noexcept&lt;/code&gt;は、代表的には以下の2つの用途で使用できる：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;パフォーマンス向上&lt;ul&gt;
&lt;li&gt;例外を送出しないという保証があることで、コンパイラは例外送出によるスタック巻き戻しのためのスタックを確保する必要がなくなる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;例外を決して送出しない強い例外安全性の保証(No-throw guarantee)&lt;ul&gt;
&lt;li&gt;例外安全性で有名な問題として&lt;code&gt;stack&lt;/code&gt;の&lt;code&gt;pop&lt;/code&gt;操作がある。要素型&lt;code&gt;T&lt;/code&gt;のコピーコンストラクタが例外を送出する可能性があるために&lt;code&gt;pop&lt;/code&gt;の関数は&lt;code&gt;T&lt;/code&gt;を返すのではなく戻り値型&lt;code&gt;void&lt;/code&gt;とする必要があった。しかし&lt;code&gt;return&lt;/code&gt;文に指定する式が決して例外を送出しないという保証があることで、&lt;code&gt;pop&lt;/code&gt;の関数は&lt;code&gt;T&lt;/code&gt;型のオブジェクトを返せるようになる。&lt;/li&gt;
&lt;li&gt;参照： &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/document/generic_exception_safety.html&#34; target=&#34;_blank&#34;&gt;ジェネリックコンポーネントにおける例外安全性 - boostjp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;仕様&lt;/h2&gt;
&lt;h3&gt;例外仕様としてのnoexcept&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;例外仕様としての&lt;code&gt;noexcept&lt;/code&gt;には、整数定数式を引数として指定できる。整数定数式は、&lt;code&gt;bool&lt;/code&gt;に変換可能であること。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;noexcept&lt;/code&gt;例外仕様に対して&lt;code&gt;false&lt;/code&gt;に評価される整数定数式を指定した関数は、あらゆる例外を送出する可能性がある。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;noexcept&lt;/code&gt;例外仕様に対して&lt;code&gt;true&lt;/code&gt;に評価される整数定数式を指定した関数、もしくは引数なしで&lt;code&gt;noexcept&lt;/code&gt;を指定した関数は、いかなる例外も送出してはならない。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;noexcept&lt;/code&gt;例外仕様を指定しない関数は、一部の例外を除いて、&lt;code&gt;noexcept(false)&lt;/code&gt;を意味する。&lt;ul&gt;
&lt;li&gt;デストラクタと&lt;code&gt;delete&lt;/code&gt;演算子は、明示的に&lt;code&gt;noexcept(false)&lt;/code&gt;を指定しない限り、デフォルトで&lt;code&gt;noexcept&lt;/code&gt;である。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;X&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// デストラクタはデフォルトで&lt;span style=&#34;color:#ff0000&#34;&gt;noexcept&lt;/span&gt;(true)&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// 例外を送出する可能性がある&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// ※ &lt;a href=&#34;http://cpprefjp.github.io/reference/vector.html&#34;&gt;std::vector&lt;/a&gt;のコピーコンストラクタは例外を送出する&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector.html&#34;&gt;std::vector&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;getVector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//  &lt;a href=&#34;http://cpprefjp.github.io/reference/vector.html&#34;&gt;std::vector&lt;/a&gt;&amp;lt;T&amp;gt; getVector() const &lt;span style=&#34;color:#ff0000&#34;&gt;noexcept&lt;/span&gt;(false);&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// 例外を送出しない&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;getValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;noexcept&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//  int getValue() const &lt;span style=&#34;color:#ff0000&#34;&gt;noexcept&lt;/span&gt;(true);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;noexcept&lt;/code&gt;もしくは&lt;code&gt;noexcept(true)&lt;/code&gt;と指定された関数が例外を送出した場合、&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/exception/terminate.html&#34;&gt;std::terminate()&lt;/a&gt;&lt;/code&gt;関数を呼び出してプログラムを異常終了させる。その際、&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/exception/terminate.html&#34;&gt;std::terminate()&lt;/a&gt;&lt;/code&gt;関数が呼び出される前に、スタックの巻き戻しは起こらない可能性がある。&lt;/li&gt;
&lt;li&gt;従来の&lt;code&gt;throw&lt;/code&gt;キーワードによる例外仕様(C++03ではexception specification、C++11ではdynamic exception specificationと呼ばれる仕様)は、C++11以降で非推奨である。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;式が例外を送出する可能性があるか判定するnoexcept演算子&lt;/h3&gt;
&lt;p&gt;(執筆中)&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;(執筆中)&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;この機能が必要になった背景・経緯&lt;/h2&gt;
&lt;p&gt;(執筆中)&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3050.html&#34; target=&#34;_blank&#34;&gt;N3050 Allowing Move Constructors to Throw (Rev. 1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3166.html&#34; target=&#34;_blank&#34;&gt;N3166 Destructors default to &lt;code&gt;noexcept&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3167.html&#34; target=&#34;_blank&#34;&gt;N3167 Delete operators default to &lt;code&gt;noexcept&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3204.htm&#34; target=&#34;_blank&#34;&gt;N3204 Deducing &#34;&lt;code&gt;noexcept&lt;/code&gt;&#34; for destructors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3205.htm&#34; target=&#34;_blank&#34;&gt;N3205 Delete operators default to &lt;code&gt;noexcept&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3103.pdf&#34; target=&#34;_blank&#34;&gt;N3103 Security impact of &lt;code&gt;noexcept&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>terminate -- terminate : set_unexpectedへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/exception/terminate.html"/>
      <id>41811eb53ee88e4a8d8435c5cd97b551f351b074:reference/exception/terminate.md</id>
      <updated>2016-02-16 19:13:30 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;exception&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;terminate&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;noreturn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;terminate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;noexcept&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;terminate()&lt;/code&gt;は、プログラムを異常終了させる関数である。&lt;/p&gt;
&lt;p&gt;この関数は、特定の状況で呼び出されることが規定されている。&lt;/p&gt;
&lt;p&gt;もちろん、ユーザーが任意に呼び出すこともできる。&lt;/p&gt;
&lt;h2&gt;この関数が呼び出される状況&lt;/h2&gt;
&lt;p&gt;以下のいずれかに該当する場合、この&lt;code&gt;terminate()&lt;/code&gt;関数が呼び出される。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以下の場合で例外送出により脱出しようとした&lt;ul&gt;
&lt;li&gt;例外オブジェクトの初期化完了後～&lt;code&gt;catch&lt;/code&gt;節に突入する前の間に呼び出される関数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;noexcept&lt;/code&gt;または&lt;code&gt;noexcept(trueに評価される定数式)&lt;/code&gt;が指定されている関数&lt;/li&gt;
&lt;li&gt;例外処理に伴う自動変数（スタック上のオブジェクト）のデストラクタ&lt;/li&gt;
&lt;li&gt;非ローカル変数の初期化&lt;/li&gt;
&lt;li&gt;静的記憶期間・スレッド静的記憶期間のオブジェクトのデストラクタ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdlib/exit.html&#34;&gt;exit()&lt;/a&gt;&lt;/code&gt;や&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdlib/quick_exit.html&#34;&gt;quick_exit()&lt;/a&gt;&lt;/code&gt;内で呼び出される&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdlib/atexit.html&#34;&gt;atexit()&lt;/a&gt;&lt;/code&gt;や&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdlib/at_quick_exit.html&#34;&gt;at_quick_exit()&lt;/a&gt;&lt;/code&gt;で登録した関数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/exception/set_unexpected.html&#34;&gt;set_unexpected()&lt;/a&gt;&lt;/code&gt;で登録したハンドラで以下すべてを満たす場合&lt;ul&gt;
&lt;li&gt;発端となった例外指定に含まれない例外がハンドラから送出された&lt;/li&gt;
&lt;li&gt;発端となった例外指定に&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/exception/bad_exception.html&#34;&gt;bad_exception&lt;/a&gt;&lt;/code&gt;が含まれない&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;スレッドの開始関数（&lt;a href=&#34;http://cpprefjp.github.io/reference/thread/thread/op_constructor.html&#34;&gt;&lt;code&gt;thread&lt;/code&gt;のコンストラクタ&lt;/a&gt;で渡した関数）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;例外処理中でないのに式を持たない&lt;code&gt;throw&lt;/code&gt;式を実行しようとした&lt;/li&gt;
&lt;li&gt;デフォルトの予想外の例外のハンドラ（&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/exception/set_unexpected.html&#34;&gt;set_unexpected()&lt;/a&gt;&lt;/code&gt;が呼び出されていない状況でのハンドラ）が呼び出された&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/exception/nested_exception/rethrow_nested.html&#34;&gt;nested_exception::rethrow_nested()&lt;/a&gt;&lt;/code&gt;が例外を捕捉していない状況で呼び出された&lt;/li&gt;
&lt;li&gt;join可能な&lt;code&gt;thread&lt;/code&gt;（&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/thread/thread/joinable.html&#34;&gt;thread::joinable()&lt;/a&gt;&lt;/code&gt;が&lt;code&gt;true&lt;/code&gt;であるもの）に対して、デストラクタまたは代入演算子が実行された&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;終了ハンドラを呼び出す。&lt;/p&gt;
&lt;p&gt;終了ハンドラは&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/exception/set_terminate.html&#34;&gt;set_terminate()&lt;/a&gt;&lt;/code&gt;で指定できる。&lt;/p&gt;
&lt;p&gt;デフォルトの終了ハンドラは&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdlib/abort.html&#34;&gt;abort()&lt;/a&gt;&lt;/code&gt;を呼び出すことと規定されている。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;なし&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;投げない&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;exception&amp;gt;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;before &lt;span style=&#34;color:#ff0000&#34;&gt;terminate&lt;/span&gt;&#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;terminate&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// プログラムを終了させる&lt;/span&gt;

  &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;after &lt;span style=&#34;color:#ff0000&#34;&gt;terminate&lt;/span&gt;&#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 実行されない&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力例&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;This application has requested the Runtime to terminate it in an unusual way.
Please contact the application&#39;s support team for more information.
terminate called without an active exception
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;関係する関数&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/exception/get_terminate.html&#34;&gt;get_terminate&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/exception/set_terminate.html&#34;&gt;set_terminate&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;terminate&lt;/code&gt;が呼び出される状況&lt;ul&gt;
&lt;li&gt;N3337 15.5.1 The &lt;code&gt;std::terminate()&lt;/code&gt; function &lt;code&gt;[except.terminal]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>terminate -- terminate : atexitへのリンクミスを修正</title>
      <link href="http://cpprefjp.github.io/reference/exception/terminate.html"/>
      <id>fb75d7b4fd9323913b98d7c0ae7880e13a4fe5ed:reference/exception/terminate.md</id>
      <updated>2016-02-16 19:07:29 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;exception&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;terminate&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;noreturn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;terminate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;noexcept&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;terminate()&lt;/code&gt;は、プログラムを異常終了させる関数である。&lt;/p&gt;
&lt;p&gt;この関数は、特定の状況で呼び出されることが規定されている。&lt;/p&gt;
&lt;p&gt;もちろん、ユーザーが任意に呼び出すこともできる。&lt;/p&gt;
&lt;h2&gt;この関数が呼び出される状況&lt;/h2&gt;
&lt;p&gt;以下のいずれかに該当する場合、この&lt;code&gt;terminate()&lt;/code&gt;関数が呼び出される。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以下の場合で例外送出により脱出しようとした&lt;ul&gt;
&lt;li&gt;例外オブジェクトの初期化完了後～&lt;code&gt;catch&lt;/code&gt;節に突入する前の間に呼び出される関数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;noexcept&lt;/code&gt;または&lt;code&gt;noexcept(trueに評価される定数式)&lt;/code&gt;が指定されている関数&lt;/li&gt;
&lt;li&gt;例外処理に伴う自動変数（スタック上のオブジェクト）のデストラクタ&lt;/li&gt;
&lt;li&gt;非ローカル変数の初期化&lt;/li&gt;
&lt;li&gt;静的記憶期間・スレッド静的記憶期間のオブジェクトのデストラクタ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdlib/exit.html&#34;&gt;exit()&lt;/a&gt;&lt;/code&gt;や&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdlib/quick_exit.html&#34;&gt;quick_exit()&lt;/a&gt;&lt;/code&gt;内で呼び出される&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdlib/atexit.html&#34;&gt;atexit()&lt;/a&gt;&lt;/code&gt;や&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdlib/at_quick_exit.html&#34;&gt;at_quick_exit()&lt;/a&gt;&lt;/code&gt;で登録した関数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/exception/set_unexpected.html&#34;&gt;set_unexpected()&lt;/a&gt;&lt;/code&gt;で登録したハンドラで以下すべてを満たす場合&lt;ul&gt;
&lt;li&gt;発端となった例外指定に含まれない例外がハンドラから送出された&lt;/li&gt;
&lt;li&gt;発端となった例外指定に&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/exception/bad_exception.html&#34;&gt;bad_exception&lt;/a&gt;&lt;/code&gt;が含まれない&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;スレッドの開始関数（&lt;a href=&#34;http://cpprefjp.github.io/reference/thread/thread/op_constructor.html&#34;&gt;&lt;code&gt;thread&lt;/code&gt;のコンストラクタ&lt;/a&gt;で渡した関数）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;例外処理中でないのに式を持たない&lt;code&gt;throw&lt;/code&gt;式を実行しようとした&lt;/li&gt;
&lt;li&gt;デフォルトの予想外の例外のハンドラ（&lt;code&gt;set_unexpected()&lt;/code&gt;が呼び出されていない状況でのハンドラ）が呼び出された&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/exception/nested_exception/rethrow_nested.html&#34;&gt;nested_exception::rethrow_nested()&lt;/a&gt;&lt;/code&gt;が例外を捕捉していない状況で呼び出された&lt;/li&gt;
&lt;li&gt;join可能な&lt;code&gt;thread&lt;/code&gt;（&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/thread/thread/joinable.html&#34;&gt;thread::joinable()&lt;/a&gt;&lt;/code&gt;が&lt;code&gt;true&lt;/code&gt;であるもの）に対して、デストラクタまたは代入演算子が実行された&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;終了ハンドラを呼び出す。&lt;/p&gt;
&lt;p&gt;終了ハンドラは&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/exception/set_terminate.html&#34;&gt;set_terminate()&lt;/a&gt;&lt;/code&gt;で指定できる。&lt;/p&gt;
&lt;p&gt;デフォルトの終了ハンドラは&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdlib/abort.html&#34;&gt;abort()&lt;/a&gt;&lt;/code&gt;を呼び出すことと規定されている。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;なし&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;投げない&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;exception&amp;gt;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;before &lt;span style=&#34;color:#ff0000&#34;&gt;terminate&lt;/span&gt;&#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;terminate&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// プログラムを終了させる&lt;/span&gt;

  &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;after &lt;span style=&#34;color:#ff0000&#34;&gt;terminate&lt;/span&gt;&#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 実行されない&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力例&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;This application has requested the Runtime to terminate it in an unusual way.
Please contact the application&#39;s support team for more information.
terminate called without an active exception
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;関係する関数&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/exception/get_terminate.html&#34;&gt;get_terminate&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/exception/set_terminate.html&#34;&gt;set_terminate&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;terminate&lt;/code&gt;が呼び出される状況&lt;ul&gt;
&lt;li&gt;N3337 15.5.1 The &lt;code&gt;std::terminate()&lt;/code&gt; function &lt;code&gt;[except.terminal]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>terminate -- terminate : cstdlib関係の関数にリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/exception/terminate.html"/>
      <id>c6cf9115bd9a70a6b02aaea7f99d23ef30cb04f2:reference/exception/terminate.md</id>
      <updated>2016-02-16 19:05:12 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;exception&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;terminate&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;noreturn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;terminate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;noexcept&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;terminate()&lt;/code&gt;は、プログラムを異常終了させる関数である。&lt;/p&gt;
&lt;p&gt;この関数は、特定の状況で呼び出されることが規定されている。&lt;/p&gt;
&lt;p&gt;もちろん、ユーザーが任意に呼び出すこともできる。&lt;/p&gt;
&lt;h2&gt;この関数が呼び出される状況&lt;/h2&gt;
&lt;p&gt;以下のいずれかに該当する場合、この&lt;code&gt;terminate()&lt;/code&gt;関数が呼び出される。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以下の場合で例外送出により脱出しようとした&lt;ul&gt;
&lt;li&gt;例外オブジェクトの初期化完了後～&lt;code&gt;catch&lt;/code&gt;節に突入する前の間に呼び出される関数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;noexcept&lt;/code&gt;または&lt;code&gt;noexcept(trueに評価される定数式)&lt;/code&gt;が指定されている関数&lt;/li&gt;
&lt;li&gt;例外処理に伴う自動変数（スタック上のオブジェクト）のデストラクタ&lt;/li&gt;
&lt;li&gt;非ローカル変数の初期化&lt;/li&gt;
&lt;li&gt;静的記憶期間・スレッド静的記憶期間のオブジェクトのデストラクタ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdlib/exit.html&#34;&gt;exit()&lt;/a&gt;&lt;/code&gt;や&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdlib/quick_exit.html&#34;&gt;quick_exit()&lt;/a&gt;&lt;/code&gt;内で呼び出される&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/atexit.html&#34;&gt;atexit()&lt;/a&gt;&lt;/code&gt;や&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdlib/at_quick_exit.html&#34;&gt;at_quick_exit()&lt;/a&gt;&lt;/code&gt;で登録した関数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/exception/set_unexpected.html&#34;&gt;set_unexpected()&lt;/a&gt;&lt;/code&gt;で登録したハンドラで以下すべてを満たす場合&lt;ul&gt;
&lt;li&gt;発端となった例外指定に含まれない例外がハンドラから送出された&lt;/li&gt;
&lt;li&gt;発端となった例外指定に&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/exception/bad_exception.html&#34;&gt;bad_exception&lt;/a&gt;&lt;/code&gt;が含まれない&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;スレッドの開始関数（&lt;a href=&#34;http://cpprefjp.github.io/reference/thread/thread/op_constructor.html&#34;&gt;&lt;code&gt;thread&lt;/code&gt;のコンストラクタ&lt;/a&gt;で渡した関数）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;例外処理中でないのに式を持たない&lt;code&gt;throw&lt;/code&gt;式を実行しようとした&lt;/li&gt;
&lt;li&gt;デフォルトの予想外の例外のハンドラ（&lt;code&gt;set_unexpected()&lt;/code&gt;が呼び出されていない状況でのハンドラ）が呼び出された&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/exception/nested_exception/rethrow_nested.html&#34;&gt;nested_exception::rethrow_nested()&lt;/a&gt;&lt;/code&gt;が例外を捕捉していない状況で呼び出された&lt;/li&gt;
&lt;li&gt;join可能な&lt;code&gt;thread&lt;/code&gt;（&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/thread/thread/joinable.html&#34;&gt;thread::joinable()&lt;/a&gt;&lt;/code&gt;が&lt;code&gt;true&lt;/code&gt;であるもの）に対して、デストラクタまたは代入演算子が実行された&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;終了ハンドラを呼び出す。&lt;/p&gt;
&lt;p&gt;終了ハンドラは&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/exception/set_terminate.html&#34;&gt;set_terminate()&lt;/a&gt;&lt;/code&gt;で指定できる。&lt;/p&gt;
&lt;p&gt;デフォルトの終了ハンドラは&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdlib/abort.html&#34;&gt;abort()&lt;/a&gt;&lt;/code&gt;を呼び出すことと規定されている。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;なし&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;投げない&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;exception&amp;gt;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;before &lt;span style=&#34;color:#ff0000&#34;&gt;terminate&lt;/span&gt;&#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;terminate&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// プログラムを終了させる&lt;/span&gt;

  &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;after &lt;span style=&#34;color:#ff0000&#34;&gt;terminate&lt;/span&gt;&#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 実行されない&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力例&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;This application has requested the Runtime to terminate it in an unusual way.
Please contact the application&#39;s support team for more information.
terminate called without an active exception
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;関係する関数&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/exception/get_terminate.html&#34;&gt;get_terminate&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/exception/set_terminate.html&#34;&gt;set_terminate&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;terminate&lt;/code&gt;が呼び出される状況&lt;ul&gt;
&lt;li&gt;N3337 15.5.1 The &lt;code&gt;std::terminate()&lt;/code&gt; function &lt;code&gt;[except.terminal]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-10-30T14:39:29.229075</updated>
  <id>ea9dc696-cead-4c9e-abeb-9366fdf9c9f5</id>

  
    <entry>
      <title>スタイル -- Merge pull request #1208 from ROCKTAKEY/use-source-code-block-to-list-style</title>
      <link href="https://cpprefjp.github.io/working_style.html"/>
      <id>0f8fbdea31f98bb089a65f432e4c2ab44a533fd3:working_style.md</id>
      <updated>2023-10-30T19:48:53+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/working_style.md b/working_style.md
index ee0da6fab..07f729d4a 100644
--- a/working_style.md
+++ b/working_style.md
@@ -7,12 +7,14 @@
 
 型修飾のスタイル：
 
-- A) const T &amp;amp;v
-- B) const T&amp;amp; v
-- C) const T &amp;amp; v
-- D) T const &amp;amp;v
-- E) T const&amp;amp; v
-- F) T const &amp;amp; v
+```cpp
+/* (A) */ const T &amp;amp;v
+/* (B) */ const T&amp;amp; v
+/* (C) */ const T &amp;amp; v
+/* (D) */ T const &amp;amp;v
+/* (E) */ T const&amp;amp; v
+/* (F) */ T const &amp;amp; v
+```
 
 本サイトでは、Bのスタイルで型修飾を行います。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>暗黙のラムダキャプチャを簡略化 -- fix some typo</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/simplifying_implicit_lambda_capture.html"/>
      <id>de4b233c1adaaabaa2a35c4e3005828b50cef34b:lang/cpp20/simplifying_implicit_lambda_capture.md</id>
      <updated>2023-10-29T14:59:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/simplifying_implicit_lambda_capture.md b/lang/cpp20/simplifying_implicit_lambda_capture.md
index 573ab11e0..0b54668fd 100644
--- a/lang/cpp20/simplifying_implicit_lambda_capture.md
+++ b/lang/cpp20/simplifying_implicit_lambda_capture.md
@@ -2,7 +2,7 @@
 * cpp20[meta cpp]
 
 ## 概要
-ここでは、ラムダ式での暗黙のキャプチャについて、以下のN個の問題を解決する：
+ここでは、ラムダ式での暗黙のキャプチャについて、以下の問題を解決する：
 
 1. ラムダ式内での`decltype((x))`の使用
 2. ラムダ式での構造化束縛のキャプチャ
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>to_array -- fix some typo</title>
      <link href="https://cpprefjp.github.io/reference/array/to_array.html"/>
      <id>de4b233c1adaaabaa2a35c4e3005828b50cef34b:reference/array/to_array.md</id>
      <updated>2023-10-29T14:59:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/array/to_array.md b/reference/array/to_array.md
index b96f234ca..15ad63c03 100644
--- a/reference/array/to_array.md
+++ b/reference/array/to_array.md
@@ -1,6 +1,6 @@
 # to_array
 * array[meta header]
-* function[meta id-type]
+* function template[meta id-type]
 * std[meta namespace]
 * cpp20[meta cpp]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>to_int_type -- fix some typo</title>
      <link href="https://cpprefjp.github.io/reference/string/char_traits/to_int_type.html"/>
      <id>de4b233c1adaaabaa2a35c4e3005828b50cef34b:reference/string/char_traits/to_int_type.md</id>
      <updated>2023-10-29T14:59:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/char_traits/to_int_type.md b/reference/string/char_traits/to_int_type.md
index 1c8285f22..05b150404 100644
--- a/reference/string/char_traits/to_int_type.md
+++ b/reference/string/char_traits/to_int_type.md
@@ -28,11 +28,11 @@ static constexpr int_type to_int_type(char_type c) noexcept; // C++11
 
 int main()
 {
-  int x = std::char_traits&amp;lt;char&amp;gt;::to_char_type(&amp;#39;A&amp;#39;);
+  int x = std::char_traits&amp;lt;char&amp;gt;::to_int_type(&amp;#39;A&amp;#39;);
   std::cout &amp;lt;&amp;lt; std::hex &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl;
 }
 ```
-* to_char_type[color ff0000]
+* to_int_type[color ff0000]
 
 ### 出力例
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>[=]によるthisの暗黙のキャプチャを非推奨化 -- improve some examples</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/deprecate_implicit_capture_of_this_via_defcopy.html"/>
      <id>3f57b6362da6d563cc732cc0155939599ba43bab:lang/cpp20/deprecate_implicit_capture_of_this_via_defcopy.md</id>
      <updated>2023-10-29T14:53:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/deprecate_implicit_capture_of_this_via_defcopy.md b/lang/cpp20/deprecate_implicit_capture_of_this_via_defcopy.md
index 6f66c2db7..c557cb099 100644
--- a/lang/cpp20/deprecate_implicit_capture_of_this_via_defcopy.md
+++ b/lang/cpp20/deprecate_implicit_capture_of_this_via_defcopy.md
@@ -21,7 +21,7 @@ struct X {
     };
 
     auto y = [=, this] {  // C++20から推奨される方法：
-      return value + g(); // [=]ではthisポインタはキャプチャされなくなるため、thisを指定してキャプチャすること
+      return value + g(); // [=, this]と別々に指定することで、thisポインタもキャプチャしていることが明示される
     };
   }
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>from_chars -- improve some examples</title>
      <link href="https://cpprefjp.github.io/reference/charconv/from_chars.html"/>
      <id>3f57b6362da6d563cc732cc0155939599ba43bab:reference/charconv/from_chars.md</id>
      <updated>2023-10-29T14:53:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/charconv/from_chars.md b/reference/charconv/from_chars.md
index fe8be9296..d23eec298 100644
--- a/reference/charconv/from_chars.md
+++ b/reference/charconv/from_chars.md
@@ -121,6 +121,7 @@ C++標準はこれら関数の実装の詳細について何も規定しない
 
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
+#include &amp;lt;iomanip&amp;gt;
 #include &amp;lt;charconv&amp;gt;
 
 int main()
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_trivially_copyable -- improve some examples</title>
      <link href="https://cpprefjp.github.io/reference/type_traits/is_trivially_copyable.html"/>
      <id>3f57b6362da6d563cc732cc0155939599ba43bab:reference/type_traits/is_trivially_copyable.md</id>
      <updated>2023-10-29T14:53:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/type_traits/is_trivially_copyable.md b/reference/type_traits/is_trivially_copyable.md
index 7cb491a8c..52671bec7 100644
--- a/reference/type_traits/is_trivially_copyable.md
+++ b/reference/type_traits/is_trivially_copyable.md
@@ -70,7 +70,7 @@ struct optional {
         = default;
     // #2
     optional(optional const&amp;amp; rhs)
-            requires copy_constructible&amp;lt;T&amp;gt;;
+            requires std::copy_constructible&amp;lt;T&amp;gt;;
 };
 ```
 * std::is_trivially_copy_constructible_v[link /reference/type_traits/is_trivially_copy_constructible.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>スタイル -- working_style: 型修飾のスタイルの一覧を等幅フォントで表示するよう修正</title>
      <link href="https://cpprefjp.github.io/working_style.html"/>
      <id>2c7cf5e6f86de685aca92bd133c4be459df95ec7:working_style.md</id>
      <updated>2023-10-27T18:16:15+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/working_style.md b/working_style.md
index ee0da6fab..07f729d4a 100644
--- a/working_style.md
+++ b/working_style.md
@@ -7,12 +7,14 @@
 
 型修飾のスタイル：
 
-- A) const T &amp;amp;v
-- B) const T&amp;amp; v
-- C) const T &amp;amp; v
-- D) T const &amp;amp;v
-- E) T const&amp;amp; v
-- F) T const &amp;amp; v
+```cpp
+/* (A) */ const T &amp;amp;v
+/* (B) */ const T&amp;amp; v
+/* (C) */ const T &amp;amp; v
+/* (D) */ T const &amp;amp;v
+/* (E) */ T const&amp;amp; v
+/* (F) */ T const &amp;amp; v
+```
 
 本サイトでは、Bのスタイルで型修飾を行います。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>ROCKTAKEY</name>
        <email>rocktakey@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>はじめてのコントリビュート -- Merge pull request #1207 from ROCKTAKEY/use-special-characters-to-escape-amp</title>
      <link href="https://cpprefjp.github.io/start_editing.html"/>
      <id>51307b0c26f539a6f852fbc6c42307b7e7b5b57d:start_editing.md</id>
      <updated>2023-10-27T17:45:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/start_editing.md b/start_editing.md
index c3e0f467f..6f28be5be 100644
--- a/start_editing.md
+++ b/start_editing.md
@@ -99,7 +99,7 @@ Markdown形式では、HTMLのタグも併用できますが、cpprefjpサイト
 - 値の大きさを表現するために、上付き文字を表す`&amp;lt;sup&amp;gt;`タグを利用している
 - 添字を表現するために、下付き文字を表す`&amp;lt;sub&amp;gt;`タグを利用している
 
-また、Markdownパーサーの制限を回避し、表内で `|` (縦線、vertical line) を使用するために、文字参照 `&amp;amp;#x7C;` を使用してます。
+また、Markdownパーサーの制限を回避し、表内で `|` (縦線、vertical line) を使用するために、文字参照 `&amp;amp;amp;#x7C;` を使用してます。
 
 新規リファレンスを書くにあたって、雛形ページを用意していますので、そちらをベースにして編集作業を行ってください。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
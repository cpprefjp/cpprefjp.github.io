<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2022-06-30T14:42:13.726577</updated>
  <id>1feab50e-bd86-43af-a5ee-6a02d04a5ffd</id>

  
    <entry>
      <title>cpprefjp特有の拡張構文 -- Merge pull request #977 from akinomyoga/defined_words</title>
      <link href="https://cpprefjp.github.io/editors_doc/specialized.html"/>
      <id>484463600efcd56f5fa6320238da3befca264f35:editors_doc/specialized.md</id>
      <updated>2022-06-30T14:14:07+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/editors_doc/specialized.md b/editors_doc/specialized.md
index 81b5de8dc..e9a426118 100644
--- a/editors_doc/specialized.md
+++ b/editors_doc/specialized.md
@@ -159,6 +159,18 @@ int main() {
 
 グローバル修飾の一覧は [GLOBAL_QUALIFY_LIST.txt](https://github.com/cpprefjp/site/blob/master/GLOBAL_QUALIFY_LIST.txt) にあります。
 
+## 定義語
+
+`GLOBAL_DEFINED_WORDS.json` に定義語を登録することができます。形式は `GLOBAL_DEFINED_WORDS.json` を参照して下さい。
+
+`link` にはその定義語の解説ページへのURLを指定します。`link` が指定されている場合、任意の記事中の (コード、リンク、見出しなどを除く) 地の文にその定義語が現れた時に、自動的に `link` へのハイパーリンクが貼られます。
+
+特に解説ページの定義箇所で `&amp;lt;dfn id=&amp;#34;識別子&amp;#34;&amp;gt;定義語&amp;lt;/dfn&amp;gt;` として `id` 属性を設定して、その箇所への直接リンクすることもできます。
+
+`desc` に簡単な説明が指定されている場合、地の文にあるその定義語にマウスカーソルを合わせると説明がツールチップとして表示されます。
+
+`yomi` には平仮名およびアルファベットでその定義語の読みを指定します。現在は使用されていませんが将来的に定義語が増えてきた時に、用語集または索引ページを自動生成する時の並び替えに使われる予定です。
+
 ## リンクの存在チェック
 
 CommonMark形式のリンクや独自拡張のプログラムの修飾`link`などで生成されるHTMLにリンクが埋め込まれるとき、リンク先がサイト内へのリンクだった場合、リンク先の存在チェックも行います。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>標準規格と処理系 -- Merge pull request #977 from akinomyoga/defined_words</title>
      <link href="https://cpprefjp.github.io/implementation-compliance.html"/>
      <id>484463600efcd56f5fa6320238da3befca264f35:implementation-compliance.md</id>
      <updated>2022-06-30T14:14:07+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/implementation-compliance.md b/implementation-compliance.md
index ac43d24b3..7ba64e97d 100644
--- a/implementation-compliance.md
+++ b/implementation-compliance.md
@@ -21,9 +21,9 @@ C++ の処理系は、翻訳を担うコンパイラと実行を担うオペレ
 
 からなる。但し、一部の動作については処理系に対して自由度が認められている。
 
-- **処理系定義の動作** (implementation-defined behavior) または**実装定義の動作**とされた動作に対しては、処理系は考えられる動作の内の1つを行って良い。処理系はその説明書にその動作を定義する必要がある。
-- **未規定の動作** (unspecified behavior) とされた動作に対しては、処理系は考えられる動作の内の1つを行って良い。処理系は説明書にその動作を定義しなくて良い。
-- **未定義の動作** (undefined behavior; 通称 UB) は、処理系が実際に行う動作について標準規格が如何なる要件もおかないことを表す。
+- &amp;lt;dfn id=&amp;#34;dfn-implementation-defined-behavior&amp;#34;&amp;gt;処理系定義の動作&amp;lt;/dfn&amp;gt; (implementation-defined behavior) または&amp;lt;dfn&amp;gt;実装定義の動作&amp;lt;/dfn&amp;gt;とされた動作に対しては、処理系は考えられる動作の内の1つを行って良い。処理系はその説明書にその動作を定義する必要がある。
+- &amp;lt;dfn id=&amp;#34;dfn-unspecified-behavior&amp;#34;&amp;gt;未規定の動作&amp;lt;/dfn&amp;gt; (unspecified behavior) とされた動作に対しては、処理系は考えられる動作の内の1つを行って良い。処理系は説明書にその動作を定義しなくて良い。
+- &amp;lt;dfn id=&amp;#34;dfn-undefined-behavior&amp;#34;&amp;gt;未定義の動作&amp;lt;/dfn&amp;gt; (undefined behavior; 通称 UB) は、処理系が実際に行う動作について標準規格が如何なる要件もおかないことを表す。
 - **文化圏固有動作** (locale-specific behavior) に対しては、処理系は現地の国家・文化・言語の風習に依存した動作を行う。処理系はその動作を説明書に記述する必要がある。
 
 これらの用語は処理系が取りうる動作の範囲を示すものであって、例えば &amp;#34;未定義の動作&amp;#34; という名前の具体的な動作がある訳ではないことに注意する。
@@ -37,15 +37,15 @@ C++ の処理系は、翻訳を担うコンパイラと実行を担うオペレ
 - **制約** (constraints): C言語において構文記法によって表現しきれない構文的な制限を文章で述べたもの。C++ には現れない
 - **意味規則** (semantic rule): 構文規則と制約のどちらでもないプログラムに対する規則
 
-各規則には**診断不要**&amp;lt;sup&amp;gt;&amp;lt;a href=&amp;#34;#note-1&amp;#34; id=&amp;#34;note_ref-1&amp;#34;&amp;gt;[注1]&amp;lt;/a&amp;gt;&amp;lt;/sup&amp;gt; (no diagnostics required; 通称 NDR) や「違反すると未定義の動作になる」などの属性が明記されることがあり、
+各規則には&amp;lt;dfn id=&amp;#34;dfn-no-diagnostic-required&amp;#34;&amp;gt;診断不要&amp;lt;/dfn&amp;gt;&amp;lt;sup&amp;gt;&amp;lt;a href=&amp;#34;#note-1&amp;#34; id=&amp;#34;note_ref-1&amp;#34;&amp;gt;[注1]&amp;lt;/a&amp;gt;&amp;lt;/sup&amp;gt; (no diagnostic required; 通称 NDR) や「違反すると未定義の動作になる」などの属性が明記されることがあり、
 診断不要とも未定義の動作になるとも明記されない規則を**診断対象規則** (diagnosable rule) と呼ぶ。
 **単一定義規則** (ODR; one definition rule) は &amp;#34;使用される変数・関数・クラスについてただ1つの定義を与えなければならない&amp;#34; という一連の規則である。
 
-- **適格** (well-formed) とはプログラムが全ての構文規則・診断対象の意味規則・単一定義規則を満たすことである
-- **不適格** (ill-formed) とはプログラムが適格でないことである
+- &amp;lt;dfn id=&amp;#34;dfn-well-formed&amp;#34;&amp;gt;適格&amp;lt;/dfn&amp;gt; (well-formed) とはプログラムが全ての構文規則・診断対象の意味規則・単一定義規則を満たすことである
+- &amp;lt;dfn id=&amp;#34;dfn-ill-formed&amp;#34;&amp;gt;不適格&amp;lt;/dfn&amp;gt; (ill-formed) とはプログラムが適格でないことである
 
 プログラムが規則に違反するとき、処理系はエラーメッセージまたは警告などを出力する。
-この出力を総称して**診断情報** (diagnostic message) または**診断メッセージ**&amp;lt;sup&amp;gt;&amp;lt;a href=&amp;#34;#note-2&amp;#34; id=&amp;#34;note_ref-2&amp;#34;&amp;gt;[注2]&amp;lt;/a&amp;gt;&amp;lt;/sup&amp;gt; と呼び、その内容は処理系定義である。
+この出力を総称して&amp;lt;dfn id=&amp;#34;dfn-diagnostic-message&amp;#34;&amp;gt;診断情報&amp;lt;/dfn&amp;gt; (diagnostic message) または&amp;lt;dfn&amp;gt;診断メッセージ&amp;lt;/dfn&amp;gt;&amp;lt;sup&amp;gt;&amp;lt;a href=&amp;#34;#note-2&amp;#34; id=&amp;#34;note_ref-2&amp;#34;&amp;gt;[注2]&amp;lt;/a&amp;gt;&amp;lt;/sup&amp;gt; と呼び、その内容は処理系定義である。
 
 適合する処理系は、
 
@@ -140,7 +140,7 @@ ToDo
 
 ## 注釈
 
-1. &amp;lt;a href=&amp;#34;#note_ref-1&amp;#34; id=&amp;#34;note-1&amp;#34;&amp;gt;**^**&amp;lt;/a&amp;gt; no diagnostics required: JIS C++ では一定の訳は与えられず、登場する度に異なる翻訳のされ方をしている。
+1. &amp;lt;a href=&amp;#34;#note_ref-1&amp;#34; id=&amp;#34;note-1&amp;#34;&amp;gt;**^**&amp;lt;/a&amp;gt; no diagnostic required: JIS C++ では一定の訳は与えられず、登場する度に異なる翻訳のされ方をしている。
   ここでは &amp;#34;診断不要&amp;#34; という語を割り当てることにする。
 2. &amp;lt;a href=&amp;#34;#note_ref-2&amp;#34; id=&amp;#34;note-2&amp;#34;&amp;gt;**^**&amp;lt;/a&amp;gt; diagnostic message: JIS C++ では &amp;#34;診断情報&amp;#34; としている。
   JIS C言語 (JIS X 3010:2003) では &amp;#34;診断メッセージ&amp;#34; としている。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>double_t -- Merge pull request #981 from 0xbadfca11/patch-1</title>
      <link href="https://cpprefjp.github.io/reference/cmath/double_t.html"/>
      <id>046cd233cb311b08630afdd3d9777554dc699e48:reference/cmath/double_t.md</id>
      <updated>2022-06-28T23:48:23+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/double_t.md b/reference/cmath/double_t.md
index cb1be795d..51704418f 100644
--- a/reference/cmath/double_t.md
+++ b/reference/cmath/double_t.md
@@ -24,8 +24,9 @@ namespace std {
 - [Clang](/implementation.md#clang):
 - [GCC](/implementation.md#gcc):
 - [ICC](/implementation.md#icc):
-- [Visual C++](/implementation.md#visual_cpp): 2013, 2015, 2017
-	- 2013では、常に`double`の別名。
-	- 2015で、ターゲットのCPUアーキテクチャが`x86`以外である場合、`double`の別名。
-	- 2015で、ターゲットのCPUアーキテクチャが`x86`で、SSE2を使用する場合（`/arch:SSE2`以上のコンパイラオプション）、`double`の別名。
-	- 2015で、ターゲットのCPUアーキテクチャが`x86`で、SSE2を使用しない場合（`/arch:IA32`や`/arch:SSE`コンパイラオプション）、`long double`からの別名。
+- [Visual C++](/implementation.md#visual_cpp): 2013, 2015, 2017, 2019, 2022
+	- 2013, 2015では、常に`double`の別名。
+	- 2017以降で、ターゲットのCPUアーキテクチャが`x86`以外である場合、`double`の別名。
+	- 2017以降で、ターゲットのCPUアーキテクチャが`x86`で、SSE2を使用する場合（`/arch:SSE2`以上のコンパイラオプション）、`double`の別名。
+	- 2017以降で、ターゲットのCPUアーキテクチャが`x86`で、`/fp:fast`コンパイラオプションが指定されている場合、`double`の別名。
+	- 2017以降で、ターゲットのCPUアーキテクチャが`x86`で、SSE2を使用せず（`/arch:IA32`や`/arch:SSE`コンパイラオプション）、`/fp:fast`コンパイラオプションが指定されていない場合、`long double`の別名。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>float_t -- Merge pull request #981 from 0xbadfca11/patch-1</title>
      <link href="https://cpprefjp.github.io/reference/cmath/float_t.html"/>
      <id>046cd233cb311b08630afdd3d9777554dc699e48:reference/cmath/float_t.md</id>
      <updated>2022-06-28T23:48:23+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/float_t.md b/reference/cmath/float_t.md
index c2fad06c2..0a05381e8 100644
--- a/reference/cmath/float_t.md
+++ b/reference/cmath/float_t.md
@@ -24,8 +24,9 @@ namespace std {
 - [Clang](/implementation.md#clang):
 - [GCC](/implementation.md#gcc):
 - [ICC](/implementation.md#icc):
-- [Visual C++](/implementation.md#visual_cpp): 2013, 2015, 2017
-	- 2013では、常に`float`の別名。
-	- 2015で、ターゲットのCPUアーキテクチャが`x86`以外である場合、`float`の別名。
-	- 2015で、ターゲットのCPUアーキテクチャが`x86`で、SSE2を使用する場合（`/arch:SSE2`以上のコンパイラオプション）、`float`の別名。
-	- 2015で、ターゲットのCPUアーキテクチャが`x86`で、SSE2を使用しない場合（`/arch:IA32`や`/arch:SSE`コンパイラオプション）、`long double`の別名。
+- [Visual C++](/implementation.md#visual_cpp): 2013, 2015, 2017, 2019, 2022
+	- 2013, 2015では、常に`float`の別名。
+	- 2017以降で、ターゲットのCPUアーキテクチャが`x86`以外である場合、`float`の別名。
+	- 2017以降で、ターゲットのCPUアーキテクチャが`x86`で、SSE2を使用する場合（`/arch:SSE2`以上のコンパイラオプション）、`float`の別名。
+	- 2017以降で、ターゲットのCPUアーキテクチャが`x86`で、`/fp:fast`コンパイラオプションが指定されている場合、`float`の別名。
+	- 2017以降で、ターゲットのCPUアーキテクチャが`x86`で、SSE2を使用せず（`/arch:IA32`や`/arch:SSE`コンパイラオプション）、`/fp:fast`コンパイラオプションが指定されていない場合、`long double`の別名。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator() -- compare_three_way : nullptr_tとの比較はエラーっぽい</title>
      <link href="https://cpprefjp.github.io/reference/compare/compare_three_way/op_call.html"/>
      <id>281969e21993a21027181029aeb663ec143de648:reference/compare/compare_three_way/op_call.md</id>
      <updated>2022-06-26T17:37:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/compare/compare_three_way/op_call.md b/reference/compare/compare_three_way/op_call.md
index bdbbfb80a..8df83ccb3 100644
--- a/reference/compare/compare_three_way/op_call.md
+++ b/reference/compare/compare_three_way/op_call.md
@@ -49,7 +49,7 @@ constexpr auto operator()(T&amp;amp;&amp;amp; t, U&amp;amp;&amp;amp; u) const;
 ポインタ比較時の順序付けは、ポインタ型`P`に対する実装定義の狭義全順序の上で行われ、`P`に対する組み込みの比較演算子が持つ半順序関係との一貫性がある。  
 すなわちこの関数オブジェクトによるポインタ値の比較では、組み込みの`&amp;lt; &amp;lt;= &amp;gt; &amp;gt;= == !=`演算子の結果が未規定の場合でも実装定義ではあるが大小もしくは等価性を判定でき、順序が規定されている範囲での順序関係は組み込みの演算子の結果と一致する。
 
-例えば、同じ型の異なるオブジェクトに対するポインタ間やポインタと`nullptr`の間に何らかの順序を付ける事ができる。  
+例えば、同じ型の異なる（1つの配列内に含まれていない）オブジェクトに対するポインタ間に何らかの順序を付ける事ができる。  
 ただし、そのような順序付けの結果がコンパイラや実行環境を超えて一致する保証はないので注意が必要である。
 
 
@@ -72,17 +72,15 @@ int main() {
   std::cout &amp;lt;&amp;lt; (comp(pa, pb) == 0) &amp;lt;&amp;lt; std::endl;
   std::cout &amp;lt;&amp;lt; (comp(pa, pb) &amp;lt;  0) &amp;lt;&amp;lt; std::endl;
   std::cout &amp;lt;&amp;lt; (comp(pa, pb) &amp;gt;  0) &amp;lt;&amp;lt; std::endl;
-  std::cout &amp;lt;&amp;lt; (comp(pa, nullptr) &amp;gt;  0) &amp;lt;&amp;lt; std::endl;
 }
 ```
 
-### 出力例（GCC 10.0.0）
+### 出力
 ```
 true
 false
 false
 true
-true
 ```
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>double_t -- Update cmath/double_t.md</title>
      <link href="https://cpprefjp.github.io/reference/cmath/double_t.html"/>
      <id>2959c3cea9c16c68c4124a4ec33da804d54b2f0f:reference/cmath/double_t.md</id>
      <updated>2022-06-24T18:54:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/double_t.md b/reference/cmath/double_t.md
index cb1be795d..51704418f 100644
--- a/reference/cmath/double_t.md
+++ b/reference/cmath/double_t.md
@@ -24,8 +24,9 @@ namespace std {
 - [Clang](/implementation.md#clang):
 - [GCC](/implementation.md#gcc):
 - [ICC](/implementation.md#icc):
-- [Visual C++](/implementation.md#visual_cpp): 2013, 2015, 2017
-	- 2013では、常に`double`の別名。
-	- 2015で、ターゲットのCPUアーキテクチャが`x86`以外である場合、`double`の別名。
-	- 2015で、ターゲットのCPUアーキテクチャが`x86`で、SSE2を使用する場合（`/arch:SSE2`以上のコンパイラオプション）、`double`の別名。
-	- 2015で、ターゲットのCPUアーキテクチャが`x86`で、SSE2を使用しない場合（`/arch:IA32`や`/arch:SSE`コンパイラオプション）、`long double`からの別名。
+- [Visual C++](/implementation.md#visual_cpp): 2013, 2015, 2017, 2019, 2022
+	- 2013, 2015では、常に`double`の別名。
+	- 2017以降で、ターゲットのCPUアーキテクチャが`x86`以外である場合、`double`の別名。
+	- 2017以降で、ターゲットのCPUアーキテクチャが`x86`で、SSE2を使用する場合（`/arch:SSE2`以上のコンパイラオプション）、`double`の別名。
+	- 2017以降で、ターゲットのCPUアーキテクチャが`x86`で、`/fp:fast`コンパイラオプションが指定されている場合、`double`の別名。
+	- 2017以降で、ターゲットのCPUアーキテクチャが`x86`で、SSE2を使用せず（`/arch:IA32`や`/arch:SSE`コンパイラオプション）、`/fp:fast`コンパイラオプションが指定されていない場合、`long double`の別名。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>0xbadfca11</name>
        <email>0xbadfca11@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>float_t -- Update cmath/float_t.md</title>
      <link href="https://cpprefjp.github.io/reference/cmath/float_t.html"/>
      <id>05a39495b956f41acc5ae67c6b87a538d5a22f3a:reference/cmath/float_t.md</id>
      <updated>2022-06-24T18:51:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/float_t.md b/reference/cmath/float_t.md
index c2fad06c2..0a05381e8 100644
--- a/reference/cmath/float_t.md
+++ b/reference/cmath/float_t.md
@@ -24,8 +24,9 @@ namespace std {
 - [Clang](/implementation.md#clang):
 - [GCC](/implementation.md#gcc):
 - [ICC](/implementation.md#icc):
-- [Visual C++](/implementation.md#visual_cpp): 2013, 2015, 2017
-	- 2013では、常に`float`の別名。
-	- 2015で、ターゲットのCPUアーキテクチャが`x86`以外である場合、`float`の別名。
-	- 2015で、ターゲットのCPUアーキテクチャが`x86`で、SSE2を使用する場合（`/arch:SSE2`以上のコンパイラオプション）、`float`の別名。
-	- 2015で、ターゲットのCPUアーキテクチャが`x86`で、SSE2を使用しない場合（`/arch:IA32`や`/arch:SSE`コンパイラオプション）、`long double`の別名。
+- [Visual C++](/implementation.md#visual_cpp): 2013, 2015, 2017, 2019, 2022
+	- 2013, 2015では、常に`float`の別名。
+	- 2017以降で、ターゲットのCPUアーキテクチャが`x86`以外である場合、`float`の別名。
+	- 2017以降で、ターゲットのCPUアーキテクチャが`x86`で、SSE2を使用する場合（`/arch:SSE2`以上のコンパイラオプション）、`float`の別名。
+	- 2017以降で、ターゲットのCPUアーキテクチャが`x86`で、`/fp:fast`コンパイラオプションが指定されている場合、`float`の別名。
+	- 2017以降で、ターゲットのCPUアーキテクチャが`x86`で、SSE2を使用せず（`/arch:IA32`や`/arch:SSE`コンパイラオプション）、`/fp:fast`コンパイラオプションが指定されていない場合、`long double`の別名。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>0xbadfca11</name>
        <email>0xbadfca11@gmail.com</email>
      </author>
    </entry>
  
</feed>
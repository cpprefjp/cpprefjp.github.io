<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-04-18T14:45:37.209214</updated>
  <id>1ff1c9ec-1805-4d31-a152-36c9ff755fc6</id>

  
    <entry>
      <title>flat_map -- flat_map : 比較演算子とswapを非メンバ (Hidden Friends) 関数に分類 #1142</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_map.html"/>
      <id>0ce85f3d6aa5f19188d506288f7f3101ee3313c3:reference/flat_map/flat_map.md</id>
      <updated>2023-04-18T17:02:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_map.md b/reference/flat_map/flat_map.md
index b26f49554..ac96b9be4 100644
--- a/reference/flat_map/flat_map.md
+++ b/reference/flat_map/flat_map.md
@@ -90,18 +90,6 @@ namespace std {
 | [`key_comp`](flat_map/key_comp.md.nolink)     | キー比較用の関数オブジェクトを取得する | C++23 |
 | [`value_comp`](flat_map/value_comp.md.nolink) | 要素比較用の関数オブジェクトを取得する | C++23 |
 
-### 比較演算子
-
-| 名前 | 説明 | 対応バージョン |
-|------|------|----------------|
-| [`operator==`](flat_map/op_equal.md.nolink)         | 左辺と右辺が等しいかの判定を行う           | C++23 |
-| `bool operator!=(const flat_map&amp;amp; x, const flat_map&amp;amp; y);` | 左辺と右辺が等しくないかの判定を行う (`==`により使用可能) | C++23 |
-| [`operator&amp;lt;=&amp;gt;`](flat_map/op_compare_3way.md.nolink) | 三方比較を行う                             | C++23 |
-| `bool operator&amp;lt;(const flat_map&amp;amp; x, const flat_map&amp;amp; y);`  | 左辺が右辺より小さいかの判定を行う  (`&amp;lt;=&amp;gt;`により使用可能) | C++23 |
-| `bool operator&amp;lt;=(const flat_map&amp;amp; x, const flat_map&amp;amp; y);` | 左辺が右辺より小さいか等しいかの判定を行う (`&amp;lt;=&amp;gt;`により使用可能) | C++23 |
-| `bool operator&amp;gt;(const flat_map&amp;amp; x, const flat_map&amp;amp; y);`  | 左辺が右辺より大きいかの判定を行う (`&amp;lt;=&amp;gt;`により使用可能) | C++23 |
-| `bool operator&amp;gt;=(const flat_map&amp;amp; x, const flat_map&amp;amp; y);` | 左辺が右辺より大きいか等しいかの判定を行う (`&amp;lt;=&amp;gt;`により使用可能) | C++23 |
-
 
 ## メンバ型
 
@@ -126,18 +114,32 @@ namespace std {
 
 
 ## 非メンバ関数
-### 入れ替え
+### 要素削除
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`swap`](flat_map/swap_free.md.nolink) | 2つの`flat_map`オブジェクトを入れ替える | C++23 |
+| [`erase_if`](flat_map/erase_if_free.md.nolink) | 指定した条件に合致する要素とその分の領域を、コンテナから削除する | C++23 |
 
 
-### 要素削除
+## 非メンバ（*Hidden friends*）関数
+### 比較演算子
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`erase_if`](flat_map/erase_if_free.md.nolink) | 指定した条件に合致する要素とその分の領域を、コンテナから削除する | C++23 |
+| [`operator==`](flat_map/op_equal.md.nolink)         | 左辺と右辺が等しいかの判定を行う           | C++23 |
+| `bool operator!=(const flat_map&amp;amp; x, const flat_map&amp;amp; y);` | 左辺と右辺が等しくないかの判定を行う (`==`により使用可能) | C++23 |
+| [`operator&amp;lt;=&amp;gt;`](flat_map/op_compare_3way.md.nolink) | 三方比較を行う                             | C++23 |
+| `bool operator&amp;lt;(const flat_map&amp;amp; x, const flat_map&amp;amp; y);`  | 左辺が右辺より小さいかの判定を行う  (`&amp;lt;=&amp;gt;`により使用可能) | C++23 |
+| `bool operator&amp;lt;=(const flat_map&amp;amp; x, const flat_map&amp;amp; y);` | 左辺が右辺より小さいか等しいかの判定を行う (`&amp;lt;=&amp;gt;`により使用可能) | C++23 |
+| `bool operator&amp;gt;(const flat_map&amp;amp; x, const flat_map&amp;amp; y);`  | 左辺が右辺より大きいかの判定を行う (`&amp;lt;=&amp;gt;`により使用可能) | C++23 |
+| `bool operator&amp;gt;=(const flat_map&amp;amp; x, const flat_map&amp;amp; y);` | 左辺が右辺より大きいか等しいかの判定を行う (`&amp;lt;=&amp;gt;`により使用可能) | C++23 |
+
+
+### 入れ替え
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`swap`](flat_map/swap_free.md.nolink) | 2つの`flat_map`オブジェクトを入れ替える | C++23 |
 
 
 ## 推論補助
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>flat_map -- コードブロックの消し忘れ</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_map.html"/>
      <id>82cec00a8113857dd68414dc45d1b4803cf83a74:reference/flat_map/flat_map.md</id>
      <updated>2023-04-17T18:38:11+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_map.md b/reference/flat_map/flat_map.md
index caea672f5..b26f49554 100644
--- a/reference/flat_map/flat_map.md
+++ b/reference/flat_map/flat_map.md
@@ -155,7 +155,6 @@ namespace std {
 
 
 ### ユーザー定義型をキーとして使用する (`operator&amp;lt;=&amp;gt;`を定義)
-```
 
 #### 出力
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>flat_map -- flat_map : 構文ミスを修正</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_map.html"/>
      <id>3ecf9caed67da356223be078b0707556c9226e2c:reference/flat_map/flat_map.md</id>
      <updated>2023-04-17T18:20:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_map.md b/reference/flat_map/flat_map.md
index c49ed299d..caea672f5 100644
--- a/reference/flat_map/flat_map.md
+++ b/reference/flat_map/flat_map.md
@@ -109,7 +109,7 @@ namespace std {
 |------|------|----------------|
 | `key_type` | キーの型。テンプレートパラメータ `Key`  |  C++23 |
 | `mapped_type` | 値の型。テンプレートパラメータ `T` | C++23 |
-| `value_type` | 要素の型。`[`std::pair`](/reference/utility/pair.md)`&amp;lt;key_type, mapped_type&amp;gt;` | C++23 |
+| `value_type` | 要素の型。[`std::pair`](/reference/utility/pair.md)`&amp;lt;key_type, mapped_type&amp;gt;` | C++23 |
 | `key_compare` | キー値の大小関係を判定する二項述語の型。テンプレートパラメータ `Compare` | C++23 |
 | [`value_compare`](flat_map/value_compare.md.nolink) | 要素値のキー部分で大小関係を判定する二項述語の型。入れ子クラス | C++23 |
 | `reference` | 要素への参照型。[`std::pair`](/reference/utility/pair.md)`&amp;lt;const key_type&amp;amp;, mapped_type&amp;amp;&amp;gt;` | C++23 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>flat_map -- flat_mapクラスのページを追加 #1078</title>
      <link href="https://cpprefjp.github.io/reference/flat_map.html"/>
      <id>9fe59f7c3a1b97adef5bc273c0ab9f81f8b085a7:reference/flat_map.md</id>
      <updated>2023-04-17T18:07:27+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;flat_map&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;flat_map&lt;/span&gt;&lt;span class=&#34;cpp cpp23&#34; title=&#34;C++23で追加&#34;&gt;(C++23)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;flat_map&amp;gt;&lt;/code&gt; ヘッダは、ソート済みキーによる順序付き連想配列を定義する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/map/map.html&#34;&gt;std::map&lt;/a&gt;&lt;/code&gt;と違ってノードベースの実装ではなく、メモリ連続性のある平坦 (flat) な配列で扱われる。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;flat_map&amp;gt;&lt;/code&gt; ヘッダでは、キーの重複を許さない &lt;code&gt;std::&lt;a href=&#34;https://cpprefjp.github.io/reference/flat_map/flat_map.html&#34;&gt;flat_map&lt;/a&gt;&lt;/code&gt; クラステンプレート、およびキーの重複を許す &lt;code&gt;std::&lt;a href=&#34;https://cpprefjp.github.io/reference/flat_map/flat_multimap.md.nolink&#34;&gt;flat_multimap&lt;/a&gt;&lt;/code&gt; クラステンプレートを提供する。&lt;/p&gt;
&lt;p&gt;このヘッダでは、以下の標準ヘッダをインクルードする：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;&amp;lt;initializer_list&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/compare.html&#34;&gt;&amp;lt;compare&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/flat_map/flat_map.html&#34;&gt;flat_map&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;キーの重複を許さない平坦な順序付き連想コンテナ(class template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/flat_map/flat_multimap.md.nolink&#34;&gt;flat_multimap&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;キーの重複を許す平坦な順序付き連想コンテナ(class template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++23&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0429r3.pdf&#34; target=&#34;_blank&#34;&gt;P0429R3 A Standard &lt;code&gt;flat_map&lt;/code&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++23で&lt;code&gt;flat_map&lt;/code&gt;が導入された経緯・動機・設計について記載されている&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0429r9.pdf&#34; target=&#34;_blank&#34;&gt;P0429R9 A Standard &lt;code&gt;flat_map&lt;/code&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++23で導入された&lt;code&gt;flat_map&lt;/code&gt;の仕様&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>flat_map -- flat_mapクラスのページを追加 #1078</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_map.html"/>
      <id>9fe59f7c3a1b97adef5bc273c0ab9f81f8b085a7:reference/flat_map/flat_map.md</id>
      <updated>2023-04-17T18:07:27+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_map.md b/reference/flat_map/flat_map.md
new file mode 100644
index 000000000..c49ed299d
--- /dev/null
+++ b/reference/flat_map/flat_map.md
@@ -0,0 +1,171 @@
+# flat_map
+* flat_map[meta header]
+* std[meta namespace]
+* class template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;class Key,
+            class T,
+            class Compare = less&amp;lt;Key&amp;gt;,
+            class KeyContainer = vector&amp;lt;Key&amp;gt;,
+            class MappedContainer = vector&amp;lt;T&amp;gt;&amp;gt;
+  class flat_map;
+}
+```
+* less[link ../functional/less.md]
+* vector[link /reference/vector.md]
+
+## 概要
+
+
+## メンバ関数
+### 構築・破棄
+
+| 名前 | 説明 | 対応バージョン |
+|---------------------------------|----------------|-------|
+| [`(constructor)`](flat_map/op_constructor.md.nolink) | コンストラクタ | C++23 |
+| [`(destructor)`](flat_map/op_destructor.md.nolink) | デストラクタ | C++23 |
+| [`operator=`](flat_map/op_assign.md.nolink) | 代入演算子 | C++23 |
+
+
+### イテレータ
+
+| 名前 | 説明 | 対応バージョン |
+|------------------------------|----------------------------------------------|-------|
+| [`begin`](flat_map/begin.md.nolink)     | 先頭を指すイテレータを取得する               | C++23 |
+| [`cbegin`](flat_map/cbegin.md.nolink)   | 先頭を指す読み取り専用イテレータを取得する   | C++23 |
+| [`end`](flat_map/end.md.nolink)         | 末尾を指すイテレータを取得する               | C++23 |
+| [`cend`](flat_map/cend.md.nolink)       | 末尾を指す読み取り専用イテレータを取得する   | C++23 |
+| [`rbegin`](flat_map/rbegin.md.nolink)   | 末尾を指す逆イテレータを取得する             | C++23 |
+| [`crbegin`](flat_map/crbegin.md.nolink) | 末尾を指す読み取り専用逆イテレータを取得する | C++23 |
+| [`rend`](flat_map/rend.md.nolink)       | 先頭を指す逆イテレータを取得する             | C++23 |
+| [`crend`](flat_map/crend.md.nolink)     | 先頭を指す読み取り専用逆イテレータを取得する | C++23 |
+
+
+### 領域
+
+| 名前 | 説明 | 対応バージョン |
+|---------------------------------|------------------------------------|-------|
+| [`empty`](flat_map/empty.md.nolink)       | コンテナが空であるかどうかを調べる | C++23 |
+| [`size`](flat_map/size.md.nolink)         | 要素数を取得する                   | C++23 |
+| [`max_size`](flat_map/max_size.md.nolink) | 格納可能な最大の要素数を取得する   | C++23 |
+
+
+### コンテナの変更
+
+| 名前                                          | 説明                                       | 対応バージョン |
+|-----------------------------------------------|--------------------------------------------|----------------|
+| [`clear`](flat_map/clear.md.nolink)                       | 全ての要素を削除する                       | C++23 |
+| [`insert`](flat_map/insert.md.nolink)                     | 要素を挿入する                             | C++23 |
+| [`insert_or_assign`](flat_map/insert_or_assign.md.nolink) | 要素を挿入、あるいは代入する               | C++23 |
+| [`insert_range`](flat_map/insert_range.md.nolink)         | Rangeを挿入する                            | C++23 |
+| [`emplace`](flat_map/emplace.md.nolink)                   | 要素を直接構築する                         | C++23 |
+| [`emplace_hint`](flat_map/emplace_hint.md.nolink)         | ヒントを使って要素を直接構築する           | C++23 |
+| [`try_emplace`](flat_map/try_emplace.md.nolink)           | キーが存在しない場合のみ要素を直接構築する | C++23 |
+| [`erase`](flaflat_maptmap/erase.md.nolink)                | 要素を削除する                             | C++23 |
+| [`swap`](flat_map/swap.md.nolink)                         | コンテンツを交換する                       | C++23 |
+| [`extract`](flat_map/extract.md.nolink)                   | キーのコンテナ、値のコンテナを取得する     | C++23 |
+| [`replace`](flat_map/replace.md.nolink)                   | キーのコンテナ、値のコンテナを置き換える   | C++23 |
+
+
+### 要素アクセス
+
+| 名前 | 説明 | 対応バージョン |
+|---------------------------------------|--------------------------------------------|-------|
+| [`operator[]`](flat_map/op_at.md.nolink)        | 指定したキーを持つ要素を取得する           | C++23 |
+| [`at`](flat_map/at.md.nolink)                   | 指定したキーを持つ要素を取得する           | C++23 |
+| [`count`](flat_map/count.md.nolink)             | 指定したキーにマッチする要素の数を取得する | C++23 |
+| [`find`](flat_map/find.md.nolink)               | 指定したキーで要素を探す                   | C++23 |
+| [`contains`](flat_map/contains.md.nolink)       | 指定したキーの要素が含まれているかを判定する | C++23 |
+| [`equal_range`](flat_map/equal_range.md.nolink) | 指定したキーにマッチする要素範囲を取得する | C++23 |
+| [`lower_bound`](flat_map/lower_bound.md.nolink) | 与えられた値より小さくない最初の要素へのイテレータを取得する | C++23 |
+| [`upper_bound`](flat_map/upper_bound.md.nolink) | 特定の値よりも大きい最初の要素へのイテレータを取得する       | C++23 |
+
+### オブザーバー
+
+| 名前                                | 説明                                   | 対応バージョン |
+|-------------------------------------|----------------------------------------|----------------|
+| [`key_comp`](flat_map/key_comp.md.nolink)     | キー比較用の関数オブジェクトを取得する | C++23 |
+| [`value_comp`](flat_map/value_comp.md.nolink) | 要素比較用の関数オブジェクトを取得する | C++23 |
+
+### 比較演算子
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`operator==`](flat_map/op_equal.md.nolink)         | 左辺と右辺が等しいかの判定を行う           | C++23 |
+| `bool operator!=(const flat_map&amp;amp; x, const flat_map&amp;amp; y);` | 左辺と右辺が等しくないかの判定を行う (`==`により使用可能) | C++23 |
+| [`operator&amp;lt;=&amp;gt;`](flat_map/op_compare_3way.md.nolink) | 三方比較を行う                             | C++23 |
+| `bool operator&amp;lt;(const flat_map&amp;amp; x, const flat_map&amp;amp; y);`  | 左辺が右辺より小さいかの判定を行う  (`&amp;lt;=&amp;gt;`により使用可能) | C++23 |
+| `bool operator&amp;lt;=(const flat_map&amp;amp; x, const flat_map&amp;amp; y);` | 左辺が右辺より小さいか等しいかの判定を行う (`&amp;lt;=&amp;gt;`により使用可能) | C++23 |
+| `bool operator&amp;gt;(const flat_map&amp;amp; x, const flat_map&amp;amp; y);`  | 左辺が右辺より大きいかの判定を行う (`&amp;lt;=&amp;gt;`により使用可能) | C++23 |
+| `bool operator&amp;gt;=(const flat_map&amp;amp; x, const flat_map&amp;amp; y);` | 左辺が右辺より大きいか等しいかの判定を行う (`&amp;lt;=&amp;gt;`により使用可能) | C++23 |
+
+
+## メンバ型
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| `key_type` | キーの型。テンプレートパラメータ `Key`  |  C++23 |
+| `mapped_type` | 値の型。テンプレートパラメータ `T` | C++23 |
+| `value_type` | 要素の型。`[`std::pair`](/reference/utility/pair.md)`&amp;lt;key_type, mapped_type&amp;gt;` | C++23 |
+| `key_compare` | キー値の大小関係を判定する二項述語の型。テンプレートパラメータ `Compare` | C++23 |
+| [`value_compare`](flat_map/value_compare.md.nolink) | 要素値のキー部分で大小関係を判定する二項述語の型。入れ子クラス | C++23 |
+| `reference` | 要素への参照型。[`std::pair`](/reference/utility/pair.md)`&amp;lt;const key_type&amp;amp;, mapped_type&amp;amp;&amp;gt;` | C++23 |
+| `const_reference` | 要素への`const`参照型。[`std::pair`](/reference/utility/pair.md)`&amp;lt;const key_type&amp;amp;, const mapped_type&amp;amp;&amp;gt;` | C++23 |
+| `size_type` | 要素数を表す符号なし整数型 [`size_t`](/reference/cstddef/size_t.md) | C++23 |
+| `difference_type` | 同一のコンテナを指す `iterator` の差を表す符号付き整数型 [`ptrdiff_t`](/reference/cstddef/ptrdiff_t.md) | C++23 |
+| `iterator` | 双方向イテレータ | C++23 |
+| `const_iterator` | 読み取り専用双方向イテレータ | C++23 |
+| `reverse_iterator` | 逆順双方向イテレータ。[`std::reverse_iterator`](/reference/iterator/reverse_iterator.md)`&amp;lt;iterator&amp;gt;` | C++23 |
+| `const_reverse_iterator` | 読み取り専用逆順双方向イテレータ。[`std::reverse_iterator`](/reference/iterator/reverse_iterator.md)`&amp;lt;const_iterator&amp;gt;` | C++23 |
+| `key_container_type` | キーを格納するコンテナ型 `KeyContainer` | C++23 |
+| `mapped_container_type` | 値を格納するコンテナ型 `MappedContainer` | C++23 |
+| [`containers`](flat_map/containers.md.nolink) | キーのコンテナと値のコンテナを保持する型 | C++23 |
+
+
+## 非メンバ関数
+### 入れ替え
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`swap`](flat_map/swap_free.md.nolink) | 2つの`flat_map`オブジェクトを入れ替える | C++23 |
+
+
+### 要素削除
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`erase_if`](flat_map/erase_if_free.md.nolink) | 指定した条件に合致する要素とその分の領域を、コンテナから削除する | C++23 |
+
+
+## 推論補助
+
+| 名前 | 説明 | 対応バージョン |
+|---------------------------------------------|------------------------------------|-------|
+| [`(deduction_guide)`](flat_map/op_deduction_guide.md.nolink) | クラステンプレートの推論補助 | C++23 |
+
+
+## 例
+### 基本的な使い方
+
+#### 出力
+
+
+
+### ユーザー定義型をキーとして使用する (`operator&amp;lt;=&amp;gt;`を定義)
+```
+
+#### 出力
+
+
+### ユーザー定義型をキーとして使用する (大小比較の関数オブジェクトを定義)
+#### 出力
+
+
+## 参照
+- [P0429R3 A Standard `flat_map`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0429r3.pdf)
+    - C++23で`flat_map`が導入された経緯・動機・設計について記載されている
+- [P0429R9 A Standard `flat_map`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0429r9.pdf)
+    - C++23で導入された`flat_map`の仕様
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>format -- flat_mapクラスのページを追加 #1078</title>
      <link href="https://cpprefjp.github.io/reference/format/format.html"/>
      <id>9fe59f7c3a1b97adef5bc273c0ab9f81f8b085a7:reference/format/format.md</id>
      <updated>2023-04-17T18:07:27+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/format.md b/reference/format/format.md
index cf7c5f0d4..875d62741 100644
--- a/reference/format/format.md
+++ b/reference/format/format.md
@@ -476,7 +476,7 @@ int main()
 * pque.push[link /reference/queue/priority_queue/push.md]
 * std::stack[link /reference/stack/stack.md]
 * st.push[link /reference/stack/stack/push.md]
-* std::flat_map[link /reference/flat_map/flat_map.md.nolink]
+* std::flat_map[link /reference/flat_map/flat_map.md]
 * std::flat_set[link /reference/flat_map/flat_set.md.nolink]
 
 #### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>range-default-formatter -- flat_mapクラスのページを追加 #1078</title>
      <link href="https://cpprefjp.github.io/reference/format/range-default-formatter.html"/>
      <id>9fe59f7c3a1b97adef5bc273c0ab9f81f8b085a7:reference/format/range-default-formatter.md</id>
      <updated>2023-04-17T18:07:27+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/range-default-formatter.md b/reference/format/range-default-formatter.md
index 3d5c97b1e..45f154b17 100644
--- a/reference/format/range-default-formatter.md
+++ b/reference/format/range-default-formatter.md
@@ -40,7 +40,7 @@ namespace std {
 
 - (1) : プライマリテンプレート。宣言のみ
 - (2) : Range・シーケンスコンテナに対する特殊化。デバッグ出力の有効化と、`[a, b, c]`形式の出力を行う
-- (3) : [`std::map`](/reference/map/map.md)や[`std::flat_map`](/reference/flat_map/flat_map.md.nolink)などの連想コンテナに対する特殊化。デバッグ出力の有効化と、`{1: a, 2: b}`形式での出力を行う
+- (3) : [`std::map`](/reference/map/map.md)や[`std::flat_map`](/reference/flat_map/flat_map.md)などの連想コンテナに対する特殊化。デバッグ出力の有効化と、`{1: a, 2: b}`形式での出力を行う
 - (4) : [`std::set`](/reference/set/set.md)や[`std::flat_set`](/reference/flat_set/flat_set.md.nolink)などの集合コンテナに対する特殊化。デバッグ出力の有効化と、`{a, b, c}`形式の出力を行う
 - (5) : 文字列形式の出力を行うRangeに対する特殊化。Rangeを文字列として出力し、[`range_format::debug_string`](range_format.md)指定であればデバッグ文字列として出力する
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>range_format -- flat_mapクラスのページを追加 #1078</title>
      <link href="https://cpprefjp.github.io/reference/format/range_format.html"/>
      <id>9fe59f7c3a1b97adef5bc273c0ab9f81f8b085a7:reference/format/range_format.md</id>
      <updated>2023-04-17T18:07:27+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/range_format.md b/reference/format/range_format.md
index eca360a27..be68bcd91 100644
--- a/reference/format/range_format.md
+++ b/reference/format/range_format.md
@@ -24,7 +24,7 @@ Rangeの書式種別を表す列挙型。
 | 列挙値         | 説明 |
 |----------------|------|
 | `disabled`     | 書式化ができないRangeであることを表す値 |
-| `map`          | [`std::map`](/reference/map/map.md)や[`std::flat_map`](/reference/flat_map/flat_map.md.nolink)向けの書式。`{k1: v1, k2: v2}` |
+| `map`          | [`std::map`](/reference/map/map.md)や[`std::flat_map`](/reference/flat_map/flat_map.md)向けの書式。`{k1: v1, k2: v2}` |
 | `set`          | [`std::set`](/reference/set/set.md)や[`std::flat_set`](/reference/flat_set/flat_set.md.nolink)向けの書式。`{v1, v2}` |
 | `sequence`     | [`std::vector`](/reference/vector/vector.md)や[`std::array`](/reference/array/array.md)向けの書式。`[v1, v2]`|
 | `string`       | 文字列向けの書式。`abc` |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>map -- (multi)map, (multi)set : s/const pointer/const_pointer/</title>
      <link href="https://cpprefjp.github.io/reference/map/map.html"/>
      <id>15e87dfd566db42845f47158e941032b9e0a2de0:reference/map/map.md</id>
      <updated>2023-04-17T17:15:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/map.md b/reference/map/map.md
index a3fc5f03c..3ced8970a 100644
--- a/reference/map/map.md
+++ b/reference/map/map.md
@@ -140,7 +140,7 @@ namespace std {
 | `size_type`                             | 要素数を表す符号なし整数型。`difference_type` で表現可能な非負整数（0以上の整数）を表すことが可能。(通常は [`size_t`](/reference/cstddef/size_t.md))                                                                                                                                                                                         |                |
 | `difference_type`                       | 同一のコンテナを指す `iterator` の差を表す符号付き整数型(通常は [`ptrdiff_t`](/reference/cstddef/ptrdiff_t.md)) &amp;lt;br/&amp;gt;`std::`[`iterator_traits`](/reference/iterator/iterator_traits.md)`&amp;lt;iterator&amp;gt;::difference_type`、および、`std::`[`iterator_traits`](/reference/iterator/iterator_traits.md)`&amp;lt;const_iterator&amp;gt;::difference_type` と同じ。 |                |
 | `pointer`                               | 要素 `value_type`へのポインタ。&amp;lt;br/&amp;gt; C++03 : `typename Allocator::pointer`。&amp;lt;br/&amp;gt; C++11以降 : `typename` [`allocator_traits`](/reference/memory/allocator_traits.md)`&amp;lt;Allocator&amp;gt;::pointer`。                                                                                                                                                 |                |
-| `const pointer`                         | 要素 `value_type`への`const`ポインタ。&amp;lt;br/&amp;gt; C++03 : `typename Allocator::const_pointer`。&amp;lt;br/&amp;gt; C++11以降 : `typename` [`allocator_traits`](/reference/memory/allocator_traits.md)`&amp;lt;Allocator&amp;gt;::const_pointer`。                                                                                                                              |                |
+| `const_pointer`                         | 要素 `value_type`への`const`ポインタ。&amp;lt;br/&amp;gt; C++03 : `typename Allocator::const_pointer`。&amp;lt;br/&amp;gt; C++11以降 : `typename` [`allocator_traits`](/reference/memory/allocator_traits.md)`&amp;lt;Allocator&amp;gt;::const_pointer`。                                                                                                                              |                |
 | `reverse_iterator`                      | 逆順双方向イテレータ。`std::`[`reverse_iterator`](/reference/iterator/reverse_iterator.md)`&amp;lt;iterator&amp;gt;`。                                                                                                                                                                                                                                     |                |
 | `const_reverse_iterator`                | 読み取り専用逆順双方向イテレータ。`std::`[`reverse_iterator`](/reference/iterator/reverse_iterator.md)`&amp;lt;const_iterator&amp;gt;`。                                                                                                                                                                                                                   |                |
 | `node_type`                             | [`node_handle`](/reference/node_handle/node_handle.md)クラステンプレートの特殊化。                                                                                                                                                                                                                   | C++17          |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>multimap -- (multi)map, (multi)set : s/const pointer/const_pointer/</title>
      <link href="https://cpprefjp.github.io/reference/map/multimap.html"/>
      <id>15e87dfd566db42845f47158e941032b9e0a2de0:reference/map/multimap.md</id>
      <updated>2023-04-17T17:15:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/multimap.md b/reference/map/multimap.md
index b5381dce8..8cf3d751d 100644
--- a/reference/map/multimap.md
+++ b/reference/map/multimap.md
@@ -135,7 +135,7 @@ namespace std {
 | `size_type`       | 要素数を表す符号なし整数型。`difference_type` で表現可能な非負整数（0以上の整数）を表すことが可能。(通常は [`size_t`](/reference/cstddef/size_t.md)) | |
 | `difference_type` | 同一のコンテナを指す `iterator` の差を表す符号付き整数型(通常は [`ptrdiff_t`](/reference/cstddef/ptrdiff_t.md)) &amp;lt;br/&amp;gt;`std::`[`iterator_traits`](/reference/iterator/iterator_traits.md)`&amp;lt;iterator&amp;gt;::difference_type`、および、`std::`[`iterator_traits`](/reference/iterator/iterator_traits.md)`&amp;lt;const_iterator&amp;gt;::difference_type` と同じ。 | |
 | `pointer`         | 要素 `value_type`へのポインタ。&amp;lt;br/&amp;gt; C++03 : `typename Allocator::pointer`。&amp;lt;br/&amp;gt; C++11以降 : `typename` [`allocator_traits`](/reference/memory/allocator_traits.md)`&amp;lt;Allocator&amp;gt;::pointer`。 | |
-| `const pointer`         | 要素 `value_type`への`const`ポインタ。&amp;lt;br/&amp;gt; C++03 : `typename Allocator::const_pointer`。&amp;lt;br/&amp;gt; C++11以降 : `typename` [`allocator_traits`](/reference/memory/allocator_traits.md)`&amp;lt;Allocator&amp;gt;::const_pointer`。 | |
+| `const_pointer`         | 要素 `value_type`への`const`ポインタ。&amp;lt;br/&amp;gt; C++03 : `typename Allocator::const_pointer`。&amp;lt;br/&amp;gt; C++11以降 : `typename` [`allocator_traits`](/reference/memory/allocator_traits.md)`&amp;lt;Allocator&amp;gt;::const_pointer`。 | |
 | `reverse_iterator` | 逆順双方向イテレータ。`std::`[`reverse_iterator`](/reference/iterator/reverse_iterator.md)`&amp;lt;iterator&amp;gt;`。 | |
 | `const_reverse_iterator` | 読み取り専用逆順双方向イテレータ。`std::`[`reverse_iterator`](/reference/iterator/reverse_iterator.md)`&amp;lt;const_iterator&amp;gt;`。 | |
 | `node_type`       | [`node_handle`](/reference/node_handle/node_handle.md)クラステンプレートの特殊化。  | C++17          |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>multiset -- (multi)map, (multi)set : s/const pointer/const_pointer/</title>
      <link href="https://cpprefjp.github.io/reference/set/multiset.html"/>
      <id>15e87dfd566db42845f47158e941032b9e0a2de0:reference/set/multiset.md</id>
      <updated>2023-04-17T17:15:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/multiset.md b/reference/set/multiset.md
index e8d765498..36892db95 100644
--- a/reference/set/multiset.md
+++ b/reference/set/multiset.md
@@ -124,7 +124,7 @@ namespace std {
 | `size_type`              | 要素数を表す符号なし整数型。`difference_type` で表現可能な非負整数（0以上の整数）を表すことが可能。(通常は [`size_t`](/reference/cstddef/size_t.md)) | |
 | `difference_type`        | 同一のコンテナを指す `iterator` の差を表す符号付き整数型(通常は [`ptrdiff_t`](/reference/cstddef/ptrdiff_t.md)) &amp;lt;br/&amp;gt;`std::`[`iterator_traits`](/reference/iterator/iterator_traits.md)`&amp;lt;iterator&amp;gt;::difference_type`、および、`std::`[`iterator_traits`](/reference/iterator/iterator_traits.md)`&amp;lt;const_iterator&amp;gt;::difference_type` と同じ。 | |
 | `pointer`                | 要素 `value_type`へのポインタ。&amp;lt;br/&amp;gt; C++03 : `typename Allocator::pointer`。&amp;lt;br/&amp;gt; C++11以降 : `typename` [`allocator_traits`](/reference/memory/allocator_traits.md)`&amp;lt;Allocator&amp;gt;::pointer`。 | |
-| `const pointer`          | 要素 `value_type`への`const`ポインタ。&amp;lt;br/&amp;gt; C++03 : `typename Allocator::const_pointer`。&amp;lt;br/&amp;gt; C++11以降 : `typename` [`allocator_traits`](/reference/memory/allocator_traits.md)`&amp;lt;Allocator&amp;gt;::const_pointer`。 | |
+| `const_pointer`          | 要素 `value_type`への`const`ポインタ。&amp;lt;br/&amp;gt; C++03 : `typename Allocator::const_pointer`。&amp;lt;br/&amp;gt; C++11以降 : `typename` [`allocator_traits`](/reference/memory/allocator_traits.md)`&amp;lt;Allocator&amp;gt;::const_pointer`。 | |
 | `reverse_iterator` | 逆順双方向イテレータ。`std::`[`reverse_iterator`](/reference/iterator/reverse_iterator.md)`&amp;lt;iterator&amp;gt;`。 | |
 | `const_reverse_iterator` | 読み取り専用逆順双方向イテレータ。`std::`[`reverse_iterator`](/reference/iterator/reverse_iterator.md)`&amp;lt;const_iterator&amp;gt;`。 | |
 | `node_type`              | [`node_handle`](/reference/node_handle/node_handle.md)クラステンプレートの特殊化。 | C++17 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>set -- (multi)map, (multi)set : s/const pointer/const_pointer/</title>
      <link href="https://cpprefjp.github.io/reference/set/set.html"/>
      <id>15e87dfd566db42845f47158e941032b9e0a2de0:reference/set/set.md</id>
      <updated>2023-04-17T17:15:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/set.md b/reference/set/set.md
index ad6b0a5df..2b94af98d 100644
--- a/reference/set/set.md
+++ b/reference/set/set.md
@@ -125,7 +125,7 @@ namespace std {
 | `size_type`              | 要素数を表す符号なし整数型。`difference_type` で表現可能な非負整数（0以上の整数）を表すことが可能。(通常は [`size_t`](/reference/cstddef/size_t.md)) | |
 | `difference_type`        | 同一のコンテナを指す `iterator` の差を表す符号付き整数型(通常は [`ptrdiff_t`](/reference/cstddef/ptrdiff_t.md)) &amp;lt;br/&amp;gt;`std::`[`iterator_traits`](/reference/iterator/iterator_traits.md)`&amp;lt;iterator&amp;gt;::difference_type`、および、`std::`[`iterator_traits`](/reference/iterator/iterator_traits.md)`&amp;lt;const_iterator&amp;gt;::difference_type` と同じ。 | |
 | `pointer`                | 要素 `value_type`へのポインタ。&amp;lt;br/&amp;gt; C++03 : `typename Allocator::pointer`。&amp;lt;br/&amp;gt; C++11以降 : `typename` [`allocator_traits`](/reference/memory/allocator_traits.md)`&amp;lt;Allocator&amp;gt;::pointer`。 | |
-| `const pointer`          | 要素 `value_type`への`const`ポインタ。&amp;lt;br/&amp;gt; C++03 : `typename Allocator::const_pointer`。&amp;lt;br/&amp;gt; C++11以降 : `typename` [`allocator_traits`](/reference/memory/allocator_traits.md)`&amp;lt;Allocator&amp;gt;::const_pointer`。 | |
+| `const_pointer`          | 要素 `value_type`への`const`ポインタ。&amp;lt;br/&amp;gt; C++03 : `typename Allocator::const_pointer`。&amp;lt;br/&amp;gt; C++11以降 : `typename` [`allocator_traits`](/reference/memory/allocator_traits.md)`&amp;lt;Allocator&amp;gt;::const_pointer`。 | |
 | `reverse_iterator` | 逆順双方向イテレータ。`std::`[`reverse_iterator`](/reference/iterator/reverse_iterator.md)`&amp;lt;iterator&amp;gt;`。 | |
 | `const_reverse_iterator` | 読み取り専用逆順双方向イテレータ。`std::`[`reverse_iterator`](/reference/iterator/reverse_iterator.md)`&amp;lt;const_iterator&amp;gt;`。 | |
 | `node_type`              | [`node_handle`](/reference/node_handle/node_handle.md)クラステンプレートの特殊化。 | C++17          |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
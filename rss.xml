<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2024-09-18T14:34:45.647841</updated>
  <id>1f0e2e94-24ab-4fc4-b59f-d50ce806bfdc</id>

  
    <entry>
      <title>breakpoint -- &lt;debugging&gt; : ユースケースを記載 #1232</title>
      <link href="https://cpprefjp.github.io/reference/debugging/breakpoint.html"/>
      <id>dd8477c7aae368c8df41f61c6d65fe9bbfb47a42:reference/debugging/breakpoint.md</id>
      <updated>2024-09-18T23:31:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/debugging/breakpoint.md b/reference/debugging/breakpoint.md
index 62f370aef..eb882cec9 100644
--- a/reference/debugging/breakpoint.md
+++ b/reference/debugging/breakpoint.md
@@ -13,8 +13,9 @@ namespace std {
 ## 概要
 ブレークポイントを設置する。
 
-この関数は無条件のブレークポイントであり、デバッガがプログラムを監視しているかに関わらずプログラムの一時停止 (ブレーク) を試みる。
+この関数は無条件のブレークポイントであり、デバッガの存在を検出できない状況でもプログラムの一時停止 (ブレーク) を試みる。
 
+プログラムコードでブレークポイントを指定できると、複雑な実行時条件でプログラムを一時停止させることができる。
 
 
 ## 効果
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_debugger_present -- &lt;debugging&gt; : ユースケースを記載 #1232</title>
      <link href="https://cpprefjp.github.io/reference/debugging/is_debugger_present.html"/>
      <id>dd8477c7aae368c8df41f61c6d65fe9bbfb47a42:reference/debugging/is_debugger_present.md</id>
      <updated>2024-09-18T23:31:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/debugging/is_debugger_present.md b/reference/debugging/is_debugger_present.md
index 721f4f41e..098f6e296 100644
--- a/reference/debugging/is_debugger_present.md
+++ b/reference/debugging/is_debugger_present.md
@@ -15,6 +15,8 @@ namespace std {
 
 この関数は、デバッガがプログラムを監視中かどうかを判定する。プラットフォーム固有の結果を決定できない場合、ユーザーがこの関数を定義することで柔軟に動作を制御できる。
 
+プログラムがデバッガ実行中かを判定できることで、デバッガ実行中に問題の診断に役立つ追加の出力やテストができる。
+
 
 ## 置き換え可能
 ユーザーのプログラムでこの関数を定義することで、標準ライブラリで定義されるデフォルトの動作を置き換えることができる。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>debugging -- breakpoint_if_debugging : 脱字を修正 #1232</title>
      <link href="https://cpprefjp.github.io/reference/debugging.html"/>
      <id>30fab638cae8da737b5f47495953a63b4ad6de53:reference/debugging.md</id>
      <updated>2024-09-18T18:15:54+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;debugging&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;debugging&lt;/span&gt;&lt;span class=&#34;cpp cpp26&#34; title=&#34;C++26で追加&#34;&gt;(C++26)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;debugging&amp;gt;&lt;/code&gt;ヘッダでは、プログラムのデバッグ実行をサポートする機能を提供する。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;debugging/breakpoint.html&#34;&gt;breakpoint&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ブレークポイントを設置する (functional)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;debugging/breakpoint_if_debugging.html&#34;&gt;breakpoint_if_debugging&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;デバッガ実行時のみブレークポイントを設置する (functional)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;debugging/is_debugger_present.html&#34;&gt;is_debugger_present&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;デバッガ実行中か判定する (functional)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;この機能が必要になった背景・経緯&lt;/h2&gt;
&lt;p&gt;開発プラットフォームによってデバッガやブレークポイントの機能は提供されているが、本ライブラリのようにプログラム中に明示的にブレークポイントを設置し、プログラムとデバッガを対話させることでデバッグ体験が向上することがある。&lt;/p&gt;
&lt;p&gt;実装経験としては以下のようなものがあり、これらをこのライブラリで標準化した：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;開発環境&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Microsoft C/C++ Optimizing Compiler&lt;/td&gt;
&lt;td&gt;&lt;code&gt;__debugbreak()&lt;/code&gt;関数 (無条件ブレークポイント)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Win32 API&lt;/td&gt;
&lt;td&gt;&lt;code&gt;IsDebuggerPresent()&lt;/code&gt;関数 (デバッガ実行中か判定)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LLVM Clang&lt;/td&gt;
&lt;td&gt;&lt;code&gt;__builtin_debugtrap()&lt;/code&gt;組み込み関数 (無条件ブレークポイント)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;arm Keil, ARM Compiler&lt;/td&gt;
&lt;td&gt;&lt;code&gt;__breakpoint()&lt;/code&gt;関数 (無条件ブレークポイント)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Portable Snippetsライブラリ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;psnip_trap()&lt;/code&gt;関数 (無条件ブレークポイント)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Debug Breakライブラリ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;debug_break()&lt;/code&gt;関数 (無条件ブレークポイント)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Boost.Testライブラリ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;debugger_break()&lt;/code&gt;関数 (無条件ブレークポイント)&lt;br /&gt; &lt;code&gt;under_debugger()&lt;/code&gt;関数 (出張っg実行中か判定)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EASTLライブラリ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;EASTL_DEBUG_BREAK()&lt;/code&gt;マクロ (無条件ブレークポイント)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Catch2ライブラリ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;CATCH_TRAP&lt;/code&gt;マクロ (無条件ブレークポイント)&lt;br /&gt; &lt;code&gt;CATCH_BREAK_INTO_DEBUGGER&lt;/code&gt;マクロ (条件付きブレークポイント)&lt;br /&gt; &lt;code&gt;isDebuggerActive()&lt;/code&gt;関数 (デバッガ実行中か判定)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JUCEライブラリ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;JUCE_BREAK_IN_DEBUGGER&lt;/code&gt;マクロ (無条件ブレークポイント)&lt;br /&gt; &lt;code&gt;juce_isRunningUnderDebugger()&lt;/code&gt;関数、&lt;code&gt;Process::isRunningUnderDebugger()&lt;/code&gt;関数 (デバッガ実行中か判定)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ImGuiライブラリ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;IM_DEBUG_BREAK()&lt;/code&gt;マクロ (無条件ブレークポイント)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AWS C SDK&lt;/td&gt;
&lt;td&gt;&lt;code&gt;aws_debug_break()&lt;/code&gt;関数 (条件付きブレークポイント)&lt;br /&gt; &lt;code&gt;aws_is_debugger_present()&lt;/code&gt;関数 (デバッガ実行中か判定)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;UnrealEngine&lt;/td&gt;
&lt;td&gt;&lt;code&gt;UE_DEBUG_BREAK&lt;/code&gt;マクロ (条件付きブレークポイント)&lt;br /&gt; &lt;code&gt;IsDebuggerPresent()&lt;/code&gt;関数 (デバッガ実行中か判定)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++26&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2546r5.html&#34; target=&#34;_blank&#34;&gt;P2546R5 Debugging Support&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>breakpoint_if_debugging -- breakpoint_if_debugging : 脱字を修正 #1232</title>
      <link href="https://cpprefjp.github.io/reference/debugging/breakpoint_if_debugging.html"/>
      <id>30fab638cae8da737b5f47495953a63b4ad6de53:reference/debugging/breakpoint_if_debugging.md</id>
      <updated>2024-09-18T18:15:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/debugging/breakpoint_if_debugging.md b/reference/debugging/breakpoint_if_debugging.md
index 482559fa2..6fc9f21d1 100644
--- a/reference/debugging/breakpoint_if_debugging.md
+++ b/reference/debugging/breakpoint_if_debugging.md
@@ -11,7 +11,7 @@ namespace std {
 ```
 
 ## 概要
-デバッガ実行のみブレークポイントを設置する。
+デバッガ実行時のみブレークポイントを設置する。
 
 この関数は条件付きブレークポイントであり、デバッガがプログラムを監視中であればプログラムを一時停止 (ブレーク) するが、そうでなければ何もしないよう動作する。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>hardware_constructive_interference_size -- hardware_…size : 動作確認</title>
      <link href="https://cpprefjp.github.io/reference/new/hardware_constructive_interference_size.html"/>
      <id>cbb1fd4e1b38336a5643daeffa5ea7c88e3009e2:reference/new/hardware_constructive_interference_size.md</id>
      <updated>2024-09-18T14:54:15+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/new/hardware_constructive_interference_size.md b/reference/new/hardware_constructive_interference_size.md
index f75d652bb..ce9a949c1 100644
--- a/reference/new/hardware_constructive_interference_size.md
+++ b/reference/new/hardware_constructive_interference_size.md
@@ -22,7 +22,7 @@ namespace std {
 
 
 ## 例
-```cpp
+```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;new&amp;gt;
 
@@ -55,9 +55,9 @@ hardware_constructive_interference_size : 64
 - C++17
 
 ### 処理系
-- [Clang](/implementation.md#clang):
+- [Clang](/implementation.md#clang): 19 [mark verified]
 - [GCC](/implementation.md#gcc): 12.1 [mark verified]
-- [Visual C++](/implementation.md#visual_cpp):
+- [Visual C++](/implementation.md#visual_cpp): 2019 [mark verified]
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>hardware_destructive_interference_size -- hardware_…size : 動作確認</title>
      <link href="https://cpprefjp.github.io/reference/new/hardware_destructive_interference_size.html"/>
      <id>cbb1fd4e1b38336a5643daeffa5ea7c88e3009e2:reference/new/hardware_destructive_interference_size.md</id>
      <updated>2024-09-18T14:54:15+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/new/hardware_destructive_interference_size.md b/reference/new/hardware_destructive_interference_size.md
index 645a59e5c..fe1c0188b 100644
--- a/reference/new/hardware_destructive_interference_size.md
+++ b/reference/new/hardware_destructive_interference_size.md
@@ -39,7 +39,7 @@ struct keep_apart {
 
 
 ## 例
-```cpp
+```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;new&amp;gt;
 #include &amp;lt;thread&amp;gt;
@@ -114,9 +114,9 @@ hardware_destructive_interference_size : 64
 - C++17
 
 ### 処理系
-- [Clang](/implementation.md#clang):
+- [Clang](/implementation.md#clang): 19 [mark verified]
 - [GCC](/implementation.md#gcc): 12.1 [mark verified]
-- [Visual C++](/implementation.md#visual_cpp):
+- [Visual C++](/implementation.md#visual_cpp): 2019 [mark verified]
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>debugging -- fix typo</title>
      <link href="https://cpprefjp.github.io/reference/debugging.html"/>
      <id>964d94ab807c5b935fa0581bd3e6b70a61a1a2fc:reference/debugging.md</id>
      <updated>2024-09-18T13:33:23+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;debugging&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;debugging&lt;/span&gt;&lt;span class=&#34;cpp cpp26&#34; title=&#34;C++26で追加&#34;&gt;(C++26)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;debugging&amp;gt;&lt;/code&gt;ヘッダでは、プログラムのデバッグ実行をサポートする機能を提供する。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;debugging/breakpoint.html&#34;&gt;breakpoint&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ブレークポイントを設置する (functional)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;debugging/breakpoint_if_debugging.html&#34;&gt;breakpoint_if_debugging&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;デバッガ実行のみブレークポイントを設置する (functional)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;debugging/is_debugger_present.html&#34;&gt;is_debugger_present&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;デバッガ実行中か判定する (functional)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;この機能が必要になった背景・経緯&lt;/h2&gt;
&lt;p&gt;開発プラットフォームによってデバッガやブレークポイントの機能は提供されているが、本ライブラリのようにプログラム中に明示的にブレークポイントを設置し、プログラムとデバッガを対話させることでデバッグ体験が向上することがある。&lt;/p&gt;
&lt;p&gt;実装経験としては以下のようなものがあり、これらをこのライブラリで標準化した：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;開発環境&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Microsoft C/C++ Optimizing Compiler&lt;/td&gt;
&lt;td&gt;&lt;code&gt;__debugbreak()&lt;/code&gt;関数 (無条件ブレークポイント)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Win32 API&lt;/td&gt;
&lt;td&gt;&lt;code&gt;IsDebuggerPresent()&lt;/code&gt;関数 (デバッガ実行中か判定)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LLVM Clang&lt;/td&gt;
&lt;td&gt;&lt;code&gt;__builtin_debugtrap()&lt;/code&gt;組み込み関数 (無条件ブレークポイント)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;arm Keil, ARM Compiler&lt;/td&gt;
&lt;td&gt;&lt;code&gt;__breakpoint()&lt;/code&gt;関数 (無条件ブレークポイント)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Portable Snippetsライブラリ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;psnip_trap()&lt;/code&gt;関数 (無条件ブレークポイント)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Debug Breakライブラリ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;debug_break()&lt;/code&gt;関数 (無条件ブレークポイント)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Boost.Testライブラリ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;debugger_break()&lt;/code&gt;関数 (無条件ブレークポイント)&lt;br /&gt; &lt;code&gt;under_debugger()&lt;/code&gt;関数 (出張っg実行中か判定)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EASTLライブラリ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;EASTL_DEBUG_BREAK()&lt;/code&gt;マクロ (無条件ブレークポイント)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Catch2ライブラリ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;CATCH_TRAP&lt;/code&gt;マクロ (無条件ブレークポイント)&lt;br /&gt; &lt;code&gt;CATCH_BREAK_INTO_DEBUGGER&lt;/code&gt;マクロ (条件付きブレークポイント)&lt;br /&gt; &lt;code&gt;isDebuggerActive()&lt;/code&gt;関数 (デバッガ実行中か判定)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JUCEライブラリ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;JUCE_BREAK_IN_DEBUGGER&lt;/code&gt;マクロ (無条件ブレークポイント)&lt;br /&gt; &lt;code&gt;juce_isRunningUnderDebugger()&lt;/code&gt;関数、&lt;code&gt;Process::isRunningUnderDebugger()&lt;/code&gt;関数 (デバッガ実行中か判定)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ImGuiライブラリ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;IM_DEBUG_BREAK()&lt;/code&gt;マクロ (無条件ブレークポイント)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AWS C SDK&lt;/td&gt;
&lt;td&gt;&lt;code&gt;aws_debug_break()&lt;/code&gt;関数 (条件付きブレークポイント)&lt;br /&gt; &lt;code&gt;aws_is_debugger_present()&lt;/code&gt;関数 (デバッガ実行中か判定)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;UnrealEngine&lt;/td&gt;
&lt;td&gt;&lt;code&gt;UE_DEBUG_BREAK&lt;/code&gt;マクロ (条件付きブレークポイント)&lt;br /&gt; &lt;code&gt;IsDebuggerPresent()&lt;/code&gt;関数 (デバッガ実行中か判定)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++26&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2546r5.html&#34; target=&#34;_blank&#34;&gt;P2546R5 Debugging Support&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>breakpoint -- &lt;debugging&gt; : コード例が間違ってたのを修正 #1232</title>
      <link href="https://cpprefjp.github.io/reference/debugging/breakpoint.html"/>
      <id>a4346b7d7da2873721b6dce28c8ce9811a6da22d:reference/debugging/breakpoint.md</id>
      <updated>2024-09-18T13:13:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/debugging/breakpoint.md b/reference/debugging/breakpoint.md
index eca120ffc..62f370aef 100644
--- a/reference/debugging/breakpoint.md
+++ b/reference/debugging/breakpoint.md
@@ -47,11 +47,12 @@ double g(double a, double b) {
 
 double f(double a, double b) {
   double ret = g(a, b);
-  if (std::isnan(ret)) {
-    // 演算結果でNaNが発生したらブレークし、
+  if (std::isnan(ret) || std::isinf(ret)) {
+    // 演算結果でNaNかinfが発生したらブレークし、
     // デバッガでパラメータ (ローカル変数) などを確認する
     std::breakpoint();
   }
+  return ret;
 }
 
 int main() {
@@ -61,9 +62,11 @@ int main() {
 ```
 * std::breakpoint[color ff0000]
 * std::isnan[link /reference/cmath/isnan.md]
+* std::isinf[link /reference/cmath/isinf.md]
 
-### 出力
+### 出力例
 ```
+inf
 ```
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>breakpoint_if_debugging -- &lt;debugging&gt; : コード例が間違ってたのを修正 #1232</title>
      <link href="https://cpprefjp.github.io/reference/debugging/breakpoint_if_debugging.html"/>
      <id>a4346b7d7da2873721b6dce28c8ce9811a6da22d:reference/debugging/breakpoint_if_debugging.md</id>
      <updated>2024-09-18T13:13:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/debugging/breakpoint_if_debugging.md b/reference/debugging/breakpoint_if_debugging.md
index 742e93cb9..482559fa2 100644
--- a/reference/debugging/breakpoint_if_debugging.md
+++ b/reference/debugging/breakpoint_if_debugging.md
@@ -49,11 +49,12 @@ double g(double a, double b) {
 
 double f(double a, double b) {
   double ret = g(a, b);
-  if (std::isnan(ret)) {
-    // 演算結果でNaNが発生したらブレークし、
+  if (std::isnan(ret) || std::isinf(ret)) {
+    // 演算結果でNaNかinfが発生したらブレークし、
     // デバッガでパラメータ (ローカル変数) などを確認する
     std::breakpoint_if_debugging();
   }
+  return ret;
 }
 
 int main() {
@@ -63,9 +64,11 @@ int main() {
 ```
 * std::breakpoint_if_debugging[color ff0000]
 * std::isnan[link /reference/cmath/isnan.md]
+* std::isinf[link /reference/cmath/isinf.md]
 
-### 出力
+### 出力例
 ```
+inf
 ```
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_debugger_present -- &lt;debugging&gt; : コード例が間違ってたのを修正 #1232</title>
      <link href="https://cpprefjp.github.io/reference/debugging/is_debugger_present.html"/>
      <id>a4346b7d7da2873721b6dce28c8ce9811a6da22d:reference/debugging/is_debugger_present.md</id>
      <updated>2024-09-18T13:13:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/debugging/is_debugger_present.md b/reference/debugging/is_debugger_present.md
index 4cabd44f4..721f4f41e 100644
--- a/reference/debugging/is_debugger_present.md
+++ b/reference/debugging/is_debugger_present.md
@@ -55,13 +55,14 @@ double g(double a, double b) {
 
 double f(double a, double b) {
   double ret = g(a, b);
-  if (std::isnan(ret)) {
-    // 演算結果でNaNが発生したらブレークし、
+  if (std::isnan(ret) || std::isinf(ret)) {
+    // 演算結果でNaNかinfが発生したらブレークし、
     // デバッガでパラメータ (ローカル変数) などを確認する
     if (std::is_debugger_present()) {
       std::breakpoint();
     }
   }
+  return ret;
 }
 
 int main() {
@@ -72,9 +73,11 @@ int main() {
 * std::is_debugger_present[color ff0000]
 * std::breakpoint[link breakpoint.md]
 * std::isnan[link /reference/cmath/isnan.md]
+* std::isinf[link /reference/cmath/isinf.md]
 
-### 出力
+### 出力例
 ```
+inf
 ```
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
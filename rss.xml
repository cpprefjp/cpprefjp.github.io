<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2020-11-12T14:35:14.930691</updated>
  <id>0e31695d-88b3-4d62-800f-205fed6a4aa3</id>

  
    <entry>
      <title>コンストラクタ -- spanのコンストラクタ : 「空のspan」という文言を削除したissueを記載</title>
      <link href="https://cpprefjp.github.io/reference/span/span/op_constructor.html"/>
      <id>c66682342045f1ae05c31c7b781322713de36c0a:reference/span/span/op_constructor.md</id>
      <updated>2020-11-12T18:05:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/span/span/op_constructor.md b/reference/span/span/op_constructor.md
index c039b356a..ea56fc57c 100644
--- a/reference/span/span/op_constructor.md
+++ b/reference/span/span/op_constructor.md
@@ -279,6 +279,7 @@ int main()
 
 
 ## 参照
+- [LWG Issue 3100. Unnecessary and confusing &amp;#34;empty span&amp;#34; wording](https://wg21.cmeerw.net/lwg/issue3100)
 - [LWG Issue 3101. `span`&amp;#39;s Container constructors need another constraint](https://wg21.cmeerw.net/lwg/issue3101)
 - [LWG Issue 3198. Bad constraint on `std::span::span()`](https://cplusplus.github.io/LWG/issue3198)
 - [P1872R0 `span` should have `size_type`, not `index_type`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1872r0.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>span -- span : iteratorのモデルを記載</title>
      <link href="https://cpprefjp.github.io/reference/span/span.html"/>
      <id>86a664b7a326fd87e3f94d0d802fc1caad424742:reference/span/span.md</id>
      <updated>2020-11-12T18:02:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/span/span.md b/reference/span/span.md
index e1768e7ba..d2253a126 100644
--- a/reference/span/span.md
+++ b/reference/span/span.md
@@ -114,7 +114,7 @@ namespace std {
 | `const_pointer` | `const`ポインタ型 `const element_type*` | C++20 |
 | `reference` | 参照型 `element_type&amp;amp;` | C++20 |
 | `const_reference` | `const`参照型 `const element_type&amp;amp;` | C++20 |
-| `iterator` | 実装定義のイテレータ型 | C++20 |
+| `iterator` | 実装定義のイテレータ型。[`contiguous_iterator`](/reference/iterator/contiguous_iterator.md)、[`random_access_iterator`](/reference/iterator/random_access_iterator.md)、constexprイテレータのモデルであり、コンテナのイテレータに対するすべての要件を満たす | C++20 |
 | `reverse_iterator` | 逆順イテレータ [`reverse_iterator`](/reference/iterator/reverse_iterator.md)`&amp;lt;iterator&amp;gt;` | C++20 |
 
 
@@ -256,6 +256,7 @@ int main()
 - [P1085R2 Should `span` be regular?](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1085r2.md)
 - [P1227R2 Signed `ssize()` functions, unsigned `size()` functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1227r2.html)
 - [P1024R3 Usability enhancements for `std::span`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1024r3.pdf)
+- [LWG Issue 3102 Clarify `span` `iterator` and `const_iterator` behavior](https://wg21.cmeerw.net/lwg/issue3102)
 - [LWG Issue 3144. `span` does not have a `const_pointer` typedef](https://wg21.cmeerw.net/lwg/issue3144)
 - [LWG Issue 3203. `span` element access invalidation](https://cplusplus.github.io/LWG/lwg-active.html#3203)
 - [P1872R0 `span` should have `size_type`, not `index_type`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1872r0.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- spanのコンストラクタ : 組み込み配列からは推論ガイド経由でしか推論できないよう修正</title>
      <link href="https://cpprefjp.github.io/reference/span/span/op_constructor.html"/>
      <id>cabfadea78d4a07b4983bae7c15308e434cb1239:reference/span/span/op_constructor.md</id>
      <updated>2020-11-12T17:55:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/span/span/op_constructor.md b/reference/span/span/op_constructor.md
index 12f400bd9..c039b356a 100644
--- a/reference/span/span/op_constructor.md
+++ b/reference/span/span/op_constructor.md
@@ -17,7 +17,8 @@ constexpr explicit(extent != dynamic_extent)
   span(It first, End last);                                    // (3) C++20
 
 template &amp;lt;size_t N&amp;gt;
-constexpr span(element_type (&amp;amp;arr)[N]) noexcept;               // (4) C++20
+constexpr span(
+  type_identity_t&amp;lt;element_type&amp;gt; (&amp;amp;arr)[N]) noexcept;           // (4) C++20
 
 template &amp;lt;class T, size_t N&amp;gt;
 constexpr span(array&amp;lt;T, N&amp;gt;&amp;amp; arr) noexcept;                     // (5) C++20
@@ -38,6 +39,7 @@ constexpr explicit(extent != dynamic_extent &amp;amp;&amp;amp; OtherExtent == dynamic_extent)
 * size_t[link /reference/cstddef/size_t.md]
 * array[link /reference/array/array.md]
 * dynamic_extent[link /reference/span/dynamic_extent.md]
+* type_identity_t[link /reference/type_traits/type_identity.md]
 
 ## 概要
 `span`オブジェクトを構築する。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- spanのコンストラクタ : 例外送出の条件を修正</title>
      <link href="https://cpprefjp.github.io/reference/span/span/op_constructor.html"/>
      <id>b334da613bdc3741a683b2fe7d9b20f755024509:reference/span/span/op_constructor.md</id>
      <updated>2020-11-12T17:46:24+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/span/span/op_constructor.md b/reference/span/span/op_constructor.md
index 52c415fd9..12f400bd9 100644
--- a/reference/span/span/op_constructor.md
+++ b/reference/span/span/op_constructor.md
@@ -122,7 +122,8 @@ constexpr explicit(extent != dynamic_extent &amp;amp;&amp;amp; OtherExtent == dynamic_extent)
 
 
 ## 例外
-- (1), (2), (3), (4), (5), (6) : 投げない
+- (1), (2), (4), (5), (6) : 投げない
+- (3) : `last - first`がなんらかの例外を送出する可能性がある
 - (7) : コンテナ型によっては、`std::ranges::data(r)`と`std::ranges::size(r)`の呼び出しがなんらかの例外を送出する可能性がある
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- spanのコンストラクタ : value_typeをTに変更</title>
      <link href="https://cpprefjp.github.io/reference/span/span/op_constructor.html"/>
      <id>a9b71441308034fa2114e12812079ec4e0504a66:reference/span/span/op_constructor.md</id>
      <updated>2020-11-12T17:43:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/span/span/op_constructor.md b/reference/span/span/op_constructor.md
index 9fbec545f..52c415fd9 100644
--- a/reference/span/span/op_constructor.md
+++ b/reference/span/span/op_constructor.md
@@ -19,11 +19,11 @@ constexpr explicit(extent != dynamic_extent)
 template &amp;lt;size_t N&amp;gt;
 constexpr span(element_type (&amp;amp;arr)[N]) noexcept;               // (4) C++20
 
-template &amp;lt;size_t N&amp;gt;
-constexpr span(array&amp;lt;value_type, N&amp;gt;&amp;amp; arr) noexcept;            // (5) C++20
+template &amp;lt;class T, size_t N&amp;gt;
+constexpr span(array&amp;lt;T, N&amp;gt;&amp;amp; arr) noexcept;                     // (5) C++20
 
-template &amp;lt;size_t N&amp;gt;
-constexpr span(const array&amp;lt;value_type, N&amp;gt;&amp;amp; arr) noexcept;      // (6) C++20
+template &amp;lt;class T, size_t N&amp;gt;
+constexpr span(const array&amp;lt;T, N&amp;gt;&amp;amp; arr) noexcept;               // (6) C++20
 
 template &amp;lt;class R&amp;gt;
 constexpr explicit(extent != dynamic_extent)
@@ -115,10 +115,10 @@ constexpr explicit(extent != dynamic_extent &amp;amp;&amp;amp; OtherExtent == dynamic_extent)
 
 
 ## 事後条件
-- (1) : [`size()`](size.md) `== 0 &amp;amp;&amp;amp;` [`data()`](data.md) `== nullptr`
-- (4), (5), (6) : [`size()`](size.md) `== N &amp;amp;&amp;amp;` [`data()`](data.md) `==` [`data`](/reference/iterator/data.md)`(arr)`
-- (8) : [`size()`](size.md) `==` [`size`](/reference/iterator/size.md)`(cont) &amp;amp;&amp;amp;` [`data()`](data.md) `==` [`data`](/reference/iterator/data.md)`(cont)`
-- (9) : [`size()`](size.md) `== s.`[`size()`](size.md) `&amp;amp;&amp;amp;` [`data()`](data.md) `== s.`[`data()`](data.md)
+- (1) : [`size()`](size.md) `== 0 &amp;amp;&amp;amp;` [`data()`](data.md) `== nullptr`が`true`であること
+- (4), (5), (6) : [`size()`](size.md) `== N &amp;amp;&amp;amp;` [`data()`](data.md) `==` [`data`](/reference/iterator/data.md)`(arr)`が`true`であること
+- (8) : [`size()`](size.md) `==` [`size`](/reference/iterator/size.md)`(cont) &amp;amp;&amp;amp;` [`data()`](data.md) `==` [`data`](/reference/iterator/data.md)`(cont)`が`true`であること
+- (9) : [`size()`](size.md) `== s.`[`size()`](size.md) `&amp;amp;&amp;amp;` [`data()`](data.md) `== s.`[`data()`](data.md)が`true`であること
 
 
 ## 例外
@@ -281,3 +281,4 @@ int main()
 - [P1872R0 `span` should have `size_type`, not `index_type`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1872r0.pdf)
 - [P1394R4 Range constructor for `std::span`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1394r4.pdf)
 - [P1976R2 Fixed-size `span` construction from dynamic range](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1976r2.html)
+- [P2117R0 C++ Standard Library Issues Resolved Directly In Prague](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2117r0.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
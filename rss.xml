<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="http://cpprefjp.github.io" />
  <updated>2015-06-02T11:53:17.754488</updated>
  <id>51d3533d-51ab-4c24-9b9f-0ed63943d699</id>

  
    <entry>
      <title>iomanip -- quotedの概要だけ作成。中身はまだ。</title>
      <link href="http://cpprefjp.github.io/reference/iomanip.html"/>
      <id>8cd493d478e5cac8af9009e8384486083e4cf587:reference/iomanip.md</id>
      <updated>2015-06-02 11:52:05 +0900</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;iomanip&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;iomanip&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;iomanip&amp;gt;&lt;/code&gt;ヘッダでは、入出力に使用するフォーマットとマニピュレータの機能を定義する。&lt;/p&gt;
&lt;p&gt;マニピュレータは、ここで定義するもののほかに、&lt;a href=&#34;http://cpprefjp.github.io/reference/ios.html&#34;&gt;&lt;code&gt;&amp;lt;ios&amp;gt;&lt;/code&gt;&lt;/a&gt;ヘッダでも定義される。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;resetiosflags&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;フォーマットフラグを非設定状態にする (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;setiosflags&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;フォーマットフラグを設定する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;setbase&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;基数を設定する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;setfill&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;埋める文字を設定する (function template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;setprecision&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;浮動小数点数を出力する精度を設定する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;setw&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;出力する幅を設定する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;get_money&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;金額書式から入力する (function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;put_money&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;金額書式で出力する (function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;get_time&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;日時書式から入力する (function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iomanip/put_time.html&#34;&gt;&lt;code&gt;put_time&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;日時書式で出力する (function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iomanip/quoted.html&#34;&gt;&lt;code&gt;quoted&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;囲み文字指定で入出力する (function template)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>quoted (C++14) -- quotedの概要だけ作成。中身はまだ。</title>
      <link href="http://cpprefjp.github.io/reference/iomanip/quoted.html"/>
      <id>8cd493d478e5cac8af9009e8384486083e4cf587:reference/iomanip/quoted.md</id>
      <updated>2015-06-02 11:52:05 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;iomanip&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;quoted (C++14)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;CharT&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;i&gt;unspecified&lt;/i&gt; quoted(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; CharT&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; s, CharT delim&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;CharT(&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;&#34;&#39;&lt;/span&gt;), CharT escape&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;CharT(&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\\&#39;&lt;/span&gt;));

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;CharT&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Traits&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Allocator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;i&gt;unspecified&lt;/i&gt; quoted(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;basic_string&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; s,
                     CharT delim&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;CharT(&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;&#34;&#39;&lt;/span&gt;), CharT escape&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;CharT(&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\\&#39;&lt;/span&gt;));

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;CharT&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Traits&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Allocator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;i&gt;unspecified&lt;/i&gt; quoted(&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;basic_string&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; s,
                     CharT delim&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;CharT(&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;&#34;&#39;&lt;/span&gt;), CharT escape&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;CharT(&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\\&#39;&lt;/span&gt;));
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;囲み文字指定で入出力する。&lt;/p&gt;
&lt;p&gt;このマニピュレータを使用して&lt;code&gt;cout &amp;lt;&amp;lt; quoted(&#34;hello&#34;);&lt;/code&gt;とすると、「&lt;code&gt;&#34;hello&#34;&lt;/code&gt;」のように、引用符で囲まれた文字列が出力される。逆に、引用符で囲まれた文字列を&lt;code&gt;cin &amp;gt;&amp;gt; quoted(s);&lt;/code&gt;のように入力すると、引用符が外された文字列を取得できる。&lt;/p&gt;
&lt;p&gt;このような囲み文字を指定しての入出力は、たとえばXMLの属性や、CSVのフィールドで使用する。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;出力&lt;/h2&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++14&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++14 mode&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++14 mode&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3654.html&#34; target=&#34;_blank&#34;&gt;N3654 Quoted Strings Library Proposal (Revision 2)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2272&#34; target=&#34;_blank&#34;&gt;LWG Issue 2272. &lt;code&gt;quoted&lt;/code&gt; should use &lt;code&gt;char_traits::eq&lt;/code&gt; for character comparison&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2344&#34; target=&#34;_blank&#34;&gt;LWG Issue 2344. &lt;code&gt;quoted()&lt;/code&gt;&#39;s interaction with padding is unclear&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>equal_range -- set::equal_range : C++14対応として、メンバ関数テンプレート版を追加</title>
      <link href="http://cpprefjp.github.io/reference/set/set/equal_range.html"/>
      <id>aead53f7e3498d2b2a0a64081bf33b735d2ab81e:reference/set/set/equal_range.md</id>
      <updated>2015-06-01 16:07:16 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;set&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class set&#34;&gt;set::&lt;/span&gt;equal_range&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;iterator, iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; equal_range(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; key_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;K&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;iterator, iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; equal_range(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; K&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) C++14&lt;/span&gt;

&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;const_iterator, const_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  equal_range(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; key_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;                  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;K&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;const_iterator, const_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  equal_range(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; K&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;                         &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4) C++14&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;コンテナ内の、&lt;code&gt;x&lt;/code&gt; と等しい全てのキー要素を含む範囲の境界を返す。&lt;code&gt;set&lt;/code&gt; コンテナではキーの重複は無いため、この範囲は最大一つの要素を含む。 &lt;/p&gt;
&lt;p&gt;もし &lt;code&gt;x&lt;/code&gt; がコンテナ内のどのキーともマッチしなかった場合、戻り値の範囲は長さ 0 になり、両方のイテレータは &lt;code&gt;x&lt;/code&gt; より大きく最も近い値を指す。そうでない場合、&lt;code&gt;x&lt;/code&gt; がコンテナ内の全ての要素よりも大きい場合は &lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/end.html&#34;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; を指す。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(1), (3) : &lt;code&gt;key_type&lt;/code&gt;型のキーを受け取り、そのキーと等価なキー要素を全て含むイテレータ範囲を取得する。&lt;/li&gt;
&lt;li&gt;(2), (4) : &lt;code&gt;key_type&lt;/code&gt;と比較可能な&lt;code&gt;K&lt;/code&gt;型のキーを受け取り、そのキーと等価なキー要素を全て含むイテレータ範囲を取得する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;この関数は &lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;&lt;code&gt;pair&lt;/code&gt;&lt;/a&gt; を返す。ここで &lt;code&gt;pair::first&lt;/code&gt; は &lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/lower_bound.html&#34;&gt;&lt;code&gt;lower_bound&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(x)&lt;/code&gt; が返すであろう値と同じ値で範囲の下境界にあたり、&lt;code&gt;pair::second&lt;/code&gt; は &lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/upper_bound.html&#34;&gt;&lt;code&gt;upper_bound&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(x)&lt;/code&gt; が返すであろう値と同じ値で範囲の上境界にあたる。&lt;code&gt;iterator&lt;/code&gt; はメンバ型であり &lt;code&gt;set&lt;/code&gt; において双方向イテレータとして定義される。&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; について対数時間。&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(2), (4) : この関数がオーバーロード解決に参加する条件は、&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/find.html&#34;&gt;&lt;code&gt;find()&lt;/code&gt;&lt;/a&gt;メンバ関数の備考欄を参照。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;set&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;multiset&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; s &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;A&#34;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;B&#34;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;B&#34;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;C&#34;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;D&#34;&lt;/span&gt; };

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; iterator &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; decltype(s)&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator;
  &lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;iterator, iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; ret &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; s.&lt;span style=&#34;color:#ff0000&#34;&gt;equal_range&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;B&#34;&lt;/span&gt;);

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (iterator it &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; ret.first; it &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; ret.second; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;it) {
    &lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl&lt;/a&gt;;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;B
B
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/count.html&#34;&gt;&lt;code&gt;count&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指定したキーにマッチする要素の数を返す&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/lower_bound.html&#34;&gt;&lt;code&gt;lower_bound&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;与えられた値より小さくない最初の要素へのイテレータを返す&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/upper_bound.html&#34;&gt;&lt;code&gt;upper_bound&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;特定の値よりも大きい最初の要素へのイテレータを返す&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/find.html&#34;&gt;&lt;code&gt;find&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指定したキーで要素を探す&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3657.htm&#34; target=&#34;_blank&#34;&gt;N3657 Adding heterogeneous comparison lookup to associative containers (rev 4)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>upper_bound -- set::upper_bound : C++14対応として、メンバ関数テンプレート版を追加</title>
      <link href="http://cpprefjp.github.io/reference/set/set/upper_bound.html"/>
      <id>0fc8f66772c53f1d518cc85629a4b2665164a9f1:reference/set/set/upper_bound.md</id>
      <updated>2015-05-29 14:43:27 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;set&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class set&#34;&gt;set::&lt;/span&gt;upper_bound&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;iterator &lt;span style=&#34;color: #0000FF&#34;&gt;upper_bound&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; key_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);             &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;K&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
iterator upper_bound(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; K&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);                    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) C++14&lt;/span&gt;

const_iterator upper_bound(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; key_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;K&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
const_iterator upper_bound(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; K&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4) C++14&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;x&lt;/code&gt; より大きいコンテナ内の最初の要素を指すイテレータを返す（コンテナの比較オブジェクトを使う）。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/lower_bound.html&#34;&gt;&lt;code&gt;lower_bound()&lt;/code&gt;&lt;/a&gt; と異なり、このメンバ関数は &lt;code&gt;x&lt;/code&gt; と等しいときは要素へのイテレータを返さず、それは大きい場合にのみ要素へのイテレータを返す。&lt;/p&gt;
&lt;p&gt;内部的に、&lt;code&gt;set&lt;/code&gt; コンテナ内の全ての要素は常に比較オブジェクトで定義された基準に従って並ぶため、この関数が返す値に続く全ての要素は &lt;code&gt;x&lt;/code&gt; より大きいことに注意。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(1), (3) : &lt;code&gt;key_type&lt;/code&gt;型のキーを受け取り、そのキーより大きい最初の要素へのイテレータを取得する。&lt;/li&gt;
&lt;li&gt;(2), (4) : &lt;code&gt;key_type&lt;/code&gt;と比較可能な&lt;code&gt;K&lt;/code&gt;型のキーを受け取り、そのキーより大きい最初の要素へのイテレータを取得する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1), (3) : キー&lt;code&gt;x&lt;/code&gt;より大きい最初の要素へのイテレータを返す。そのような要素がない場合は、&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/end.html&#34;&gt;&lt;code&gt;end()&lt;/code&gt;&lt;/a&gt;を返す。&lt;/li&gt;
&lt;li&gt;(2), (4) : &lt;code&gt;key_compare&lt;/code&gt;型の関数オブジェクトを&lt;code&gt;c&lt;/code&gt;、コンテナ内の各要素が持つキーを&lt;code&gt;k&lt;/code&gt;として、キーが小さくないか判定する式&lt;code&gt;c(x, k)&lt;/code&gt;が&lt;code&gt;true&lt;/code&gt;となる要素へのイテレータを返す。そのような要素がない場合は、&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/end.html&#34;&gt;&lt;code&gt;end()&lt;/code&gt;&lt;/a&gt; を返す。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt; について対数時間。&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(2), (4) : この関数がオーバーロード解決に参加する条件は、&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/find.html&#34;&gt;&lt;code&gt;find()&lt;/code&gt;&lt;/a&gt;メンバ関数の備考欄を参照。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;set&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;multiset&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; s &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;A&#34;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;B&#34;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;B&#34;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;C&#34;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;D&#34;&lt;/span&gt; };

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// B以上D以下の範囲を取得&lt;/span&gt;
    decltype(s)&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator it &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; s.&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/lower_bound.html&#34;&gt;lower_bound&lt;/a&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;B&#34;&lt;/span&gt;);
    decltype(s)&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator last &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; s.&lt;span style=&#34;color:#ff0000&#34;&gt;upper_bound&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;D&#34;&lt;/span&gt;);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;while&lt;/span&gt; (it &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; last) {
      &lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl&lt;/a&gt;;
      &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;it;
    }
    &lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl&lt;/a&gt;;
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;multiset&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;/a&gt;, &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/less.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;less&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&amp;gt;&lt;/span&gt; s &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;A&#34;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;B&#34;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;B&#34;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;C&#34;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;D&#34;&lt;/span&gt; };

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/less.html&#34;&gt;std::less&lt;/a&gt;のvoidに対する特殊化を使用することで、&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 文字列リテラルを&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/lower_bound.html&#34;&gt;lower_bound&lt;/a&gt;()関数の引数として渡した際に、&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std::string&lt;/a&gt;型の一時オブジェクトが生成されない。&lt;/span&gt;
    decltype(s)&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator it &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; s.&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/lower_bound.html&#34;&gt;lower_bound&lt;/a&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;B&#34;&lt;/span&gt;);
    decltype(s)&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator last &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; s.&lt;span style=&#34;color:#ff0000&#34;&gt;upper_bound&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;D&#34;&lt;/span&gt;);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;while&lt;/span&gt; (it &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; last) {
      &lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl&lt;/a&gt;;
      &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;it;
    }
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;B
B
C
D

B
B
C
D
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/lower_bound.html&#34;&gt;&lt;code&gt;lower_bound&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;与えられた値よりも小さくない最初の要素へのイテレータを返す&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/equal_range.html&#34;&gt;&lt;code&gt;equal_range&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指定したキーにマッチする要素範囲を返す&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/find.html&#34;&gt;&lt;code&gt;find&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指定したキーで要素を探す&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/count.html&#34;&gt;&lt;code&gt;count&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指定したキーにマッチする要素の数を返す&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3657.htm&#34; target=&#34;_blank&#34;&gt;N3657 Adding heterogeneous comparison lookup to associative containers (rev 4)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>lower_bound -- set::lower_bound : C++14対応として、メンバ関数テンプレート版を追加</title>
      <link href="http://cpprefjp.github.io/reference/set/set/lower_bound.html"/>
      <id>6117f17d3e69c9dfb522b3b2f8b6b16e919d3e76:reference/set/set/lower_bound.md</id>
      <updated>2015-05-28 15:39:42 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;set&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class set&#34;&gt;set::&lt;/span&gt;lower_bound&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;iterator &lt;span style=&#34;color: #0000FF&#34;&gt;lower_bound&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; key_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);             &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;K&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
iterator lower_bound(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; K&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);                    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) C++14&lt;/span&gt;

const_iterator lower_bound(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; key_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;K&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
const_iterator lower_bound(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; K&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4) C++14&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;x&lt;/code&gt; を右辺とする &lt;code&gt;&amp;lt;&lt;/code&gt; 演算が成り立たない最初の要素を指すイテレータを返す（コンテナの比較オブジェクトが使われる）。すなわちこれは &lt;code&gt;&amp;gt;=&lt;/code&gt; 演算にあたる。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/upper_bound.html&#34;&gt;&lt;code&gt;upper_bound()&lt;/code&gt;&lt;/a&gt; とは異なり、このメンバ関数は &lt;code&gt;x&lt;/code&gt; より大きいだけでなく、&lt;code&gt;x&lt;/code&gt; と等しい場合であってもその要素へのイテレータを返す。&lt;/p&gt;
&lt;p&gt;内部的には &lt;code&gt;set&lt;/code&gt; コンテナ内の全ての要素は常に比較オブジェクトが定義する基準に沿って並んでいるため、この関数が返すいずれかの後に続く全ての要素が &lt;code&gt;x&lt;/code&gt; より大きいか等しいことに注意。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(1), (3) : &lt;code&gt;key_type&lt;/code&gt;型のキーを受け取り、そのキーより小さくない最初の要素へのイテレータを取得する。&lt;/li&gt;
&lt;li&gt;(2), (4) : &lt;code&gt;key_type&lt;/code&gt;と比較可能な&lt;code&gt;K&lt;/code&gt;型のキーを受け取り、そのキーより小さくない最初の要素へのイテレータを取得する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1), (3) : コンテナ内で &lt;code&gt;x&lt;/code&gt; を右辺とする &lt;code&gt;&amp;lt;&lt;/code&gt; 演算が成り立たない最初の要素へのイテレータを返す。そのような要素がない場合は、&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/end.html&#34;&gt;&lt;code&gt;end()&lt;/code&gt;&lt;/a&gt;を返す。&lt;/li&gt;
&lt;li&gt;(2), (4) : &lt;code&gt;key_compare&lt;/code&gt;型の関数オブジェクトを&lt;code&gt;c&lt;/code&gt;、コンテナ内の各要素が持つキーを&lt;code&gt;k&lt;/code&gt;として、キーが小さくないか判定する式&lt;code&gt;!c(k, x)&lt;/code&gt;が&lt;code&gt;true&lt;/code&gt;となる要素へのイテレータを返す。そのような要素がない場合は、&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/end.html&#34;&gt;&lt;code&gt;end()&lt;/code&gt;&lt;/a&gt; を返す。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt; について対数時間。&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(2), (4) : この関数がオーバーロード解決に参加する条件は、&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/find.html&#34;&gt;&lt;code&gt;find()&lt;/code&gt;&lt;/a&gt;メンバ関数の備考欄を参照。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;set&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;multiset&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; s &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;A&#34;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;B&#34;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;B&#34;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;C&#34;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;D&#34;&lt;/span&gt; };

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// B以上D以下の範囲を取得&lt;/span&gt;
    decltype(s)&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator it &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; s.&lt;span style=&#34;color:#ff0000&#34;&gt;lower_bound&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;B&#34;&lt;/span&gt;);
    decltype(s)&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator last &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; s.&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/upper_bound.html&#34;&gt;upper_bound&lt;/a&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;D&#34;&lt;/span&gt;);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;while&lt;/span&gt; (it &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; last) {
      &lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl&lt;/a&gt;;
      &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;it;
    }
    &lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl&lt;/a&gt;;
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;multiset&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;/a&gt;, &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/less.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;less&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&amp;gt;&lt;/span&gt; s &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;A&#34;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;B&#34;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;B&#34;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;C&#34;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;D&#34;&lt;/span&gt; };

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/less.html&#34;&gt;std::less&lt;/a&gt;のvoidに対する特殊化を使用することで、&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 文字列リテラルを&lt;span style=&#34;color:#ff0000&#34;&gt;lower_bound&lt;/span&gt;()関数の引数として渡した際に、&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std::string&lt;/a&gt;型の一時オブジェクトが生成されない。&lt;/span&gt;
    decltype(s)&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator it &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; s.&lt;span style=&#34;color:#ff0000&#34;&gt;lower_bound&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;B&#34;&lt;/span&gt;);
    decltype(s)&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator last &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; s.&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/upper_bound.html&#34;&gt;upper_bound&lt;/a&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;D&#34;&lt;/span&gt;);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;while&lt;/span&gt; (it &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; last) {
      &lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl&lt;/a&gt;;
      &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;it;
    }
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;B
B
C
D

B
B
C
D
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/upper_bound.html&#34;&gt;&lt;code&gt;upper_bound&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;特定の値よりも大きい最初の要素へのイテレータを返す&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/equal_range.html&#34;&gt;&lt;code&gt;equal_range&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指定したキーにマッチする要素範囲を返す&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/find.html&#34;&gt;&lt;code&gt;find&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指定したキーで要素を探す&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/count.html&#34;&gt;&lt;code&gt;count&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指定したキーにマッチする要素の数を返す&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3657.htm&#34; target=&#34;_blank&#34;&gt;N3657 Adding heterogeneous comparison lookup to associative containers (rev 4)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>count -- set::count : C++14対応として、メンバ関数テンプレート版を追加</title>
      <link href="http://cpprefjp.github.io/reference/set/set/count.html"/>
      <id>be317a6ab52e8ed8b4dc9642fb22d3803d496ca5:reference/set/set/count.md</id>
      <updated>2015-05-27 22:30:41 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;set&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class set&#34;&gt;set::&lt;/span&gt;count&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;size_type count(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; key_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;K&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
size_type count(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; K&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) C++14&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;キー &lt;code&gt;x&lt;/code&gt; を検索し、コンテナ内に見つかった要素の数を返す。&lt;code&gt;set&lt;/code&gt; コンテナはキーの重複を許さないため、この関数は実際には要素が見つかったときに 1 を、そうでないときに 0 を返す。&lt;code&gt;multiset&lt;/code&gt;コンテナの場合はキーの重複を許すため、&lt;code&gt;x&lt;/code&gt;と等値なキーの要素数を返す。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(1) : クラスのテンプレートパラメータ&lt;code&gt;key_type&lt;/code&gt;型のキーを受け取って、&lt;code&gt;x&lt;/code&gt;と等価なキーを持つ要素の数を取得する。&lt;/li&gt;
&lt;li&gt;(2) : &lt;code&gt;key_type&lt;/code&gt;と比較可能な&lt;code&gt;K&lt;/code&gt;型のキーを受け取って、&lt;code&gt;x&lt;/code&gt;と等価なキーを持つ要素の数を取得する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : &lt;code&gt;x&lt;/code&gt;と等価なキーの要素が見つかった場合は1、そうでない場合は0を返す。&lt;/li&gt;
&lt;li&gt;(2) : &lt;code&gt;key_compare&lt;/code&gt;型の関数オブジェクトを&lt;code&gt;c&lt;/code&gt;、コンテナ内の各要素が持つキーを&lt;code&gt;k&lt;/code&gt;として、キーが等価か判定する式&lt;code&gt;!c(k, x) &amp;amp;&amp;amp; !c(x, k)&lt;/code&gt;が&lt;code&gt;true&lt;/code&gt;となる要素が見つかった場合は1、そうでない場合は0を返す。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt; について対数時間&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(2) : この関数がオーバーロード解決に参加する条件は、&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/find.html&#34;&gt;&lt;code&gt;find()&lt;/code&gt;&lt;/a&gt;メンバ関数の備考欄を参照。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;set&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;multiset&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; s &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Alice&#34;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Bob&#34;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Bob&#34;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Carol&#34;&lt;/span&gt; };

    &lt;a href=&#34;http://cpprefjp.github.io/reference/cstddef/size_t.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;size_t&lt;/a&gt; n &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; s.&lt;span style=&#34;color:#ff0000&#34;&gt;count&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Bob&#34;&lt;/span&gt;);
    &lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; n &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl&lt;/a&gt;;
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;multiset&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;/a&gt;, &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/less.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;less&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&amp;gt;&lt;/span&gt; s &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Alice&#34;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Bob&#34;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Bob&#34;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Carol&#34;&lt;/span&gt; };

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/less.html&#34;&gt;std::less&lt;/a&gt;のvoidに対する特殊化を使用することで、&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 文字列リテラルを&lt;span style=&#34;color:#ff0000&#34;&gt;count&lt;/span&gt;()関数の引数として渡した際に、&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std::string&lt;/a&gt;型の一時オブジェクトが生成されない。&lt;/span&gt;
    &lt;a href=&#34;http://cpprefjp.github.io/reference/cstddef/size_t.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;size_t&lt;/a&gt; n &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; s.&lt;span style=&#34;color:#ff0000&#34;&gt;count&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Bob&#34;&lt;/span&gt;);
    &lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; n &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl&lt;/a&gt;;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;2
2
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/find.html&#34;&gt;&lt;code&gt;find&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指定したキーで要素を探す&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素数を取得する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/lower_bound.html&#34;&gt;&lt;code&gt;lower_bound&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;与えられた値より小さくない最初の要素へのイテレータを返す&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/upper_bound.html&#34;&gt;&lt;code&gt;upper_bound&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;特定の値よりも大きい最初の要素へのイテレータを返す&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3657.htm&#34; target=&#34;_blank&#34;&gt;N3657 Adding heterogeneous comparison lookup to associative containers (rev 4)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
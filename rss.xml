<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2024-05-15T04:33:01.604764</updated>
  <id>fcf56f88-4eaf-4bf7-ab45-b54637c0a578</id>

  
    <entry>
      <title>basic_stacktrace -- basic_stacktrace : pmrを追加</title>
      <link href="https://cpprefjp.github.io/reference/stacktrace/basic_stacktrace.html"/>
      <id>210af738545a0f95e80561a34793b4a931208204:reference/stacktrace/basic_stacktrace.md</id>
      <updated>2024-05-15T13:29:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stacktrace/basic_stacktrace.md b/reference/stacktrace/basic_stacktrace.md
index 18aa7ed55..6833f0feb 100644
--- a/reference/stacktrace/basic_stacktrace.md
+++ b/reference/stacktrace/basic_stacktrace.md
@@ -10,9 +10,14 @@ namespace std {
   class basic_stacktrace;
 
   using stacktrace = basic_stacktrace&amp;lt;allocator&amp;lt;stacktrace_entry&amp;gt;&amp;gt;;
+
+  namespace pmr {
+    using stacktrace = basic_stacktrace&amp;lt;polymorphic_allocator&amp;lt;stacktrace_entry&amp;gt;&amp;gt;;
+  }
 }
 ```
 * allocator[link /reference/memory/allocator.md]
+* polymorphic_allocator[link /reference/memory_resource/polymorphic_allocator.md]
 * stacktrace_entry[link stacktrace_entry.md]
 
 ## 概要
@@ -244,3 +249,4 @@ Expression &amp;#39;i &amp;gt;= 0&amp;#39; is false in f(int) at /app/example.cpp:15
 
 ## 参照
 - [P2693R1 Formatting `thread::id` and `stacktrace`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2693r1.pdf)
+- [P2301R1 Add a `pmr` alias for `std::stacktrace`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2301r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>id -- thread::id : formatterを追加</title>
      <link href="https://cpprefjp.github.io/reference/thread/thread/id.html"/>
      <id>39c8d434115cc793b7cdee8a445d614a39f9699e:reference/thread/thread/id.md</id>
      <updated>2024-05-15T13:22:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/thread/thread/id.md b/reference/thread/thread/id.md
index 2c2e9cc7a..dd6c9da7d 100644
--- a/reference/thread/thread/id.md
+++ b/reference/thread/thread/id.md
@@ -62,13 +62,20 @@ namespace std {
 | `operator&amp;lt;&amp;lt;` | `thread::id`のストリーム出力。 フォーマットは未規定だが、他の識別子と異なることがわかる表現となる。 | C++11 |
 
 
-## hashサポート
+## ハッシュサポート
 
 | 名前 | 説明 | 対応バージョン |
 |--------|-----------------------------------------|-------|
 | `hash` | `thread::id`での特殊化 (class template) | C++11 |
 
 
+## 文字列フォーマットサポート
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`formatter`](id/formatter.md) | [`std::formatter`](/reference/format/formatter.md)クラスの特殊化 | C++23 |
+
+
 ## 例
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>formatter -- thread::id : formatterを追加</title>
      <link href="https://cpprefjp.github.io/reference/thread/thread/id/formatter.html"/>
      <id>39c8d434115cc793b7cdee8a445d614a39f9699e:reference/thread/thread/id/formatter.md</id>
      <updated>2024-05-15T13:22:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/thread/thread/id/formatter.md b/reference/thread/thread/id/formatter.md
new file mode 100644
index 000000000..9081dcaa6
--- /dev/null
+++ b/reference/thread/thread/id/formatter.md
@@ -0,0 +1,65 @@
+# formatter
+* thread[meta header]
+* std[meta namespace]
+* thread::id[meta class]
+* class[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;class charT&amp;gt;
+  class formatter&amp;lt;thread::id, charT&amp;gt;;
+}
+```
+
+## 概要
+`thread::id`クラスに対する[`std::formatter`](/reference/format/formatter.md)クラステンプレートの特殊化。
+
+フォーマットフラグとしては、以下を使用できる：
+
+```
+[[fill] [align] [width]]
+```
+
+
+## 例
+```cpp example
+#include &amp;lt;print&amp;gt;
+#include &amp;lt;thread&amp;gt;
+
+int main()
+{
+  std::println(&amp;#34;{}&amp;#34;, std::this_thread::get_id());
+  std::println(&amp;#34;{: &amp;gt;30}&amp;#34;, std::this_thread::get_id());
+}
+```
+* std::this_thread[link /reference/thread/this_thread.md]
+* get_id()[link /reference/thread/this_thread/get_id.md]
+
+### 出力
+```
+140474254677824
+               140474254677824
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 14
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+### 備考
+- GCCは14.1段階では、[`&amp;lt;sstream&amp;gt;`](/reference/sstream.md)を追加でインクルードしなければコンパイルエラーとなる
+    - [Bug 115099 - compilation error: format `thread::id`](https://gcc.gnu.org/bugzilla/show_bug.cgi?id=115099)
+
+
+## 関連項目
+- [`std::format()`](/reference/format/format.md) (フォーマットの詳細)
+
+
+## 参照
+- [P2693R1 Formatting `thread::id` and `stacktrace`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2693r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_stacktrace -- stacktrace : formatterの特殊化を追加</title>
      <link href="https://cpprefjp.github.io/reference/stacktrace/basic_stacktrace.html"/>
      <id>e6a1afa4e17e3e9cda6ebd5c559a07839bf77644:reference/stacktrace/basic_stacktrace.md</id>
      <updated>2024-05-15T13:01:24+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stacktrace/basic_stacktrace.md b/reference/stacktrace/basic_stacktrace.md
index 9b92d325f..18aa7ed55 100644
--- a/reference/stacktrace/basic_stacktrace.md
+++ b/reference/stacktrace/basic_stacktrace.md
@@ -155,6 +155,13 @@ namespace std {
 | `template &amp;lt;class Allocator&amp;gt;`&amp;lt;br/&amp;gt; `struct hash&amp;lt;basic_stacktrace&amp;lt;Allocator&amp;gt;&amp;gt;;` | `hash`クラスの`basic_stacktrace`に対する特殊化 | C++23 |
 
 
+### 文字列フォーマットサポート
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| `template &amp;lt;class Allocator&amp;gt;`&amp;lt;br/&amp;gt; `struct formatter&amp;lt;basic_stacktrace&amp;lt;Allocator&amp;gt;&amp;gt;;` | [`formatter`](/reference/format/formatter.md)の特殊化 | C++23 |
+
+
 ## 例
 ### 基本的な使い方
 ```cpp example
@@ -234,3 +241,6 @@ Expression &amp;#39;i &amp;gt;= 0&amp;#39; is false in f(int) at /app/example.cpp:15
     - 13まで : `-lstdc++_libbacktrace`
     - 14以降 : `-lstdc++exp`
 
+
+## 参照
+- [P2693R1 Formatting `thread::id` and `stacktrace`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2693r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stacktrace_entry -- stacktrace : formatterの特殊化を追加</title>
      <link href="https://cpprefjp.github.io/reference/stacktrace/stacktrace_entry.html"/>
      <id>e6a1afa4e17e3e9cda6ebd5c559a07839bf77644:reference/stacktrace/stacktrace_entry.md</id>
      <updated>2024-05-15T13:01:24+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stacktrace/stacktrace_entry.md b/reference/stacktrace/stacktrace_entry.md
index fd95a8859..a71f52ce2 100644
--- a/reference/stacktrace/stacktrace_entry.md
+++ b/reference/stacktrace/stacktrace_entry.md
@@ -86,6 +86,13 @@ namespace std {
 | `template &amp;lt;&amp;gt;`&amp;lt;br/&amp;gt; `struct hash&amp;lt;stacktrace_entry&amp;gt;;` | `hash`クラスの`stacktrace_entry`に対する特殊化 | C++23 |
 
 
+## 文字列フォーマットサポート
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`formatter`](stacktrace_entry/formatter.md) | [`std::formatter`](/reference/format/formatter.md)クラスの特殊化 | C++23 |
+
+
 ## 例
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>formatter -- stacktrace : formatterの特殊化を追加</title>
      <link href="https://cpprefjp.github.io/reference/stacktrace/stacktrace_entry/formatter.html"/>
      <id>e6a1afa4e17e3e9cda6ebd5c559a07839bf77644:reference/stacktrace/stacktrace_entry/formatter.md</id>
      <updated>2024-05-15T13:01:24+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stacktrace/stacktrace_entry/formatter.md b/reference/stacktrace/stacktrace_entry/formatter.md
new file mode 100644
index 000000000..9ba096a8f
--- /dev/null
+++ b/reference/stacktrace/stacktrace_entry/formatter.md
@@ -0,0 +1,68 @@
+# formatter
+* stacktrace[meta header]
+* std[meta namespace]
+* class[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+namespace std {
+  struct formatter&amp;lt;stacktrace_entry&amp;gt;;
+}
+```
+
+## 概要
+`stacktrace_entry`クラスに対する[`std::formatter`](/reference/format/formatter.md)クラステンプレートの特殊化。
+
+フォーマットフラグとしては、以下を使用できる：
+
+```
+[[fill] [align] [width]]
+```
+
+
+## 例
+```cpp example
+#include &amp;lt;print&amp;gt;
+#include &amp;lt;stacktrace&amp;gt;
+
+void g() {
+  std::stacktrace st = std::stacktrace::current(0, 1);
+  std::stacktrace_entry entry = st[0];
+
+  std::println(&amp;#34;{}&amp;#34;, entry);
+  std::println(&amp;#34;{: &amp;gt;30}&amp;#34;, entry);
+}
+
+void f() {
+  g();
+}
+
+int main() {
+  f();
+}
+```
+* std::stacktrace[link /reference/stacktrace/basic_stacktrace.md]
+* current[link /reference/stacktrace/basic_stacktrace/current.md]
+
+### 出力
+```
+ g() at /app/example.cpp:5
+     g() at /app/example.cpp:5
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 14
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`std::format()`](/reference/format/format.md) (フォーマットの詳細)
+
+
+## 参照
+- [P2693R1 Formatting `thread::id` and `stacktrace`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2693r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>format -- format : C++26対応としてポインタ値を大文字で出力するPオプションを追加 (close #1187)</title>
      <link href="https://cpprefjp.github.io/reference/format/format.html"/>
      <id>0b3b945a6d99aa56c955e2abbc367af09a3fa85c:reference/format/format.md</id>
      <updated>2024-05-15T12:25:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/format.md b/reference/format/format.md
index 8745522d7..2f280f494 100644
--- a/reference/format/format.md
+++ b/reference/format/format.md
@@ -155,9 +155,10 @@ string s3 = format(&amp;#34;{} {1}&amp;#34;,  &amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;); // コンパイルエラー
 
 #### ポインタの場合
 
-| type       | 意味               | 効果                                                                                                            |
-|:-----------|:-------------------|:----------------------------------------------------------------------------------------------------------------|
-| p          | アドレスを出力する | `0x` につづいて、`to_chars(first, last, reinterpret_cast&amp;lt;uintptr_t&amp;gt;(value), 16)` の結果を出力する               |
+| type | 意味               | 効果                                                                                              | 対応バージョン |
+|:-----|:-------------------|:--------------------------------------------------------------------------------------------------|----------------|
+| p    | アドレスを出力する | `0x` につづいて、`to_chars(first, last, reinterpret_cast&amp;lt;uintptr_t&amp;gt;(value), 16)` の結果を出力する | C++20 |
+| P    | アドレスを出力する | pと基本的に同じだが、9桁を超える場合に大文字にし、先頭に`0X`をつける | C++26 |
 
 デフォルトは `p`。
 
@@ -682,3 +683,5 @@ wstring format(const locale&amp;amp; loc, wformat_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... ar
 - [P2286R8 Formatting Ranges](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2286r8.html)
     - C++23から、Range・コンテナ、`pair`、`tuple`のフォーマット出力、および文字・文字列のデバッグ指定 (`&amp;#34;?&amp;#34;`) が追加された
 - [P2418R2 Add support for `std::generator`-like types to `std::format`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2418r2.html)
+- [P2510R3 Formatting pointers](https://open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2510r3.pdf)
+    - C++26から、ポインタ値を大文字で出力する`P`オプションが追加された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_stacktrace -- basic_stacktrace : libstdc++は実装としてシグナル安全であることを記載</title>
      <link href="https://cpprefjp.github.io/reference/stacktrace/basic_stacktrace.html"/>
      <id>8f62ba9a9a6848dfc540d39796ad29fc2ffc3d26:reference/stacktrace/basic_stacktrace.md</id>
      <updated>2024-05-14T14:43:39+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stacktrace/basic_stacktrace.md b/reference/stacktrace/basic_stacktrace.md
index 49bad48e2..9b92d325f 100644
--- a/reference/stacktrace/basic_stacktrace.md
+++ b/reference/stacktrace/basic_stacktrace.md
@@ -27,9 +27,11 @@ namespace std {
 
 
 ### 備考
-- このクラスは、シグナル安全ではない
+- このクラスは、仕様としてシグナル安全ではない
     - 元となった[Boost.Stacktraceライブラリ](https://boost.org/libs/stacktrace)の実装はシグナルハンドラ中でもスタックトレースを出力できる機能を提供するが、標準の本機能はその機能を提供しない
     - そのような機能は一部のプラットフォームでは実装できないためである
+    - ただし、実装がシグナル安全である場合がある
+        - GCC (libstdc++) が内部で使用している[libbacktrace](https://github.com/ianlancetaylor/libbacktrace)ライブラリは、シグナル安全である。ただしlibstdc++の実装仕様としてシグナル安全であるという明記はない
 
 
 ## メンバ関数
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
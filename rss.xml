<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2022-03-21T00:04:25.975383</updated>
  <id>aed91ffb-4a93-407b-8465-fc301d965f2c</id>

  
    <entry>
      <title>algorithm -- ranges::transformの説明を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm.html"/>
      <id>ce06b3d30fc2204392f45b49a911f4358b070d43:reference/algorithm.md</id>
      <updated>2022-03-21T08:59:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm.md b/reference/algorithm.md
index 984adf68c..396d3d269 100644
--- a/reference/algorithm.md
+++ b/reference/algorithm.md
@@ -99,6 +99,8 @@ ranges::sort(pv, {}, &amp;amp;Parson::name);
 ```
 * std::invoke[link /reference/functional/invoke.md]
 
+なお、各関数の説明においては、射影の影響は無視していることがある。
+
 ## シーケンスを変更しない操作
 
 | 名前 | 説明 | 対応バージョン |
@@ -188,7 +190,7 @@ ranges::sort(pv, {}, &amp;amp;Parson::name);
 | [`ranges::move`](algorithm/ranges_move.md)                         | 指定された範囲の要素をムーブする                                                                                | C++20 |
 | [`ranges::move_backward`](algorithm/ranges_move_backward.md)       | 指定された範囲の要素を後ろからムーブする                                                                        | C++20 |
 | [`ranges::swap_ranges`](algorithm/ranges_swap_ranges.md)           | 指定された2つの範囲同士を swap する                                                                             | C++20 |
-| [`ranges::transform`](algorithm/ranges_transform.md.nolink)               | 全ての要素に関数を適用する                                                                                      | C++20 |
+| [`ranges::transform`](algorithm/ranges_transform.md)               | 全ての要素に関数を適用する                                                                                      | C++20 |
 | [`ranges::replace`](algorithm/ranges_replace.md.nolink)                   | 指定された値と一致する要素を指定された値に置き換える                                                            | C++20 |
 | [`ranges::replace_if`](algorithm/ranges_replace_if.md.nolink)             | 条件を満たす要素を指定された値に置き換える                                                                      | C++20 |
 | [`ranges::replace_copy`](algorithm/ranges_replace_copy.md.nolink)         | 指定された値を一致する要素を指定された値に置き換え、その結果を出力の範囲へコピーする                            | C++20 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>in_in_out_result -- ranges::transformの説明を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_in_in_out_result.html"/>
      <id>ce06b3d30fc2204392f45b49a911f4358b070d43:reference/algorithm/ranges_in_in_out_result.md</id>
      <updated>2022-03-21T08:59:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_in_in_out_result.md b/reference/algorithm/ranges_in_in_out_result.md
index 1123f4952..dde530c28 100644
--- a/reference/algorithm/ranges_in_in_out_result.md
+++ b/reference/algorithm/ranges_in_in_out_result.md
@@ -57,7 +57,7 @@ namespace std::ranges {
 
 ## 概要
 * (1): 3つのイテレータを格納する型
-* (2): [`ranges::transform`](ranges_transform.md.nolink)で使用するエイリアス
+* (2): [`ranges::transform`](ranges_transform.md)で使用するエイリアス
 * (2): [`ranges::merge`](ranges_merge.md)で使用するエイリアス
 * (2): [`ranges::set_union`](ranges_set_union.md)で使用するエイリアス
 * (2): [`ranges::set_intersection`](ranges_set_intersection.md)で使用するエイリアス
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>in_out_result -- ranges::transformの説明を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_in_out_result.html"/>
      <id>ce06b3d30fc2204392f45b49a911f4358b070d43:reference/algorithm/ranges_in_out_result.md</id>
      <updated>2022-03-21T08:59:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_in_out_result.md b/reference/algorithm/ranges_in_out_result.md
index 4eb39977e..1a29e5244 100644
--- a/reference/algorithm/ranges_in_out_result.md
+++ b/reference/algorithm/ranges_in_out_result.md
@@ -102,7 +102,7 @@ namespace std::ranges {
 * (5): [`ranges::copy_backward`](ranges_copy_backward.md)で使用するエイリアス
 * (6): [`ranges::move`](ranges_move.md)で使用するエイリアス
 * (7): [`ranges::move_backward`](ranges_move_backward.md)で使用するエイリアス
-* (8): [`ranges::unary_transform`](ranges_unary_transform.md.nolink)で使用するエイリアス
+* (8): [`ranges::transform`](ranges_transform.md)で使用するエイリアス
 * (9): [`ranges::replace_copy`](ranges_replace_copy.md.nolink)で使用するエイリアス
 * (10): [`ranges::replace_copy_if`](ranges_replace_copy_if.md.nolink)で使用するエイリアス
 * (11): [`ranges::remove_copy`](ranges_remove_copy.md.nolink)で使用するエイリアス
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>transform -- ranges::transformの説明を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_transform.html"/>
      <id>ce06b3d30fc2204392f45b49a911f4358b070d43:reference/algorithm/ranges_transform.md</id>
      <updated>2022-03-21T08:59:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_transform.md b/reference/algorithm/ranges_transform.md
new file mode 100644
index 000000000..875236c8c
--- /dev/null
+++ b/reference/algorithm/ranges_transform.md
@@ -0,0 +1,158 @@
+# transform
+* algorithm[meta header]
+* std::ranges[meta namespace]
+* function template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::ranges {
+  // (1)
+  template&amp;lt;input_iterator I, sentinel_for&amp;lt;I&amp;gt; S, weakly_incrementable O, copy_constructible F, class Proj = identity&amp;gt;
+    requires indirectly_writable&amp;lt;O, indirect_result_t&amp;lt;F&amp;amp;, projected&amp;lt;I, Proj&amp;gt;&amp;gt;&amp;gt;
+  constexpr unary_transform_result&amp;lt;I, O&amp;gt;
+    transform(I first1, S last1, O result, F op, Proj proj = {});
+
+  // (2)
+  template&amp;lt;input_range R, weakly_incrementable O, copy_constructible F, class Proj = identity&amp;gt;
+    requires indirectly_writable&amp;lt;O, indirect_result_t&amp;lt;F&amp;amp;, projected&amp;lt;iterator_t&amp;lt;R&amp;gt;, Proj&amp;gt;&amp;gt;&amp;gt;
+  constexpr unary_transform_result&amp;lt;borrowed_iterator_t&amp;lt;R&amp;gt;, O&amp;gt;
+    transform(R&amp;amp;&amp;amp; r, O result, F op, Proj proj = {});
+
+  // (3)
+  template&amp;lt;input_iterator I1, sentinel_for&amp;lt;I1&amp;gt; S1, input_iterator I2, sentinel_for&amp;lt;I2&amp;gt; S2, weakly_incrementable O, copy_constructible F, class Proj1 = identity, class Proj2 = identity&amp;gt;
+    requires indirectly_writable&amp;lt;O, indirect_result_t&amp;lt;F&amp;amp;, projected&amp;lt;I1, Proj1&amp;gt;, projected&amp;lt;I2, Proj2&amp;gt;&amp;gt;&amp;gt;
+  constexpr binary_transform_result&amp;lt;I1, I2, O&amp;gt;
+    transform(I1 first1, S1 last1, I2 first2, S2 last2, O result, F binary_op, Proj1 proj1 = {}, Proj2 proj2 = {});
+
+  // (4)
+  template&amp;lt;input_range R1, input_range R2, weakly_incrementable O, copy_constructible F, class Proj1 = identity, class Proj2 = identity&amp;gt;
+    requires indirectly_writable&amp;lt;O, indirect_result_t&amp;lt;F&amp;amp;, projected&amp;lt;iterator_t&amp;lt;R1&amp;gt;, Proj1&amp;gt;, projected&amp;lt;iterator_t&amp;lt;R2&amp;gt;, Proj2&amp;gt;&amp;gt;&amp;gt;
+  constexpr binary_transform_result&amp;lt;borrowed_iterator_t&amp;lt;R1&amp;gt;, borrowed_iterator_t&amp;lt;R2&amp;gt;, O&amp;gt;
+    transform(R1&amp;amp;&amp;amp; r1, R2&amp;amp;&amp;amp; r2, O result, F binary_op, Proj1 proj1 = {}, Proj2 proj2 = {});
+}
+```
+* input_iterator[link /reference/iterator/input_iterator.md]
+* sentinel_for[link /reference/iterator/sentinel_for.md]
+* weakly_incrementable[link /reference/iterator/weakly_incrementable.md]
+* copy_constructible[link /reference/concepts/copy_constructible.md]
+* identity[link /reference/functional/identity.md]
+* indirectly_writable[link /reference/iterator/indirectly_writable.md]
+* indirect_result_t[link /reference/iterator/indirect_result_t.md]
+* projected[link /reference/iterator/projected.md]
+* input_range[link /reference/ranges/input_range.md]
+* iterator_t[link /reference/ranges/iterator_t.md]
+* borrowed_iterator_t[link /reference/ranges/borrowed_iterator_t.md]
+* unary_transform_result[link ranges_in_out_result.md]
+* binary_transform_result[link ranges_in_in_out_result.md]
+
+
+## 概要
+全ての要素に関数を適用する。
+
+* (1), (2): 1つの範囲の要素に関数を適用し、結果を出力イテレータに出力する
+* (3), (4): 2つの範囲の要素を1つずつ取り出して関数を適用し、結果を出力イテレータに出力する
+
+* (1), (3): イテレーターペアで範囲を指定する
+* (2), (4): 範囲を直接指定する
+
+## 要件
+- (1), (2) : `op` は、`[first,last]`, `[result,result + (last - first)]` 内のイテレータや subrange を無効にしたり、要素を書き換えてはならない。
+- (3), (4) : `binary_op` は、`[first1,last1]`, `[first2,first2 + (last1 - first1)]`, `[result,result + (last1 - first1)]` 内のイテレータや subrange を無効にしたり、要素を書き換えてはならない。
+
+※ 閉区間で表しているのは意図的なもの
+
+
+## 効果
+- (1), (2) : `[result,result + (last - first))` 内のイテレータ `i` の要素に、それぞれ `op(*(first + (i - result)))` を代入する
+- (3), (4) : `[result,result + (last1 - first1))` 内のイテレータ `i` の要素に、それぞれ `binary_op(*(first1 + (i - result)), *(first2 + (i - result)))` を代入する。
+
+
+## 戻り値
+- (1), (2) : `{ .in = last, .out = result + (last - first) }`
+- (3), (4) : `{ .in1 = last1, .in2 = last2, .out = result + (last1 - first1) }`
+
+
+## 計算量
+- (1), (2) : 正確に `last - first` 回の `op` の適用が行われる。
+- (3), (4) : 正確に `last1 - first1` 回の `binary_op` の適用が行われる。
+
+
+## 備考
+- (1), (2) : `result` は `first` と同じであっても構わない。
+- (3), (4) : `result` は `first1` や `first2` と同じであっても構わない。
+
+
+## (1)の例
+```cpp example
+#include &amp;lt;algorithm&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;string&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = { 3,1,4 };
+  std::vector&amp;lt;std::string&amp;gt; result;
+
+  // 2倍してから文字列に変換する
+  std::ranges::transform(v, std::back_inserter(result), [](int x) { return std::to_string(x * 2); });
+
+  for (const std::string&amp;amp; s : result) {
+    std::cout &amp;lt;&amp;lt; s &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* std::ranges::transform[color ff0000]
+* std::to_string[link /reference/string/to_string.md]
+
+### 出力
+```
+6
+2
+8
+```
+
+
+## (2)の例
+```cpp example
+#include &amp;lt;algorithm&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;string&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+
+int main() {
+  std::vector&amp;lt;char&amp;gt; v1 = { &amp;#39;a&amp;#39;,&amp;#39;b&amp;#39;,&amp;#39;c&amp;#39; };
+  std::vector&amp;lt;int&amp;gt; v2 = { 3,1,4 };
+  std::vector&amp;lt;std::string&amp;gt; result;
+
+  // v1[n] の文字を v2[n] 回繰り返した文字列を返す
+  std::ranges::transform(v1, v2, std::back_inserter(result), [](char a, int b) { return std::string(b, a); });
+
+  for (const std::string&amp;amp; s : result) {
+    std::cout &amp;lt;&amp;lt; s &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* std::ranges::transform[color ff0000]
+* std::to_string[link /reference/string/to_string.md]
+
+### 出力
+```
+aaa
+b
+cccc
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4861 25 Algorithms library](https://timsong-cpp.github.io/cppwp/n4861/algorithms)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>copy_if -- C++バージョンを修正 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_copy_if.html"/>
      <id>ec292d78effccaf51cfe0b57b7f396b7d983f9b9:reference/algorithm/ranges_copy_if.md</id>
      <updated>2022-03-21T08:13:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_copy_if.md b/reference/algorithm/ranges_copy_if.md
index 96ab68519..0f7b62d74 100644
--- a/reference/algorithm/ranges_copy_if.md
+++ b/reference/algorithm/ranges_copy_if.md
@@ -3,7 +3,6 @@
 * std::ranges[meta namespace]
 * function template[meta id-type]
 * cpp20[meta cpp]
-* cpp11[meta cpp]
 
 ```cpp
 namespace std::ranges {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>copy_n -- C++バージョンを修正 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_copy_n.html"/>
      <id>ec292d78effccaf51cfe0b57b7f396b7d983f9b9:reference/algorithm/ranges_copy_n.md</id>
      <updated>2022-03-21T08:13:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_copy_n.md b/reference/algorithm/ranges_copy_n.md
index 9517e4e1a..9aa2645ef 100644
--- a/reference/algorithm/ranges_copy_n.md
+++ b/reference/algorithm/ranges_copy_n.md
@@ -3,7 +3,6 @@
 * std::ranges[meta namespace]
 * function template[meta id-type]
 * cpp20[meta cpp]
-* cpp11[meta cpp]
 
 
 ```cpp
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_sorted -- C++バージョンを修正 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_is_sorted.html"/>
      <id>ec292d78effccaf51cfe0b57b7f396b7d983f9b9:reference/algorithm/ranges_is_sorted.md</id>
      <updated>2022-03-21T08:13:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_is_sorted.md b/reference/algorithm/ranges_is_sorted.md
index 6b9bf9a3a..0a2b6e8fe 100644
--- a/reference/algorithm/ranges_is_sorted.md
+++ b/reference/algorithm/ranges_is_sorted.md
@@ -3,7 +3,6 @@
 * std::ranges[meta namespace]
 * function template[meta id-type]
 * cpp20[meta cpp]
-* cpp11[meta cpp]
 
 ```cpp
 namespace std::ranges {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>minmax -- C++バージョンを修正 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_minmax.html"/>
      <id>ec292d78effccaf51cfe0b57b7f396b7d983f9b9:reference/algorithm/ranges_minmax.md</id>
      <updated>2022-03-21T08:13:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_minmax.md b/reference/algorithm/ranges_minmax.md
index 9588684ce..da743ed64 100644
--- a/reference/algorithm/ranges_minmax.md
+++ b/reference/algorithm/ranges_minmax.md
@@ -3,7 +3,6 @@
 * std::ranges[meta namespace]
 * function template[meta id-type]
 * cpp20[meta cpp]
-* cpp11[meta cpp]
 
 ```cpp
 namespace std::ranges {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>move_backward -- C++バージョンを修正 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_move_backward.html"/>
      <id>ec292d78effccaf51cfe0b57b7f396b7d983f9b9:reference/algorithm/ranges_move_backward.md</id>
      <updated>2022-03-21T08:13:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_move_backward.md b/reference/algorithm/ranges_move_backward.md
index b598667d4..21933dee3 100644
--- a/reference/algorithm/ranges_move_backward.md
+++ b/reference/algorithm/ranges_move_backward.md
@@ -3,7 +3,6 @@
 * std::ranges[meta namespace]
 * function template[meta id-type]
 * cpp20[meta cpp]
-* cpp11[meta cpp]
 
 ```cpp
 namespace std::ranges {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>algorithm -- move関係の関数の説明を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm.html"/>
      <id>5c65f033ad8c42179acfa85572775b97381fd49b:reference/algorithm.md</id>
      <updated>2022-03-21T06:48:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm.md b/reference/algorithm.md
index 9faaea77f..984adf68c 100644
--- a/reference/algorithm.md
+++ b/reference/algorithm.md
@@ -185,10 +185,9 @@ ranges::sort(pv, {}, &amp;amp;Parson::name);
 | [`ranges::copy_n`](algorithm/ranges_copy_n.md)                     | 指定された数の要素をコピーする                                                                                  | C++20 |
 | [`ranges::copy_if`](algorithm/ranges_copy_if.md)                   | 条件を満たす要素のみをコピーする                                                                                | C++20 |
 | [`ranges::copy_backward`](algorithm/ranges_copy_backward.md)       | 指定された範囲の要素を後ろからコピーする                                                                        | C++20 |
-| [`ranges::move`](algorithm/ranges_move.md.nolink)                         | 指定された範囲の要素をムーブする                                                                                | C++20 |
-| [`ranges::move_backward`](algorithm/ranges_move_backward.md.nolink)       | 指定された範囲の要素を後ろからムーブする                                                                        | C++20 |
-| [`ranges::swap_ranges`](algorithm/ranges_swap_ranges.md.nolink)           | 指定された2つの範囲同士を swap する                                                                             | C++20 |
-| [`ranges::iter_swap`](algorithm/ranges_iter_swap.md.nolink)               | 2つのイテレータの要素を swap する                                                                               | C++20 |
+| [`ranges::move`](algorithm/ranges_move.md)                         | 指定された範囲の要素をムーブする                                                                                | C++20 |
+| [`ranges::move_backward`](algorithm/ranges_move_backward.md)       | 指定された範囲の要素を後ろからムーブする                                                                        | C++20 |
+| [`ranges::swap_ranges`](algorithm/ranges_swap_ranges.md)           | 指定された2つの範囲同士を swap する                                                                             | C++20 |
 | [`ranges::transform`](algorithm/ranges_transform.md.nolink)               | 全ての要素に関数を適用する                                                                                      | C++20 |
 | [`ranges::replace`](algorithm/ranges_replace.md.nolink)                   | 指定された値と一致する要素を指定された値に置き換える                                                            | C++20 |
 | [`ranges::replace_if`](algorithm/ranges_replace_if.md.nolink)             | 条件を満たす要素を指定された値に置き換える                                                                      | C++20 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>in_in_result -- move関係の関数の説明を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_in_in_result.html"/>
      <id>5c65f033ad8c42179acfa85572775b97381fd49b:reference/algorithm/ranges_in_in_result.md</id>
      <updated>2022-03-21T06:48:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_in_in_result.md b/reference/algorithm/ranges_in_in_result.md
index 40a260e79..d44526430 100644
--- a/reference/algorithm/ranges_in_in_result.md
+++ b/reference/algorithm/ranges_in_in_result.md
@@ -41,7 +41,7 @@ namespace std::ranges {
 ## 概要
 * (1): 2つのイテレータを格納する型
 * (2): [`ranges::mismatch`](ranges_mismatch.md)で使用するエイリアス
-* (3): [`ranges::swap_ranges`](ranges_swap_ranges.md.nolink)で使用するエイリアス
+* (3): [`ranges::swap_ranges`](ranges_swap_ranges.md)で使用するエイリアス
 
 この型は、関数が入力用に2つの範囲を受け取る場合に、それぞれ処理した範囲の末尾を返すために使用される。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>in_out_result -- move関係の関数の説明を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_in_out_result.html"/>
      <id>5c65f033ad8c42179acfa85572775b97381fd49b:reference/algorithm/ranges_in_out_result.md</id>
      <updated>2022-03-21T06:48:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_in_out_result.md b/reference/algorithm/ranges_in_out_result.md
index 0310f56b4..4eb39977e 100644
--- a/reference/algorithm/ranges_in_out_result.md
+++ b/reference/algorithm/ranges_in_out_result.md
@@ -100,8 +100,8 @@ namespace std::ranges {
 * (3): [`ranges::copy_n`](ranges_copy_n.md)で使用するエイリアス
 * (4): [`ranges::copy_if`](ranges_copy_if.md)で使用するエイリアス
 * (5): [`ranges::copy_backward`](ranges_copy_backward.md)で使用するエイリアス
-* (6): [`ranges::move`](ranges_move.md.nolink)で使用するエイリアス
-* (7): [`ranges::move_backward`](ranges_move_backward.md.nolink)で使用するエイリアス
+* (6): [`ranges::move`](ranges_move.md)で使用するエイリアス
+* (7): [`ranges::move_backward`](ranges_move_backward.md)で使用するエイリアス
 * (8): [`ranges::unary_transform`](ranges_unary_transform.md.nolink)で使用するエイリアス
 * (9): [`ranges::replace_copy`](ranges_replace_copy.md.nolink)で使用するエイリアス
 * (10): [`ranges::replace_copy_if`](ranges_replace_copy_if.md.nolink)で使用するエイリアス
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>move -- move関係の関数の説明を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_move.html"/>
      <id>5c65f033ad8c42179acfa85572775b97381fd49b:reference/algorithm/ranges_move.md</id>
      <updated>2022-03-21T06:48:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_move.md b/reference/algorithm/ranges_move.md
new file mode 100644
index 000000000..ae6367d4b
--- /dev/null
+++ b/reference/algorithm/ranges_move.md
@@ -0,0 +1,102 @@
+# move
+* algorithm[meta header]
+* std::ranges[meta namespace]
+* function template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;input_iterator I, sentinel_for&amp;lt;I&amp;gt; S, weakly_incrementable O&amp;gt;
+    requires indirectly_movable&amp;lt;I, O&amp;gt;
+  constexpr move_result&amp;lt;I, O&amp;gt; move(I first, S last, O result);            // (1)
+
+  template&amp;lt;input_range R, weakly_incrementable O&amp;gt;
+    requires indirectly_movable&amp;lt;iterator_t&amp;lt;R&amp;gt;, O&amp;gt;
+  constexpr move_result&amp;lt;borrowed_iterator_t&amp;lt;R&amp;gt;, O&amp;gt; move(R&amp;amp;&amp;amp; r, O result); // (2)
+}
+```
+* move_result[link ranges_in_out_result.md]
+* input_iterator[link /reference/iterator/input_iterator.md]
+* sentinel_for[link /reference/iterator/sentinel_for.md]
+* weakly_incrementable[link /reference/iterator/weakly_incrementable.md]
+* indirectly_movable[link /reference/iterator/indirectly_movable.md]
+* input_range[link /reference/ranges/input_range.md]
+* iterator_t[link /reference/ranges/iterator_t.md]
+* borrowed_iterator_t[link /reference/ranges/borrowed_iterator_t.md]
+
+## 概要
+指定された範囲の要素をムーブする。
+
+* (1): イテレーターペアで範囲を指定する
+* (2): 範囲を直接指定する
+
+## 事前条件
+`result` は `[first,last)` の範囲に含まれてはならない。
+
+
+## 効果
+`[first,last)` 内の要素を、それぞれ `[result,result + (last - first))` へムーブする。
+
+ムーブは `first` から順番に行い、0 以上 `last - first` 未満であるそれぞれの `n` について、`*(result + n) = std::move(*(first + n))` を行う。
+
+
+## 戻り値
+```cpp
+move_result {
+  .in  = last,
+  .out = result + (last - first),
+}
+```
+* move_result[link ranges_in_out_result.md]
+
+## 計算量
+正確に `last - first` 回ムーブ代入が行われる。
+
+
+## 例
+```cpp example
+#include &amp;lt;algorithm&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;memory&amp;gt;
+
+int main() {
+  std::vector&amp;lt;std::unique_ptr&amp;lt;int&amp;gt;&amp;gt; v;
+  for (int i = 0; i &amp;lt; 5; i++) {
+    v.emplace_back(new int(i));
+  }
+
+  std::vector&amp;lt;std::unique_ptr&amp;lt;int&amp;gt;&amp;gt; v2;
+  // v のそれぞれの要素を v2 へムーブする
+  std::ranges::move(v, std::back_inserter(v2));
+
+  for (const auto&amp;amp; v : v2) {
+    std::cout &amp;lt;&amp;lt; *v &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* std::ranges::move[color ff0000]
+* v.emplace_back[link /reference/vector/vector/emplace_back.md]
+
+### 出力
+```
+0
+1
+2
+3
+4
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4861 25 Algorithms library](https://timsong-cpp.github.io/cppwp/n4861/algorithms)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>move_backward -- move関係の関数の説明を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_move_backward.html"/>
      <id>5c65f033ad8c42179acfa85572775b97381fd49b:reference/algorithm/ranges_move_backward.md</id>
      <updated>2022-03-21T06:48:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_move_backward.md b/reference/algorithm/ranges_move_backward.md
new file mode 100644
index 000000000..b598667d4
--- /dev/null
+++ b/reference/algorithm/ranges_move_backward.md
@@ -0,0 +1,115 @@
+# move_backward
+* algorithm[meta header]
+* std::ranges[meta namespace]
+* function template[meta id-type]
+* cpp20[meta cpp]
+* cpp11[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;bidirectional_iterator I1, sentinel_for&amp;lt;I1&amp;gt; S1, bidirectional_iterator I2&amp;gt;
+    requires indirectly_movable&amp;lt;I1, I2&amp;gt;
+  constexpr move_backward_result&amp;lt;I1, I2&amp;gt; move_backward(I1 first, S1 last, I2 result);       // (1)
+
+  template&amp;lt;bidirectional_range R, bidirectional_iterator I&amp;gt;
+    requires indirectly_movable&amp;lt;iterator_t&amp;lt;R&amp;gt;, I&amp;gt;
+  constexpr move_backward_result&amp;lt;borrowed_iterator_t&amp;lt;R&amp;gt;, I&amp;gt; move_backward(R&amp;amp;&amp;amp; r, I result); // (2)
+}
+```
+* move_backward_result[link ranges_in_out_result.md]
+* bidirectional_iterator[link /reference/iterator/bidirectional_iterator.md]
+* sentinel_for[link /reference/iterator/sentinel_for.md]
+* indirectly_movable[link /reference/iterator/indirectly_movable.md]
+* bidirectional_range[link /reference/ranges/bidirectional_range.md]
+* iterator_t[link /reference/ranges/iterator_t.md]
+* borrowed_iterator_t[link /reference/ranges/borrowed_iterator_t.md]
+
+## 概要
+指定された範囲の要素を後ろからムーブする。
+
+* (1): イテレーターペアで範囲を指定する
+* (2): 範囲を直接指定する
+
+## 事前条件
+`result` は `(first,last]` の範囲に含まれてはならない。
+
+
+## 効果
+`[first,last)` 内にある要素を、それぞれ `[result - (last-first),result)` へムーブする。
+
+ムーブは `last - 1` から順番に行い、1 以上 `last - first` 以下であるそれぞれの `n` について、`*(result - n) = std::move(*(last - n))` を行う。
+
+
+## 戻り値
+```cpp
+move_backward_result {
+  .in  = last,
+  .out = result - (last - first),
+}
+```
+* move_backward_result[link ranges_in_out_result.md]
+
+## 計算量
+正確に `last - first` 回ムーブ代入が行われる。
+
+
+## 備考
+`last` が `[result - (last-first),result)` の範囲内にあるときには、[`move()`](move.md) の代わりに `move_backward()` を使うべきである。
+
+
+## 例
+```cpp example
+#include &amp;lt;algorithm&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;memory&amp;gt;
+#include &amp;lt;ranges&amp;gt;
+
+void print(const std::unique_ptr&amp;lt;int&amp;gt;&amp;amp; v) {
+  if (v) std::cout &amp;lt;&amp;lt; *v       &amp;lt;&amp;lt; std::endl;
+  else   std::cout &amp;lt;&amp;lt; &amp;#34;(null)&amp;#34; &amp;lt;&amp;lt; std::endl;
+}
+
+int main() {
+  std::vector&amp;lt;std::unique_ptr&amp;lt;int&amp;gt;&amp;gt; v;
+
+  for (int i = 0; i &amp;lt; 5; i++) {
+    v.emplace_back(new int(i));
+  }
+
+  // 0,1,2 の値がある範囲を、2,3,4 の値がある範囲へムーブする
+  std::ranges::move_backward(v | std::views::take(3), v.end());
+
+  // 以下のコードだと期待した結果にならないことを確認しよう。
+  // 移動元の後方と移動先の前方で範囲が重なっている場合は、move_backwardを使わないといけない
+  // std::ranges::move(v | std::views::take(3), v.begin() + 2);
+
+  std::ranges::for_each(v, &amp;amp;print);
+}
+```
+* std::ranges::move_backward[color ff0000]
+* v.emplace_back[link /reference/vector/vector/emplace_back.md]
+* std::move[link move.md]
+* std::views::take[link /reference/ranges/take_view.md]
+
+### 出力
+```
+(null)
+(null)
+0
+1
+2
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4861 25 Algorithms library](https://timsong-cpp.github.io/cppwp/n4861/algorithms)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap_ranges -- move関係の関数の説明を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_swap_ranges.html"/>
      <id>5c65f033ad8c42179acfa85572775b97381fd49b:reference/algorithm/ranges_swap_ranges.md</id>
      <updated>2022-03-21T06:48:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_swap_ranges.md b/reference/algorithm/ranges_swap_ranges.md
new file mode 100644
index 000000000..02275bcac
--- /dev/null
+++ b/reference/algorithm/ranges_swap_ranges.md
@@ -0,0 +1,100 @@
+# swap_ranges
+* algorithm[meta header]
+* std::ranges[meta namespace]
+* function template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;input_iterator I1, sentinel_for&amp;lt;I1&amp;gt; S1, input_iterator I2, sentinel_for&amp;lt;I2&amp;gt; S2&amp;gt;
+    requires indirectly_swappable&amp;lt;I1, I2&amp;gt;
+  constexpr swap_ranges_result&amp;lt;I1, I2&amp;gt; swap_ranges(I1 first1, S1 last1, I2 first2, S2 last2);                   // (1)
+
+  template&amp;lt;input_range R1, input_range R2&amp;gt;
+    requires indirectly_swappable&amp;lt;iterator_t&amp;lt;R1&amp;gt;, iterator_t&amp;lt;R2&amp;gt;&amp;gt;
+  constexpr swap_ranges_result&amp;lt;borrowed_iterator_t&amp;lt;R1&amp;gt;, borrowed_iterator_t&amp;lt;R2&amp;gt;&amp;gt; swap_ranges(R1&amp;amp;&amp;amp; r1, R2&amp;amp;&amp;amp; r2); // (2)
+}
+```
+* swap_ranges_result[link ranges_in_in_result.md]
+* input_iterator[link /reference/iterator/input_iterator.md]
+* sentinel_for[link /reference/iterator/sentinel_for.md]
+* indirectly_swappable[link /reference/iterator/indirectly_swappable.md]
+* input_range[link /reference/ranges/input_range.md]
+* iterator_t[link /reference/ranges/iterator_t.md]
+* borrowed_iterator_t[link /reference/ranges/borrowed_iterator_t.md]
+
+## 概要
+指定された2つの範囲同士を swap する。
+
+* (1): イテレーターペアで範囲を指定する
+* (2): 範囲を直接指定する
+
+
+## 効果
+0 以上 `last1 - first1` 以下のそれぞれの `n` について [`swap`](/reference/utility/swap.md)`(*(first1 + n), *(first2 + n))` を行う
+
+
+## 事前条件
+`[first1,last1)` と `[first2,first2 + (last1 - first1))` の範囲が重なってはならない。
+0 以上 `last1 - first1` 未満のそれぞれの `n` について、`*(first1 + n) と *(first2 + n)` は `Swappable` でなければならない。
+
+
+## 戻り値
+```cpp
+swap_ranges_result {
+  .in1 = first1 + M,
+  .in2 = first2 + M,
+}
+```
+* swap_ranges_result[link ranges_in_in_result.md]
+
+ただし、`M = `[`min`](ranges_min.md)`(last1 - first1, last2 - first2)` とする。
+
+
+## 計算量
+正確に `last1 - first1` 回のスワップが行われる
+
+
+## 例
+```cpp example
+#include &amp;lt;algorithm&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v1 = { 3,1,2 };
+  std::vector&amp;lt;int&amp;gt; v2 = { 5,2,4,1,3 };
+
+  std::ranges::swap_ranges(v1, v2);
+
+  std::cout &amp;lt;&amp;lt; &amp;#34;v1: &amp;#34;;
+  std::ranges::copy(v1, std::ostream_iterator&amp;lt;int&amp;gt;(std::cout, &amp;#34;,&amp;#34;));
+  std::cout &amp;lt;&amp;lt; std::endl;
+
+  std::cout &amp;lt;&amp;lt; &amp;#34;v2: &amp;#34;;
+  std::ranges::copy(v2, std::ostream_iterator&amp;lt;int&amp;gt;(std::cout, &amp;#34;,&amp;#34;));
+  std::cout &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::ranges::swap_ranges[color ff0000]
+* std::ranges::copy[link ranges_copy.md]
+
+### 出力
+```
+v1: 5,2,4,
+v2: 3,1,2,1,3,
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4861 25 Algorithms library](https://timsong-cpp.github.io/cppwp/n4861/algorithms)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>in_fun_result -- リンク修正 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_min_max_result.html"/>
      <id>90f0c638c9c06d917512a9e2b8217424d9ee232d:reference/algorithm/ranges_min_max_result.md</id>
      <updated>2022-03-21T06:25:23+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_min_max_result.md b/reference/algorithm/ranges_min_max_result.md
index 652228c85..58a3ffd3c 100644
--- a/reference/algorithm/ranges_min_max_result.md
+++ b/reference/algorithm/ranges_min_max_result.md
@@ -41,7 +41,7 @@ namespace std::ranges {
 ## 概要
 * (1): 最小値と最大値、またはそれらのイテレータを格納する型
 * (2): [`ranges::minmax`](ranges_minmax.md)で使用するエイリアス
-* (3): [`ranges::minmax_element`](ranges_fominmax_element.md)で使用するエイリアス
+* (3): [`ranges::minmax_element`](ranges_minmax_element.md)で使用するエイリアス
 
 この型は、関数が最小値と最大値またはそれらのイテレータを返す場合に使用される。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>next_permutation -- リンク修正 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_next_permutation.html"/>
      <id>90f0c638c9c06d917512a9e2b8217424d9ee232d:reference/algorithm/ranges_next_permutation.md</id>
      <updated>2022-03-21T06:25:23+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_next_permutation.md b/reference/algorithm/ranges_next_permutation.md
index 9185d950e..400cfc9b3 100644
--- a/reference/algorithm/ranges_next_permutation.md
+++ b/reference/algorithm/ranges_next_permutation.md
@@ -16,7 +16,7 @@ namespace std::ranges {
   constexpr next_permutation_result&amp;lt;borrowed_iterator_t&amp;lt;R&amp;gt;&amp;gt; next_permutation(R&amp;amp;&amp;amp; r, Comp comp = {}, Proj proj = {});  // (2)
 }
 ```
-* next_permutation_result[link in_found_result.md]
+* next_permutation_result[link ranges_in_found_result.md]
 * bidirectional_iterator[link /reference/iterator/bidirectional_iterator.md]
 * sentinel_for[link /reference/iterator/sentinel_for.md]
 * ranges::less[link /reference/functional/ranges_less.md]
@@ -48,7 +48,7 @@ next_permutation_result {
   .found = 次の順列が存在する場合は true、そうでなければ false,
 }
 ```
-* next_permutation_result[link in_found_result.md]
+* next_permutation_result[link ranges_in_found_result.md]
 
 ## 計算量
 高々`(last - first)/2`回の要素の交換
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>prev_permutation -- リンク修正 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_prev_permutation.html"/>
      <id>90f0c638c9c06d917512a9e2b8217424d9ee232d:reference/algorithm/ranges_prev_permutation.md</id>
      <updated>2022-03-21T06:25:23+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_prev_permutation.md b/reference/algorithm/ranges_prev_permutation.md
index 08fe16022..62720edc6 100644
--- a/reference/algorithm/ranges_prev_permutation.md
+++ b/reference/algorithm/ranges_prev_permutation.md
@@ -15,7 +15,7 @@ namespace std::ranges {
   constexpr prev_permutation_result&amp;lt;borrowed_iterator_t&amp;lt;R&amp;gt;&amp;gt; next_permutation(R&amp;amp;&amp;amp; r, Comp comp = {}, Proj proj = {});  // (2)
 }
 ```
-* prev_permutation_result[link in_found_result.md]
+* prev_permutation_result[link ranges_in_found_result.md]
 * bidirectional_iterator[link /reference/iterator/bidirectional_iterator.md]
 * sentinel_for[link /reference/iterator/sentinel_for.md]
 * ranges::less[link /reference/functional/ranges_less.md]
@@ -43,7 +43,7 @@ prev_permutation_result {
   .found = 前の順列が存在する場合は true、そうでなければ false,
 }
 ```
-* prev_permutation_result[link in_found_result.md]
+* prev_permutation_result[link ranges_in_found_result.md]
 
 
 ## 計算量
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>merge -- リンク修正 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_merge.html"/>
      <id>7b37f98ae2cf9fff60d8eb05e7d5bc158fa804f3:reference/algorithm/ranges_merge.md</id>
      <updated>2022-03-21T06:20:51+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_merge.md b/reference/algorithm/ranges_merge.md
index 239840117..c56b5c539 100644
--- a/reference/algorithm/ranges_merge.md
+++ b/reference/algorithm/ranges_merge.md
@@ -17,7 +17,7 @@ namespace std::ranges {
   constexpr merge_result&amp;lt;borrowed_iterator_t&amp;lt;R1&amp;gt;, borrowed_iterator_t&amp;lt;R2&amp;gt;, O&amp;gt; merge(R1&amp;amp;&amp;amp; r1, R2&amp;amp;&amp;amp; r2, O result, Comp comp = {}, Proj1 proj1 = {}, Proj2 proj2 = {});  // (2)
 }
 ```
-* merge_result[link in_in_out_result.md]
+* merge_result[link ranges_in_in_out_result.md]
 * input_iterator[link /reference/iterator/input_iterator.md]
 * sentinel_for[link /reference/iterator/sentinel_for.md]
 * weakly_incrementable[link /reference/iterator/weakly_incrementable.md]
@@ -52,7 +52,7 @@ merge_result {
   .out = result + (last1 - first1) + (last2 - first2),
 }
 ```
-* merge_result[link in_in_out_result.md]
+* merge_result[link ranges_in_in_out_result.md]
 
 ## 計算量
 `N = (last1 - first1) + (last2 - first2)`であるとして最大で、N - 1回比較する
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>minmax -- リンク修正 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_minmax.html"/>
      <id>7b37f98ae2cf9fff60d8eb05e7d5bc158fa804f3:reference/algorithm/ranges_minmax.md</id>
      <updated>2022-03-21T06:20:51+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_minmax.md b/reference/algorithm/ranges_minmax.md
index 7cb63e129..9588684ce 100644
--- a/reference/algorithm/ranges_minmax.md
+++ b/reference/algorithm/ranges_minmax.md
@@ -21,7 +21,7 @@ namespace std::ranges {
   constexpr minmax_result&amp;lt;range_value_t&amp;lt;R&amp;gt;&amp;gt; minmax(R&amp;amp;&amp;amp; r, Comp comp = {}, Proj proj = {});
 }
 ```
-* minmax_result[link min_max_result.md]
+* minmax_result[link ranges_min_max_result.md]
 * identity[link /reference/functional/identity.md]
 * indirect_strict_weak_order[link /reference/iterator/indirect_strict_weak_order.md]
 * projected[link /reference/iterator/projected.md]
@@ -42,7 +42,7 @@ minmax_result {
   .max = 最大値,
 }
 ```
-* minmax_result[link min_max_result.md]
+* minmax_result[link ranges_min_max_result.md]
 
 それぞれ、比較 [`invoke`](/reference/functional/invoke.md)`(comp, `[`invoke`](/reference/functional/invoke.md)`(proj, *i), `[`invoke`](/reference/functional/invoke.md)`(proj, *j))` によって判断された最初の値となる。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>minmax_element -- リンク修正 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_minmax_element.html"/>
      <id>7b37f98ae2cf9fff60d8eb05e7d5bc158fa804f3:reference/algorithm/ranges_minmax_element.md</id>
      <updated>2022-03-21T06:20:51+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_minmax_element.md b/reference/algorithm/ranges_minmax_element.md
index d2131b6a4..32bbf40e1 100644
--- a/reference/algorithm/ranges_minmax_element.md
+++ b/reference/algorithm/ranges_minmax_element.md
@@ -15,7 +15,7 @@ namespace std::ranges {
   constexpr minmax_element_result&amp;lt;borrowed_iterator_t&amp;lt;R&amp;gt;&amp;gt; minmax_element(R&amp;amp;&amp;amp; r, Comp comp = {}, Proj proj = {});
 }
 ```
-* minmax_element_result[link min_max_result.md]
+* minmax_element_result[link ranges_min_max_result.md]
 * forward_iterator[link /reference/iterator/forward_iterator.md]
 * identity[link /reference/functional/identity.md]
 * indirect_strict_weak_order[link /reference/iterator/indirect_strict_weak_order.md]
@@ -38,7 +38,7 @@ minmax_element_result {
   .max = 最大の要素を指すイテレータ,
 }
 ```
-* minmax_element_result[link min_max_result.md]
+* minmax_element_result[link ranges_min_max_result.md]
 
 それぞれ、比較 [`invoke`](/reference/functional/invoke.md)`(comp, `[`invoke`](/reference/functional/invoke.md)`(proj, *i), `[`invoke`](/reference/functional/invoke.md)`(proj, *j))` によって判断し、同じ値の要素が複数ある場合は、最小の要素は最初の要素、最大の要素は最後の要素となる。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>partial_sort_copy -- リンク修正 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_partial_sort_copy.html"/>
      <id>7b37f98ae2cf9fff60d8eb05e7d5bc158fa804f3:reference/algorithm/ranges_partial_sort_copy.md</id>
      <updated>2022-03-21T06:20:51+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_partial_sort_copy.md b/reference/algorithm/ranges_partial_sort_copy.md
index 0842b59ba..9342d7403 100644
--- a/reference/algorithm/ranges_partial_sort_copy.md
+++ b/reference/algorithm/ranges_partial_sort_copy.md
@@ -22,7 +22,7 @@ namespace std::ranges {
     partial_sort_copy(R1&amp;amp;&amp;amp; r, R2&amp;amp;&amp;amp; result_r, Comp comp = {}, Proj1 proj1 = {}, Proj2 proj2 = {});                              // (2)
 }
 ```
-* partial_sort_copy_result[link in_out_result.md]
+* partial_sort_copy_result[link ranges_in_out_result.md]
 * input_iterator[link /reference/iterator/input_iterator.md]
 * random_access_iterator[link /reference/iterator/random_access_iterator.md]
 * sentinel_for[link /reference/iterator/sentinel_for.md]
@@ -56,7 +56,7 @@ partial_sort_copy_result {
   .out = result_first + N
 }
 ```
-* partial_sort_copy_result[link in_out_result.md]
+* partial_sort_copy_result[link ranges_in_out_result.md]
 
 
 ## 計算量
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>set_difference -- リンク修正 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_set_difference.html"/>
      <id>7b37f98ae2cf9fff60d8eb05e7d5bc158fa804f3:reference/algorithm/ranges_set_difference.md</id>
      <updated>2022-03-21T06:20:51+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_set_difference.md b/reference/algorithm/ranges_set_difference.md
index 3541b5802..8a8f3cb4f 100644
--- a/reference/algorithm/ranges_set_difference.md
+++ b/reference/algorithm/ranges_set_difference.md
@@ -19,7 +19,7 @@ namespace std::ranges {
     set_difference(R1&amp;amp;&amp;amp; r1, R2&amp;amp;&amp;amp; r2, O result, Comp comp = {}, Proj1 proj1 = {}, Proj2 proj2 = {});                         // (2)
 }
 ```
-* set_difference_result[link in_out_result.md]
+* set_difference_result[link ranges_in_out_result.md]
 * input_iterator[link /reference/iterator/input_iterator.md]
 * sentinel_for[link /reference/iterator/sentinel_for.md]
 * weakly_incrementable[link /reference/iterator/weakly_incrementable.md]
@@ -52,7 +52,7 @@ set_difference_result {
   .out = result_last,
 }
 ```
-* set_difference_result[link in_out_result.md]
+* set_difference_result[link ranges_in_out_result.md]
 
 ただし、`result_last` は構築された範囲の終端。 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>set_intersection -- リンク修正 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_set_intersection.html"/>
      <id>7b37f98ae2cf9fff60d8eb05e7d5bc158fa804f3:reference/algorithm/ranges_set_intersection.md</id>
      <updated>2022-03-21T06:20:51+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_set_intersection.md b/reference/algorithm/ranges_set_intersection.md
index 548ad8cab..134478e9a 100644
--- a/reference/algorithm/ranges_set_intersection.md
+++ b/reference/algorithm/ranges_set_intersection.md
@@ -19,7 +19,7 @@ namespace std::ranges {
     set_intersection(R1&amp;amp;&amp;amp; r1, R2&amp;amp;&amp;amp; r2, O result, Comp comp = {}, Proj1 proj1 = {}, Proj2 proj2 = {});                          // (2)
 }
 ```
-* set_intersection_result[link in_in_out_result.md]
+* set_intersection_result[link ranges_in_in_out_result.md]
 * input_iterator[link /reference/iterator/input_iterator.md]
 * sentinel_for[link /reference/iterator/sentinel_for.md]
 * weakly_incrementable[link /reference/iterator/weakly_incrementable.md]
@@ -55,7 +55,7 @@ set_intersection_result {
   .out = result_last,
 }
 ```
-* set_intersection_result[link in_in_out_result.md]
+* set_intersection_result[link ranges_in_in_out_result.md]
 
 ただし、`result_last` は構築された範囲の終端。 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>set_symmetric_difference -- リンク修正 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_set_symmetric_difference.html"/>
      <id>7b37f98ae2cf9fff60d8eb05e7d5bc158fa804f3:reference/algorithm/ranges_set_symmetric_difference.md</id>
      <updated>2022-03-21T06:20:51+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_set_symmetric_difference.md b/reference/algorithm/ranges_set_symmetric_difference.md
index 2635bdf68..ed699dc5d 100644
--- a/reference/algorithm/ranges_set_symmetric_difference.md
+++ b/reference/algorithm/ranges_set_symmetric_difference.md
@@ -22,7 +22,7 @@ namespace std::ranges {
     set_symmetric_difference(R1&amp;amp;&amp;amp; r1, R2&amp;amp;&amp;amp; r2, O result, Comp comp = {}, Proj1 proj1 = {}, Proj2 proj2 = {});
 }
 ```
-* set_symmetric_difference_result[link in_in_out_result.md] 
+* set_symmetric_difference_result[link ranges_in_in_out_result.md] 
 * input_iterator[link /reference/iterator/input_iterator.md]
 * sentinel_for[link /reference/iterator/sentinel_for.md]
 * weakly_incrementable[link /reference/iterator/weakly_incrementable.md]
@@ -56,7 +56,7 @@ set_symmetric_difference_result {
   .out = result_last,
 }
 ```
-* set_symmetric_difference_result[link in_in_out_result.md] 
+* set_symmetric_difference_result[link ranges_in_in_out_result.md] 
 
 ただし、`result_last` は構築された範囲の終端。 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>set_union -- リンク修正 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_set_union.html"/>
      <id>7b37f98ae2cf9fff60d8eb05e7d5bc158fa804f3:reference/algorithm/ranges_set_union.md</id>
      <updated>2022-03-21T06:20:51+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_set_union.md b/reference/algorithm/ranges_set_union.md
index 6133663ef..e876af5d5 100644
--- a/reference/algorithm/ranges_set_union.md
+++ b/reference/algorithm/ranges_set_union.md
@@ -19,7 +19,7 @@ namespace std::ranges {
     set_union(R1&amp;amp;&amp;amp; r1, R2&amp;amp;&amp;amp; r2, O result, Comp comp = {}, Proj1 proj1 = {}, Proj2 proj2 = {});                           // (2)
 }
 ```
-* set_union_result[link in_in_out_result.md]
+* set_union_result[link ranges_in_in_out_result.md]
 * input_iterator[link /reference/iterator/input_iterator.md]
 * sentinel_for[link /reference/iterator/sentinel_for.md]
 * weakly_incrementable[link /reference/iterator/weakly_incrementable.md]
@@ -52,7 +52,7 @@ set_union_result {
   .out = result_last,
 }
 ```
-* set_union_result[link in_in_out_result.md]
+* set_union_result[link ranges_in_in_out_result.md]
 
 ただし、`result_last` は構築された範囲の終端。 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2021-06-15T22:09:42.478070</updated>
  <id>7d05ba26-6a18-42fd-b717-6c148c1c8c94</id>

  
    <entry>
      <title>cmp_not_equal -- Update cmp_not_equal.md</title>
      <link href="https://cpprefjp.github.io/reference/utility/cmp_not_equal.html"/>
      <id>7d4b44b0f45a5d47c109691d963f0d912d39676e:reference/utility/cmp_not_equal.md</id>
      <updated>2021-06-15T18:54:12+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/utility/cmp_not_equal.md b/reference/utility/cmp_not_equal.md
index 0368fc409..642235b50 100644
--- a/reference/utility/cmp_not_equal.md
+++ b/reference/utility/cmp_not_equal.md
@@ -28,7 +28,7 @@ for (int i = 0; i &amp;lt; v.size(); ++i) {}
 以下と等価：
 
 ```cpp
-return cmp_equal(t, u);
+return !cmp_equal(t, u);
 ```
 * cmp_equal[link cmp_equal.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Update op_constructor.md</title>
      <link href="https://cpprefjp.github.io/reference/source_location/source_location/op_constructor.html"/>
      <id>55462961c10ea382515e98c0b6ce620b6d0dd96e:reference/source_location/source_location/op_constructor.md</id>
      <updated>2021-06-15T18:27:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/source_location/source_location/op_constructor.md b/reference/source_location/source_location/op_constructor.md
index f934f3e96..fce53f335 100644
--- a/reference/source_location/source_location/op_constructor.md
+++ b/reference/source_location/source_location/op_constructor.md
@@ -37,10 +37,10 @@ int main()
 
 ### 出力例
 ```
-??
-??
-??
-??
+0
+0
+
+
 ```
 
 ## 実装例
@@ -59,7 +59,7 @@ source_location()
 
 ### 処理系
 - [Clang](/implementation.md#clang): ??
-- [GCC](/implementation.md#gcc): ??
+- [GCC](/implementation.md#gcc): 12.0
 - [ICC](/implementation.md#icc): ??
 - [Visual C++](/implementation.md#visual_cpp): ??
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>unreachable_sentinel_t -- unreachable_sentinel_t : 微修正</title>
      <link href="https://cpprefjp.github.io/reference/iterator/unreachable_sentinel_t.html"/>
      <id>4193ff80d3f512703ef9a33dc35f59354d4403a0:reference/iterator/unreachable_sentinel_t.md</id>
      <updated>2021-06-14T17:54:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/unreachable_sentinel_t.md b/reference/iterator/unreachable_sentinel_t.md
index f9471c1df..2b7aa91f5 100644
--- a/reference/iterator/unreachable_sentinel_t.md
+++ b/reference/iterator/unreachable_sentinel_t.md
@@ -19,9 +19,9 @@ namespace std {
 
 ## 概要
 
-`unreachable_sentinel_t`は、`weakly_incrementable`な型（イテレータ型）とともに用いて、任意の開区間の上界を示すことのできる番兵型である。
+`unreachable_sentinel_t`は、`weakly_incrementable`な型（イテレータ型）とともに用いて、任意の（半）開区間の上界を示すことのできる番兵型である。
 
-検索などを目的として範囲を走査する際、検索対象が範囲内に存在している場合その終端まで到達することは無く、範囲の探索は必ずしも範囲の先頭から行われる訳でも無い。任意の開区間とは、ある範囲の内部にあるその様な走査の対象となる部分範囲のことを指す。`unreachable_sentinel`はその様な区間の終端を暗に指定する、その様な開区間の上界を表す番兵である。
+検索などを目的として範囲を走査する際、検索対象が範囲内に存在している場合その終端まで到達することは無く、範囲の探索は必ずしも範囲の先頭から行われる訳でも無い。任意の（半）開区間とは、ある範囲の内部にあるその様な走査の対象となる部分範囲のことを指す。`unreachable_sentinel`はその様な区間の終端を暗に指定する、その様な開区間の上界を表す番兵である。
 
 検索など、ある範囲の一部を走査する際にそのイテレータに対する番兵として用いる事で、範囲の終端チェックを省略して走査を効率化できる可能性がある。ただし、実際の終端に到達しても走査が終了しないため、利用にあたっては事前条件（終端となる値が存在しているか）が必ず満たされるかに注意を払う必要がある。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
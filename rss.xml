<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-05-26T07:25:23.781960</updated>
  <id>0d2d4e32-c66e-4647-942e-61d4803e11fa</id>

  
    <entry>
      <title>execution -- execution: when_all_with_variant (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution.html"/>
      <id>78b4c319e202ff61afaafdfc3a49381c973213d5:reference/execution/execution.md</id>
      <updated>2025-05-26T16:21:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution.md b/reference/execution/execution.md
index fbd7bf5d4..ff06aaaa9 100644
--- a/reference/execution/execution.md
+++ b/reference/execution/execution.md
@@ -124,7 +124,7 @@ namespace std::execution {
 | [`execution::bulk`](execution/bulk.md.nolink) | インデクス空間上で指定関数を連続実行 (customization point object) | C++26 |
 | [`execution::split`](execution/split.md.nolink) | 入力Senderの値を複製送信 (customization point object) | C++26 |
 | [`execution::when_all`](execution/when_all.md) | 全ての入力Sender完了を待機 (customization point object) | C++26 |
-| [`execution::when_all_with_variant`](execution/when_all_with_variant.md.nolink) | 複数の値完了シグネチャをもつ全ての入力Sender完了を待機 (customization point object) | C++26 |
+| [`execution::when_all_with_variant`](execution/when_all_with_variant.md) | 複数の値完了シグネチャをもつ全ての入力Sender完了を待機 (customization point object) | C++26 |
 | [`execution::into_variant`](execution/into_variant.md) | 複数の値完了シグネチャを単一[`variant`](/reference/variant/variant.md)型の値完了シグネチャに変換 (customization point object) | C++26 |
 | [`execution::stopped_as_optional`](execution/stopped_as_optional.md.nolink) | 入力Senderの停止完了を[`optional`](/reference/optional/optional.md)型の値完了に変換 (customization point object) | C++26 |
 | [`execution::stopped_as_error`](execution/stopped_as_error.md.nolink) | 入力Senderの停止完了をエラー完了に変換 (customization point object) | C++26 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>continues_on -- execution: when_all_with_variant (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/continues_on.html"/>
      <id>78b4c319e202ff61afaafdfc3a49381c973213d5:reference/execution/execution/continues_on.md</id>
      <updated>2025-05-26T16:21:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/continues_on.md b/reference/execution/execution/continues_on.md
index a43586be4..1ac47acb2 100644
--- a/reference/execution/execution/continues_on.md
+++ b/reference/execution/execution/continues_on.md
@@ -66,10 +66,10 @@ return schedule_from(std::move(data), std::move(child));
 
 ## カスタマイゼーションポイント
 Senderアルゴリズム構築時に、[Sender](sender.md)`sndr`に[関連付けられた実行ドメイン](get-domain-early.md)に対して[`execution::transform_sender`](transform_sender.md)経由でSender変換が行われる。
-[デフォルト実行ドメイン](../execution/default_domain.md)では無変換。
+[デフォルト実行ドメイン](default_domain.md)では無変換。
 
 [Receiver](receiver.md)との[接続(connect)](connect.md)時に、[Scheduler](scheduler.md)`sch`に[関連付けられた実行ドメイン](get-domain-late.md)に対して[`execution::transform_sender`](transform_sender.md)経由でSender変換が行われる。
-[デフォルト実行ドメイン](../execution/default_domain.md)では`continues_on.transform_sender(out_sndr, env)`が呼ばれ、[`schedule_from`](schedule_from.md)Senderへと変換される。
+[デフォルト実行ドメイン](default_domain.md)では`continues_on.transform_sender(out_sndr, env)`が呼ばれ、[`schedule_from`](schedule_from.md)Senderへと変換される。
 
 説明用の式`out_sndr`を`continues_on(sndr, sch)`の戻り値[Sender](sender.md)とし、型`OutSndr`を`decltype((out_sndr))`とする。式`out_rcvr`を[`sender_in`](sender_in.md)`&amp;lt;OutSndr, Env&amp;gt; == true`となる[環境](../queryable.md)`Env`に関連付けられた[Receiver](receiver.md)とする。`out_sndr`と`out_rcvr`との[接続(connect)](connect.md)結果[Operation State](operation_state.md)への左辺値参照を`op`としたとき、
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>into_variant -- execution: when_all_with_variant (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/into_variant.html"/>
      <id>78b4c319e202ff61afaafdfc3a49381c973213d5:reference/execution/execution/into_variant.md</id>
      <updated>2025-05-26T16:21:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/into_variant.md b/reference/execution/execution/into_variant.md
index 85d5ffb37..3e912ee22 100644
--- a/reference/execution/execution/into_variant.md
+++ b/reference/execution/execution/into_variant.md
@@ -86,7 +86,7 @@ namespace std::execution {
 
 ## カスタマイゼーションポイント
 Senderアルゴリズム構築時および[Receiver](receiver.md)接続時に、関連付けられた実行ドメインに対して[`execution::transform_sender`](transform_sender.md)経由でSender変換が行われる。
-[デフォルト実行ドメイン](../execution/default_domain.md)では無変換。
+[デフォルト実行ドメイン](default_domain.md)では無変換。
 
 
 ## 例
@@ -198,7 +198,7 @@ int main()
 
 
 ## 関連項目
-- [`execution::when_all_with_variant`](when_all_with_variant.md.nolink)
+- [`execution::when_all_with_variant`](when_all_with_variant.md)
 - [`this_thread::sync_wait_with_variant`](../this_thread/sync_wait_with_variant.md)
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>let_value -- execution: when_all_with_variant (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/let_value.html"/>
      <id>78b4c319e202ff61afaafdfc3a49381c973213d5:reference/execution/execution/let_value.md</id>
      <updated>2025-05-26T16:21:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/let_value.md b/reference/execution/execution/let_value.md
index 6bb79a7a5..0ed009957 100644
--- a/reference/execution/execution/let_value.md
+++ b/reference/execution/execution/let_value.md
@@ -207,7 +207,7 @@ namespace std::execution {
 
 ## カスタマイゼーションポイント
 Senderアルゴリズム構築時および[Receiver](receiver.md)接続時に、関連付けられた実行ドメインに対して[`execution::transform_sender`](transform_sender.md)経由でSender変換が行われる。
-[デフォルト実行ドメイン](../execution/default_domain.md)では無変換。
+[デフォルト実行ドメイン](default_domain.md)では無変換。
 
 説明用の式`out_sndr`を`let_value(sndr, f)`の戻り値[Sender](sender.md)とし、式`rcvr`を式[`connect`](connect.md)`(out_sndr, rcvr)`が適格となる[Receiver](receiver.md)とする。式[`connect`](connect.md)`(out_sndr, rcvr)`は[開始(start)](start.md)時に下記を満たす非同期操作を生成しない場合、動作は未定義となる。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>on -- execution: when_all_with_variant (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/on.html"/>
      <id>78b4c319e202ff61afaafdfc3a49381c973213d5:reference/execution/execution/on.md</id>
      <updated>2025-05-26T16:21:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/on.md b/reference/execution/execution/on.md
index f8afd7065..431ef4feb 100644
--- a/reference/execution/execution/on.md
+++ b/reference/execution/execution/on.md
@@ -151,13 +151,13 @@ struct not-a-sender {
 
 ## カスタマイゼーションポイント
 Senderアルゴリズム構築時に、関連付けられた実行ドメインに対して[`execution::transform_sender`](transform_sender.md)経由でSender変換が行われる。
-[デフォルト実行ドメイン](../execution/default_domain.md)では無変換。
+[デフォルト実行ドメイン](default_domain.md)では無変換。
 
 - 呼び出し式`on(sch, sndr)` : [Scheduler](scheduler.md)`sch`に[関連付けられた実行ドメイン](query-or-default.md.nolink)
 - 呼び出し式`on(sndr, sch, closure)` : [Sender](sender.md)`sndr`に[関連付けられた実行ドメイン](get-domain-early.md)
 
 [Receiver](receiver.md)との[接続(connect)](connect.md)時に、[関連付けられた実行ドメイン](get-domain-late.md)に対して[`execution::transform_sender`](transform_sender.md)経由でSender変換が行われる。
-[デフォルト実行ドメイン](../execution/default_domain.md)では`on.transform_sender(out_sndr, env)`が呼ばれ、前述仕様通りのSenderへと変換される。
+[デフォルト実行ドメイン](default_domain.md)では`on.transform_sender(out_sndr, env)`が呼ばれ、前述仕様通りのSenderへと変換される。
 
 
 ### 呼び出し式 `on(sch, sndr)`
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>starts_on -- execution: when_all_with_variant (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/starts_on.html"/>
      <id>78b4c319e202ff61afaafdfc3a49381c973213d5:reference/execution/execution/starts_on.md</id>
      <updated>2025-05-26T16:21:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/starts_on.md b/reference/execution/execution/starts_on.md
index 169c24ac5..9b7603c13 100644
--- a/reference/execution/execution/starts_on.md
+++ b/reference/execution/execution/starts_on.md
@@ -68,10 +68,10 @@ transform_sender(
 
 ## カスタマイゼーションポイント
 Senderアルゴリズム構築時に、[Scheduler](scheduler.md)`sch`に[関連付けられた実行ドメイン](query-or-default.md.nolink)に対して[`execution::transform_sender`](transform_sender.md)経由でSender変換が行われる。
-[デフォルト実行ドメイン](../execution/default_domain.md)では無変換。
+[デフォルト実行ドメイン](default_domain.md)では無変換。
 
 [Receiver](receiver.md)との[接続(connect)](connect.md)時に、[関連付けられた実行ドメイン](get-domain-late.md)に対して[`execution::transform_sender`](transform_sender.md)経由でSender変換が行われる。
-[デフォルト実行ドメイン](../execution/default_domain.md)では`starts_on.transform_sender(out_sndr, env)`が呼ばれ、前述仕様通りのSenderへと変換される。
+[デフォルト実行ドメイン](default_domain.md)では`starts_on.transform_sender(out_sndr, env)`が呼ばれ、前述仕様通りのSenderへと変換される。
 
 説明用の式`out_sndr`を`starts_on(sch, sndr)`の戻り値[Sender](sender.md)とし、型`OutSndr`を`decltype((out_sndr))`とする。式`out_rcvr`を[`sender_in`](sender_in.md)`&amp;lt;OutSndr, Env&amp;gt; == true`となる[環境](../queryable.md)`Env`に関連付けられた[Receiver](receiver.md)とする。`out_sndr`と`out_rcvr`との[接続(connect)](connect.md)結果[Operation State](operation_state.md)への左辺値参照を`op`としたとき、
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>then -- execution: when_all_with_variant (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/then.html"/>
      <id>78b4c319e202ff61afaafdfc3a49381c973213d5:reference/execution/execution/then.md</id>
      <updated>2025-05-26T16:21:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/then.md b/reference/execution/execution/then.md
index 997e4288f..bdbbdb2a6 100644
--- a/reference/execution/execution/then.md
+++ b/reference/execution/execution/then.md
@@ -61,7 +61,7 @@ namespace std::execution {
 
 ## カスタマイゼーションポイント
 Senderアルゴリズム構築時および[Receiver](receiver.md)接続時に、関連付けられた実行ドメインに対して[`execution::transform_sender`](transform_sender.md)経由でSender変換が行われる。
-[デフォルト実行ドメイン](../execution/default_domain.md)では無変換。
+[デフォルト実行ドメイン](default_domain.md)では無変換。
 
 戻り値の[Sender](sender.md)`out_sndr`が下記を満たさない場合、呼び出し式`then(sndr, f)`の動作は未定義となる。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>when_all -- execution: when_all_with_variant (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/when_all.html"/>
      <id>78b4c319e202ff61afaafdfc3a49381c973213d5:reference/execution/execution/when_all.md</id>
      <updated>2025-05-26T16:21:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/when_all.md b/reference/execution/execution/when_all.md
index 9a727719a..d22c00b32 100644
--- a/reference/execution/execution/when_all.md
+++ b/reference/execution/execution/when_all.md
@@ -15,6 +15,9 @@ namespace std::execution {
 ## 概要
 `when_all`は、複数の入力[Sender](sender.md)が全て完了するまで待機するSenderアダプタである。
 
+`when_all`は全ての入力Senderが[値完了シグネチャ](set_value.md)を1個だけ持つことを要求する。
+値完了シグネチャが複数存在する場合は[`when_all_with_variant`](when_all_with_variant.md)アルゴリズムを利用する
+
 - 入力Sender全てが値完了のとき、全ての値完了結果を[`tuple`](/reference/tuple/tuple.md)に結合して値完了操作を行う。
 - いずれかがエラー完了のとき、同エラー値をもってエラー完了操作を行う。このとき停止要求が作成される。
 - いずれかが停止完了のとき、停止完了操作を行う。このとき停止要求が作成される。
@@ -85,7 +88,7 @@ namespace std::execution {
 ラムダ式は下記を満たすオブジェクト`e`を返す。
 
 - `decltype(e)`が[`queryable`](../queryable.md)のモデル、かつ
-- 式`e.query(`[`get_stop_token`](../get_stop_token.md)`)`が`state.stop-src.get_token()`と等価、かつ
+- 式`e.query(`[`get_stop_token`](../get_stop_token.md)`)`が`state.stop-src.`[`get_token()`](/reference/stop_token/inplace_stop_source/get_token.md)と等価、かつ
 - [`get_stop_token`](../get_stop_token.md)以外の[クエリオブジェクト](../queryable.md)`q`に対して、式`e.query(q)`は[`get_env`](get_env.md)`(rcvr).query(q)`と等価。
 
 `impls-for&amp;lt;when_all_t&amp;gt;::get-state`メンバは、下記ラムダ式と等価な関数呼び出し可能なオブジェクトで初期化される。
@@ -126,7 +129,7 @@ std::forward&amp;lt;Sndr&amp;gt;(sndr).apply(make-state&amp;lt;Rcvr&amp;gt;())
 * start[link start.md]
 * emplace[link /reference/optional/optional/emplace.md]
 * reset()[link /reference/optional/optional/reset.md]
-* stop_requested()[link /reference/stop_token/inplace_stop_token/stop_requested.md]
+* stop_requested()[link /reference/stop_token/inplace_stop_source/stop_requested.md]
 * std::move[link /reference/utility/move.md]
 
 `impls-for&amp;lt;when_all_t&amp;gt;::complete`メンバは、下記ラムダ式と等価な関数呼び出し可能なオブジェクトで初期化される。
@@ -320,7 +323,7 @@ variant&amp;lt;none-such, copy-fail, Es...&amp;gt;
 
 ## カスタマイゼーションポイント
 Senderアルゴリズム構築時および[Receiver](receiver.md)接続時に、関連付けられた実行ドメインに対して[`execution::transform_sender`](transform_sender.md)経由でSender変換が行われる。
-[デフォルト実行ドメイン](../execution/default_domain.md)では無変換。
+[デフォルト実行ドメイン](default_domain.md)では無変換。
 
 
 ## 例
@@ -471,7 +474,7 @@ error=-2
 
 
 ## 関連項目
-- [`execution::when_all_with_variant`](when_all_with_variant.md.nolink)
+- [`execution::when_all_with_variant`](when_all_with_variant.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>when_all_with_variant -- execution: when_all_with_variant (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/when_all_with_variant.html"/>
      <id>78b4c319e202ff61afaafdfc3a49381c973213d5:reference/execution/execution/when_all_with_variant.md</id>
      <updated>2025-05-26T16:21:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/when_all_with_variant.md b/reference/execution/execution/when_all_with_variant.md
new file mode 100644
index 000000000..7aef2d143
--- /dev/null
+++ b/reference/execution/execution/when_all_with_variant.md
@@ -0,0 +1,185 @@
+# when_all_with_variant
+* execution[meta header]
+* cpo[meta id-type]
+* std::execution[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::execution {
+  struct when_all_with_variant_t { unspecified };
+  inline constexpr when_all_with_variant_t when_all_with_variant{};
+}
+```
+* unspecified[italic]
+
+## 概要
+`when_all_with_variant`は、複数の入力[Sender](sender.md)が全て完了するまで待機するSenderアダプタである。
+
+`when_all_with_variant`は入力Senderが複数の[値完了シグネチャ](set_value.md)を持つケースに対応する。
+全入力Senderの値完了シグネチャが1個だけの場合は[`when_all`](when_all.md)アルゴリズムを利用する
+
+- 入力Sender全てが値完了のとき、全ての値完了結果を[`variant`](/reference/variant/variant.md)の[`tuple`](/reference/tuple/tuple.md)に結合して値完了操作を行う。
+- いずれかがエラー完了のとき、同エラー値をもってエラー完了操作を行う。このとき停止要求が作成される。
+- いずれかが停止完了のとき、停止完了操作を行う。このとき停止要求が作成される。
+
+
+## 効果
+説明用のパック`sndrs`に対してパック`Sndrs`を`decltype((sndrs))...`としたとき、型`CD`を[`common_type_t`](/reference/type_traits/common_type.md)`&amp;lt;decltype(`[`get-domain-early`](get-domain-early.md)`(sndrs))...&amp;gt;`とする。
+
+下記いずれかが`true`となるとき、呼び出し式`when_all_with_variant(sndrs...)`は不適格となる。
+
+- `sizeof...(sndrs) == 0`、または
+- `(`[`sender`](sender.md)`&amp;lt;Sndrs&amp;gt; &amp;amp;&amp;amp; ...) == false`、または
+- 型`CD`が不適格
+
+そうでなければ、呼び出し式`when_all_with_variant(sndrs...)`は下記と等価。
+
+```cpp
+transform_sender(CD(), make-sender(when_all_with_variant, {}, sndrs...))
+```
+* transform_sender[link transform_sender.md]
+* make-sender[link make-sender.md]
+
+
+### Senderアルゴリズムタグ `when_all_with_variant`
+説明用の式`sndr`と`env`に対して、[`sender-for`](sender-for.md)`&amp;lt;decltype((sndr)), when_all_with_variant_t&amp;gt; == false`のとき、式`when_all_with_variant.transform_sender(sndr, env)`は不適格となる。
+
+そうでなければ、式`when_all_with_variant.transform_sender(sndr, env)`は下記と等価。
+
+```cpp
+auto&amp;amp;&amp;amp; [_, _, ...child] = sndr;
+return when_all(into_variant(std::forward_like&amp;lt;decltype((sndr))&amp;gt;(child))...);
+```
+* when_all[link when_all.md]
+* into_variant[link into_variant.md]
+
+
+## カスタマイゼーションポイント
+Senderアルゴリズム構築時に、関連付けられた実行ドメインに対して[`execution::transform_sender`](transform_sender.md)経由でSender変換が行われる。
+[デフォルト実行ドメイン](default_domain.md)では無変換。
+
+[Receiver](receiver.md)との[接続(connect)](connect.md)時に、関連付けられた実行ドメインに対して[`execution::transform_sender`](transform_sender.md)経由でSender変換が行われる。
+[デフォルト実行ドメイン](default_domain.md)では`when_all_with_variant.transform_sender(sndr, env)`が呼ばれ、前述仕様通りのSenderへと変換される。
+
+
+## 例
+```cpp example
+#include &amp;lt;print&amp;gt;
+#include &amp;lt;string&amp;gt;
+#include &amp;lt;execution&amp;gt;
+namespace ex = std::execution;
+
+// MySenderは下記いずれかの完了操作を行う
+//   値完了     set_value(int), set_value(string)
+//   エラー完了 set_error(int)
+struct MySender {
+  using sender_concept = ex::sender_t;
+  using completion_signatures = ex::completion_signatures&amp;lt;
+    ex::set_value_t(int),
+    ex::set_value_t(std::string),
+    ex::set_error_t(int)
+  &amp;gt;;
+
+  template &amp;lt;typename Rcvr&amp;gt;
+  struct state {
+    using operation_state_concept = ex::operation_state_t;
+
+    state(Rcvr rcvr, int val)
+      : rcvr_{std::move(rcvr)}, val_{val} {}
+
+    void start() noexcept {
+      using namespace std::string_literals;
+      switch (val_) {
+      case 1:
+        ex::set_value(std::move(rcvr_), 100);
+        break;
+      case 2:
+        ex::set_value(std::move(rcvr_), &amp;#34;C++&amp;#34;s);
+        break;
+      default:
+        ex::set_error(std::move(rcvr_), val_);
+        break;
+      }
+    }
+
+    Rcvr rcvr_;
+    int val_;
+  };
+
+  template &amp;lt;typename Rcvr&amp;gt;
+  auto connect(Rcvr rcvr) noexcept {
+    return state{std::move(rcvr), val_};
+  }
+
+  int val_;
+};
+
+int main()
+{
+  ex::sender auto snd1 = MySender{1};
+  ex::sender auto snd2 = MySender{2};
+  ex::sender auto sndr = ex::when_all_with_variant(snd1, snd2);
+
+  auto result = std::this_thread::sync_wait(sndr);
+  // result := optional&amp;lt;
+  //             tuple&amp;lt;
+  //               variant&amp;lt;tuple&amp;lt;int&amp;gt;, tuple&amp;lt;string&amp;gt;&amp;gt;,
+  //               variant&amp;lt;tuple&amp;lt;int&amp;gt;, tuple&amp;lt;string&amp;gt;&amp;gt;
+  //             &amp;gt;
+  //           &amp;gt;型
+
+  auto [val1, val2] = result.value();
+  // val1,val2 := variant&amp;lt;tuple&amp;lt;int&amp;gt;, tuple&amp;lt;string&amp;gt;&amp;gt;型
+
+  struct DumpVal {
+    void operator()(std::tuple&amp;lt;int&amp;gt; n) {
+      std::println(&amp;#34;(int) {}&amp;#34;, get&amp;lt;0&amp;gt;(n));
+    }
+    void operator()(std::tuple&amp;lt;std::string&amp;gt; s) {
+      std::println(&amp;#34;(str) {}&amp;#34;, get&amp;lt;0&amp;gt;(s));
+    }
+  };
+  std::visit(DumpVal{}, val1);
+  std::visit(DumpVal{}, val2);
+}
+```
+* ex::when_all_with_variant[color ff0000]
+* ex::sender_t[link sender.md]
+* ex::sender[link sender.md]
+* ex::completion_signatures[link completion_signatures.md]
+* ex::set_value_t[link set_value.md]
+* ex::set_value[link set_value.md]
+* ex::set_error_t[link set_error.md]
+* ex::set_error[link set_error.md]
+* ex::operation_state_t[link operation_state.md]
+* std::this_thread::sync_wait[link ../this_thread/sync_wait.md]
+* value()[link /reference/optional/optional/value.md]
+* std::move[link /reference/utility/move.md]
+* std::visit[link /reference/variant/visit.md]
+* get&amp;lt;0&amp;gt;[link /reference/tuple/tuple/get.md]
+
+### 出力
+```
+(int) 100
+(str) C++
+```
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution::when_all`](when_all.md)
+- [`execution::into_variant`](into_variant.md)
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>search_n -- algorithm/search_n : C++26波カッコ初期化に対応 #1311</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_search_n.html"/>
      <id>c3e940c055160eaa353060dafaff5a28b7aa2b09:reference/algorithm/ranges_search_n.md</id>
      <updated>2025-05-26T16:00:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_search_n.md b/reference/algorithm/ranges_search_n.md
index cd5c0b108..5d6bdd59f 100644
--- a/reference/algorithm/ranges_search_n.md
+++ b/reference/algorithm/ranges_search_n.md
@@ -5,7 +5,7 @@
 * cpp20[meta cpp]
 
 ```cpp
-namespace std::ranges {]
+namespace std::ranges {
   template &amp;lt;forward_iterator I,
             sentinel_for&amp;lt;I&amp;gt; S,
             class T,
@@ -19,6 +19,19 @@ namespace std::ranges {]
              const T&amp;amp; value,
              Pred pred = {},
              Proj proj = {}); // (1) C++20
+  template &amp;lt;forward_iterator I,
+            sentinel_for&amp;lt;I&amp;gt; S,
+            class Pred = ranges::equal_to,
+            class Proj = identity,
+            class T = projected_value_t&amp;lt;I, Proj&amp;gt;&amp;gt;
+    requires indirectly_comparable&amp;lt;I, const T*, Pred, Proj&amp;gt;
+  constexpr subrange&amp;lt;I&amp;gt;
+    search_n(I first,
+             S last,
+             iter_difference_t&amp;lt;I&amp;gt; count,
+             const T&amp;amp; value,
+             Pred pred = {},
+             Proj proj = {}); // (1) C++26
 
   template &amp;lt;forward_range R,
             class T,
@@ -31,6 +44,17 @@ namespace std::ranges {]
              const T&amp;amp; value,
              Pred pred = {},
              Proj proj = {}); // (2) C++20
+  template &amp;lt;forward_range R,
+            class Pred = ranges::equal_to,
+            class Proj = identity,
+            class T = projected_value_t&amp;lt;iterator_t&amp;lt;R&amp;gt;, Proj&amp;gt;&amp;gt;
+    requires indirectly_comparable&amp;lt;iterator_t&amp;lt;R&amp;gt;, const T*, Pred, Proj&amp;gt;
+  constexpr borrowed_subrange_t&amp;lt;R&amp;gt;
+    search_n(R&amp;amp;&amp;amp; r,
+             range_difference_t&amp;lt;R&amp;gt; count,
+             const T&amp;amp; value,
+             Pred pred = {},
+             Proj proj = {}); // (2) C++26
 }
 ```
 * forward_iterator[link /reference/iterator/forward_iterator.md]
@@ -61,7 +85,17 @@ namespace std::ranges {]
 最大で `last - first` 回の対応する比較もしくは述語が適用される。
 
 
+## 備考
+- (1), (2) :
+    - C++26 : パラメータ`value`として波カッコ初期化`{}`を受け付ける
+        ```cpp
+		    std::vector&amp;lt;T&amp;gt; v;
+        auto sr = std::ranges::search_n(v, 3, {a, b});
+        ```
+
+
 ## 例
+### 基本的な使い方
 ```cpp example
 #include &amp;lt;algorithm&amp;gt;
 #include &amp;lt;iostream&amp;gt;
@@ -90,14 +124,49 @@ int main() {
 }
 ```
 * std::ranges::search_n[color ff0000]
-* v.begin()[link /reference/vector/vector/begin.md]
 
-### 出力
+#### 出力
 ```
 found: index==5
 found: index==0
 ```
 
+### 波カッコ初期化を入力として使用する (C++26)
+```cpp example
+#include &amp;lt;algorithm&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+struct Point {
+  int x;
+  int y;
+
+  bool operator==(const Point&amp;amp; other) const = default;
+};
+
+int main() {
+  std::vector&amp;lt;Point&amp;gt; v = {
+	{1, 2},
+	{3, 4},
+    {3, 4},
+	{5, 6},
+  };
+
+  // 値が {3, 4} が2回連続している場所を探す
+  std::ranges::subrange sr = std::ranges::search_n(v, 2, {3, 4});
+  if (!sr.empty()) {
+    int index = std::distance(v.begin(), sr.begin());
+    std::cout &amp;lt;&amp;lt; &amp;#34;found: index==&amp;#34; &amp;lt;&amp;lt; index &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* std::ranges::search_n[color ff0000]
+
+#### 出力
+```
+found: index==1
+```
+
 
 ## 実装例
 ```cpp
@@ -163,3 +232,5 @@ inline constexpr search_n_impl search_n;
 
 ## 参照
 - [N4861 25 Algorithms library](https://timsong-cpp.github.io/cppwp/n4861/algorithms)
+- [P2248R8 Enabling list-initialization for algorithms](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2248r8.html)
+    - C++26で波カッコ初期化 (リスト初期化) に対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>search_n -- algorithm/search_n : C++26波カッコ初期化に対応 #1311</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/search_n.html"/>
      <id>c3e940c055160eaa353060dafaff5a28b7aa2b09:reference/algorithm/search_n.md</id>
      <updated>2025-05-26T16:00:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/search_n.md b/reference/algorithm/search_n.md
index 830f2e023..0bae94860 100644
--- a/reference/algorithm/search_n.md
+++ b/reference/algorithm/search_n.md
@@ -5,45 +5,87 @@
 
 ```cpp
 namespace std {
-  template&amp;lt;class ForwardIterator, class Size, class T&amp;gt;
+  template &amp;lt;class ForwardIterator,
+            class Size,
+            class T&amp;gt;
   ForwardIterator
     search_n(ForwardIterator first,
              ForwardIterator last,
              Size count,
              const T&amp;amp; value);       // (1) C++03
-
-  template&amp;lt;class ForwardIterator, class Size, class T&amp;gt;
+  template &amp;lt;class ForwardIterator,
+            class Size,
+            class T&amp;gt;
   constexpr ForwardIterator
     search_n(ForwardIterator first,
              ForwardIterator last,
              Size count,
              const T&amp;amp; value);       // (1) C++20
+  template &amp;lt;class ForwardIterator,
+            class Size,
+            class T = typename iterator_traits&amp;lt;ForwardIterator&amp;gt;::value_type&amp;gt;
+  constexpr ForwardIterator
+    search_n(ForwardIterator first,
+             ForwardIterator last,
+             Size count,
+             const T&amp;amp; value);       // (1) C++26
 
-  template&amp;lt;class ForwardIterator, class Size, class T, class BinaryPredicate&amp;gt;
+  template &amp;lt;class ForwardIterator,
+            class Size,
+            class T,
+            class BinaryPredicate&amp;gt;
   ForwardIterator
     search_n(ForwardIterator first,
              ForwardIterator last,
              Size count,
              const T&amp;amp; value,
              BinaryPredicate pred); // (2) C++03
-
-  template&amp;lt;class ForwardIterator, class Size, class T, class BinaryPredicate&amp;gt;
+  template &amp;lt;class ForwardIterator,
+            class Size,
+            class T,
+            class BinaryPredicate&amp;gt;
   constexpr ForwardIterator
     search_n(ForwardIterator first,
              ForwardIterator last,
              Size count,
              const T&amp;amp; value,
              BinaryPredicate pred); // (2) C++20
+  template &amp;lt;class ForwardIterator,
+            class Size,
+            class T = typename iterator_traits&amp;lt;ForwardIterator&amp;gt;::value_type,
+            class BinaryPredicate&amp;gt;
+  constexpr ForwardIterator
+    search_n(ForwardIterator first,
+             ForwardIterator last,
+             Size count,
+             const T&amp;amp; value,
+             BinaryPredicate pred); // (2) C++26
 
-  template &amp;lt;class ExecutionPolicy, class ForwardIterator, class Size, class T&amp;gt;
+  template &amp;lt;class ExecutionPolicy,
+            class ForwardIterator,
+            class Size,
+            class T&amp;gt;
   ForwardIterator
     search_n(ExecutionPolicy&amp;amp;&amp;amp; exec,
              ForwardIterator first,
              ForwardIterator last,
              Size count,
              const T&amp;amp; value);       // (3) C++17
+  template &amp;lt;class ExecutionPolicy,
+            class ForwardIterator,
+            class Size,
+            class T = typename iterator_traits&amp;lt;ForwardIterator&amp;gt;::value_type&amp;gt;
+  ForwardIterator
+    search_n(ExecutionPolicy&amp;amp;&amp;amp; exec,
+             ForwardIterator first,
+             ForwardIterator last,
+             Size count,
+             const T&amp;amp; value);       // (3) C++26
 
-  template &amp;lt;class ExecutionPolicy, class ForwardIterator, class Size, class T,
+  template &amp;lt;class ExecutionPolicy,
+            class ForwardIterator,
+            class Size,
+            class T,
             class BinaryPredicate&amp;gt;
   ForwardIterator
     search_n(ExecutionPolicy&amp;amp;&amp;amp; exec,
@@ -52,14 +94,31 @@ namespace std {
              Size count,
              const T&amp;amp; value,
              BinaryPredicate pred); // (4) C++17
+  template &amp;lt;class ExecutionPolicy,
+            class ForwardIterator,
+            class Size,
+            class T = typename iterator_traits&amp;lt;ForwardIterator&amp;gt;::value_type,
+            class BinaryPredicate&amp;gt;
+  ForwardIterator
+    search_n(ExecutionPolicy&amp;amp;&amp;amp; exec,
+             ForwardIterator first,
+             ForwardIterator last,
+             Size count,
+             const T&amp;amp; value,
+             BinaryPredicate pred); // (4) C++26
 }
 ```
 
 ## 概要
 あるシーケンスの中から、特定のサブシーケンスを探す。
 
+- (1): イテレータ範囲`[first, last)`から、値`value`が`count`回連続しているサブシーケンスを検索する
+- (2): イテレータ範囲`[first, last)`から、`pred(*it, value) == true`となる要素が`count`回連続しているサブシーケンスを検索する
+- (3): 実行ポリシーにしたがって、イテレータ範囲`[first, last)`から、値`value`が`count`回連続しているサブシーケンスを検索する
+- (4): 実行ポリシーにしたがって、イテレータ範囲`[first, last)`から、`pred(*it, value) == true`となる要素が`count`回連続しているサブシーケンスを検索する
 
-## 要件
+
+## 適格要件
 `Size`は整数型に変換できる型である必要がある。
 
 
@@ -73,7 +132,17 @@ namespace std {
 最大で `last - first` 回の対応する比較もしくは述語が適用される。
 
 
+## 備考
+- (1), (2), (3), (4) :
+    - C++26 : パラメータ`value`として波カッコ初期化`{}`を受け付ける
+        ```cpp
+		    std::vector&amp;lt;T&amp;gt; v;
+        auto it = std::search_n(v.begin(), v.begin(), 3, {a, b});
+        ```
+
+
 ## 例
+### 基本的な使い方
 ```cpp example
 #include &amp;lt;algorithm&amp;gt;
 #include &amp;lt;iostream&amp;gt;
@@ -105,12 +174,48 @@ int main() {
 * v.cbegin()[link /reference/vector/vector/cbegin.md]
 * v.cend()[link /reference/vector/vector/cend.md]
 
-### 出力
+#### 出力
 ```
 found: index==5
 found: index==0
 ```
 
+### 波カッコ初期化を入力として使用する (C++26)
+```cpp example
+#include &amp;lt;algorithm&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+struct Point {
+  int x;
+  int y;
+
+  bool operator==(const Point&amp;amp; other) const = default;
+};
+
+int main() {
+  std::vector&amp;lt;Point&amp;gt; v = {
+	{1, 2},
+	{3, 4},
+    {3, 4},
+	{5, 6},
+  };
+
+  // 値が {3, 4} が2回連続している場所を探す
+  auto it = std::search_n(v.begin(), v.end(), 2, {3, 4});
+  if (it != v.end()) {
+    int index = std::distance(v.begin(), it);
+    std::cout &amp;lt;&amp;lt; &amp;#34;found: index==&amp;#34; &amp;lt;&amp;lt; index &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* std::search_n[color ff0000]
+
+#### 出力
+```
+found: index==1
+```
+
 
 ## 実装例
 ```cpp
@@ -171,3 +276,5 @@ ForwardIterator search_n(ForwardIterator first, ForwardIterator last,
 - [LWG Issue 714. `search_n` complexity is too lax](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#714)
 - [LWG Issue 2150. Unclear specification of `find_end`](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2150)
 - [P0202R3 Add Constexpr Modifiers to Functions in `&amp;lt;algorithm&amp;gt;` and `&amp;lt;utility&amp;gt;` Headers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0202r3.html)
+- [P2248R8 Enabling list-initialization for algorithms](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2248r8.html)
+    - C++26で波カッコ初期化 (リスト初期化) に対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>count -- algorithm/count : C++26波カッコ初期化に対応 #1311</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/count.html"/>
      <id>f6a62c4c715293615895a7af474f7b979edb31d6:reference/algorithm/count.md</id>
      <updated>2025-05-26T15:59:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/count.md b/reference/algorithm/count.md
index d8ae4e993..8a9e8ba34 100644
--- a/reference/algorithm/count.md
+++ b/reference/algorithm/count.md
@@ -5,24 +5,41 @@
 
 ```cpp
 namespace std {
-  template &amp;lt;class InputIterator, class T&amp;gt;
+  template &amp;lt;class InputIterator,
+            class T&amp;gt;
   typename iterator_traits&amp;lt;InputIterator&amp;gt;::difference_type
     count(InputIterator first,
           InputIterator last,
           const T&amp;amp; value);     // (1) C++03
-
-  template &amp;lt;class InputIterator, class T&amp;gt;
+  template &amp;lt;class InputIterator,
+            class T&amp;gt;
   constexpr typename iterator_traits&amp;lt;InputIterator&amp;gt;::difference_type
     count(InputIterator first,
           InputIterator last,
           const T&amp;amp; value);     // (1) C++20
+  template &amp;lt;class InputIterator,
+            class T = typename iterator_traits&amp;lt;InputIterator&amp;gt;::value_type&amp;gt;
+  constexpr typename iterator_traits&amp;lt;InputIterator&amp;gt;::difference_type
+    count(InputIterator first,
+          InputIterator last,
+          const T&amp;amp; value);     // (1) C++26
 
-  template&amp;lt;class ExecutionPolicy, class ForwardIterator, class T&amp;gt;
+  template &amp;lt;class ExecutionPolicy,
+            class ForwardIterator,
+            class T&amp;gt;
   typename iterator_traits&amp;lt;ForwardIterator&amp;gt;::difference_type
     count(ExecutionPolicy&amp;amp;&amp;amp; exec,
           ForwardIterator first,
           ForwardIterator last,
           const T&amp;amp; value);     // (2) C++17
+  template &amp;lt;class ExecutionPolicy,
+            class ForwardIterator,
+            class T = typename iterator_traits&amp;lt;ForwardIterator&amp;gt;::value_type&amp;gt;
+  typename iterator_traits&amp;lt;ForwardIterator&amp;gt;::difference_type
+    count(ExecutionPolicy&amp;amp;&amp;amp; exec,
+          ForwardIterator first,
+          ForwardIterator last,
+          const T&amp;amp; value);     // (2) C++16
 }
 ```
 * iterator_traits[link /reference/iterator/iterator_traits.md]
@@ -39,7 +56,16 @@ namespace std {
 正確に `last - first` 回の比較を行う
 
 
+## 備考
+- (1), (2) :
+    - C++26 : 引数として波カッコ初期化`{}`を受け付ける
+        ```cpp
+		    std::vector&amp;lt;T&amp;gt; v;
+        int n = std::count(v.begin(), v.begin(), {a, b});
+        ```
+
 ## 例
+### 基本的な使い方
 ```cpp example
 #include &amp;lt;algorithm&amp;gt;
 #include &amp;lt;iostream&amp;gt;
@@ -49,16 +75,50 @@ int main() {
   std::vector&amp;lt;int&amp;gt; v = { 1,4,3,3,1,2,2,1 };
 
   // 値が 1 の要素がいくつあるかを数える
-  std::cout &amp;lt;&amp;lt; &amp;#34;count of 1: &amp;#34; &amp;lt;&amp;lt; std::count(v.begin(), v.end(), 1) &amp;lt;&amp;lt; std::endl;
+  int n = std::count(v.begin(), v.end(), 1);
+  std::cout &amp;lt;&amp;lt; &amp;#34;count of 1: &amp;#34; &amp;lt;&amp;lt; n &amp;lt;&amp;lt; std::endl;
 }
 ```
 * std::count[color ff0000]
 
-### 出力
+#### 出力
 ```
 count of 1: 3
 ```
 
+### 波カッコ初期化を入力として使用する (C++26)
+```cpp example
+#include &amp;lt;algorithm&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+struct Point {
+  int x;
+  int y;
+
+  bool operator==(const Point&amp;amp; other) const = default;
+};
+
+int main() {
+  std::vector&amp;lt;Point&amp;gt; v = {
+    {1, 2},
+    {3, 4},
+    {5, 6},
+    {1, 2},
+  };
+
+  // 値が {1, 2} の要素がいくつあるかを数える
+  int n = std::count(v.begin(), v.end(), {1, 2});
+  std::cout &amp;lt;&amp;lt; &amp;#34;count of {1,2}: &amp;#34; &amp;lt;&amp;lt; n &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::count[color ff0000]
+
+#### 出力
+```
+count of {1,2}: 2
+```
+
 
 ## 実装例
 ```cpp
@@ -85,3 +145,5 @@ typename iterator_traits&amp;lt;InputIterator&amp;gt;::difference_type
 ## 参照
 - [P0202R3 Add Constexpr Modifiers to Functions in `&amp;lt;algorithm&amp;gt;` and `&amp;lt;utility&amp;gt;` Headers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0202r3.html)
 - [P0467R2 Iterator Concerns for Parallel Algorithms](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0467r2.html)
+- [P2248R8 Enabling list-initialization for algorithms](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2248r8.html)
+    - C++26で波カッコ初期化 (リスト初期化) に対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>count -- algorithm/count : C++26波カッコ初期化に対応 #1311</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_count.html"/>
      <id>f6a62c4c715293615895a7af474f7b979edb31d6:reference/algorithm/ranges_count.md</id>
      <updated>2025-05-26T15:59:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_count.md b/reference/algorithm/ranges_count.md
index 95b91a81a..ef745e41e 100644
--- a/reference/algorithm/ranges_count.md
+++ b/reference/algorithm/ranges_count.md
@@ -12,14 +12,37 @@ namespace std::ranges {
             class Proj = identity&amp;gt;
     requires indirect_binary_predicate&amp;lt;ranges::equal_to, projected&amp;lt;I, Proj&amp;gt;, const T*&amp;gt;
   constexpr iter_difference_t&amp;lt;I&amp;gt;
-    count(I first, S last, const T&amp;amp; value, Proj proj = {}); // (1) C++20
+    count(I first,
+          S last,
+          const T&amp;amp; value,
+          Proj proj = {}); // (1) C++20
+  template &amp;lt;input_iterator I,
+            sentinel_for&amp;lt;I&amp;gt; S,
+            class Proj = identity,
+            class T = projected_value_t&amp;lt;I, Proj&amp;gt;&amp;gt;
+    requires indirect_binary_predicate&amp;lt;ranges::equal_to, projected&amp;lt;I, Proj&amp;gt;, const T*&amp;gt;
+  constexpr iter_difference_t&amp;lt;I&amp;gt;
+    count(I first,
+          S last,
+          const T&amp;amp; value,
+          Proj proj = {}); // (1) C++26
 
   template &amp;lt;input_range R,
             class T,
             class Proj = identity&amp;gt;
     requires indirect_binary_predicate&amp;lt;ranges::equal_to, projected&amp;lt;iterator_t&amp;lt;R&amp;gt;, Proj&amp;gt;, const T*&amp;gt;
   constexpr range_difference_t&amp;lt;R&amp;gt;
-    count(R&amp;amp;&amp;amp; r, const T&amp;amp; value, Proj proj = {});           // (2) C++20
+    count(R&amp;amp;&amp;amp; r,
+          const T&amp;amp; value,
+          Proj proj = {}); // (2) C++20
+  template &amp;lt;input_range R,
+            class Proj = identity,
+            class T = projected_value_t&amp;lt;iterator_t&amp;lt;R&amp;gt;, Proj&amp;gt;&amp;gt;
+    requires indirect_binary_predicate&amp;lt;ranges::equal_to, projected&amp;lt;iterator_t&amp;lt;R&amp;gt;, Proj&amp;gt;, const T*&amp;gt;
+  constexpr range_difference_t&amp;lt;R&amp;gt;
+    count(R&amp;amp;&amp;amp; r,
+          const T&amp;amp; value,
+          Proj proj = {}); // (2) C++26
 }
 ```
 * input_iterator[link /reference/iterator/input_iterator.md]
@@ -55,7 +78,17 @@ namespace std::ranges {
 正確に `last - first` 回の比較を行う
 
 
+## 備考
+- (1), (2) :
+    - C++26 : 引数として波カッコ初期化`{}`を受け付ける
+        ```cpp
+		    std::vector&amp;lt;T&amp;gt; v;
+        int n = std::ranges::count(v, {a, b});
+        ```
+
+
 ## 例
+### 基本的な使い方
 ```cpp example
 #include &amp;lt;algorithm&amp;gt;
 #include &amp;lt;iostream&amp;gt;
@@ -65,16 +98,50 @@ int main() {
   constexpr std::array v = { 1,4,3,3,1,2,2,1 };
 
   // 値が 1 の要素がいくつあるかを数える
-  std::cout &amp;lt;&amp;lt; &amp;#34;count of 1: &amp;#34; &amp;lt;&amp;lt; std::ranges::count(v, 1) &amp;lt;&amp;lt; std::endl;
+  int n = std::ranges::count(v, 1);
+  std::cout &amp;lt;&amp;lt; &amp;#34;count of 1: &amp;#34; &amp;lt;&amp;lt; n &amp;lt;&amp;lt; std::endl;
 }
 ```
 * std::ranges::count[color ff0000]
 
-### 出力
+#### 出力
 ```
 count of 1: 3
 ```
 
+### 波カッコ初期化を入力として使用する (C++26)
+```cpp example
+#include &amp;lt;algorithm&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+struct Point {
+  int x;
+  int y;
+
+  bool operator==(const Point&amp;amp; other) const = default;
+};
+
+int main() {
+  std::vector&amp;lt;Point&amp;gt; v = {
+	{1, 2},
+	{3, 4},
+	{5, 6},
+    {1, 2},
+  };
+
+  // 値が {1, 2} の要素がいくつあるかを数える
+  int n = std::ranges::count(v, {1, 2});
+  std::cout &amp;lt;&amp;lt; &amp;#34;count of {1,2}: &amp;#34; &amp;lt;&amp;lt; n &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::ranges::count[color ff0000]
+
+#### 出力
+```
+count of {1,2}: 2
+```
+
 
 ## 実装例
 ```cpp
@@ -124,3 +191,5 @@ inline constexpr count_impl count;
 
 ## 参照
 - [N4861 25 Algorithms library](https://timsong-cpp.github.io/cppwp/n4861/algorithms)
+- [P2248R8 Enabling list-initialization for algorithms](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2248r8.html)
+    - C++26で波カッコ初期化 (リスト初期化) に対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>畳み込み式 [N4295] -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/folding_expressions.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:lang/cpp17/folding_expressions.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/folding_expressions.md b/lang/cpp17/folding_expressions.md
index 080253f9b..a6feba34f 100644
--- a/lang/cpp17/folding_expressions.md
+++ b/lang/cpp17/folding_expressions.md
@@ -28,7 +28,7 @@
 
 * 畳み込み式はカッコ `()` で囲まれなければならない
 * `op` は後述する二項演算子  
-    二項畳み込み (3)(4) の場合 `op` は同一でなければならない
+    二項畳み込み (3), (4) の場合 `op` は同一でなければならない
 * `pack` は未展開のパラメータパック (規格ではキャスト式 cast-expression と呼ばれる)
 * `init` は未展開のパラメータパック以外 (規格ではキャスト式 cast-expression と呼ばれる)
 * 畳み込み式は以下のように展開される:
@@ -81,7 +81,7 @@
 
 ### パラメータパックが空のときの式の値
 
-単項畳み込み (1)(2) でパラメータパックが空の場合、以下の演算子については式の値が設定される:
+単項畳み込み (1), (2) でパラメータパックが空の場合、以下の演算子については式の値が設定される:
 
 | 演算子 | 値 |
 |------|------|
@@ -91,7 +91,7 @@
 
 上記以外の演算子に対し空のパラメータパックが適用された場合、プログラムは不適格となる。
 
-空のパラメータパックが適用された場合の挙動を変えるには二項畳み込み (3)(4) で値を与える。
+空のパラメータパックが適用された場合の挙動を変えるには二項畳み込み (3), (4) で値を与える。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>equal -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/equal.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/algorithm/equal.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/equal.md b/reference/algorithm/equal.md
index 513364df0..913ea9a08 100644
--- a/reference/algorithm/equal.md
+++ b/reference/algorithm/equal.md
@@ -112,7 +112,7 @@ namespace std {
 
 
 ## 備考
-- ランダムアクセスイテレータの範囲を使用する場合、状況によっては(1) (2)のバージョンよりも、(3) (4)を使用する方が効率がよくなることが期待できる。ランダムアクセスイテレータはイテレータ同士の差を定数時間で求められるため、イテレーションを行うことなく2つの範囲の要素数が異なることを検出できるためである
+- ランダムアクセスイテレータの範囲を使用する場合、状況によっては(1), (2)のバージョンよりも、(3), (4)を使用する方が効率がよくなることが期待できる。ランダムアクセスイテレータはイテレータ同士の差を定数時間で求められるため、イテレーションを行うことなく2つの範囲の要素数が異なることを検出できるためである
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>fold_right -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_fold_right.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/algorithm/ranges_fold_right.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_fold_right.md b/reference/algorithm/ranges_fold_right.md
index ea0c5ef57..96a13edc2 100644
--- a/reference/algorithm/ranges_fold_right.md
+++ b/reference/algorithm/ranges_fold_right.md
@@ -88,7 +88,7 @@ public:
 
 ## 戻り値
 
-(1)(2)ともに、以下と等価
+(1), (2)ともに、以下と等価
 
 ```cpp
 using U = decay_t&amp;lt;invoke_result_t&amp;lt;F&amp;amp;, iter_reference_t&amp;lt;I&amp;gt;, T&amp;gt;&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>fold_right_last -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_fold_right_last.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/algorithm/ranges_fold_right_last.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_fold_right_last.md b/reference/algorithm/ranges_fold_right_last.md
index 0aaef5472..1e15b1e59 100644
--- a/reference/algorithm/ranges_fold_right_last.md
+++ b/reference/algorithm/ranges_fold_right_last.md
@@ -52,7 +52,7 @@ namespace std::ranges {
 
 ## 戻り値
 
-(1)(2)ともに、以下と等価
+(1), (2)ともに、以下と等価
 
 ```cpp
 using U = decay_t&amp;lt;invoke_result_t&amp;lt;F&amp;amp;, iter_reference_t&amp;lt;I&amp;gt;, T&amp;gt;&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>search -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/search.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/algorithm/search.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/search.md b/reference/algorithm/search.md
index ab73e1014..a131fca3f 100644
--- a/reference/algorithm/search.md
+++ b/reference/algorithm/search.md
@@ -97,7 +97,7 @@ namespace std {
 
 
 ## 備考
-- (1)〜(4) : `search()` と [`find_end()`](find_end.md) は共にサブシーケンスを検索する関数だが、以下の点が異なる。
+- (1)-(4) : `search()` と [`find_end()`](find_end.md) は共にサブシーケンスを検索する関数だが、以下の点が異なる。
     - `search()` は見つかった最初のサブシーケンスを返すが [`find_end()`](find_end.md) は見つかった最後のサブシーケンスを返す
     - `[first2,last2)` が空であるときに `search()` は `first1` を返すが、[`find_end()`](find_end.md) は `last1` を返す
 - (5) : `Searcher`は[`std::copy_constructible`](/reference/concepts/copy_constructible.md)要件を満たす必要はない
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>any_cast -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/any/any_cast.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/any/any_cast.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/any/any_cast.md b/reference/any/any_cast.md
index bed411190..f4c65910d 100644
--- a/reference/any/any_cast.md
+++ b/reference/any/any_cast.md
@@ -37,7 +37,7 @@ namespace std {
 - (1) : [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;T, const U&amp;amp;&amp;gt; == true`であること。そうでない場合、プログラムは不適格となる
 - (2) : [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;T, U&amp;amp;&amp;gt; == true`であること。そうでない場合、プログラムは不適格となる
 - (3) : [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;T, U&amp;gt; == true`であること。そうでない場合、プログラムは不適格となる
-- (4)(5) : [`is_void_v`](/reference/type_traits/is_void.md)`&amp;lt;T&amp;gt; == false`であること
+- (4), (5) : [`is_void_v`](/reference/type_traits/is_void.md)`&amp;lt;T&amp;gt; == false`であること
     - C++26から
 
 ## 効果
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>from_chars -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/charconv/from_chars.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/charconv/from_chars.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/charconv/from_chars.md b/reference/charconv/from_chars.md
index f0581a3f3..03215c68a 100644
--- a/reference/charconv/from_chars.md
+++ b/reference/charconv/from_chars.md
@@ -62,7 +62,7 @@ C++標準はこれら関数の実装の詳細について何も規定しない
 ## 要件
 - 全て : 入力イテレータ範囲`[first, last)`は有効な範囲であること（charのオブジェクトが構築済みであり、連続していること）。
 - (1) : `base`は2～36までの値であること。
-- (2)～(4)  : `fmt`は[`chars_format`](../charconv/chars_format.md)の列挙値のうちの一つであること。
+- (2)-(4)  : `fmt`は[`chars_format`](../charconv/chars_format.md)の列挙値のうちの一つであること。
 
 ## 引数
 - `first` -- 入力文字列の先頭ポインタ。
@@ -80,7 +80,7 @@ C++標準はこれら関数の実装の詳細について何も規定しない
     nを基数としたCロケールによる`strtol`で変換する際と同様のパターンを用いる。  
     ただし、`value`の型が符号付である場合にのみ`-`は考慮され、`+`や16進数の`0x`等の他の記号は考慮されない。
     
-- (2)～(5) : 浮動小数点数字列を浮動小数点数へ変換する。  
+- (2)-(5) : 浮動小数点数字列を浮動小数点数へ変換する。  
     Cロケールによる`strtod`で変換する際と同様のパターンを用いる。ただし、以下の違いがある。  
     数字の先頭の符号は`-`のみが考慮され、`+`等は考慮されない。  
     また、`fmt`に`chars_format::general`が設定されておらず（`scientific`と`fixed`が同時に設定されておらず）
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>to_chars -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/charconv/to_chars.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/charconv/to_chars.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/charconv/to_chars.md b/reference/charconv/to_chars.md
index a337df453..26417c913 100644
--- a/reference/charconv/to_chars.md
+++ b/reference/charconv/to_chars.md
@@ -119,7 +119,7 @@ C++標準はこれら関数の実装の詳細について何も規定しない
 ## 要件
 - 全て : 出力イテレータ範囲`[first, last)`は有効な範囲であること（charのオブジェクトが構築済みであり、連続していること）。
 - (1) : `base`は2～36までの値であること。
-- (6)～(13)  : `fmt`は[`chars_format`](../charconv/chars_format.md)の列挙値のうちの一つであること。
+- (6)-(13)  : `fmt`は[`chars_format`](../charconv/chars_format.md)の列挙値のうちの一つであること。
 
 ## 引数
 - `first` -- 変換結果の文字列を出力する範囲の先頭ポインタ。
@@ -137,14 +137,14 @@ C++標準はこれら関数の実装の詳細について何も規定しない
     10 &amp;lt; nの場合、10～35の値はアルファベットの小文字a～zがあてられる。  
     桁数を合わせるために左側を0をパディングすること（0埋め）は行われない。
     
-- (2)(3)(4)(5) : Cロケールで`printf`によって行われたかのように浮動小数点数を文字列へ変換する。  
+- (2), (3), (4), (5) : Cロケールで`printf`によって行われたかのように浮動小数点数を文字列へ変換する。  
     フォーマット指定子は`%f,%e`どちらかを出力文字列が最も短くなるように（両者が同じなら`%f`が優先）選択する。
     
-- (6)(7)(8)(9) : `fmt`によって指定されたフォーマット指定子を用いて、Cロケールで`printf`によって行われたかのように浮動小数点数を文字列へ変換する。  
+- (6), (7), (8), (9) : `fmt`によって指定されたフォーマット指定子を用いて、Cロケールで`printf`によって行われたかのように浮動小数点数を文字列へ変換する。  
     出力文字列が最も短くなるように変換される。  
-    `chars_format::general`が指定された場合は(2)(3)(4)(5)と同等。
+    `chars_format::general`が指定された場合は(2), (3), (4), (5)と同等。
     
-- (10)(11)(12)(13) : `fmt`と`precision`によって指定されたフォーマット指定子と精度を用いて、Cロケールで`printf`によって行われたかのように浮動小数点数を文字列へ変換する。  
+- (10), (11), (12), (13) : `fmt`と`precision`によって指定されたフォーマット指定子と精度を用いて、Cロケールで`printf`によって行われたかのように浮動小数点数を文字列へ変換する。  
     精度は、`chars_format::fixed`では小数点以下の正確な桁数、`chars_format::scientific`と`chars_format::hex`では最小の桁数を表す。  
     `chars_format::general`が指定された場合は次のようになる。
     - 指数表記したときの指数を`X`、`precision`と1の大きいほうを`P`とする。
@@ -176,7 +176,7 @@ C++標準はこれら関数の実装の詳細について何も規定しない
 ## 備考
 - MSVCでは浮動小数点数→10進文字列変換の実装に[Ryu](https://github.com/ulfjack/ryu)というアルゴリズムを利用している。
 - (1) : 実装によって全ての整数型（符号付、無し）および`char`のオーバーロードが提供される
-- (5)(9)(13) : 浮動小数点数型は拡張浮動小数点数型を含む
+- (5), (9), (13) : 浮動小数点数型は拡張浮動小数点数型を含む
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>abs -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/cmath/abs.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/cmath/abs.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/abs.md b/reference/cmath/abs.md
index 52d2b8bda..12397ef4e 100644
--- a/reference/cmath/abs.md
+++ b/reference/cmath/abs.md
@@ -51,7 +51,7 @@ namespace std {
 ## 備考
 - $$ f(x) = | x | $$
 - 任意の整数型に対するオーバーロード(5)は C++11 で追加されたが、[一部の符号なし整数型に対して問題を引き起こす](http://wg21.cmeerw.net/lwg/issue2192)ことから C++17 で削除され、符号付き整数型に対するオーバーロード(6), (7), (8)が追加された
-- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+- C++23では、(1), (2), (3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>acos -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/cmath/acos.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/cmath/acos.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/acos.md b/reference/cmath/acos.md
index ec8954c95..ec36db7eb 100644
--- a/reference/cmath/acos.md
+++ b/reference/cmath/acos.md
@@ -59,7 +59,7 @@ namespace std {
 - C++11 以降では、処理系が IEC 60559 に準拠している場合（[`std::numeric_limits`](../limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`is_iec559`](../limits/numeric_limits/is_iec559.md)`() != false`）、以下の規定が追加される。
     - `x = 1` の場合、戻り値は `+0` となる。
     - `x &amp;gt; |1|` の場合、戻り値は quiet NaN となり、[`FE_INVALID`](../cfenv/fe_invalid.md)（無効演算浮動小数点例外）が発生する。
-- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+- C++23では、(1), (2), (3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>acosh -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/cmath/acosh.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/cmath/acosh.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/acosh.md b/reference/cmath/acosh.md
index 37351dd1a..24648e456 100644
--- a/reference/cmath/acosh.md
+++ b/reference/cmath/acosh.md
@@ -59,7 +59,7 @@ namespace std {
     - `x = 1` の場合、戻り値は `+0` となる。
     - `x &amp;lt; 1` の場合、戻り値は quiet NaN となり、[`FE_INVALID`](../cfenv/fe_invalid.md)（無効演算浮動小数点例外）が発生する。
     - `x = +∞` の場合、戻り値は `+∞` となる。
-- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+- C++23では、(1), (2), (3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>asin -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/cmath/asin.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/cmath/asin.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/asin.md b/reference/cmath/asin.md
index aed3a97b7..bd4645e54 100644
--- a/reference/cmath/asin.md
+++ b/reference/cmath/asin.md
@@ -59,7 +59,7 @@ namespace std {
 - C++11 以降では、処理系が IEC 60559 に準拠している場合（[`std::numeric_limits`](../limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`is_iec559`](../limits/numeric_limits/is_iec559.md)`() != false`）、以下の規定が追加される。
     - `x = ±0` の場合、戻り値は `±0` となる。（複号同順）
     - `x &amp;gt; |1|` の場合、戻り値は quiet NaN となり、[`FE_INVALID`](../cfenv/fe_invalid.md)（無効演算浮動小数点例外）が発生する。
-- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+- C++23では、(1), (2), (3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>asinh -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/cmath/asinh.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/cmath/asinh.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/asinh.md b/reference/cmath/asinh.md
index 744ff3e8f..086f25b22 100644
--- a/reference/cmath/asinh.md
+++ b/reference/cmath/asinh.md
@@ -55,7 +55,7 @@ namespace std {
 - 処理系が IEC 60559 に準拠している場合（[`std::numeric_limits`](../limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`is_iec559`](../limits/numeric_limits/is_iec559.md)`() != false`）、以下の規定が追加される。（複号同順）
     - `x = ±0` の場合、戻り値は `±0` となる。
     - `x = ±∞` の場合、戻り値は `±∞` となる。
-- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+- C++23では、(1), (2), (3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atan -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/cmath/atan.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/cmath/atan.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/atan.md b/reference/cmath/atan.md
index 2fa1667e7..06612bb69 100644
--- a/reference/cmath/atan.md
+++ b/reference/cmath/atan.md
@@ -46,7 +46,7 @@ namespace std {
 - C++11 以降では、処理系が IEC 60559 に準拠している場合（[`std::numeric_limits`](../limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`is_iec559`](../limits/numeric_limits/is_iec559.md)`() != false`）、以下の規定が追加される。
     - `x = ±0` の場合、戻り値は `±0` となる。（複号同順）
     - `x = ±∞` の場合、戻り値は `±π/2` となる。（複号同順）
-- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+- C++23では、(1), (2), (3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atan2 -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/cmath/atan2.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/cmath/atan2.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/atan2.md b/reference/cmath/atan2.md
index 2cb6bf45b..51087c783 100644
--- a/reference/cmath/atan2.md
+++ b/reference/cmath/atan2.md
@@ -81,7 +81,7 @@ namespace std {
     - `y = ±∞` で `x = +∞` の場合、戻り値は `±π/4` となる。
 
     特に、`y` と `x` の両方がゼロの場合に定義域エラー（[`FE_INVALID`](../cfenv/fe_invalid.md)（無効演算浮動小数点例外））となったり、`y` が非ゼロで `x` がゼロの場合に極エラー（[`FE_DIVBYZERO`](../cfenv/fe_divbyzero.md)（ゼロ除算浮動小数点例外））となったりは**しない**事に注意。
-- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+- C++23では、(1), (2), (3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atanh -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/cmath/atanh.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/cmath/atanh.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/atanh.md b/reference/cmath/atanh.md
index 0233b76ca..76787833a 100644
--- a/reference/cmath/atanh.md
+++ b/reference/cmath/atanh.md
@@ -59,7 +59,7 @@ namespace std {
     - `x = ±0` の場合、戻り値は `±0` となる。
     - `x = ±1` の場合、戻り値は `±∞` となり、[`FE_DIVBYZERO`](../cfenv/fe_divbyzero.md)（ゼロ除算浮動小数点例外）が発生する。
     - `|x| &amp;gt; 1` の場合、戻り値は NaN となり、[`FE_INVALID`](../cfenv/fe_invalid.md)（無効演算浮動小数点例外）が発生する。
-- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+- C++23では、(1), (2), (3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cbrt -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/cmath/cbrt.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/cmath/cbrt.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/cbrt.md b/reference/cmath/cbrt.md
index 07cb2f3f4..9db2a6277 100644
--- a/reference/cmath/cbrt.md
+++ b/reference/cmath/cbrt.md
@@ -55,7 +55,7 @@ namespace std {
 - C++11 以降では、処理系が IEC 60559 に準拠している場合（[`std::numeric_limits`](../limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`is_iec559`](../limits/numeric_limits/is_iec559.md)`() != false`）、以下の規定が追加される。（複号同順）
     - `x = ±0` の場合、戻り値は `±0` となる。
     - `x = ±∞` の場合、戻り値は `±∞` となる。
-- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+- C++23では、(1), (2), (3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ceil -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/cmath/ceil.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/cmath/ceil.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/ceil.md b/reference/cmath/ceil.md
index eaf8388e5..8fba8b842 100644
--- a/reference/cmath/ceil.md
+++ b/reference/cmath/ceil.md
@@ -56,7 +56,7 @@ namespace std {
 	また、本関数の挙動は、丸めモードが [`FE_UPWARD`](/reference/cfenv/fe_upward.md) に設定されている時の [`rint`](rint.md)、あるいは [`nearbyint`](nearbyint.md) のいずれかと等価である。  
 	したがって、本関数において戻り値が引数 `x` と異なる場合に例外 [`FE_INEXACT`](/reference/cfenv/fe_inexact.md) が発生するか否かは実装依存である。  
 	なお、本関数の挙動は、現在の丸めモードには依存しない。
-- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+- C++23では、(1), (2), (3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>copysign -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/cmath/copysign.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/cmath/copysign.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/copysign.md b/reference/cmath/copysign.md
index 378d7a66a..b4679ea14 100644
--- a/reference/cmath/copysign.md
+++ b/reference/cmath/copysign.md
@@ -64,7 +64,7 @@ namespace std {
 
 ## 備考
 - 符号付きゼロを表現するが負のゼロを取り扱わない実装では、この関数はゼロを正と見なす。
-- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+- C++23では、(1), (2), (3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cos -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/cmath/cos.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/cmath/cos.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/cos.md b/reference/cmath/cos.md
index c86438c44..8a1f3543d 100644
--- a/reference/cmath/cos.md
+++ b/reference/cmath/cos.md
@@ -54,7 +54,7 @@ namespace std {
 - C++11 以降では、処理系が IEC 60559 に準拠している場合（[`std::numeric_limits`](../limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`is_iec559`](../limits/numeric_limits/is_iec559.md)`() != false`）、以下の規定が追加される。
     - `x = ±0` の場合、戻り値は `1` となる。
     - `x = ±∞` の場合、戻り値は quiet NaN となり、[`FE_INVALID`](../cfenv/fe_invalid.md)（無効演算浮動小数点例外）が発生する。
-- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+- C++23では、(1), (2), (3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cosh -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/cmath/cosh.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/cmath/cosh.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/cosh.md b/reference/cmath/cosh.md
index ebc6b8c31..bc9d9eafa 100644
--- a/reference/cmath/cosh.md
+++ b/reference/cmath/cosh.md
@@ -57,7 +57,7 @@ namespace std {
 - C++11 以降では、処理系が IEC 60559 に準拠している場合（[`std::numeric_limits`](../limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`is_iec559`](../limits/numeric_limits/is_iec559.md)`() != false`）、以下の規定が追加される。
     - `x = ±0` の場合、戻り値は `1` となる。
     - `x = ±∞` の場合、戻り値は `+∞` となる。
-- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+- C++23では、(1), (2), (3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erf -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/cmath/erf.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/cmath/erf.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/erf.md b/reference/cmath/erf.md
index 32fdcefea..ee557797f 100644
--- a/reference/cmath/erf.md
+++ b/reference/cmath/erf.md
@@ -56,7 +56,7 @@ namespace std {
     - `x = ±0` の場合、戻り値は `±0` となる。
     - `x = ±∞` の場合、戻り値は `±1` となる。
 - 平均μ, 標準偏差σの正規分布の累積分布関数は $$\frac{1}{2} \left( 1 + \mathrm{erf} ~ \frac{x - \mu}{\sqrt{2} \sigma} \right)$$ で与えられる。
-- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+- C++23では、(1), (2), (3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erfc -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/cmath/erfc.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/cmath/erfc.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/erfc.md b/reference/cmath/erfc.md
index fb6191431..268d3b7ec 100644
--- a/reference/cmath/erfc.md
+++ b/reference/cmath/erfc.md
@@ -56,7 +56,7 @@ namespace std {
 - C++11 以降では、処理系が IEC 60559 に準拠している場合（[`std::numeric_limits`](../limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`is_iec559`](../limits/numeric_limits/is_iec559.md)`() != false`）、以下の規定が追加される。
     - `x = -∞` の場合、戻り値は `2` となる。
     - `x = +∞` の場合、戻り値は `+0` となる。
-- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+- C++23では、(1), (2), (3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>exp -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/cmath/exp.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/cmath/exp.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/exp.md b/reference/cmath/exp.md
index a2d16e2b9..fc84b3496 100644
--- a/reference/cmath/exp.md
+++ b/reference/cmath/exp.md
@@ -58,7 +58,7 @@ namespace std {
     - `x = ±0` の場合、戻り値は `1` となる。
     - `x = -∞` の場合、戻り値は `+0` となる。
     - `x = +∞` の場合、戻り値は `+∞` となる。
-- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+- C++23では、(1), (2), (3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>exp2 -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/cmath/exp2.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/cmath/exp2.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/exp2.md b/reference/cmath/exp2.md
index cf5fef37f..dc5b55ed4 100644
--- a/reference/cmath/exp2.md
+++ b/reference/cmath/exp2.md
@@ -59,7 +59,7 @@ namespace std {
     - `x = ±0` の場合、戻り値は `1` となる。
     - `x = -∞` の場合、戻り値は `+0` となる。
     - `x = +∞` の場合、戻り値は `+∞` となる。
-- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+- C++23では、(1), (2), (3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>fabs -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/cmath/fabs.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/cmath/fabs.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/fabs.md b/reference/cmath/fabs.md
index dbdc987de..62bbf60f1 100644
--- a/reference/cmath/fabs.md
+++ b/reference/cmath/fabs.md
@@ -55,7 +55,7 @@ namespace std {
 - `value = ±0` の場合、戻り値は `+0` となる。
 - `value = ±∞` の場合、戻り値は `+∞` となる。
 - 戻り値は正確で、現在の丸め方式には依存しない。
-- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+- C++23では、(1), (2), (3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>fdim -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/cmath/fdim.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/cmath/fdim.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/fdim.md b/reference/cmath/fdim.md
index 00b146ce4..4c843e797 100644
--- a/reference/cmath/fdim.md
+++ b/reference/cmath/fdim.md
@@ -55,7 +55,7 @@ namespace std {
 
 
 ## 備考
-- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+- C++23では、(1), (2), (3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>floor -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/cmath/floor.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/cmath/floor.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/floor.md b/reference/cmath/floor.md
index b3bb3b5b9..1d732e2dc 100644
--- a/reference/cmath/floor.md
+++ b/reference/cmath/floor.md
@@ -56,7 +56,7 @@ namespace std {
 	また、本関数の挙動は、丸めモードが [`FE_DOWNWARD`](/reference/cfenv/fe_downward.md) に設定されている時の [`rint`](rint.md)、あるいは [`nearbyint`](nearbyint.md) のいずれかと等価である。  
 	したがって、本関数において戻り値が引数 `x` と異なる場合に例外 [`FE_INEXACT`](/reference/cfenv/fe_inexact.md) が発生するか否かは実装依存である。  
 	なお、本関数の挙動は、現在の丸めモードには依存しない。
-- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+- C++23では、(1), (2), (3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>fma -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/cmath/fma.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/cmath/fma.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/fma.md b/reference/cmath/fma.md
index 7e633925f..39f924d8d 100644
--- a/reference/cmath/fma.md
+++ b/reference/cmath/fma.md
@@ -90,7 +90,7 @@ namespace std {
 
 - 本関数が単純に `x * y + z` を計算するのと等価か、より速い場合には、引数の型に応じて [`FP_FAST_FMA`](fp_fast_fma.md)（`double` の場合）、[`FP_FAST_FMAF`](fp_fast_fmaf.md)（`float` の場合）、[`FP_FAST_FMAL`](fp_fast_fmal.md)（`long double` の場合）と言ったマクロが定義される。  
 	これらのマクロは、一般的に本関数がハードウェアによる積和演算命令を使用している場合にのみ定義される。
-- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+- C++23では、(1), (2), (3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>fmax -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/cmath/fmax.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/cmath/fmax.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/fmax.md b/reference/cmath/fmax.md
index 5acd81805..efb7214c5 100644
--- a/reference/cmath/fmax.md
+++ b/reference/cmath/fmax.md
@@ -58,7 +58,7 @@ namespace std {
     - 引数の1つが NaN の場合 NaN でない方を返す。
     - 引数が2つとも NaN の場合 NaN を返す。
 - 理想的には `fmax(-0.0, +0.0)` は `+0` を返す。
-- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+- C++23では、(1), (2), (3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>fmin -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/cmath/fmin.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/cmath/fmin.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/fmin.md b/reference/cmath/fmin.md
index 11bc5ae4e..9798f518a 100644
--- a/reference/cmath/fmin.md
+++ b/reference/cmath/fmin.md
@@ -59,7 +59,7 @@ namespace std {
     - 引数の1つが NaN の場合 NaN でない方を返す。
     - 引数が2つとも NaN の場合 NaN を返す。
 - 理想的には `fmin(-0.0, +0.0)` は `-0` を返す。
-- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+- C++23では、(1), (2), (3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>fpclassify -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/cmath/fpclassify.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/cmath/fpclassify.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/fpclassify.md b/reference/cmath/fpclassify.md
index 16242d32d..222ecf4ad 100644
--- a/reference/cmath/fpclassify.md
+++ b/reference/cmath/fpclassify.md
@@ -48,7 +48,7 @@ namespace std {
 
 ## 備考
 - C標準ライブラリでは`fpclassify`は関数マクロとして定義されるが、C++標準ライブラリでは関数として定義される
-- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+- C++23では、(1), (2), (3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>frexp -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/cmath/frexp.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/cmath/frexp.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/frexp.md b/reference/cmath/frexp.md
index 27e351ad4..679e0826b 100644
--- a/reference/cmath/frexp.md
+++ b/reference/cmath/frexp.md
@@ -61,7 +61,7 @@ C++11 以降では、処理系が IEC 60559 に準拠している場合（[`std:
 - `value = ±∞` の場合、戻り値は `±∞` となり、`*exp` には未規定の値が設定される。
 - `value` が NaN の場合、戻り値は NaN となり、`*exp` には未規定の値が設定される。
 - この関数は浮動小数点例外を発生させない。
-- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+- C++23では、(1), (2), (3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>hypot -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/cmath/hypot.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/cmath/hypot.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/hypot.md b/reference/cmath/hypot.md
index 9bd9dd244..70b9e8c11 100644
--- a/reference/cmath/hypot.md
+++ b/reference/cmath/hypot.md
@@ -127,7 +127,7 @@ $$ f(x, y) = \sqrt{x^2 + y^2} $$
     - `hypot(x, y)` と `hypot(y, x)` と `hypot(x, -y)` は等価である。
     - `hypot(x, ±0)` は、[`fabs`](fabs.md)`(x)` と等価である。
     - `hypot(±∞, y)` の戻り値は、たとえ `y` が NaN の場合でも `+∞` となる。
-- C++23では、(1)、(2)、(3)が(4)に統合、(8)、(9)、(10)が(11)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+- C++23では、(1), (2), (3)が(4)に統合、(8), (9), (10)が(11)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ilogb -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/cmath/ilogb.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/cmath/ilogb.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/ilogb.md b/reference/cmath/ilogb.md
index af2c447da..7abababfd 100644
--- a/reference/cmath/ilogb.md
+++ b/reference/cmath/ilogb.md
@@ -55,7 +55,7 @@ namespace std {
 	- 正しい結果が戻り値の型（`int`）の範囲で表現可能な場合は、戻り値は正確で、現在の丸め方式に依存しない。
 	- 正しい結果が戻り値の型（`int`）の範囲外の場合は、戻り値は未規定で、[`FE_INVALID`](../cfenv/fe_invalid.md)（無効演算浮動小数点例外）が発生する。
 	- `x` がゼロ、無限大、あるいは NaN の場合には、[`FE_INVALID`](../cfenv/fe_invalid.md)（無効演算浮動小数点例外）が発生する。
-- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+- C++23では、(1), (2), (3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>isfinite -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/cmath/isfinite.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/cmath/isfinite.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/isfinite.md b/reference/cmath/isfinite.md
index 30ca0708c..39e1ebaed 100644
--- a/reference/cmath/isfinite.md
+++ b/reference/cmath/isfinite.md
@@ -37,7 +37,7 @@ namespace std {
 
 ## 備考
 - C標準ライブラリでは`isfinite`は関数マクロとして定義されるが、C++標準ライブラリでは関数として定義される
-- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+- C++23では、(1), (2), (3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>isgreater -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/cmath/isgreater.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/cmath/isgreater.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/isgreater.md b/reference/cmath/isgreater.md
index 9f325007c..4a3f4798f 100644
--- a/reference/cmath/isgreater.md
+++ b/reference/cmath/isgreater.md
@@ -41,7 +41,7 @@ namespace std {
 ## 備考
 - C標準ライブラリでは本関数は関数マクロとして定義されるが、C++標準ライブラリでは関数として定義される
 - C標準ライブラリでは本関数は`int`型を戻り値とするが、C++標準ライブラリでは`bool`型を戻り値とする
-- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+- C++23では、(1), (2), (3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>isgreaterequal -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/cmath/isgreaterequal.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/cmath/isgreaterequal.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/isgreaterequal.md b/reference/cmath/isgreaterequal.md
index 81362665c..59bbdd814 100644
--- a/reference/cmath/isgreaterequal.md
+++ b/reference/cmath/isgreaterequal.md
@@ -41,7 +41,7 @@ namespace std {
 ## 備考
 - C標準ライブラリでは本関数は関数マクロとして定義されるが、C++標準ライブラリでは関数として定義される
 - C標準ライブラリでは本関数は`int`型を戻り値とするが、C++標準ライブラリでは`bool`型を戻り値とする
-- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+- C++23では、(1), (2), (3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>isinf -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/cmath/isinf.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/cmath/isinf.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/isinf.md b/reference/cmath/isinf.md
index f962c92ec..54bdfbe17 100644
--- a/reference/cmath/isinf.md
+++ b/reference/cmath/isinf.md
@@ -37,7 +37,7 @@ namespace std {
 
 ## 備考
 - C標準ライブラリでは`isinf`は関数マクロとして定義されるが、C++標準ライブラリでは関数として定義される
-- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+- C++23では、(1), (2), (3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>isless -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/cmath/isless.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/cmath/isless.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/isless.md b/reference/cmath/isless.md
index 78fc46a87..78bed4d0c 100644
--- a/reference/cmath/isless.md
+++ b/reference/cmath/isless.md
@@ -41,7 +41,7 @@ namespace std {
 ## 備考
 - C標準ライブラリでは本関数は関数マクロとして定義されるが、C++標準ライブラリでは関数として定義される
 - C標準ライブラリでは本関数は`int`型を戻り値とするが、C++標準ライブラリでは`bool`型を戻り値とする
-- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+- C++23では、(1), (2), (3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>islessequal -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/cmath/islessequal.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/cmath/islessequal.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/islessequal.md b/reference/cmath/islessequal.md
index 44a39cfe6..d4ab66480 100644
--- a/reference/cmath/islessequal.md
+++ b/reference/cmath/islessequal.md
@@ -41,7 +41,7 @@ namespace std {
 ## 備考
 - C標準ライブラリでは本関数は関数マクロとして定義されるが、C++標準ライブラリでは関数として定義される
 - C標準ライブラリでは本関数は`int`型を戻り値とするが、C++標準ライブラリでは`bool`型を戻り値とする
-- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+- C++23では、(1), (2), (3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>islessgreater -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/cmath/islessgreater.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/cmath/islessgreater.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/islessgreater.md b/reference/cmath/islessgreater.md
index 60cb3e87a..d10f1947b 100644
--- a/reference/cmath/islessgreater.md
+++ b/reference/cmath/islessgreater.md
@@ -41,7 +41,7 @@ namespace std {
 ## 備考
 - C標準ライブラリでは本関数は関数マクロとして定義されるが、C++標準ライブラリでは関数として定義される
 - C標準ライブラリでは本関数は`int`型を戻り値とするが、C++標準ライブラリでは`bool`型を戻り値とする
-- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+- C++23では、(1), (2), (3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>isnan -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/cmath/isnan.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/cmath/isnan.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/isnan.md b/reference/cmath/isnan.md
index 440e2a07c..0052da26d 100644
--- a/reference/cmath/isnan.md
+++ b/reference/cmath/isnan.md
@@ -37,7 +37,7 @@ namespace std {
 
 ## 備考
 - C標準ライブラリでは`isnan`は関数マクロとして定義されるが、C++標準ライブラリでは関数として定義される
-- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+- C++23では、(1), (2), (3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>isnormal -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/cmath/isnormal.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/cmath/isnormal.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/isnormal.md b/reference/cmath/isnormal.md
index 6aeaa4183..051ac7fc4 100644
--- a/reference/cmath/isnormal.md
+++ b/reference/cmath/isnormal.md
@@ -37,7 +37,7 @@ namespace std {
 
 ## 備考
 - C標準ライブラリでは`isnormal`は関数マクロとして定義されるが、C++標準ライブラリでは関数として定義される
-- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+- C++23では、(1), (2), (3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>isunordered -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/cmath/isunordered.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/cmath/isunordered.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/isunordered.md b/reference/cmath/isunordered.md
index 7adb78141..f1013c2bd 100644
--- a/reference/cmath/isunordered.md
+++ b/reference/cmath/isunordered.md
@@ -41,7 +41,7 @@ NaNに対する順序付けはされないため、`x`と`y`のいずれかがNa
 ## 備考
 - C標準ライブラリでは本関数は関数マクロとして定義されるが、C++標準ライブラリでは関数として定義される
 - C標準ライブラリでは本関数は`int`型を戻り値とするが、C++標準ライブラリでは`bool`型を戻り値とする
-- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+- C++23では、(1), (2), (3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ldexp -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/cmath/ldexp.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/cmath/ldexp.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/ldexp.md b/reference/cmath/ldexp.md
index 00ca44339..ee18fec2c 100644
--- a/reference/cmath/ldexp.md
+++ b/reference/cmath/ldexp.md
@@ -55,7 +55,7 @@ namespace std {
 ## 備考
 - オーバーフローエラー、アンダーフローエラーが発生した場合の挙動については、[`&amp;lt;cmath&amp;gt;`](../cmath.md) を参照。
 - C++11 以降では、処理系が IEC 60559 に準拠している場合（[`std::numeric_limits`](../limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`is_iec559`](../limits/numeric_limits/is_iec559.md)`() != false`）、かつ、基数が 2 の場合（[`std::numeric_limits`](../limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`radix`](../limits/numeric_limits/radix.md)`() == 2`）、[`scalbn`](scalbn.md)`(x, exp)` と等価である。
-- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+- C++23では、(1), (2), (3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>lgamma -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/cmath/lgamma.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/cmath/lgamma.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/lgamma.md b/reference/cmath/lgamma.md
index 03027e27d..f0cec5c2f 100644
--- a/reference/cmath/lgamma.md
+++ b/reference/cmath/lgamma.md
@@ -59,7 +59,7 @@ namespace std {
     [`FE_DIVBYZERO`](../cfenv/fe_divbyzero.md)（ゼロ除算浮動小数点例外）が発生する。
     - `x = -∞` の場合、戻り値は `+∞` となる。
     - `x = +∞` の場合、戻り値は `+∞` となる。
-- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+- C++23では、(1), (2), (3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 - この関数はガンマ関数 ([`tgamma`](tgamma.md)) がオーバーフローするような場合に使う。
   具体例については[ガンマ関数の備考](tgamma.md#remarks-lgamma)を参照のこと。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>llrint -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/cmath/llrint.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/cmath/llrint.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/llrint.md b/reference/cmath/llrint.md
index aa478ca9b..141355dfc 100644
--- a/reference/cmath/llrint.md
+++ b/reference/cmath/llrint.md
@@ -46,7 +46,7 @@ namespace std {
     なお、C99 でも `FENV_ACCESS` のデフォルトは処理系定義である。
 - 丸めモード [`FE_TONEAREST`](../cfenv/fe_tonearest.md) は四捨五入ではなく、最近接偶数への丸めであることに注意。（例を参照）  
     四捨五入が必要であれば、[`llround`](llround.md) を使用すること。（ただし、[`llround`](llround.md) は本関数と異なり、ISO IEC 60559 に準拠していても [`FE_INEXACT`](../cfenv/fe_inexact.md) が発生するか否かは処理系定義である）  
-- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+- C++23では、(1), (2), (3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>llround -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/cmath/llround.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/cmath/llround.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/llround.md b/reference/cmath/llround.md
index 57a106b16..fba7a7fe8 100644
--- a/reference/cmath/llround.md
+++ b/reference/cmath/llround.md
@@ -54,7 +54,7 @@ namespace std {
 - [`round`](round.md)関数と違い、本関数において戻り値が非整数型引数 `x` と異なる場合に、例外 [`FE_INEXACT`](/reference/cfenv/fe_inexact.md) を発生させる必要はない。
 - 戻り値が[`long long`型](/lang/cpp11/long_long_type.md)の範囲を超えた場合、定義域エラーが起こる可能性がある。その際の挙動については、[`&amp;lt;cmath&amp;gt;`](../cmath.md) を参照。
 - なお、本関数の挙動は、現在の丸めモードには依存しない。
-- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+- C++23では、(1), (2), (3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>log -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/cmath/log.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/cmath/log.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/log.md b/reference/cmath/log.md
index 9faf89171..6e21aa624 100644
--- a/reference/cmath/log.md
+++ b/reference/cmath/log.md
@@ -59,7 +59,7 @@ namespace std {
     - `x = 1` の場合、戻り値は `+0` となる。
     - `x &amp;lt; 0` の場合、戻り値は quiet NaN となり、[`FE_INVALID`](../cfenv/fe_invalid.md)（無効演算浮動小数点例外）が発生する。
     - `x = +∞` の場合、戻り値は `+∞` となる。
-- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+- C++23では、(1), (2), (3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>log10 -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/cmath/log10.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/cmath/log10.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/log10.md b/reference/cmath/log10.md
index 7ecd19f59..af742ee0b 100644
--- a/reference/cmath/log10.md
+++ b/reference/cmath/log10.md
@@ -59,7 +59,7 @@ namespace std {
     - `x = 1` の場合、戻り値は `+0` となる。
     - `x &amp;lt; 0` の場合、戻り値は quiet NaN となり、[`FE_INVALID`](../cfenv/fe_invalid.md)（無効演算浮動小数点例外）が発生する。
     - `x = +∞` の場合、戻り値は `+∞` となる。
-- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+- C++23では、(1), (2), (3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>log1p -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/cmath/log1p.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/cmath/log1p.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/log1p.md b/reference/cmath/log1p.md
index f8cd0da40..360293555 100644
--- a/reference/cmath/log1p.md
+++ b/reference/cmath/log1p.md
@@ -62,7 +62,7 @@ namespace std {
     - `x = -1` の場合、戻り値は `-∞` となり、[`FE_DIVBYZERO`](../cfenv/fe_divbyzero.md)（ゼロ除算浮動小数点例外）が発生する。
     - `x &amp;lt; -1` の場合、戻り値は quiet NaN となり、[`FE_INVALID`](../cfenv/fe_invalid.md)（無効演算浮動小数点例外）が発生する。
     - `x = +∞` の場合、戻り値は `+∞` となる。
-- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+- C++23では、(1), (2), (3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>log2 -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/cmath/log2.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/cmath/log2.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/log2.md b/reference/cmath/log2.md
index 3995ae461..ff0566f41 100644
--- a/reference/cmath/log2.md
+++ b/reference/cmath/log2.md
@@ -60,7 +60,7 @@ namespace std {
     - `x = 1` の場合、戻り値は `+0` となる。
     - `x &amp;lt; 0` の場合、戻り値は quiet NaN となり、[`FE_INVALID`](../cfenv/fe_invalid.md)（無効演算浮動小数点例外）が発生する。
     - `x = +∞` の場合、戻り値は `+∞` となる。
-- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+- C++23では、(1), (2), (3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>logb -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/cmath/logb.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/cmath/logb.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/logb.md b/reference/cmath/logb.md
index c0c2f54ea..5a704abad 100644
--- a/reference/cmath/logb.md
+++ b/reference/cmath/logb.md
@@ -57,7 +57,7 @@ namespace std {
 	- `x = ±0` の場合、戻り値は `-∞` となり、[`FE_DIVBYZERO`](../cfenv/fe_divbyzero.md)（ゼロ除算浮動小数点例外）が発生する。
 	- `x = ±∞` の場合、戻り値は `+∞` となる。
 	- 戻り値は正確で、現在の丸め方式に依存しない。
-- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+- C++23では、(1), (2), (3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>lrint -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/cmath/lrint.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/cmath/lrint.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/lrint.md b/reference/cmath/lrint.md
index 387b950a3..ffa8687f7 100644
--- a/reference/cmath/lrint.md
+++ b/reference/cmath/lrint.md
@@ -45,7 +45,7 @@ namespace std {
     なお、C99 でも `FENV_ACCESS` のデフォルトは処理系定義である。
 - 丸めモード [`FE_TONEAREST`](../cfenv/fe_tonearest.md) は単なる四捨五入ではないことに注意。  
     四捨五入が必要であれば、[`lround`](lround.md) を使用すること。（ただし、[`lround`](lround.md) は本関数と異なり、ISO IEC 60559 に準拠していても [`FE_INEXACT`](../cfenv/fe_inexact.md) が発生するか否かは処理系定義である）  
-- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+- C++23では、(1), (2), (3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>lround -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/cmath/lround.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/cmath/lround.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/lround.md b/reference/cmath/lround.md
index d3bc0e7db..4be8c303a 100644
--- a/reference/cmath/lround.md
+++ b/reference/cmath/lround.md
@@ -54,7 +54,7 @@ namespace std {
 - [`round`](round.md)関数と違い、本関数において戻り値が非整数型引数 `x` と異なる場合に、例外 [`FE_INEXACT`](/reference/cfenv/fe_inexact.md) を発生させる必要はない。
 - 戻り値が`long`型の範囲を超えた場合、定義域エラーが起こる可能性がある。その際の挙動については、[`&amp;lt;cmath&amp;gt;`](../cmath.md) を参照。
 - なお、本関数の挙動は、現在の丸めモードには依存しない。
-- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+- C++23では、(1), (2), (3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>modf -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/cmath/modf.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/cmath/modf.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/modf.md b/reference/cmath/modf.md
index b0f620b46..3a271bac6 100644
--- a/reference/cmath/modf.md
+++ b/reference/cmath/modf.md
@@ -63,7 +63,7 @@ namespace std {
 
 - C++11 で `value` が整数型のオーバーロードが追加されているが、`iptr` の型によって呼び出されるオーバーロードが一意に決まるため、存在意義は無いものと思われる。  
     （`value` に整数型、`iptr` に `nullptr` を渡した場合のみ当該オーバーロードによって呼び出しが曖昧ではなくなるが、その場合は未定義動作となってしまうため、本オーバーロードの存在はむしろ有害）
-- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+- C++23では、(1), (2), (3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>nearbyint -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/cmath/nearbyint.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/cmath/nearbyint.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/nearbyint.md b/reference/cmath/nearbyint.md
index 339a58b2c..ccb56c833 100644
--- a/reference/cmath/nearbyint.md
+++ b/reference/cmath/nearbyint.md
@@ -46,7 +46,7 @@ namespace std {
 - C99 では、丸めモードの設定時には `#pragma STDC FENV_ACCESS ON` でなければなければならないと記載されているが、C++ には該当する記載を見つけることができなかった。  
     なお、C99 でも `FENV_ACCESS` のデフォルトは処理系定義である。
 - 丸めモード [`FE_TONEAREST`](../cfenv/fe_tonearest.md) は単なる四捨五入ではないことに注意。
-- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+- C++23では、(1), (2), (3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>nextafter -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/cmath/nextafter.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/cmath/nextafter.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/nextafter.md b/reference/cmath/nextafter.md
index f66bdfebb..8a5647008 100644
--- a/reference/cmath/nextafter.md
+++ b/reference/cmath/nextafter.md
@@ -69,7 +69,7 @@ namespace std {
 
 
 ## 備考
-- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+- C++23では、(1), (2), (3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>nexttoward -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/cmath/nexttoward.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/cmath/nexttoward.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/nexttoward.md b/reference/cmath/nexttoward.md
index 5d285c4fe..f1568f7a1 100644
--- a/reference/cmath/nexttoward.md
+++ b/reference/cmath/nexttoward.md
@@ -70,7 +70,7 @@ namespace std {
 
 
 ## 備考
-- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+- C++23では、(1), (2), (3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>pow -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/cmath/pow.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/cmath/pow.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/pow.md b/reference/cmath/pow.md
index 8b27ff64a..5878da2f8 100644
--- a/reference/cmath/pow.md
+++ b/reference/cmath/pow.md
@@ -102,7 +102,7 @@ namespace std {
     - `x = -∞` で `y` が正でかつ奇数ではない場合、戻り値は `+∞` となる。
     - `x = +∞` で `y &amp;lt; 0` の場合、戻り値は `+0` となる。
     - `x = +∞` で `y &amp;gt; 0` の場合、戻り値は `+∞` となる。
-- C++23では、(1)、(2)、(3)が(7)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+- C++23では、(1), (2), (3)が(7)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>remainder -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/cmath/remainder.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/cmath/remainder.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/remainder.md b/reference/cmath/remainder.md
index d0e32ab57..4d4a6e1c4 100644
--- a/reference/cmath/remainder.md
+++ b/reference/cmath/remainder.md
@@ -59,7 +59,7 @@ IEC 60559で要求された`x REM y`を計算して返す。
 - 本関数は、C99 の規格にある `remainder`（より正確には `math.h` ヘッダの `remainder`、`remainderf`、`remainderl` の 3 つ。それぞれ C++ の `double`、`float`、`long double` バージョンに相当）と等価である。
 - IEC 60559で要求された`x REM y`の計算とは以下のようなものであり、全ての実装に適用できる。
     - 「y≠0である場合、剰余r = x REM yは、丸めモードに関係なく数学的な関係r = x - nyによって定義される。ここで、nはx/yの正確な値に最も近い整数である。| n - x/y | = 1/2ならば、nは常に偶数である。したがって、剰余は常に正確である。r = 0の場合、その符号はxの符号とする」
-- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+- C++23では、(1), (2), (3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>remquo -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/cmath/remquo.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/cmath/remquo.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/remquo.md b/reference/cmath/remquo.md
index 4696daaf5..40c30b2ec 100644
--- a/reference/cmath/remquo.md
+++ b/reference/cmath/remquo.md
@@ -80,7 +80,7 @@ namespace std {
 `remquo`関数では`x/y`の厳密な商を求めることはできない。
 三角関数のような周期性をもつ数学関数の内部実装において、商の低次ビットを利用した引数の還元(argument reduction)操作で利用する。
 
-- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+- C++23では、(1), (2), (3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rint -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/cmath/rint.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/cmath/rint.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/rint.md b/reference/cmath/rint.md
index c656b58ff..4dcdeeafa 100644
--- a/reference/cmath/rint.md
+++ b/reference/cmath/rint.md
@@ -47,7 +47,7 @@ namespace std {
 - C99 では、丸めモードの設定時には `#pragma STDC FENV_ACCESS ON` でなければなければならないと記載されているが、C++ には該当する記載を見つけることができなかった。  
     なお、C99 でも `FENV_ACCESS` のデフォルトは処理系定義である。
 - 丸めモード [`FE_TONEAREST`](../cfenv/fe_tonearest.md) は単なる四捨五入ではないことに注意。
-- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+- C++23では、(1), (2), (3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>round -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/cmath/round.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/cmath/round.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/round.md b/reference/cmath/round.md
index a685b14ea..c88d88beb 100644
--- a/reference/cmath/round.md
+++ b/reference/cmath/round.md
@@ -85,7 +85,7 @@ namespace std {
 
 	ただし、本関数において戻り値が引数 `x` と異なる場合に、上記の実装のように例外 [`FE_INEXACT`](/reference/cfenv/fe_inexact.md) が発生するか否かは実装依存である。  
 	なお、本関数の挙動は、現在の丸めモードには依存しない。
-- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+- C++23では、(1), (2), (3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>scalbln -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/cmath/scalbln.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/cmath/scalbln.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/scalbln.md b/reference/cmath/scalbln.md
index 3fee1c1b0..ad0fafd0b 100644
--- a/reference/cmath/scalbln.md
+++ b/reference/cmath/scalbln.md
@@ -63,7 +63,7 @@ namespace std {
 	- もしオーバーフローエラーやアンダーフローエラーを起こさなければ、結果は正確で現在の丸め方式には依存しない。
 
 - `scalbln()` 関数は、パラメータ `n` の型が `long int` であることを除いて、`scalbn()` 関数と等価である。
-- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+- C++23では、(1), (2), (3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>scalbn -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/cmath/scalbn.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/cmath/scalbn.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/scalbn.md b/reference/cmath/scalbn.md
index f30f9fdb1..0e0cc2315 100644
--- a/reference/cmath/scalbn.md
+++ b/reference/cmath/scalbn.md
@@ -71,7 +71,7 @@ namespace std {
 	- もしオーバーフローエラーやアンダーフローエラーを起こさなければ、結果は正確で現在の丸め方式には依存しない。
 
 - `scalbln()` 関数は、パラメータ `n` の型が `long int` であることを除いて、`scalbn()` 関数と等価である。
-- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+- C++23では、(1), (2), (3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>signbit -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/cmath/signbit.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/cmath/signbit.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/signbit.md b/reference/cmath/signbit.md
index 70b744e3d..9689541ea 100644
--- a/reference/cmath/signbit.md
+++ b/reference/cmath/signbit.md
@@ -40,7 +40,7 @@ namespace std {
 
 ## 備考
 - C標準ライブラリでは`signbit`は関数マクロとして定義されるが、C++標準ライブラリでは関数として定義される
-- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+- C++23では、(1), (2), (3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sin -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/cmath/sin.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/cmath/sin.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/sin.md b/reference/cmath/sin.md
index 60450378a..1978c2964 100644
--- a/reference/cmath/sin.md
+++ b/reference/cmath/sin.md
@@ -54,7 +54,7 @@ namespace std {
 - C++11 以降では、処理系が IEC 60559 に準拠している場合（[`std::numeric_limits`](../limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`is_iec559`](../limits/numeric_limits/is_iec559.md)`() != false`）、以下の規定が追加される。
     - `x = ±0` の場合、戻り値は `±0` となる。（複号同順）
     - `x = ±∞` の場合、戻り値は quiet NaN となり、[`FE_INVALID`](../cfenv/fe_invalid.md)（無効演算浮動小数点例外）が発生する。
-- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+- C++23では、(1), (2), (3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sinh -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/cmath/sinh.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/cmath/sinh.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/sinh.md b/reference/cmath/sinh.md
index 6e8594c3f..5f0e4441b 100644
--- a/reference/cmath/sinh.md
+++ b/reference/cmath/sinh.md
@@ -57,7 +57,7 @@ namespace std {
 - C++11 以降では、処理系が IEC 60559 に準拠している場合（[`std::numeric_limits`](../limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`is_iec559`](../limits/numeric_limits/is_iec559.md)`() != false`）、以下の規定が追加される。（複号同順）
     - `x = ±0` の場合、戻り値は `±0` となる。
     - `x = ±∞` の場合、戻り値は `±∞` となる。
-- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+- C++23では、(1), (2), (3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sqrt -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/cmath/sqrt.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/cmath/sqrt.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/sqrt.md b/reference/cmath/sqrt.md
index f837ec613..be41bd8c0 100644
--- a/reference/cmath/sqrt.md
+++ b/reference/cmath/sqrt.md
@@ -58,7 +58,7 @@ namespace std {
 - C++11 以降では、処理系が IEC 60559 に準拠している場合（[`std::numeric_limits`](../limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`is_iec559`](../limits/numeric_limits/is_iec559.md)`() != false`）、以下の規定が追加される。（複号同順）
     - `x = ±0` の場合、戻り値は `±0` となる。
 - `-0.0`は`0.0`と等しいため、定義域エラーにはならず、`-0.0`が返る
-- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+- C++23では、(1), (2), (3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>tan -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/cmath/tan.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/cmath/tan.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/tan.md b/reference/cmath/tan.md
index 2eecf915b..eb4ab0fe4 100644
--- a/reference/cmath/tan.md
+++ b/reference/cmath/tan.md
@@ -54,7 +54,7 @@ namespace std {
 - C++11 以降では、処理系が IEC 60559 に準拠している場合（[`std::numeric_limits`](../limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`is_iec559`](../limits/numeric_limits/is_iec559.md)`() != false`）、以下の規定が追加される。
     - `x = ±0` の場合、戻り値は `±0` となる。（複号同順）
     - `x = ±∞` の場合、戻り値は quiet NaN となり、[`FE_INVALID`](../cfenv/fe_invalid.md)（無効演算浮動小数点例外）が発生する。
-- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+- C++23では、(1), (2), (3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>tanh -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/cmath/tanh.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/cmath/tanh.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/tanh.md b/reference/cmath/tanh.md
index bfae3387e..b4580f294 100644
--- a/reference/cmath/tanh.md
+++ b/reference/cmath/tanh.md
@@ -54,7 +54,7 @@ namespace std {
 - C++11 以降では、処理系が IEC 60559 に準拠している場合（[`std::numeric_limits`](../limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`is_iec559`](../limits/numeric_limits/is_iec559.md)`() != false`）、以下の規定が追加される。（複号同順）
     - `x = ±0` の場合、戻り値は `±0` となる。
     - `x = ±∞` の場合、戻り値は `±1` となる。
-- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+- C++23では、(1), (2), (3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>tgamma -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/cmath/tgamma.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/cmath/tgamma.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/tgamma.md b/reference/cmath/tgamma.md
index 615ff7717..ae4b949ec 100644
--- a/reference/cmath/tgamma.md
+++ b/reference/cmath/tgamma.md
@@ -62,7 +62,7 @@ $$ \Gamma (x) = \int_0^\infty t^{x-1} e^{-t} dt $$
     [`FE_INVALID`](../cfenv/fe_invalid.md)（無効演算浮動小数点例外）が発生する。
     - `x = +∞` の場合、戻り値は `+∞` となる。
 - `gamma` という関数は既にあったが処理系によって定義が違ったため、本当の (true) ガンマ関数 `tgamma` と名付けられた。
-- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+- C++23では、(1), (2), (3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 ### &amp;lt;a id=&amp;#34;remarks-lgamma&amp;#34; href=&amp;#34;#remarks-lgamma&amp;#34;&amp;gt;lgamma との使い分け&amp;lt;/a&amp;gt;
 ガンマ関数は急激に増加し容易にオーバーフローするので、代わりにガンマ関数の結果を自然対数で返す関数 [`lgamma`](lgamma.md) を用いた方が良いことが多くある。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>trunc -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/cmath/trunc.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/cmath/trunc.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/trunc.md b/reference/cmath/trunc.md
index d81a623db..7b9b27c17 100644
--- a/reference/cmath/trunc.md
+++ b/reference/cmath/trunc.md
@@ -58,7 +58,7 @@ namespace std {
 	また、本関数の挙動は、丸めモードが [`FE_TOWARDZERO`](/reference/cfenv/fe_towardzero.md) に設定されている時の [`rint`](rint.md)、あるいは [`nearbyint`](nearbyint.md) のいずれかと等価である。  
 	したがって、本関数において戻り値が引数 `x` と異なる場合に例外 [`FE_INEXACT`](/reference/cfenv/fe_inexact.md) が発生するか否かは実装依存である。  
 	なお、本関数の挙動は、現在の丸めモードには依存しない。
-- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+- C++23では、(1), (2), (3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/compare/partial_ordering/op_equal.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/compare/partial_ordering/op_equal.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/compare/partial_ordering/op_equal.md b/reference/compare/partial_ordering/op_equal.md
index e961cf991..f1438f887 100644
--- a/reference/compare/partial_ordering/op_equal.md
+++ b/reference/compare/partial_ordering/op_equal.md
@@ -18,7 +18,7 @@ friend constexpr bool operator==(/*unspecified*/, partial_ordering v) noexcept;
 ## 概要
 
 - (1) : `partial_ordering`同士の等値比較を行う
-- (2)(3) : `partial_ordering`の値が`partial_ordering::equivalent`であるかを調べる。
+- (2), (3) : `partial_ordering`の値が`partial_ordering::equivalent`であるかを調べる。
 
 ## 戻り値
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator!= -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/compare/partial_ordering/op_not_equal.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/compare/partial_ordering/op_not_equal.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/compare/partial_ordering/op_not_equal.md b/reference/compare/partial_ordering/op_not_equal.md
index 986a40bfe..29754ebf1 100644
--- a/reference/compare/partial_ordering/op_not_equal.md
+++ b/reference/compare/partial_ordering/op_not_equal.md
@@ -18,12 +18,12 @@ friend constexpr bool operator!=(/*unspecified*/, partial_ordering v) noexcept;
 ## 概要
 
 - (1) : `partial_ordering`同士の非等値比較を行う
-- (2)(3) : `partial_ordering`の値が`partial_ordering::equivalent`で無いことを調べる。
+- (2), (3) : `partial_ordering`の値が`partial_ordering::equivalent`で無いことを調べる。
 
 ## 戻り値
 
 - (1) : `return !(v == w)`
-- (2)(3) : `return !(v == 0)`
+- (2), (3) : `return !(v == 0)`
 
 
 ## 例外
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/compare/strong_ordering/op_equal.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/compare/strong_ordering/op_equal.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/compare/strong_ordering/op_equal.md b/reference/compare/strong_ordering/op_equal.md
index 421860f86..b70bb7c53 100644
--- a/reference/compare/strong_ordering/op_equal.md
+++ b/reference/compare/strong_ordering/op_equal.md
@@ -18,7 +18,7 @@ friend constexpr bool operator==(/*unspecified*/, strong_ordering v) noexcept;
 ## 概要
 
 - (1) : `strong_ordering`同士の等値比較を行う
-- (2)(3) : `strong_ordering`の値が`strong_ordering::equal`であるかを調べる。
+- (2), (3) : `strong_ordering`の値が`strong_ordering::equal`であるかを調べる。
 
 ## 戻り値
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator!= -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/compare/strong_ordering/op_not_equal.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/compare/strong_ordering/op_not_equal.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/compare/strong_ordering/op_not_equal.md b/reference/compare/strong_ordering/op_not_equal.md
index e2fb0d7f3..ecd9eabb5 100644
--- a/reference/compare/strong_ordering/op_not_equal.md
+++ b/reference/compare/strong_ordering/op_not_equal.md
@@ -18,12 +18,12 @@ friend constexpr bool operator!=(/*unspecified*/, strong_ordering v) noexcept;
 ## 概要
 
 - (1) : `strong_ordering`同士の非等値比較を行う
-- (2)(3) : `strong_ordering`の値が`strong_ordering::equal`で無いことを調べる。
+- (2), (3) : `strong_ordering`の値が`strong_ordering::equal`で無いことを調べる。
 
 ## 戻り値
 
 - (1) : `return !(v == w)` 
-- (2)(3) : `return !(v == 0)`
+- (2), (3) : `return !(v == 0)`
 
 
 ## 例外
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/compare/weak_ordering/op_equal.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/compare/weak_ordering/op_equal.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/compare/weak_ordering/op_equal.md b/reference/compare/weak_ordering/op_equal.md
index c6eba5fdb..78c2e3903 100644
--- a/reference/compare/weak_ordering/op_equal.md
+++ b/reference/compare/weak_ordering/op_equal.md
@@ -18,7 +18,7 @@ friend constexpr bool operator==(/*unspecified*/, weak_ordering v) noexcept;   /
 ## 概要
 
 - (1) : `weak_ordering`同士の等値比較を行う
-- (2)(3) : `weak_ordering`の値が`weak_ordering::equivalent`であるかを調べる。
+- (2), (3) : `weak_ordering`の値が`weak_ordering::equivalent`であるかを調べる。
 
 ## 戻り値
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator!= -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/compare/weak_ordering/op_not_equal.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/compare/weak_ordering/op_not_equal.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/compare/weak_ordering/op_not_equal.md b/reference/compare/weak_ordering/op_not_equal.md
index 05fd85355..9d72db850 100644
--- a/reference/compare/weak_ordering/op_not_equal.md
+++ b/reference/compare/weak_ordering/op_not_equal.md
@@ -18,12 +18,12 @@ friend constexpr bool operator!=(/*unspecified*/, weak_ordering v) noexcept;   /
 ## 概要
 
 - (1) : `weak_ordering`同士の非等値比較を行う
-- (2)(3) : `weak_ordering`の値が`weak_ordering::equivalent`で無いことを調べる。
+- (2), (3) : `weak_ordering`の値が`weak_ordering::equivalent`で無いことを調べる。
 
 ## 戻り値
 
 - (1) : `return !(v == w)` 
-- (2)(3) : `return !(v == 0)`
+- (2), (3) : `return !(v == 0)`
 
 
 ## 例外
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>abs -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/cstdlib/abs.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/cstdlib/abs.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cstdlib/abs.md b/reference/cstdlib/abs.md
index a9bbede8c..3ed633d17 100644
--- a/reference/cstdlib/abs.md
+++ b/reference/cstdlib/abs.md
@@ -65,7 +65,7 @@ namespace std {
 ## 備考
 - パラメータの型`X`において[`is_unsigned_v`](/reference/type_traits/is_unsigned.md)`&amp;lt;X&amp;gt;`が`true`であり、`X`が整数昇格によって`int`に変換できない場合、プログラムは不適格となる
     - Cとの互換性のため、`int`に昇格できる符号なし整数型は許可される
-- C++23では、(4)、(5)、(6)が(7)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+- C++23では、(4), (5), (6)が(7)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert_or_assign -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_map/insert_or_assign.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/flat_map/flat_map/insert_or_assign.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_map/insert_or_assign.md b/reference/flat_map/flat_map/insert_or_assign.md
index 0a0328719..95f532422 100644
--- a/reference/flat_map/flat_map/insert_or_assign.md
+++ b/reference/flat_map/flat_map/insert_or_assign.md
@@ -93,17 +93,17 @@ iterator
 
 
 ## 戻り値
-- (1)、(2)、(3) : イテレータと `bool` 値の [`pair`](/reference/utility/pair.md) を返す。
+- (1), (2), (3) : イテレータと `bool` 値の [`pair`](/reference/utility/pair.md) を返す。
     - 挿入された場合には、`first` に挿入された要素へのイテレータ、`second` に `true` が設定される。
     - 代入された場合には、`first` に代入された要素へのイテレータ、`second` に `false` が設定される。
-- (4)、(5)、(6) :
+- (4), (5), (6) :
     - 挿入された場合には、挿入された要素へのイテレータを返す。
     - 代入された場合には、代入された要素へのイテレータを返す。
 
 
 ## 計算量
-- (1)、(2)、(3) : [`emplace`](emplace.md) と同じ
-- (4)、(5)、(6) : [`emplace_hint`](emplace_hint.md) と同じ
+- (1), (2), (3) : [`emplace`](emplace.md) と同じ
+- (4), (5), (6) : [`emplace_hint`](emplace_hint.md) と同じ
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator new -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/generator/generator/promise_type/op_new.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/generator/generator/promise_type/op_new.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/generator/generator/promise_type/op_new.md b/reference/generator/generator/promise_type/op_new.md
index 3764efb60..19c0ffee4 100644
--- a/reference/generator/generator/promise_type/op_new.md
+++ b/reference/generator/generator/promise_type/op_new.md
@@ -39,7 +39,7 @@ void* operator new(size_t size, const This&amp;amp;, allocator_arg_t, const Alloc&amp;amp; alloc
 
 
 ## 効果
-`B`型のアロケータ`b`を、オーバーロード(1)では`A()`により、オーバーロード(2)(3)では`A(alloc)`により初期化する。
+`B`型のアロケータ`b`を、オーバーロード(1)では`A()`により、オーバーロード(2), (3)では`A(alloc)`により初期化する。
 
 アロケータ`b`を用いて、サイズ`size`の[コルーチン・ステート](/lang/cpp20/coroutines.md)と、後ほど[`operator delete`](op_delete.md)による`b`を用いたメモリブロック解放で必要とされる追加状態を合わせたストレージに必要となる、`U`型の最小配列ストレージを確保する。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/ios/ios_base/failure/op_constructor.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/ios/ios_base/failure/op_constructor.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ios/ios_base/failure/op_constructor.md b/reference/ios/ios_base/failure/op_constructor.md
index 1b068c360..e2841223a 100644
--- a/reference/ios/ios_base/failure/op_constructor.md
+++ b/reference/ios/ios_base/failure/op_constructor.md
@@ -20,7 +20,7 @@ explicit failure(const char* msg, const error_code&amp;amp; ec = io_errc::stream);
 
 ## 効果
 - (1) [`strcmp`](../../../cstring/strcmp.md.nolink)`(`[`what`](what.md)`(), msg.`[`c_str`](../../../string/basic_string/c_str.md)`()) == 0` となる [`ios_base`](../../ios_base.md)`::`[`failure`](../failure.md) オブジェクトを構築する。
-- (2)、(3) 引数 `msg` と `ec` を用いて基底クラスを構築して、[`ios_base`](../../ios_base.md)`::`[`failure`](../failure.md) オブジェクトを構築する。
+- (2), (3) 引数 `msg` と `ec` を用いて基底クラスを構築して、[`ios_base`](../../ios_base.md)`::`[`failure`](../failure.md) オブジェクトを構築する。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>common_type -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/iterator/basic_const_iterator/common_type.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/iterator/basic_const_iterator/common_type.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/basic_const_iterator/common_type.md b/reference/iterator/basic_const_iterator/common_type.md
index 88be1e536..3702dd032 100644
--- a/reference/iterator/basic_const_iterator/common_type.md
+++ b/reference/iterator/basic_const_iterator/common_type.md
@@ -37,7 +37,7 @@ namespace std {
 
 `basic_const_iterator`のための[`common_type`](/reference/type_traits/common_type.md)特殊化。
 
-- (1)(2) : `basic_const_iterator`とその他のイテレータ型の間の共通の型を取得する
+- (1), (2) : `basic_const_iterator`とその他のイテレータ型の間の共通の型を取得する
 - (3) : 異なるイテレータ型による`basic_const_iterator`特殊化の間の共通の型を取得する
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator++ -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/iterator/basic_const_iterator/op_increment.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/iterator/basic_const_iterator/op_increment.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/basic_const_iterator/op_increment.md b/reference/iterator/basic_const_iterator/op_increment.md
index bc2c4c577..36ca5873f 100644
--- a/reference/iterator/basic_const_iterator/op_increment.md
+++ b/reference/iterator/basic_const_iterator/op_increment.md
@@ -18,7 +18,7 @@ constexpr basic_const_iterator operator++(int) requires forward_iterator&amp;lt;Iterato
 イテレータをインクリメントする。
 
 - (1) : 前置インクリメント
-- (2)(3) : 後置インクリメント
+- (2), (3) : 後置インクリメント
 
 ## 効果
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator++ -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/iterator/counted_iterator/op_increment.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/iterator/counted_iterator/op_increment.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/counted_iterator/op_increment.md b/reference/iterator/counted_iterator/op_increment.md
index f3cc8ae6a..b09b70ca2 100644
--- a/reference/iterator/counted_iterator/op_increment.md
+++ b/reference/iterator/counted_iterator/op_increment.md
@@ -19,11 +19,11 @@ constexpr counted_iterator operator++(int)
 イテレータをインクリメントする。
 
 - (1) : 前置インクリメント
-- (2)(3) : 後置インクリメント
+- (2), (3) : 後置インクリメント
 
 ## 事前条件
 
-- (1)(2) : [`count()`](count.md)` &amp;gt; 0`
+- (1), (2) : [`count()`](count.md)` &amp;gt; 0`
 
 ## 効果
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>advance -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/iterator/ranges_advance.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/iterator/ranges_advance.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/ranges_advance.md b/reference/iterator/ranges_advance.md
index eb165ddd7..d4a3403e4 100644
--- a/reference/iterator/ranges_advance.md
+++ b/reference/iterator/ranges_advance.md
@@ -61,7 +61,7 @@ namespace std::ranges {
 
 ## 戻り値
 
-- (1)(2) : なし
+- (1), (2) : なし
 - (3) : 指定した距離`n`と実際に進めた距離との差（進めなかった距離）を返す
     - `i`の処理終了時と開始時の位置の差を`M`として、`n - M`を返す
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/locale/wstring_convert/op_constructor.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/locale/wstring_convert/op_constructor.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/locale/wstring_convert/op_constructor.md b/reference/locale/wstring_convert/op_constructor.md
index 43b69f596..5c2382ec7 100644
--- a/reference/locale/wstring_convert/op_constructor.md
+++ b/reference/locale/wstring_convert/op_constructor.md
@@ -38,7 +38,7 @@ wstring_convert(const wstring_convert&amp;amp;) = delete;      // (5) C++14
 
 ## 要件
 
-- (2)(3) : `pcvt != nullptr`であること。
+- (2), (3) : `pcvt != nullptr`であること。
 
 
 ## 効果
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert_or_assign -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/map/map/insert_or_assign.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/map/map/insert_or_assign.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/map/insert_or_assign.md b/reference/map/map/insert_or_assign.md
index f6c5c07df..a9e0b2b62 100644
--- a/reference/map/map/insert_or_assign.md
+++ b/reference/map/map/insert_or_assign.md
@@ -54,29 +54,29 @@ iterator
 
 
 ## 適格要件
-- (1)、(3)、(4)、(6) : [`is_assignable_v`](/reference/type_traits/is_assignable.md)`&amp;lt;mapped_type&amp;amp;, M&amp;amp;&amp;amp;&amp;gt;` が `true` であること。`value_type` は、`k`, [`forward`](/reference/utility/forward.md)`&amp;lt;M&amp;gt;(obj)` から `map` に直接構築可能であること
-- (2)、(5) : [`is_assignable_v`](/reference/type_traits/is_assignable.md)`&amp;lt;mapped_type&amp;amp;, M&amp;amp;&amp;amp;&amp;gt;` が `true` であること。`value_type` は、[`move`](/reference/utility/move.md)`(k)`, [`forward`](/reference/utility/forward.md)`&amp;lt;M&amp;gt;(obj)` から `map` に直接構築可能であること
+- (1), (3), (4), (6) : [`is_assignable_v`](/reference/type_traits/is_assignable.md)`&amp;lt;mapped_type&amp;amp;, M&amp;amp;&amp;amp;&amp;gt;` が `true` であること。`value_type` は、`k`, [`forward`](/reference/utility/forward.md)`&amp;lt;M&amp;gt;(obj)` から `map` に直接構築可能であること
+- (2), (5) : [`is_assignable_v`](/reference/type_traits/is_assignable.md)`&amp;lt;mapped_type&amp;amp;, M&amp;amp;&amp;amp;&amp;gt;` が `true` であること。`value_type` は、[`move`](/reference/utility/move.md)`(k)`, [`forward`](/reference/utility/forward.md)`&amp;lt;M&amp;gt;(obj)` から `map` に直接構築可能であること
 
 なお、規格に記載はないが、`hint` は [`emplace_hint`](emplace_hint.md) と同様、コンテナの有効な読み取り専用イテレータである必要があるものと思われる。
 
 
 ## 効果
-- (1)、(3)、(4)、(6) : `map` が `k` と同値のキーを持つ要素 `e` を持っている場合、`e.second` に [`forward`](/reference/utility/forward.md)`&amp;lt;M&amp;gt;(obj)` を代入する。そうでなければ、`k`, [`forward`](/reference/utility/forward.md)`&amp;lt;M&amp;gt;(obj)` から構築した `value_type` 型のオブジェクトを挿入する。
-- (2)、(5) : `map` が `k` と同値のキーを持つ要素 `e` を持っている場合、`e.second` に [`forward`](/reference/utility/forward.md)`&amp;lt;M&amp;gt;(obj)` を代入する。そうでなければ、[`move`](/reference/utility/move.md)`(k)`, [`forward`](/reference/utility/forward.md)`&amp;lt;M&amp;gt;(obj)` から構築した `value_type` 型のオブジェクトを挿入する。
+- (1), (3), (4), (6) : `map` が `k` と同値のキーを持つ要素 `e` を持っている場合、`e.second` に [`forward`](/reference/utility/forward.md)`&amp;lt;M&amp;gt;(obj)` を代入する。そうでなければ、`k`, [`forward`](/reference/utility/forward.md)`&amp;lt;M&amp;gt;(obj)` から構築した `value_type` 型のオブジェクトを挿入する。
+- (2), (5) : `map` が `k` と同値のキーを持つ要素 `e` を持っている場合、`e.second` に [`forward`](/reference/utility/forward.md)`&amp;lt;M&amp;gt;(obj)` を代入する。そうでなければ、[`move`](/reference/utility/move.md)`(k)`, [`forward`](/reference/utility/forward.md)`&amp;lt;M&amp;gt;(obj)` から構築した `value_type` 型のオブジェクトを挿入する。
 
 
 ## 戻り値
-- (1)、(2)、(3) : イテレータと `bool` 値の [`pair`](/reference/utility/pair.md) を返す。
+- (1), (2), (3) : イテレータと `bool` 値の [`pair`](/reference/utility/pair.md) を返す。
     - 挿入された場合には、`first` に挿入された要素へのイテレータ、`second` に `true` が設定される。
     - 代入された場合には、`first` に代入された要素へのイテレータ、`second` に `false` が設定される。
-- (4)、(5)、(6) :
+- (4), (5), (6) :
     - 挿入された場合には、挿入された要素へのイテレータを返す。
     - 代入された場合には、代入された要素へのイテレータを返す。
 
 
 ## 計算量
-- (1)、(2)、(3) : [`emplace`](emplace.md) と同じ。
-- (4)、(5)、(6) : [`emplace_hint`](emplace_hint.md) と同じ。
+- (1), (2), (3) : [`emplace`](emplace.md) と同じ。
+- (4), (5), (6) : [`emplace_hint`](emplace_hint.md) と同じ。
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/map/map/op_constructor.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/map/map/op_constructor.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/map/op_constructor.md b/reference/map/map/op_constructor.md
index 1ff4175f9..e3f9c22a3 100644
--- a/reference/map/map/op_constructor.md
+++ b/reference/map/map/op_constructor.md
@@ -75,13 +75,13 @@ map(from_range_t, R&amp;amp;&amp;amp; rg,
 
 
 ## 計算量
-- (1)、(2)、(3) 定数時間
-- (4)、(5) `N =` [`distance`](../../iterator/distance.md)`(first, last)` とすると、範囲 `[first, last)` が比較オブジェクト `comp` によって既にソート済みである場合は `N` に比例、そうでなければ `N log N` に比例
-- (6)、(7) `x.`[`size`](size.md)`()`  に対して線形時間
+- (1), (2), (3) 定数時間
+- (4), (5) `N =` [`distance`](../../iterator/distance.md)`(first, last)` とすると、範囲 `[first, last)` が比較オブジェクト `comp` によって既にソート済みである場合は `N` に比例、そうでなければ `N log N` に比例
+- (6), (7) `x.`[`size`](size.md)`()`  に対して線形時間
 - (8) 定数時間
 - (9) 定数時間。但し、`alloc == y.`[`get_allocator`](get_allocator.md)`()` でなければ `y.`[`size`](size.md)`()` に対して線形時間
-- (10)、(11) `N = init.`[`size`](../../initializer_list/initializer_list/size.md)`()` とすると、範囲 `[init.`[`begin`](../../initializer_list/initializer_list/begin.md)`(), init.`[`end`](../../initializer_list/initializer_list/end.md)`())` が比較オブジェクト `comp` によって既にソート済みである場合は `N` に比例、そうでなければ `N log N` に比例
-- (12)、(13) `N =` [`ranges::distance`](../../iterator/ranges_distance.md)`(rg)` とすると、`rg` が比較オブジェクト `comp` によって既にソート済みである場合は `N` に比例、そうでなければ `N log N` に比例
+- (10), (11) `N = init.`[`size`](../../initializer_list/initializer_list/size.md)`()` とすると、範囲 `[init.`[`begin`](../../initializer_list/initializer_list/begin.md)`(), init.`[`end`](../../initializer_list/initializer_list/end.md)`())` が比較オブジェクト `comp` によって既にソート済みである場合は `N` に比例、そうでなければ `N log N` に比例
+- (12), (13) `N =` [`ranges::distance`](../../iterator/ranges_distance.md)`(rg)` とすると、`rg` が比較オブジェクト `comp` によって既にソート済みである場合は `N` に比例、そうでなければ `N log N` に比例
 
 
 ## 備考
@@ -166,5 +166,5 @@ Size of c2: 2
 - [LWG 2193. Default constructors for standard library containers are explicit](http://cplusplus.github.io/LWG/lwg-defects.html#2193)  
     (1) + (2) を 2 つのオーバーロードに分割するきっかけとなったレポート
 - [LWG 2210. Missing allocator-extended constructor for allocator-aware containers](http://cplusplus.github.io/LWG/lwg-defects.html#2210)  
-    (5)、(11) を追加するきっかけとなったレポート  
+    (5), (11) を追加するきっかけとなったレポート  
     なお、Discussion の例はアロケータの型が誤っているので注意
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>try_emplace -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/map/map/try_emplace.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/map/map/try_emplace.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/map/try_emplace.md b/reference/map/map/try_emplace.md
index c6b4b178b..0659acc06 100644
--- a/reference/map/map/try_emplace.md
+++ b/reference/map/map/try_emplace.md
@@ -55,9 +55,9 @@ iterator
 
 
 ## テンプレートパラメータ制約
-- (1)、(3)、(5)、(6) : `value_type` は、[`piecewise_construct`](/reference/utility/piecewise_construct_t.md), [`forward_as_tuple`](/reference/tuple/forward_as_tuple.md)`(k)`, [`forward_as_tuple`](/reference/tuple/forward_as_tuple.md)`(`[`forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...)` から `map` に直接構築可能であること
-- (2)、(4) : `value_type` は、[`piecewise_construct`](/reference/utility/piecewise_construct_t.md), [`forward_as_tuple`](/reference/tuple/forward_as_tuple.md)`(`[`move`](/reference/utility/move.md)`(k))`, [`forward_as_tuple`](/reference/tuple/forward_as_tuple.md)`(`[`forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...)` から `map` に直接構築可能であること
-- (5)、(6) :
+- (1), (3), (5), (6) : `value_type` は、[`piecewise_construct`](/reference/utility/piecewise_construct_t.md), [`forward_as_tuple`](/reference/tuple/forward_as_tuple.md)`(k)`, [`forward_as_tuple`](/reference/tuple/forward_as_tuple.md)`(`[`forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...)` から `map` に直接構築可能であること
+- (2), (4) : `value_type` は、[`piecewise_construct`](/reference/utility/piecewise_construct_t.md), [`forward_as_tuple`](/reference/tuple/forward_as_tuple.md)`(`[`move`](/reference/utility/move.md)`(k))`, [`forward_as_tuple`](/reference/tuple/forward_as_tuple.md)`(`[`forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...)` から `map` に直接構築可能であること
+- (5), (6) :
     - `key_compare::is_transparent` が妥当な式であること
     - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;K&amp;amp;&amp;amp;, const_iterator&amp;gt; == false`であること
     - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;K&amp;amp;&amp;amp;, iterator&amp;gt; == false`であること
@@ -66,22 +66,22 @@ iterator
 
 
 ## 効果
-- (1)、(3)、(5)、(6) : `map` が `k` と同値のキーを持つ要素を持っている場合、何もしない（引数への副作用もない）。そうでなければ、[`piecewise_construct`](/reference/utility/piecewise_construct_t.md), [`forward_as_tuple`](/reference/tuple/forward_as_tuple.md)`(k)`, [`forward_as_tuple`](/reference/tuple/forward_as_tuple.md)`(`[`forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...)` から構築した `value_type` 型のオブジェクトを挿入する。
-- (2)、(4) : `map` が `k` と同値のキーを持つ要素を持っている場合、何もしない（引数への副作用もない）。そうでなければ、[`piecewise_construct`](/reference/utility/piecewise_construct_t.md), [`forward_as_tuple`](/reference/tuple/forward_as_tuple.md)`(`[`move`](/reference/utility/move.md)`(k))`, [`forward_as_tuple`](/reference/tuple/forward_as_tuple.md)`(`[`forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...)` から構築した `value_type` 型のオブジェクトを挿入する。
+- (1), (3), (5), (6) : `map` が `k` と同値のキーを持つ要素を持っている場合、何もしない（引数への副作用もない）。そうでなければ、[`piecewise_construct`](/reference/utility/piecewise_construct_t.md), [`forward_as_tuple`](/reference/tuple/forward_as_tuple.md)`(k)`, [`forward_as_tuple`](/reference/tuple/forward_as_tuple.md)`(`[`forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...)` から構築した `value_type` 型のオブジェクトを挿入する。
+- (2), (4) : `map` が `k` と同値のキーを持つ要素を持っている場合、何もしない（引数への副作用もない）。そうでなければ、[`piecewise_construct`](/reference/utility/piecewise_construct_t.md), [`forward_as_tuple`](/reference/tuple/forward_as_tuple.md)`(`[`move`](/reference/utility/move.md)`(k))`, [`forward_as_tuple`](/reference/tuple/forward_as_tuple.md)`(`[`forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...)` から構築した `value_type` 型のオブジェクトを挿入する。
 
 
 ## 戻り値
-- (1)、(2)、(5) : イテレータと `bool` 値の [`pair`](/reference/utility/pair.md) を返す。
+- (1), (2), (5) : イテレータと `bool` 値の [`pair`](/reference/utility/pair.md) を返す。
     - 挿入された場合には、`first` に挿入された要素へのイテレータ、`second` に `true` が設定される。
     - 挿入されなかった場合には、`first` に `k` と等価のキーを持つ既存の要素へのイテレータ、`second` に `false` が設定される。
-- (3)、(4)、(6) :
+- (3), (4), (6) :
     - 挿入された場合には、挿入された要素へのイテレータを返す。
     - 挿入されなかった場合には、`k` と等価のキーを持つ既存の要素へのイテレータを返す。
 
 
 ## 計算量
-- (1)、(2)、(5) : [`emplace`](emplace.md) と同じ。
-- (3)、(4)、(6) : [`emplace_hint`](emplace_hint.md) と同じ。
+- (1), (2), (5) : [`emplace`](emplace.md) と同じ。
+- (3), (4), (6) : [`emplace_hint`](emplace_hint.md) と同じ。
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/map/multimap/op_constructor.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/map/multimap/op_constructor.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/multimap/op_constructor.md b/reference/map/multimap/op_constructor.md
index b3d68db06..8543c63cd 100644
--- a/reference/map/multimap/op_constructor.md
+++ b/reference/map/multimap/op_constructor.md
@@ -78,13 +78,13 @@ multimap(from_range_t, R&amp;amp;&amp;amp; rg,
 
 
 ## 計算量
-- (1)、(2)、(3) 定数時間
-- (4)、(5) `N =` [`distance`](../../iterator/distance.md)`(first, last)` とすると、範囲 `[first, last)` が比較オブジェクト `comp` によって既にソート済みである場合は `N` に比例、そうでなければ `N log N` に比例
-- (6)、(7) `x.`[`size`](size.md)`()` に対して線形時間
+- (1), (2), (3) 定数時間
+- (4), (5) `N =` [`distance`](../../iterator/distance.md)`(first, last)` とすると、範囲 `[first, last)` が比較オブジェクト `comp` によって既にソート済みである場合は `N` に比例、そうでなければ `N log N` に比例
+- (6), (7) `x.`[`size`](size.md)`()` に対して線形時間
 - (8) 定数時間
 - (9) 定数時間。ただし、`alloc == y.`[`get_allocator`](get_allocator.md)`()` でなければ `y.`[`size`](size.md)`()` に対して線形時間
-- (10)、(11) `N = init.`[`size`](../../initializer_list/initializer_list/size.md)`()` とすると、範囲 `[init.`[`begin`](../../initializer_list/initializer_list/begin.md)`(), init.`[`end`](../../initializer_list/initializer_list/end.md)`())` が比較オブジェクト `comp` によって既にソート済みである場合は `N` に比例、そうでなければ `N log N` に比例
-- (12)、(13) `N =` [`ranges::distance`](../../iterator/ranges_distance.md)`(rg)` とすると、`rg` が比較オブジェクト `comp` によって既にソート済みである場合は `N` に比例、そうでなければ `N log N` に比例
+- (10), (11) `N = init.`[`size`](../../initializer_list/initializer_list/size.md)`()` とすると、範囲 `[init.`[`begin`](../../initializer_list/initializer_list/begin.md)`(), init.`[`end`](../../initializer_list/initializer_list/end.md)`())` が比較オブジェクト `comp` によって既にソート済みである場合は `N` に比例、そうでなければ `N log N` に比例
+- (12), (13) `N =` [`ranges::distance`](../../iterator/ranges_distance.md)`(rg)` とすると、`rg` が比較オブジェクト `comp` によって既にソート済みである場合は `N` に比例、そうでなければ `N log N` に比例
 
 
 ## 備考
@@ -169,5 +169,5 @@ Size of m2: 3
 - [LWG 2193. Default constructors for standard library containers are explicit](http://cplusplus.github.io/LWG/lwg-defects.html#2193)  
     (1) + (2) の形式を 2 つのオーバーロードに分割するきっかけとなったレポート
 - [LWG 2210. Missing allocator-extended constructor for allocator-aware containers](http://cplusplus.github.io/LWG/lwg-defects.html#2210)  
-    (5)、(11) の形式を追加するきっかけとなったレポート  
+    (5), (11) の形式を追加するきっかけとなったレポート  
     なお、Discussion の例はアロケータの型が誤っているので注意
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uses_allocator_construction_args -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/memory/uses_allocator_construction_args.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/memory/uses_allocator_construction_args.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/uses_allocator_construction_args.md b/reference/memory/uses_allocator_construction_args.md
index 3fbbeec45..133a4af45 100644
--- a/reference/memory/uses_allocator_construction_args.md
+++ b/reference/memory/uses_allocator_construction_args.md
@@ -35,7 +35,7 @@ template&amp;lt;class T, class Alloc, class U, class V&amp;gt;
 
 ## テンプレートパラメータ制約
 - (1) : `T` が [`pair`](../utility/pair.md) の特殊化**ではない**場合のみオーバーロード解決に参加する
-- (2)～(6) : `T` が [`pair`](../utility/pair.md) の特殊化**である**場合のみオーバーロード解決に参加する
+- (2)-(6) : `T` が [`pair`](../utility/pair.md) の特殊化**である**場合のみオーバーロード解決に参加する
 
 
 ## 戻り値
@@ -141,7 +141,7 @@ uses_allocator_construction_args&amp;lt;T&amp;gt;(alloc, piecewise_construct,
 	ただし、実際には構築まで実施する [`make_obj_using_allocator`](make_obj_using_allocator.md) や [`uninitialized_construct_using_allocator`](uninitialized_construct_using_allocator.md) が存在するため、これらの関数を直接呼び出す機会はあまり多くはないだろう。
 - 上記 (1) を見ればわかる通り、uses-allocator 構築は、その名前に反して必ずしもアロケータオブジェクトを使うとは限らないので注意。  
 	（[`uses_allocator_v`](uses_allocator.md)`&amp;lt;T, Alloc&amp;gt;` が `false` の場合、アロケータオブジェクト `alloc` は無視される）
-- 上記 (2)～(6) を見ればわかる通り、`T` が [`pair`](../utility/pair.md) の場合には再帰的に `uses_allocator_construction_args` を呼び出しているため、ネストした [`pair`](../utility/pair.md) に対しても正しく uses-allocator 構築をサポートできる。
+- 上記 (2)-(6) を見ればわかる通り、`T` が [`pair`](../utility/pair.md) の場合には再帰的に `uses_allocator_construction_args` を呼び出しているため、ネストした [`pair`](../utility/pair.md) に対しても正しく uses-allocator 構築をサポートできる。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/memory_resource/monotonic_buffer_resource/op_constructor.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/memory_resource/monotonic_buffer_resource/op_constructor.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory_resource/monotonic_buffer_resource/op_constructor.md b/reference/memory_resource/monotonic_buffer_resource/op_constructor.md
index 67e7ebe4d..f9aa78739 100644
--- a/reference/memory_resource/monotonic_buffer_resource/op_constructor.md
+++ b/reference/memory_resource/monotonic_buffer_resource/op_constructor.md
@@ -38,9 +38,9 @@ monotonic_buffer_resource(const monotonic_buffer_resource&amp;amp;) = delete;
 
 ## 要件
 
-- (1)(2)(3) : `upstream`は有効な`memory_resource`オブジェクトを指していること。（当然、nullでないこと）
-- (2)(5) : `initial_size`は0より大きいこと
-- (3)(6) : `buffer_size`は`buffer`に割り当てられているメモリ領域のサイズ以下であること。
+- (1), (2), (3) : `upstream`は有効な`memory_resource`オブジェクトを指していること。（当然、nullでないこと）
+- (2), (5) : `initial_size`は0より大きいこと
+- (3), (6) : `buffer_size`は`buffer`に割り当てられているメモリ領域のサイズ以下であること。
 
 ## 引数
 
@@ -63,7 +63,7 @@ monotonic_buffer_resource(const monotonic_buffer_resource&amp;amp;) = delete;
 
 - (6) : `buffer`と`buffer_size`及び[`get_default_resource()`](/reference/memory_resource/get_default_resource.md)から取得した`memory_resource`を(3)に渡し委譲
 
-(4)(5)(6)のコンストラクタは上流メモリリソースとして[`get_default_resource()`](/reference/memory_resource/get_default_resource.md)から取得した`memory_resource`を利用する。
+(4), (5), (6)のコンストラクタは上流メモリリソースとして[`get_default_resource()`](/reference/memory_resource/get_default_resource.md)から取得した`memory_resource`を利用する。
 
 ## 備考
 どのコンストラクタの初期化においても、上流メモリリソースの所有権を保持しない。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/memory_resource/polymorphic_allocator/op_constructor.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/memory_resource/polymorphic_allocator/op_constructor.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory_resource/polymorphic_allocator/op_constructor.md b/reference/memory_resource/polymorphic_allocator/op_constructor.md
index 1fdbcee0b..3d974e9ed 100644
--- a/reference/memory_resource/polymorphic_allocator/op_constructor.md
+++ b/reference/memory_resource/polymorphic_allocator/op_constructor.md
@@ -32,10 +32,10 @@ polymorphic_allocator(const polymorphic_allocator&amp;lt;U&amp;gt;&amp;amp; other) noexcept;  //(4)
 ## 効果
 - (1) : [`get_default_resource()`](/reference/memory_resource/get_default_resource.md)からデフォルトの`memory_resource`を取得して構築
 - (2) : `r`を`memory_resource`として構築
-- (3)(4) : [`other.resource()`](resource.md)から`memory_resource`を取得して構築
+- (3), (4) : [`other.resource()`](resource.md)から`memory_resource`を取得して構築
 
 ## 例外
-- (1)(4) : 投げない
+- (1), (4) : 投げない
 
 ## 備考
 どのコンストラクタからの初期化においても、取得する`memory_resource`の所有権を保持しない。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/memory_resource/pool_resource/op_constructor.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/memory_resource/pool_resource/op_constructor.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory_resource/pool_resource/op_constructor.md b/reference/memory_resource/pool_resource/op_constructor.md
index bd0883de8..980f72734 100644
--- a/reference/memory_resource/pool_resource/op_constructor.md
+++ b/reference/memory_resource/pool_resource/op_constructor.md
@@ -34,7 +34,7 @@ pool_resource(const pool_resource&amp;amp;) = delete;                        //(5)
 
 ## 要件
 
-- (1)(3) : `upstream`は有効な`memory_resource`オブジェクトを指していること。（当然、nullでないこと）
+- (1), (3) : `upstream`は有効な`memory_resource`オブジェクトを指していること。（当然、nullでないこと）
 
 ## 引数
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>transform_reduce -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/numeric/transform_reduce.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/numeric/transform_reduce.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numeric/transform_reduce.md b/reference/numeric/transform_reduce.md
index a0731dc3c..32c7cbcf7 100644
--- a/reference/numeric/transform_reduce.md
+++ b/reference/numeric/transform_reduce.md
@@ -86,7 +86,7 @@ namespace std {
 ## 概要
 `transform_reduce()`は、イテレータ範囲の要素を変換しながら集計する関数である。
 
-(1)、(2)、(4)、(5)は、イテレータ範囲`[first1, last1)`の各要素を`x`、イテレータ範囲`[first2, first2+(last1 - first1))`の各要素を`y`として、初期値(`init`)と`binary_op2(x, y)`した各要素を合算したリストの任意の組み合わせに、順不同で`binary_op1(binary_op1(a, b), binary_op1(c, d))`のように適用していき、集計値を計算する。
+(1), (2), (4), (5)は、イテレータ範囲`[first1, last1)`の各要素を`x`、イテレータ範囲`[first2, first2+(last1 - first1))`の各要素を`y`として、初期値(`init`)と`binary_op2(x, y)`した各要素を合算したリストの任意の組み合わせに、順不同で`binary_op1(binary_op1(a, b), binary_op1(c, d))`のように適用していき、集計値を計算する。
 
 (3)と(6)は、初期値(`init`)と、イテレータ範囲`[first, last)`の各要素に関数オブジェクト`unary_op`を適用して合算したリストの任意の組み合わせに、順不同で`binary_op(binary_op(a, b), binary_op(c, d))`のように適用していき、集計値を計算する。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;&lt; (非メンバ関数) -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/ostream/basic_ostream/op_ostream_free.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/ostream/basic_ostream/op_ostream_free.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ostream/basic_ostream/op_ostream_free.md b/reference/ostream/basic_ostream/op_ostream_free.md
index 3ea6ffb76..f655a5dad 100644
--- a/reference/ostream/basic_ostream/op_ostream_free.md
+++ b/reference/ostream/basic_ostream/op_ostream_free.md
@@ -74,17 +74,17 @@ namespace std {
 
 ## 効果
 
-### (1)～(5) 文字の書式化出力
+### (1)-(5) 文字の書式化出力
 
 文字 `c` を出力ストリーム `os` に出力する。この際、`os` に設定されている幅、埋め文字、および、整列方向に従う。  
 なお、(2) の形式（`os` の文字型（`char_type`）が `char` 以外で `c` が `char` ）の時は、`c` を直接出力するのではなく、`os.`[`widen`](../../ios/basic_ios/widen.md)`(c)` を出力する。  
 出力後、幅指定は `0` にリセットされる。
 
-### (6)～(12) 文字の書式化出力 (C++20)
+### (6)-(12) 文字の書式化出力 (C++20)
 
 これらの関数は削除されている
 
-### (13)～(17) 文字列の書式化出力
+### (13)-(17) 文字列の書式化出力
 
 ヌル終端文字列 `s` を出力ストリーム `os` に出力する。この際、`os` に設定されている幅、埋め文字、および、整列方向に従う。  
 出力する文字列の長さは以下で求める。
@@ -96,7 +96,7 @@ namespace std {
 なお、(14) の形式（`os` の文字型（`char_type`）が `char` 以外で `s` が `const char*`）の時は、`s` の各文字 `c` を直接出力するのではなく、`os.`[`widen`](../../ios/basic_ios/widen.md)`(c)` を出力する。  
 出力後、幅指定は `0` にリセットされる。
 
-### (18)～(24) 文字列の書式化出力 (C++20)
+### (18)-(24) 文字列の書式化出力 (C++20)
 
 これらの関数は削除されている
 
@@ -119,7 +119,7 @@ namespace std {
 
 ## 例
 
-### (1)、(2)、(13)、(14) の例
+### (1), (2), (13), (14) の例
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;iomanip&amp;gt;
@@ -148,7 +148,7 @@ cpprefjp++
 cpprefjp++
 ```
 
-### (3)～(5)、(15)～(17) の例
+### (3)-(5), (15)-(17) の例
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;iomanip&amp;gt;
@@ -227,7 +227,7 @@ int main()
 
 これは`char8_t`/`char16_t`/`char32_t`に対するostreamの`operator&amp;lt;&amp;lt;`が提供されないため、他のオーバーロードが選ばれるためにこのような直感に反する挙動が発生する。
 
-そこで(6)～(12)、(18)～(24)のように`delete`指定された`operator&amp;lt;&amp;lt;`を追加することで不適格にし、このような直感的ではない挙動を避ける。
+そこで(6)-(12), (18)-(24)のように`delete`指定された`operator&amp;lt;&amp;lt;`を追加することで不適格にし、このような直感的ではない挙動を避ける。
 
 [機能テストマクロ](/lang/cpp20/feature_test_macros.md)は`__cpp_lib_char8_t`で、値は`201907`。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/random/linear_congruential_engine/op_constructor.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/random/linear_congruential_engine/op_constructor.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/linear_congruential_engine/op_constructor.md b/reference/random/linear_congruential_engine/op_constructor.md
index 86189541c..9aa822f6a 100644
--- a/reference/random/linear_congruential_engine/op_constructor.md
+++ b/reference/random/linear_congruential_engine/op_constructor.md
@@ -29,7 +29,7 @@ linear_congruential_engine(linear_congruential_engine&amp;amp;&amp;amp; e) = default;      // (5
 
 
 ## 計算量
-- (1)(2) : O(1)
+- (1), (2) : O(1)
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/random/mersenne_twister_engine/op_constructor.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/random/mersenne_twister_engine/op_constructor.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/mersenne_twister_engine/op_constructor.md b/reference/random/mersenne_twister_engine/op_constructor.md
index 1df5e50f4..316b35872 100644
--- a/reference/random/mersenne_twister_engine/op_constructor.md
+++ b/reference/random/mersenne_twister_engine/op_constructor.md
@@ -29,7 +29,7 @@ mersenne_twister_engine(mersenne_twister_engine&amp;amp;&amp;amp; e) = default;      // (5)
 
 
 ## 計算量
-- (1)(2) : 状態のサイズ `n` (`mersenne_twister_engine::state_size`) に対し O(n)
+- (1), (2) : 状態のサイズ `n` (`mersenne_twister_engine::state_size`) に対し O(n)
 - (5) : 状態シーケンスの要素数はコンパイル時に決定されるため、多くの場合状態シーケンスはスタック上(配列)に作られる。そのため、ムーブが効果的に動作することは期待できない
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/random/random_device/op_constructor.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/random/random_device/op_constructor.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/random_device/op_constructor.md b/reference/random/random_device/op_constructor.md
index cfc1661bc..f4efdfc36 100644
--- a/reference/random/random_device/op_constructor.md
+++ b/reference/random/random_device/op_constructor.md
@@ -37,7 +37,7 @@ random_device(const random_device&amp;amp;) = delete;                         // (3)
       デフォルトでは、CPU の `RDRAND` 命令が使用できれば (`_GLIBCXX_X86_RDRAND` が定義されていれば) それを、そうでなければ `/dev/urandom` から値を取得する
 
 ## 例外
-- (1)(2) : 乱数生成器を初期化できなかった場合、[`exception`](/reference/exception/exception.md)から派生した実装定義の例外オブジェクトを送出する
+- (1), (2) : 乱数生成器を初期化できなかった場合、[`exception`](/reference/exception/exception.md)から派生した実装定義の例外オブジェクトを送出する
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/random/subtract_with_carry_engine/op_constructor.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/random/subtract_with_carry_engine/op_constructor.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/subtract_with_carry_engine/op_constructor.md b/reference/random/subtract_with_carry_engine/op_constructor.md
index a954e310d..cadd3aaf4 100644
--- a/reference/random/subtract_with_carry_engine/op_constructor.md
+++ b/reference/random/subtract_with_carry_engine/op_constructor.md
@@ -35,7 +35,7 @@ subtract_with_carry_engine(subtract_with_carry_engine&amp;amp;&amp;amp; e) = default;      // (5
 
 
 ## 計算量
-- (1)(2) : 正確に $n \times \mathtt{r}$ 回 (`r` は `subtract_with_carry_engine::long_lag`) [`linear_congruential_engine` を呼ぶ](../linear_congruential_engine/op_call.md)
+- (1), (2) : 正確に $n \times \mathtt{r}$ 回 (`r` は `subtract_with_carry_engine::long_lag`) [`linear_congruential_engine` を呼ぶ](../linear_congruential_engine/op_call.md)
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/random/uniform_int_distribution/op_constructor.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/random/uniform_int_distribution/op_constructor.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/uniform_int_distribution/op_constructor.md b/reference/random/uniform_int_distribution/op_constructor.md
index 0335d5c4a..c15737711 100644
--- a/reference/random/uniform_int_distribution/op_constructor.md
+++ b/reference/random/uniform_int_distribution/op_constructor.md
@@ -28,7 +28,7 @@ explicit uniform_int_distribution(const param_type&amp;amp; parm);                     /
 
 
 ## 要件
-- (1)(2) : `a &amp;lt;= b`であること
+- (1), (2) : `a &amp;lt;= b`であること
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/random/uniform_real_distribution/op_constructor.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/random/uniform_real_distribution/op_constructor.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/uniform_real_distribution/op_constructor.md b/reference/random/uniform_real_distribution/op_constructor.md
index 990146a3d..52da9ba0f 100644
--- a/reference/random/uniform_real_distribution/op_constructor.md
+++ b/reference/random/uniform_real_distribution/op_constructor.md
@@ -24,7 +24,7 @@ explicit uniform_real_distribution(const param_type&amp;amp; parm);             // (3)
 
 
 ## 要件
-- (1)(2) : `a &amp;lt;= b`かつ`b - a &amp;lt;=` [`numeric_limits`](/reference/limits/numeric_limits.md)`&amp;lt;RealType&amp;gt;::`[`max()`](/reference/limits/numeric_limits/max.md)であること
+- (1), (2) : `a &amp;lt;= b`かつ`b - a &amp;lt;=` [`numeric_limits`](/reference/limits/numeric_limits.md)`&amp;lt;RealType&amp;gt;::`[`max()`](/reference/limits/numeric_limits/max.md)であること
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/ranges/as_const_view/begin.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/ranges/as_const_view/begin.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/as_const_view/begin.md b/reference/ranges/as_const_view/begin.md
index ccd9c8247..0cd45667b 100644
--- a/reference/ranges/as_const_view/begin.md
+++ b/reference/ranges/as_const_view/begin.md
@@ -18,7 +18,7 @@ constexpr auto begin() const requires range&amp;lt;const V&amp;gt;;   // (2)
 
 ## 戻り値
 
-入力`view`（`V`）のオブジェクトを`base_`というメンバに保持するとして、(1)(2)どちらも
+入力`view`（`V`）のオブジェクトを`base_`というメンバに保持するとして、(1), (2)どちらも
 
 ```cpp
 return ranges::cbegin(base_);
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/ranges/as_const_view/end.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/ranges/as_const_view/end.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/as_const_view/end.md b/reference/ranges/as_const_view/end.md
index 5b08c30cc..b1c953ed1 100644
--- a/reference/ranges/as_const_view/end.md
+++ b/reference/ranges/as_const_view/end.md
@@ -18,7 +18,7 @@ constexpr auto end() const requires range&amp;lt;const V&amp;gt;; // (2)
 
 ## 戻り値
 
-入力`view`（`V`）のオブジェクトを`base_`というメンバに保持するとして、(1)(2)どちらも
+入力`view`（`V`）のオブジェクトを`base_`というメンバに保持するとして、(1), (2)どちらも
 
 ```cpp
 return ranges::cend(base_);
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>size -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/ranges/as_const_view/size.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/ranges/as_const_view/size.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/as_const_view/size.md b/reference/ranges/as_const_view/size.md
index 392911257..0ddeace6e 100644
--- a/reference/ranges/as_const_view/size.md
+++ b/reference/ranges/as_const_view/size.md
@@ -19,7 +19,7 @@ constexpr auto size() const requires sized_range&amp;lt;const V&amp;gt;;  // (2)
 
 ## 戻り値
 
-入力`view`（`V`）のオブジェクトを`base_`というメンバに保持するとして、(1)(2)どちらも
+入力`view`（`V`）のオブジェクトを`base_`というメンバに保持するとして、(1), (2)どちらも
 
 ```cpp
 return ranges::size(base_);
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>back -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/ranges/view_interface/back.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/ranges/view_interface/back.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/view_interface/back.md b/reference/ranges/view_interface/back.md
index ab7524777..51a2d6d3b 100644
--- a/reference/ranges/view_interface/back.md
+++ b/reference/ranges/view_interface/back.md
@@ -28,7 +28,7 @@ Rangeの末尾の要素を取得する。
 `!`[`empty`](empty.md)`()`
 
 ## 戻り値
-(1)、(2)共に、以下と等価：
+(1), (2)共に、以下と等価：
 
 ```cpp
 *ranges::prev(ranges::end(derived()))
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cbegin -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/ranges/view_interface/cbegin.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/ranges/view_interface/cbegin.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/view_interface/cbegin.md b/reference/ranges/view_interface/cbegin.md
index 39c4b302d..f00bb033a 100644
--- a/reference/ranges/view_interface/cbegin.md
+++ b/reference/ranges/view_interface/cbegin.md
@@ -20,7 +20,7 @@ Rangeの定数イテレータを取得する。
 
 ## 戻り値
 
-(1)、(2)共に、以下と等価
+(1), (2)共に、以下と等価
 
 ```cpp
 return ranges::cbegin(derived());
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cend -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/ranges/view_interface/cend.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/ranges/view_interface/cend.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/view_interface/cend.md b/reference/ranges/view_interface/cend.md
index 5c652bc21..76fd620a1 100644
--- a/reference/ranges/view_interface/cend.md
+++ b/reference/ranges/view_interface/cend.md
@@ -20,7 +20,7 @@ Rangeの定数イテレータに対応する番兵を取得する。
 
 ## 戻り値
 
-(1)、(2)共に、以下と等価
+(1), (2)共に、以下と等価
 
 ```cpp
 return ranges::cend(derived());
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>data -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/ranges/view_interface/data.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/ranges/view_interface/data.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/view_interface/data.md b/reference/ranges/view_interface/data.md
index d42c3a64f..2ad22e1b3 100644
--- a/reference/ranges/view_interface/data.md
+++ b/reference/ranges/view_interface/data.md
@@ -26,7 +26,7 @@ Rangeの要素へのポインタを取得する。
 - (2): `const D`が[`range`](../range.md)かつ`const D`のイテレータが[`contiguous_iterator`](/reference/iterator/contiguous_iterator.md)であること。
 
 ## 戻り値
-(1)、(2)共に、以下と等価：
+(1), (2)共に、以下と等価：
 
 ```cpp
 to_address(ranges::begin(derived()));
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>empty -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/ranges/view_interface/empty.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/ranges/view_interface/empty.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/view_interface/empty.md b/reference/ranges/view_interface/empty.md
index 3ed312c3e..2cdc27261 100644
--- a/reference/ranges/view_interface/empty.md
+++ b/reference/ranges/view_interface/empty.md
@@ -25,7 +25,7 @@ Rangeが空かどうかを判定する。
 - (2): `const D`が[`sized_range`](../sized_range.md)もしくは[`forward_range`](../forward_range.md)であること。
 
 ## 戻り値
-(1)、(2)共に、以下と等価：
+(1), (2)共に、以下と等価：
 
 ```cpp
 ranges::begin(derived()) == ranges::end(derived())
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>front -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/ranges/view_interface/front.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/ranges/view_interface/front.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/view_interface/front.md b/reference/ranges/view_interface/front.md
index d7b45e158..832ab5167 100644
--- a/reference/ranges/view_interface/front.md
+++ b/reference/ranges/view_interface/front.md
@@ -27,7 +27,7 @@ Rangeの先頭の要素を取得する。
 `!`[`empty`](empty.md)`()`
 
 ## 戻り値
-(1)、(2)共に、以下と等価：
+(1), (2)共に、以下と等価：
 
 ```cpp
 *ranges::begin(derived())
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator [] -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/ranges/view_interface/op_at.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/ranges/view_interface/op_at.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/view_interface/op_at.md b/reference/ranges/view_interface/op_at.md
index c52ada1e1..00ef7c67c 100644
--- a/reference/ranges/view_interface/op_at.md
+++ b/reference/ranges/view_interface/op_at.md
@@ -22,7 +22,7 @@ Rangeの要素にアクセスする。
 `R`が[`random_access_range`](../random_access_range.md)であること。
 
 ## 戻り値
-(1)、(2)共に、以下と等価：
+(1), (2)共に、以下と等価：
 
 ```cpp
 ranges::begin(derived())[n];
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator bool -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/ranges/view_interface/op_bool.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/ranges/view_interface/op_bool.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/view_interface/op_bool.md b/reference/ranges/view_interface/op_bool.md
index d02e69d76..00eb64403 100644
--- a/reference/ranges/view_interface/op_bool.md
+++ b/reference/ranges/view_interface/op_bool.md
@@ -22,7 +22,7 @@ Rangeが空かどうかを判定する。
 式[`ranges::empty`](../empty.md)`(`[`derived`](derived.md)`())`が有効であること。
 
 ## 戻り値
-(1)、(2)共に、以下と等価：
+(1), (2)共に、以下と等価：
 
 ```cpp
 !ranges::empty(derived())
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>size -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/ranges/view_interface/size.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/ranges/view_interface/size.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/view_interface/size.md b/reference/ranges/view_interface/size.md
index 73bbe46b1..33e356b7b 100644
--- a/reference/ranges/view_interface/size.md
+++ b/reference/ranges/view_interface/size.md
@@ -27,7 +27,7 @@ Rangeの大きさを取得する。
 - (2): `const D`が[`forward_range`](../forward_range.md)であり、`const D`のイテレータ`I`と番兵`S`が[`sized_sentinel_for`](/reference/iterator/sized_sentinel_for.md)を満たすこと。
 
 ## 戻り値
-(1)、(2)共に、以下と等価：
+(1), (2)共に、以下と等価：
 
 ```cpp
 ranges::end(derived()) - ranges::begin(derived());
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/regex/match_results/op_assign.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/regex/match_results/op_assign.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/regex/match_results/op_assign.md b/reference/regex/match_results/op_assign.md
index 40465f41a..9b39f782f 100644
--- a/reference/regex/match_results/op_assign.md
+++ b/reference/regex/match_results/op_assign.md
@@ -26,7 +26,7 @@ match_results&amp;amp; operator=(match_results&amp;amp;&amp;amp; m) noexcept;   // (2)
 
 
 ## 事後条件
-- (1)、(2) 以下の表を満たす。
+- (1), (2) 以下の表を満たす。
 
     | 要素                                    | 値                                                                                            |
     |-----------------------------------------|-----------------------------------------------------------------------------------------------|
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/regex/match_results/op_constructor.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/regex/match_results/op_constructor.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/regex/match_results/op_constructor.md b/reference/regex/match_results/op_constructor.md
index a7f503564..659426002 100644
--- a/reference/regex/match_results/op_constructor.md
+++ b/reference/regex/match_results/op_constructor.md
@@ -34,7 +34,7 @@ match_results(match_results&amp;amp;&amp;amp; m) noexcept;          // (4)
 
 
 ## 事後条件
-- (1)(2) [`ready`](ready.md)`() == false`、かつ、[`size`](size.md)`() == 0`、かつ、[`get_allocator`](get_allocator.md)`() == a`
+- (1), (2) [`ready`](ready.md)`() == false`、かつ、[`size`](size.md)`() == 0`、かつ、[`get_allocator`](get_allocator.md)`() == a`
 - (3) 構築したオブジェクトを `u` とすると、`u == m`
 - (4) 以下の表を満たす。
 
@@ -52,7 +52,7 @@ match_results(match_results&amp;amp;&amp;amp; m) noexcept;          // (4)
 
 
 ## 計算量
-- (1)(2) 定数時間
+- (1), (2) 定数時間
 - (3) 線形時間
 - (4) 定数時間
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>regex_replace -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/regex/regex_replace.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/regex/regex_replace.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/regex/regex_replace.md b/reference/regex/regex_replace.md
index 1b131f713..97adb92ac 100644
--- a/reference/regex/regex_replace.md
+++ b/reference/regex/regex_replace.md
@@ -64,18 +64,18 @@ namespace std {
 
 
 ## 効果
-- (1)、(2) `[first, last)` で指定された文字列内に出現する、正規表現 `e` にマッチする部分を、置換文字列 `fmt` で置換した結果を出力イテレータ `out` に出力する。  
+- (1), (2) `[first, last)` で指定された文字列内に出現する、正規表現 `e` にマッチする部分を、置換文字列 `fmt` で置換した結果を出力イテレータ `out` に出力する。  
     置換文字列 `fmt` には通常の文字の他、マッチした文字列全体やキャプチャグループを表すシーケンスを使用することができる。  
     指定可能なシーケンスは、デフォルトでは ECMAScript の置換文字列と等価であるが、`flags` に [`regex_constants::format_sed`](regex_constants/match_flag_type.md) が指定されていた場合には POSIX にて規定されている sed の置換文字列と等価となる。  
     なお、デフォルトでは全てのマッチする部分が `fmt` で置換されるが、`flags` に [`regex_constants::format_first_only`](regex_constants/match_flag_type.md) が指定されていた場合には最初にマッチする部分のみが置換される。  
     また、デフォルトではマッチしない部分はそのまま `out` に出力されるが、`flags` に [`regex_constants::format_no_copy`](regex_constants/match_flag_type.md) が指定されていた場合には、マッチしない部分は `out` には出力されない。
-- (3)、(4) 置換対象文字列が [`basic_string`](../string/basic_string.md)`&amp;lt;charT, ST, SA&amp;gt;` 型の文字列 `s` であること、および、置換結果が [`basic_string`](../string/basic_string.md)`&amp;lt;charT, ST, SA&amp;gt;` 型の文字列として返される点を除いて、(1)、(2) と同様である。
-- (5)、(6) 置換対象文字列が `const charT*` 型の文字列 `s` であること、および、置換結果が [`basic_string`](../string/basic_string.md)`&amp;lt;charT&amp;gt;` 型の文字列として返される点を除いて、(1)、(2) と同様である。
+- (3), (4) 置換対象文字列が [`basic_string`](../string/basic_string.md)`&amp;lt;charT, ST, SA&amp;gt;` 型の文字列 `s` であること、および、置換結果が [`basic_string`](../string/basic_string.md)`&amp;lt;charT, ST, SA&amp;gt;` 型の文字列として返される点を除いて、(1), (2) と同様である。
+- (5), (6) 置換対象文字列が `const charT*` 型の文字列 `s` であること、および、置換結果が [`basic_string`](../string/basic_string.md)`&amp;lt;charT&amp;gt;` 型の文字列として返される点を除いて、(1), (2) と同様である。
 
 ## 戻り値
-- (1)、(2) 置換結果出力後の `out`（引数のコピーではない）
-- (3)、(4) 置換結果の文字列
-- (5)、(6) 置換結果の文字列
+- (1), (2) 置換結果出力後の `out`（引数のコピーではない）
+- (3), (4) 置換結果の文字列
+- (5), (6) 置換結果の文字列
 
 
 ## 例外
@@ -86,7 +86,7 @@ namespace std {
 ## 備考
 本関数の正確な挙動は以下の通りである。
 
-- (1)、(2) [`regex_iterator`](regex_iterator.md) 型のオブジェクト `i` を
+- (1), (2) [`regex_iterator`](regex_iterator.md) 型のオブジェクト `i` を
 
     ```cpp
     regex_iterator&amp;lt;BidirectionalIterator, charT, traits&amp;gt; i(first, last, e, flags)
@@ -147,9 +147,9 @@ namespace std {
 
         を呼び出す。
 
-- (3)、(4) [`basic_string`](../string/basic_string.md)`&amp;lt;charT, ST, SA&amp;gt;` 型の空の文字列オブジェクト `result` を構築し、`regex_replace(`[`back_inserter`](../iterator/back_inserter.md)`(result), s.`[`begin`](../string/basic_string/begin.md)`(), s.`[`end`](../string/basic_string/end.md)`(), e, fmt, flags)` を呼び出す。  
+- (3), (4) [`basic_string`](../string/basic_string.md)`&amp;lt;charT, ST, SA&amp;gt;` 型の空の文字列オブジェクト `result` を構築し、`regex_replace(`[`back_inserter`](../iterator/back_inserter.md)`(result), s.`[`begin`](../string/basic_string/begin.md)`(), s.`[`end`](../string/basic_string/end.md)`(), e, fmt, flags)` を呼び出す。  
     戻り値は `result` となる。
-- (5)、(6) [`basic_string`](../string/basic_string.md)`&amp;lt;charT&amp;gt;` 型の空の文字列オブジェクト `result` を構築し、`regex_replace(`[`back_inserter`](../iterator/back_inserter.md)`(result), s, s +` [`char_traits`](../string/char_traits.md)`::`[`length`](../string/char_traits/length.md)`(s), e, fmt, flags)` を呼び出す。  
+- (5), (6) [`basic_string`](../string/basic_string.md)`&amp;lt;charT&amp;gt;` 型の空の文字列オブジェクト `result` を構築し、`regex_replace(`[`back_inserter`](../iterator/back_inserter.md)`(result), s, s +` [`char_traits`](../string/char_traits.md)`::`[`length`](../string/char_traits/length.md)`(s), e, fmt, flags)` を呼び出す。  
     戻り値は `result` となる。
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/regex/regex_token_iterator/op_constructor.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/regex/regex_token_iterator/op_constructor.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/regex/regex_token_iterator/op_constructor.md b/reference/regex/regex_token_iterator/op_constructor.md
index 3f9403e0b..c6b22ca93 100644
--- a/reference/regex/regex_token_iterator/op_constructor.md
+++ b/reference/regex/regex_token_iterator/op_constructor.md
@@ -57,12 +57,12 @@ regex_token_iterator(const regex_token_iterator&amp;amp;);
 
 ## 効果
 - (1) デフォルトコンストラクタ。シーケンス終端イテレータ（シーケンスの終端を示す特別なイテレータ）を構築する。
-- (2)～(5) メンバ変数 `subs` を、引数 `submatch` の 1 要素のみで（(2) の形式の場合）、あるいは、引数 `submatches` で（(3)～(5) の形式の場合）初期化する。
+- (2)-(5) メンバ変数 `subs` を、引数 `submatch` の 1 要素のみで（(2) の形式の場合）、あるいは、引数 `submatches` で（(3)-(5) の形式の場合）初期化する。
     また、メンバ変数 `N`、`position` をそれぞれ、`0`、[`regex_iterator`](../regex_iterator.md)`&amp;lt;BidirectionalIterator&amp;gt;(a, b, re, m)` で初期化する。
     もし、`position` がシーケンス終端イテレータでなければ、メンバ変数 `result` を現在のマッチ（備考参照）のアドレスに設定する。  
     そうでなくて、もし、メンバ変数 `subs` が `-1` を含んでいたら、`*this` を範囲 `[a, b)` を指す接尾辞イテレータとして設定する。  
     そうでなければ、`*this` をシーケンス終端イテレータとして設定する。
-- (6)～(9) deleted コンストラクタであるため、使用するとコンパイルエラーとなる。（(2)～(5) の形式の `re` の型を `const regex_type&amp;amp;` から `regex_type&amp;amp;&amp;amp;` に変更したもの）
+- (6)-(9) deleted コンストラクタであるため、使用するとコンパイルエラーとなる。（(2)-(5) の形式の `re` の型を `const regex_type&amp;amp;` から `regex_type&amp;amp;&amp;amp;` に変更したもの）
 - (10) コピーコンストラクタ。
 
 
@@ -70,8 +70,8 @@ regex_token_iterator(const regex_token_iterator&amp;amp;);
 - 「現在のマッチ」とは、もし `subs[N]` が -1 の場合には `(*position).`[`prefix`](../match_results/prefix.md)`()`、そうでなければ `(*position).[subs[N]]` の事を指す。
 - メンバ変数 `subs`、`N`、`position`、`result` はあくまでも説明用のプライベートメンバ変数であるため、注意すること。
 - `regex_token_iterator` は、メンバ変数 `position` を通して指定された正規表現 `re` のコピーではなく、`re` へのポインタをオブジェクト内に保持するため、引数に渡した正規表現オブジェクトは当該イテレータを使用し終わるまで破棄されないようにする必要がある。  
-    従って、(2)～(5) の形式のコンストラクタに渡す引数 `re` に一時オブジェクトを指定することはほぼ間違いなくプログラミング上のエラーを意味する。  
-    (6)～(9) の形式のコンストラクタが C++14 で追加された理由は、この事態をコンパイル時に検出するためである。  
+    従って、(2)-(5) の形式のコンストラクタに渡す引数 `re` に一時オブジェクトを指定することはほぼ間違いなくプログラミング上のエラーを意味する。  
+    (6)-(9) の形式のコンストラクタが C++14 で追加された理由は、この事態をコンパイル時に検出するためである。  
     しかし、この追加のため、C++11 では適格となりうる以下のようなコードは C++14 ではコンパイルエラーになる。
     ```cpp
     void f(std::sregex_token_iterator&amp;amp;&amp;amp;);
@@ -161,5 +161,5 @@ match range = (67, 73), str = &amp;#39;value3&amp;#39;
 
 
 ### 備考
-- libstdc++ には 5.0.0 rev.218373 現在、(6)～(9) の形式のコンストラクタは存在しない。
-- libc++ には、3.4 までは (6)～(9) の形式のコンストラクタは存在しない。また、3.0 には (4) の形式のコンストラクタも存在しない。
+- libstdc++ には 5.0.0 rev.218373 現在、(6)-(9) の形式のコンストラクタは存在しない。
+- libc++ には、3.4 までは (6)-(9) の形式のコンストラクタは存在しない。また、3.0 には (4) の形式のコンストラクタも存在しない。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/set/multiset/op_constructor.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/set/multiset/op_constructor.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/multiset/op_constructor.md b/reference/set/multiset/op_constructor.md
index dff5fb8b5..d4022a8a6 100644
--- a/reference/set/multiset/op_constructor.md
+++ b/reference/set/multiset/op_constructor.md
@@ -152,6 +152,6 @@ Size of c2: 7
 - [LWG 2193. Default constructors for standard library containers are explicit](http://cplusplus.github.io/LWG/lwg-defects.html#2193)  
 	`explicit set(const Compare&amp;amp; comp = Compare(), const Allocator&amp;amp; alloc = Allocator());` を 2 つのオーバーロードに分割するきっかけとなったレポート
 - [LWG 2210. Missing allocator-extended constructor for allocator-aware containers](http://cplusplus.github.io/LWG/lwg-defects.html#2210)  
-    (5)、(11) を追加するきっかけとなったレポート  
+    (5), (11) を追加するきっかけとなったレポート  
     なお、Discussion の例はアロケータの型が誤っているので注意
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/set/set/op_constructor.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/set/set/op_constructor.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/set/op_constructor.md b/reference/set/set/op_constructor.md
index 69d2b4834..30ab3f2a0 100644
--- a/reference/set/set/op_constructor.md
+++ b/reference/set/set/op_constructor.md
@@ -152,6 +152,6 @@ Size of c2: 6
 - [LWG 2193. Default constructors for standard library containers are explicit](http://cplusplus.github.io/LWG/lwg-defects.html#2193)  
 	`explicit set(const Compare&amp;amp; comp = Compare(), const Allocator&amp;amp; alloc = Allocator());` を 2 つのオーバーロードに分割するきっかけとなったレポート
 - [LWG 2210. Missing allocator-extended constructor for allocator-aware containers](http://cplusplus.github.io/LWG/lwg-defects.html#2210)  
-    (5)、(11) を追加するきっかけとなったレポート  
+    (5), (11) を追加するきっかけとなったレポート  
     なお、Discussion の例はアロケータの型が誤っているので注意
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>append -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/append.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/string/basic_string/append.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/append.md b/reference/string/basic_string/append.md
index 8115e4703..b1be83c9b 100644
--- a/reference/string/basic_string/append.md
+++ b/reference/string/basic_string/append.md
@@ -68,7 +68,7 @@ constexpr basic_string&amp;amp;
 
 ## テンプレートパラメータ制約
 
-- (8)(9) : 以下の両方を満たしていること
+- (8), (9) : 以下の両方を満たしていること
     - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, `[`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;&amp;gt; == true`
     - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, const charT*&amp;gt; == false`
 
@@ -218,5 +218,5 @@ Hello, world
 - [P0254R2 Integrating `std::string_view` and `std::string`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0254r2.pdf)
 - [LWG Issue 2758. `std::string{}.assign(&amp;#34;ABCDE&amp;#34;, 0, 1)` is ambiguous](https://wg21.cmeerw.net/lwg/issue2758)
 - [LWG Issue 2946. LWG 2758&amp;#39;s resolution missed further corrections](https://wg21.cmeerw.net/lwg/issue2946)
-    - 意図しない暗黙変換防止のために`string_view`を受けるオーバーロード(8)(9)の引数型を`const T&amp;amp;`に変更
+    - 意図しない暗黙変換防止のために`string_view`を受けるオーバーロード(8), (9)の引数型を`const T&amp;amp;`に変更
 - [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>assign -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/assign.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/string/basic_string/assign.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/assign.md b/reference/string/basic_string/assign.md
index 8cdbf74ac..342e2d797 100644
--- a/reference/string/basic_string/assign.md
+++ b/reference/string/basic_string/assign.md
@@ -71,7 +71,7 @@ constexpr basic_string&amp;amp;
 
 ## テンプレートパラメータ制約
 
-- (9)(10) : 以下の両方を満たしていること
+- (9), (10) : 以下の両方を満たしていること
     - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, `[`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;&amp;gt; == true`
     - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, const charT*&amp;gt; == false`
 
@@ -210,5 +210,5 @@ s10 : Hello
 - [P0254R2 Integrating `std::string_view` and `std::string`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0254r2.pdf)
 - [LWG Issue 2758. `std::string{}.assign(&amp;#34;ABCDE&amp;#34;, 0, 1)` is ambiguous](https://wg21.cmeerw.net/lwg/issue2758)
 - [LWG Issue 2946. LWG 2758&amp;#39;s resolution missed further corrections](https://wg21.cmeerw.net/lwg/issue2946)
-    - 意図しない暗黙変換防止のために`string_view`を受けるオーバーロード(9)(10)の引数型を`const T&amp;amp;`に変更
+    - 意図しない暗黙変換防止のために`string_view`を受けるオーバーロード(9), (10)の引数型を`const T&amp;amp;`に変更
 - [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>compare -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/compare.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/string/basic_string/compare.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/compare.md b/reference/string/basic_string/compare.md
index dc9ef61c3..590f21960 100644
--- a/reference/string/basic_string/compare.md
+++ b/reference/string/basic_string/compare.md
@@ -101,17 +101,17 @@ constexpr int
 
 ## テンプレートパラメータ制約
 
-- (7)(8)(9) : 以下の両方を満たしていること
+- (7), (8), (9) : 以下の両方を満たしていること
     - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, `[`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;&amp;gt; == true`
     - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, const charT*&amp;gt; == false`
 
 ## 効果
-- (1) 自身の文字列長とパラメータ`str`の文字列長のうち、小さい長さを`rlen`とし、[`traits::compare`](/reference/string/char_traits/compare.md)`(`[`data()`](data.md)`, str.`[`data()`](data.md)`, rlen)`を呼び出す。
-- (7) 自身の文字列長とパラメータ`sv`の文字列長のうち、小さい長さを`rlen`とし、[`traits::compare`](/reference/string/char_traits/compare.md)`(`[`data()`](data.md)`, sv.`[`data()`](/reference/string_view/basic_string_view/data.md)`, rlen)`を呼び出す。
+- (1) : 自身の文字列長とパラメータ`str`の文字列長のうち、小さい長さを`rlen`とし、[`traits::compare`](/reference/string/char_traits/compare.md)`(`[`data()`](data.md)`, str.`[`data()`](data.md)`, rlen)`を呼び出す。
+- (7) : 自身の文字列長とパラメータ`sv`の文字列長のうち、小さい長さを`rlen`とし、[`traits::compare`](/reference/string/char_traits/compare.md)`(`[`data()`](data.md)`, sv.`[`data()`](/reference/string_view/basic_string_view/data.md)`, rlen)`を呼び出す。
 
 
 ## 戻り値
-- (1) 比較結果が非`0`を返した場合は、比較結果をそのまま返す。そうでなければ、以下の条件に従って戻り値を返す：
+- (1) : 比較結果が非`0`を返した場合は、比較結果をそのまま返す。そうでなければ、以下の条件に従って戻り値を返す：
 
 	| 条件                                                   | 戻り値                |
 	|--------------------------------------------------------|-----------------------|
@@ -119,14 +119,14 @@ constexpr int
 	| [`size()`](size.md) `==` `str.`[`size()`](size.md) | `0`を返す             |
 	| [`size()`](size.md) `&amp;gt;` `str.`[`size()`](size.md)  | `0`より大きい値を返す |
 
-- (2) `basic_string(*this, pos1, n1).compare(str)` と等価
-- (3) `basic_string(*this, pos1, n1).compare(basic_string(str, pos2, n2))` と等価
-- (4) `compare(basic_string(s))` と等価
-- (5) `basic_string(*this, pos, n1).compare(basic_string(s))` と等価
-- (6) `basic_string(*this, pos, n1).compare(basic_string(s, n2))` と等価
-- (7) (1)と同様の結果を返す。`return basic_string_view&amp;lt;charT, traits&amp;gt;(*this).`[`compare`](/reference/string_view/basic_string_view/compare.md)`(t);`と等価。
-- (8) `basic_string_view&amp;lt;charT, traits&amp;gt;(*this).`[`substr`](/reference/string_view/basic_string_view/substr.md)`(pos1, n1).`[`compare`](/reference/string_view/basic_string_view/compare.md)`(t)` と等価
-- (9) 以下と等価。
+- (2) : `basic_string(*this, pos1, n1).compare(str)` と等価
+- (3) : `basic_string(*this, pos1, n1).compare(basic_string(str, pos2, n2))` と等価
+- (4) : `compare(basic_string(s))` と等価
+- (5) : `basic_string(*this, pos, n1).compare(basic_string(s))` と等価
+- (6) : `basic_string(*this, pos, n1).compare(basic_string(s, n2))` と等価
+- (7) : (1)と同様の結果を返す。`return basic_string_view&amp;lt;charT, traits&amp;gt;(*this).`[`compare`](/reference/string_view/basic_string_view/compare.md)`(t);`と等価。
+- (8) : `basic_string_view&amp;lt;charT, traits&amp;gt;(*this).`[`substr`](/reference/string_view/basic_string_view/substr.md)`(pos1, n1).`[`compare`](/reference/string_view/basic_string_view/compare.md)`(t)` と等価
+- (9) : 以下と等価。
     ```cpp
     basic_string_view&amp;lt;charT, traits&amp;gt; s = *this, sv = t;
     return s.substr(pos1, n1).compare(sv.substr(pos2, n2));
@@ -168,5 +168,5 @@ int main()
 - [P0254R2 Integrating `std::string_view` and `std::string`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0254r2.pdf)
 - [LWG Issue 2758. `std::string{}.assign(&amp;#34;ABCDE&amp;#34;, 0, 1)` is ambiguous](https://wg21.cmeerw.net/lwg/issue2758)
 - [LWG Issue 2946. LWG 2758&amp;#39;s resolution missed further corrections](https://wg21.cmeerw.net/lwg/issue2946)
-    - 意図しない暗黙変換防止のために`string_view`を受けるオーバーロード(7)(8)(9)の引数型を`const T&amp;amp;`に変更
+    - 意図しない暗黙変換防止のために`string_view`を受けるオーバーロード(7), (8), (9)の引数型を`const T&amp;amp;`に変更
 - [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>find -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/find.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/string/basic_string/find.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/find.md b/reference/string/basic_string/find.md
index 8f6ffd1c1..2fd2c4437 100644
--- a/reference/string/basic_string/find.md
+++ b/reference/string/basic_string/find.md
@@ -64,11 +64,11 @@ constexpr size_type
 
 
 ## 効果
-- (1) `pos` 以降で最初に `str` と一致する位置を返す。
-- (2) `pos` 以降で最初に `s` と一致する位置を返す。`s` は長さ `n` の文字列へのポインタである。
-- (3) (2) と同様だが、こちらは NULL 終端の文字列を扱う。
-- (4) `pos` 以降で最初に `c` と一致する位置を返す。
-- (5) `basic_string_view&amp;lt;charT, traits&amp;gt; sv = t;`として変数`sv`を作成し、`pos` 以降で最初に `sv` と一致する位置を返す。
+- (1) : `pos` 以降で最初に `str` と一致する位置を返す。
+- (2) : `pos` 以降で最初に `s` と一致する位置を返す。`s` は長さ `n` の文字列へのポインタである。
+- (3) : (2) と同様だが、こちらは NULL 終端の文字列を扱う。
+- (4) : `pos` 以降で最初に `c` と一致する位置を返す。
+- (5) : `basic_string_view&amp;lt;charT, traits&amp;gt; sv = t;`として変数`sv`を作成し、`pos` 以降で最初に `sv` と一致する位置を返す。
 
 
 ## 戻り値
@@ -76,8 +76,8 @@ constexpr size_type
 
 
 ## 例外
-- (1) 投げない
-- (5) `noexcept`内の式は、以下と等価である
+- (1) : 投げない
+- (5) : `noexcept`内の式は、以下と等価である
         ```cpp
         is_nothrow_convertible_v&amp;lt;const T&amp;amp;, basic_string_view&amp;lt;charT, traits&amp;gt;&amp;gt;
         ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>find_first_not_of -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/find_first_not_of.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/string/basic_string/find_first_not_of.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/find_first_not_of.md b/reference/string/basic_string/find_first_not_of.md
index f3a1df692..b9f1fe420 100644
--- a/reference/string/basic_string/find_first_not_of.md
+++ b/reference/string/basic_string/find_first_not_of.md
@@ -58,15 +58,15 @@ constexpr size_type
     - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, const charT*&amp;gt;`が`false`であること
 
 ## 要件
-(3) の形式の場合、`s` は少なくとも `traits_type::length(s) + 1` の要素を持つ `charT` の配列を指していること。
+- (3) の形式の場合、`s` は少なくとも `traits_type::length(s) + 1` の要素を持つ `charT` の配列を指していること。
 
 
 ## 効果
-- (1) `pos` 以降で最初に `str` 内に存在しない文字の位置を返す。
-- (2) `pos` 以降で最初に `s` 内に存在しない文字の位置を返す。`s` は長さ `n` の文字列へのポインタである。
-- (3) (2) と同様だが、こちらは NULL 終端の文字列を扱う。
-- (4) `pos` 以降で最初に `c` と一致しない文字の位置を返す。
-- (5) `basic_string_view&amp;lt;charT, traits&amp;gt; sv = t;`として変数`sv`を作成し、`pos` 以降で最初に `sv` 内に存在しない文字の位置を返す。
+- (1) : `pos` 以降で最初に `str` 内に存在しない文字の位置を返す。
+- (2) : `pos` 以降で最初に `s` 内に存在しない文字の位置を返す。`s` は長さ `n` の文字列へのポインタである。
+- (3) : (2) と同様だが、こちらは NULL 終端の文字列を扱う。
+- (4) : `pos` 以降で最初に `c` と一致しない文字の位置を返す。
+- (5) : `basic_string_view&amp;lt;charT, traits&amp;gt; sv = t;`として変数`sv`を作成し、`pos` 以降で最初に `sv` 内に存在しない文字の位置を返す。
 
 
 ## 戻り値
@@ -74,8 +74,8 @@ constexpr size_type
 
 
 ## 例外
-- (1) 投げない
-- (5) `noexcept`内の式は、以下と等価である
+- (1) : 投げない
+- (5) : `noexcept`内の式は、以下と等価である
         ```cpp
         is_nothrow_convertible_v&amp;lt;const T&amp;amp;, basic_string_view&amp;lt;charT, traits&amp;gt;&amp;gt;
         ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>find_first_of -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/find_first_of.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/string/basic_string/find_first_of.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/find_first_of.md b/reference/string/basic_string/find_first_of.md
index 2e1bed619..2853865ff 100644
--- a/reference/string/basic_string/find_first_of.md
+++ b/reference/string/basic_string/find_first_of.md
@@ -57,15 +57,15 @@ constexpr size_type
 
 
 ## 要件
-(3) の形式の場合、`s` は少なくとも `traits_type::length(s) + 1` の要素を持つ `charT` の配列を指していること。
+- (3) の形式の場合、`s` は少なくとも `traits_type::length(s) + 1` の要素を持つ `charT` の配列を指していること。
 
 
 ## 効果
-- (1) `pos` 以降で最初に `str` 内に存在する文字の位置を返す。
-- (2) `pos` 以降で最初に `s` 内に存在する文字の位置を返す。`s` は長さ `n` の文字列へのポインタである。
-- (3) (2) と同様だが、こちらは NULL 終端の文字列を扱う。
-- (4) `pos` 以降で最初に `c` と一致する文字の位置を返す。
-- (5) `basic_string_view&amp;lt;charT, traits&amp;gt; sv = t;`として変数`sv`を作成し、`pos` 以降で最初に `sv` 内に存在する文字の位置を返す。
+- (1) : `pos` 以降で最初に `str` 内に存在する文字の位置を返す。
+- (2) : `pos` 以降で最初に `s` 内に存在する文字の位置を返す。`s` は長さ `n` の文字列へのポインタである。
+- (3) : (2) と同様だが、こちらは NULL 終端の文字列を扱う。
+- (4) : `pos` 以降で最初に `c` と一致する文字の位置を返す。
+- (5) : `basic_string_view&amp;lt;charT, traits&amp;gt; sv = t;`として変数`sv`を作成し、`pos` 以降で最初に `sv` 内に存在する文字の位置を返す。
 
 
 ## 戻り値
@@ -73,8 +73,8 @@ constexpr size_type
 
 
 ## 例外
-- (1) 投げない
-- (5) `noexcept`内の式は、以下と等価である
+- (1) : 投げない
+- (5) : `noexcept`内の式は、以下と等価である
         ```cpp
         is_nothrow_convertible_v&amp;lt;const T&amp;amp;, basic_string_view&amp;lt;charT, traits&amp;gt;&amp;gt;
         ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>find_last_not_of -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/find_last_not_of.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/string/basic_string/find_last_not_of.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/find_last_not_of.md b/reference/string/basic_string/find_last_not_of.md
index 4496453a2..6be710f9b 100644
--- a/reference/string/basic_string/find_last_not_of.md
+++ b/reference/string/basic_string/find_last_not_of.md
@@ -59,15 +59,15 @@ constexpr size_type
 
 
 ## 要件
-(3) の形式の場合、`s` は少なくとも `traits_type::length(s) + 1` の要素を持つ `charT` の配列を指していること。
+- (3) の形式の場合、`s` は少なくとも `traits_type::length(s) + 1` の要素を持つ `charT` の配列を指していること。
 
 
 ## 効果
-- (1) `pos` 以前で最後に `str` 内に存在しない文字の位置を返す。
-- (2) `pos` 以前で最後に `s` 内に存在しない文字の位置を返す。`s` は長さ `n` の文字列へのポインタである。
-- (3) (2) と同様だが、こちらは NULL 終端の文字列を扱う。
-- (4) `pos` 以前で最後に `c` と一致しない文字の位置を返す。
-- (5) `basic_string_view&amp;lt;charT, traits&amp;gt; sv = t;`として変数`sv`を作成し、`pos` より前で最後に `sv` 内に存在しない文字の位置を返す。
+- (1) : `pos` 以前で最後に `str` 内に存在しない文字の位置を返す。
+- (2) : `pos` 以前で最後に `s` 内に存在しない文字の位置を返す。`s` は長さ `n` の文字列へのポインタである。
+- (3) : (2) と同様だが、こちらは NULL 終端の文字列を扱う。
+- (4) : `pos` 以前で最後に `c` と一致しない文字の位置を返す。
+- (5) : `basic_string_view&amp;lt;charT, traits&amp;gt; sv = t;`として変数`sv`を作成し、`pos` より前で最後に `sv` 内に存在しない文字の位置を返す。
 
 
 ## 戻り値
@@ -75,8 +75,8 @@ constexpr size_type
 
 
 ## 例外
-- (1) 投げない
-- (5) `noexcept`内の式は、以下と等価である
+- (1) : 投げない
+- (5) : `noexcept`内の式は、以下と等価である
         ```cpp
         is_nothrow_convertible_v&amp;lt;const T&amp;amp;, basic_string_view&amp;lt;charT, traits&amp;gt;&amp;gt;
         ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>find_last_of -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/find_last_of.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/string/basic_string/find_last_of.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/find_last_of.md b/reference/string/basic_string/find_last_of.md
index 3300f5867..46549478f 100644
--- a/reference/string/basic_string/find_last_of.md
+++ b/reference/string/basic_string/find_last_of.md
@@ -57,15 +57,15 @@ constexpr size_type
 
 
 ## 要件
-(3) の形式の場合、`s` は少なくとも `traits_type::length(s) + 1` の要素を持つ `charT` の配列を指していること。
+- (3) の形式の場合、`s` は少なくとも `traits_type::length(s) + 1` の要素を持つ `charT` の配列を指していること。
 
 
 ## 効果
-- (1) `pos` 以前で最後に `str` 内に存在する文字の位置を返す。
-- (2) `pos` 以前で最後に `s` 内に存在する文字の位置を返す。`s` は長さ `n` の文字列へのポインタである。
-- (3) (2) と同様だが、こちらは NULL 終端の文字列を扱う。
-- (4) `pos` 以前で最後に `c` と一致する文字の位置を返す。
-- (5) `basic_string_view&amp;lt;charT, traits&amp;gt; sv = t;`として変数`sv`を作成し、`pos` より前で最後に `sv` 内に存在する文字の位置を返す。
+- (1) : `pos` 以前で最後に `str` 内に存在する文字の位置を返す。
+- (2) : `pos` 以前で最後に `s` 内に存在する文字の位置を返す。`s` は長さ `n` の文字列へのポインタである。
+- (3) : (2) と同様だが、こちらは NULL 終端の文字列を扱う。
+- (4) : `pos` 以前で最後に `c` と一致する文字の位置を返す。
+- (5) : `basic_string_view&amp;lt;charT, traits&amp;gt; sv = t;`として変数`sv`を作成し、`pos` より前で最後に `sv` 内に存在する文字の位置を返す。
 
 
 ## 戻り値
@@ -73,8 +73,8 @@ constexpr size_type
 
 
 ## 例外
-- (1) 投げない
-- (5) `noexcept`内の式は、以下と等価である
+- (1) : 投げない
+- (5) : `noexcept`内の式は、以下と等価である
         ```cpp
         is_nothrow_convertible_v&amp;lt;const T&amp;amp;, basic_string_view&amp;lt;charT, traits&amp;gt;&amp;gt;
         ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/insert.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/string/basic_string/insert.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/insert.md b/reference/string/basic_string/insert.md
index 452956796..def1e70bb 100644
--- a/reference/string/basic_string/insert.md
+++ b/reference/string/basic_string/insert.md
@@ -91,7 +91,7 @@ constexpr basic_string&amp;amp;
 
 ## テンプレートパラメータ制約
 
-- (10)(11) : 以下の両方を満たしていること
+- (10), (11) : 以下の両方を満たしていること
     - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, `[`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;&amp;gt; == true`
     - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, const charT*&amp;gt; == false`
 
@@ -292,5 +292,5 @@ int main()
 - [P0254R2 Integrating `std::string_view` and `std::string`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0254r2.pdf)
 - [LWG Issue 2758. `std::string{}.assign(&amp;#34;ABCDE&amp;#34;, 0, 1)` is ambiguous](https://wg21.cmeerw.net/lwg/issue2758)
 - [LWG Issue 2946. LWG 2758&amp;#39;s resolution missed further corrections](https://wg21.cmeerw.net/lwg/issue2946)
-    - 意図しない暗黙変換防止のために`string_view`を受けるオーバーロード(10)(11)の引数型を`const T&amp;amp;`に変更
+    - 意図しない暗黙変換防止のために`string_view`を受けるオーバーロード(10), (11)の引数型を`const T&amp;amp;`に変更
 - [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator+ -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/op_plus.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/string/basic_string/op_plus.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/op_plus.md b/reference/string/basic_string/op_plus.md
index d44c7578e..6b181c21b 100644
--- a/reference/string/basic_string/op_plus.md
+++ b/reference/string/basic_string/op_plus.md
@@ -151,7 +151,7 @@ namespace std {
 
 ### C++20から
 
-- (1)(9) : 以下と等価
+- (1), (9) : 以下と等価
     ```cpp
     basic_string&amp;lt;charT, traits, Allocator&amp;gt; r = lhs;
     r.append(rhs);
@@ -159,14 +159,14 @@ namespace std {
     ```
     * append[link append.md]
 
-- (2)(10) : 以下と等価
+- (2), (10) : 以下と等価
     ```cpp
     lhs.append(rhs);
     return std::move(lhs);
     ```
     * append[link append.md]
 
-- (3)(6) : 以下と等価
+- (3), (6) : 以下と等価
     ```cpp
     rhs.insert(0, lhs);
     return std::move(rhs);
@@ -222,7 +222,7 @@ namespace std {
 
 
 ## 備考
-(5)、(6) の形式の `lhs`、および、(9)、(10) の形式の `rhs` の文字列長算出のために `traits::length()` が使用される
+(5), (6) の形式の `lhs`、および、(9), (10) の形式の `rhs` の文字列長算出のために `traits::length()` が使用される
 
 ## アロケータの伝播
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>replace -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/replace.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/string/basic_string/replace.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/replace.md b/reference/string/basic_string/replace.md
index 623eebd07..207ae106d 100644
--- a/reference/string/basic_string/replace.md
+++ b/reference/string/basic_string/replace.md
@@ -192,7 +192,7 @@ constexpr basic_string&amp;amp;
 
 ## テンプレートパラメータ制約
 
-- (12)(13)(14) : 以下の両方を満たしていること
+- (12), (13), (14) : 以下の両方を満たしていること
     - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, `[`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;&amp;gt; == true`
     - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, const charT*&amp;gt; == false`
 
@@ -440,5 +440,5 @@ int main()
 - [P0254R2 Integrating `std::string_view` and `std::string`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0254r2.pdf)
 - [LWG Issue 2758. `std::string{}.assign(&amp;#34;ABCDE&amp;#34;, 0, 1)` is ambiguous](https://wg21.cmeerw.net/lwg/issue2758)
 - [LWG Issue 2946. LWG 2758&amp;#39;s resolution missed further corrections](https://wg21.cmeerw.net/lwg/issue2946)
-    - 意図しない暗黙変換防止のために`string_view`を受けるオーバーロード(12)(13)(14)の引数型を`const T&amp;amp;`に変更
+    - 意図しない暗黙変換防止のために`string_view`を受けるオーバーロード(12), (13), (14)の引数型を`const T&amp;amp;`に変更
 - [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rfind -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/rfind.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/string/basic_string/rfind.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/rfind.md b/reference/string/basic_string/rfind.md
index 1b35fd6f5..baff9ae8d 100644
--- a/reference/string/basic_string/rfind.md
+++ b/reference/string/basic_string/rfind.md
@@ -56,15 +56,15 @@ constexpr size_type
     - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, const charT*&amp;gt;`が`false`であること
 
 ## 要件
-(3) の形式の場合、`s` は少なくとも `traits_type::length(s) + 1` の要素を持つ `charT` の配列を指していること。
+- (3) の形式の場合、`s` は少なくとも `traits_type::length(s) + 1` の要素を持つ `charT` の配列を指していること。
 
 
 ## 効果
-- (1) `pos` 以前で最後に `str` と一致する位置を返す。
-- (2) `pos` 以前で最後に `s` と一致する位置を返す。`s` は長さ `n` の文字列へのポインタである。
-- (3) (2) と同様だが、こちらは NULL 終端の文字列を扱う。
-- (4) `pos` 以前で最後に `c` と一致する位置を返す。
-- (5) `basic_string_view&amp;lt;charT, traits&amp;gt; sv = t;`として変数`sv`を作成し、`pos` より前で最後に `sv` と一致する位置を返す。
+- (1) : `pos` 以前で最後に `str` と一致する位置を返す。
+- (2) : `pos` 以前で最後に `s` と一致する位置を返す。`s` は長さ `n` の文字列へのポインタである。
+- (3) : (2) と同様だが、こちらは NULL 終端の文字列を扱う。
+- (4) : `pos` 以前で最後に `c` と一致する位置を返す。
+- (5) : `basic_string_view&amp;lt;charT, traits&amp;gt; sv = t;`として変数`sv`を作成し、`pos` より前で最後に `sv` と一致する位置を返す。
 
 
 ## 戻り値
@@ -72,8 +72,8 @@ constexpr size_type
 
 
 ## 例外
-- (1) 投げない
-- (5) `noexcept`内の式は、以下と等価である
+- (1) : 投げない
+- (5) : `noexcept`内の式は、以下と等価である
         ```cpp
         is_nothrow_convertible_v&amp;lt;const T&amp;amp;, basic_string_view&amp;lt;charT, traits&amp;gt;&amp;gt;
         ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/syncstream/basic_osyncstream/op_constructor.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/syncstream/basic_osyncstream/op_constructor.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/syncstream/basic_osyncstream/op_constructor.md b/reference/syncstream/basic_osyncstream/op_constructor.md
index bd81a85a2..cc4bdc5e2 100644
--- a/reference/syncstream/basic_osyncstream/op_constructor.md
+++ b/reference/syncstream/basic_osyncstream/op_constructor.md
@@ -21,19 +21,19 @@ basic_osyncstream(basic_osyncstream&amp;amp;&amp;amp; other) noexcept;
 ```
 
 ## 概要
-- (1)〜(4) : ラップするストリーム、アロケータ（もしあれば）を受け取るコンストラクタ。
+- (1)-(4) : ラップするストリーム、アロケータ（もしあれば）を受け取るコンストラクタ。
 - (5) : ムーブコンストラクタ。
 
 
 ## 効果
 - (1) : 提供されるストリームバッファ（`buf`）、アロケータ（`allocator`）を使用してプライベートメンバの[`std::basic_syncbuf`](../basic_syncbuf.md)を初期化し、そのポインタを用いて基底クラスである[`std::basic_ostream`](../../ostream/basic_ostream.md)を初期化する。
-- (2)(3) : (1)に委譲。
+- (2), (3) : (1)に委譲。
 - (4) : (3)に委譲。
 - (5) : 対応する`other`のサブオブジェクトから基底クラスとプライベートメンバの`std::basic_syncbuf`をムーブ構築し、基底クラスの初期化を完了するために`std::basic_ostream&amp;lt;charT, traits&amp;gt;::set_rdbuf(addressof(sb))`を呼び出す。
 
 
 ## 事後条件
-- (1)〜(4) : `get_wrapped() == buf`が`true`である。
+- (1)-(4) : `get_wrapped() == buf`が`true`である。
 - (5) : `get_wrapped()`によって返される値は、このコンストラクタを呼び出す前に`os.get_wrapped()`によって返される値である。また、`nullptr == other.get_wrapped()`が`true`である。
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>get -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/tuple/tuple/get.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/tuple/tuple/get.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/tuple/tuple/get.md b/reference/tuple/tuple/get.md
index 1b4735382..19e33d412 100644
--- a/reference/tuple/tuple/get.md
+++ b/reference/tuple/tuple/get.md
@@ -82,7 +82,7 @@ int main()
 {
   std::tuple&amp;lt;int, char, std::string&amp;gt; t(1, &amp;#39;a&amp;#39;, &amp;#34;hello&amp;#34;);
 
-  // 位置を指定して取得する方法。(1)〜(4)
+  // 位置を指定して取得する方法。(1)-(4)
   {
     int&amp;amp; i = std::get&amp;lt;0&amp;gt;(t);
     char&amp;amp; c = std::get&amp;lt;1&amp;gt;(t);
@@ -94,7 +94,7 @@ int main()
   }
   std::cout &amp;lt;&amp;lt; std::endl;
 
-  // 型を指定して取得する方法。(5)〜(7)
+  // 型を指定して取得する方法。(5)-(7)
   {
     int&amp;amp; i = std::get&amp;lt;int&amp;gt;(t);
     char&amp;amp; c = std::get&amp;lt;char&amp;gt;(t);
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>equal_range -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/unordered_map/unordered_map/equal_range.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/unordered_map/unordered_map/equal_range.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_map/unordered_map/equal_range.md b/reference/unordered_map/unordered_map/equal_range.md
index 4b6f78796..c3ba4e15b 100644
--- a/reference/unordered_map/unordered_map/equal_range.md
+++ b/reference/unordered_map/unordered_map/equal_range.md
@@ -30,7 +30,7 @@ pair&amp;lt;const_iterator, const_iterator&amp;gt;
 - (3) : 非`const`な`this`に対してキー`k`を透過的に検索し、合致する全ての要素を含む範囲を取得する
 - (4) : `const`な`this`に対してキー`k`を透過的に検索し、合致する全ての要素を含む範囲を取得する
 
-(3)、(4)の透過的な検索は、`Pred::is_transparent`および`Hash::is_transparent`が定義される場合に有効になる機能であり、例として`unordered_map&amp;lt;string, int&amp;gt; m;`に対して`m.equal_range(&amp;#34;key&amp;#34;);`のように`string`型のキーを持つ連想コンテナの検索インタフェースに文字列リテラルを渡した際、`string`の一時オブジェクトが作られないようにできる。詳細は[`std::hash`](/reference/functional/hash.md)クラスのページを参照。
+(3), (4)の透過的な検索は、`Pred::is_transparent`および`Hash::is_transparent`が定義される場合に有効になる機能であり、例として`unordered_map&amp;lt;string, int&amp;gt; m;`に対して`m.equal_range(&amp;#34;key&amp;#34;);`のように`string`型のキーを持つ連想コンテナの検索インタフェースに文字列リテラルを渡した際、`string`の一時オブジェクトが作られないようにできる。詳細は[`std::hash`](/reference/functional/hash.md)クラスのページを参照。
 
 
 ## パラメータ
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>find -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/unordered_map/unordered_map/find.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/unordered_map/unordered_map/find.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_map/unordered_map/find.md b/reference/unordered_map/unordered_map/find.md
index 912c23c02..43066fc4f 100644
--- a/reference/unordered_map/unordered_map/find.md
+++ b/reference/unordered_map/unordered_map/find.md
@@ -21,7 +21,7 @@ template &amp;lt;class K&amp;gt; const_iterator find(const K&amp;amp; k) const;  // (4) C++20
 - (3) : 非`const`な`*this`オブジェクトに対する透過的な検索
 - (4) : `const`な`*this`オブジェクトに対する透過的な検索
 
-(3)、(4)の透過的な検索は、`Pred::is_transparent`および`Hash::is_transparent`型が定義される場合に有効になる機能であり、例として`unordered_map&amp;lt;string, int&amp;gt; m;`に対して`m.find(&amp;#34;key&amp;#34;);`のように`string`型のキーを持つ連想コンテナの検索インタフェースに文字列リテラルを渡した際、`string`の一時オブジェクトが作られないようにできる。詳細は[`std::hash`](/reference/functional/hash.md)クラスのページを参照。
+(3), (4)の透過的な検索は、`Pred::is_transparent`および`Hash::is_transparent`型が定義される場合に有効になる機能であり、例として`unordered_map&amp;lt;string, int&amp;gt; m;`に対して`m.find(&amp;#34;key&amp;#34;);`のように`string`型のキーを持つ連想コンテナの検索インタフェースに文字列リテラルを渡した際、`string`の一時オブジェクトが作られないようにできる。詳細は[`std::hash`](/reference/functional/hash.md)クラスのページを参照。
 
 
 ## パラメータ
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/unordered_map/unordered_map/insert.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/unordered_map/unordered_map/insert.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_map/unordered_map/insert.md b/reference/unordered_map/unordered_map/insert.md
index 4eec85b02..3b89f15a1 100644
--- a/reference/unordered_map/unordered_map/insert.md
+++ b/reference/unordered_map/unordered_map/insert.md
@@ -75,13 +75,13 @@ iterator insert(const_iterator hint, node_type&amp;amp;&amp;amp; nh);          // (10) C++17
 
 
 ## 戻り値
-- (1)、(2), (3) :
+- (1), (2), (3) :
     - [`pair`](/reference/utility/pair.md) の `bool` 部分（`second` 部）は、要素が追加されたら `true`、追加されなかったら（既にあったら）`false`を返す
     - [`pair`](/reference/utility/pair.md) の `iterator` 部分（`first` 部）は、追加された要素（`bool` 部分が `true` の場合）、あるいは、既にあった要素（`bool` 部分が `false` の場合）を指すイテレータを返す
-- (4)、(5) :
+- (4), (5) :
     - 新たな要素が追加された場合、その追加された要素を指すイテレータを返す
     - 新たな要素が追加されなかった場合、すでにあった要素を指すイテレータを返す
-- (6)、(7) : なし
+- (6), (7) : なし
 - (9) :
     - [`insert_return_type`](/reference/map/map.md)を返す。`insert_return_type`のイテレータ型メンバ変数`position`、`bool`型メンバ変数`inserted`に格納される値は(1), (2), (3)のものと同じ情報である。`nh`が空の場合は、`position`は終端イテレータである。`node_type`型メンバ変数`node`には、
         - 挿入された場合には、空の[ノードハンドル](/reference/node_handle/node_handle.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert_or_assign -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/unordered_map/unordered_map/insert_or_assign.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/unordered_map/unordered_map/insert_or_assign.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_map/unordered_map/insert_or_assign.md b/reference/unordered_map/unordered_map/insert_or_assign.md
index 259f0ef98..64a133fb1 100644
--- a/reference/unordered_map/unordered_map/insert_or_assign.md
+++ b/reference/unordered_map/unordered_map/insert_or_assign.md
@@ -59,27 +59,27 @@ iterator
 
 
 ## 適格要件
-- (1)、(3)、(4)、(6) : [`is_assignable_v`](/reference/type_traits/is_assignable.md)`&amp;lt;mapped_type&amp;amp;, M&amp;amp;&amp;amp;&amp;gt;` が `true` であること。`value_type` は、`k`, [`forward`](/reference/utility/forward.md)`&amp;lt;M&amp;gt;(obj)` から `map` に直接構築可能であること
-- (2)、(5) : [`is_assignable_v`](/reference/type_traits/is_assignable.md)`&amp;lt;mapped_type&amp;amp;, M&amp;amp;&amp;amp;&amp;gt;` が `true` であること。`value_type` は、[`move`](/reference/utility/move.md)`(k)`, [`forward`](/reference/utility/forward.md)`&amp;lt;M&amp;gt;(obj)` から `map` に直接構築可能であること
+- (1), (3), (4), (6) : [`is_assignable_v`](/reference/type_traits/is_assignable.md)`&amp;lt;mapped_type&amp;amp;, M&amp;amp;&amp;amp;&amp;gt;` が `true` であること。`value_type` は、`k`, [`forward`](/reference/utility/forward.md)`&amp;lt;M&amp;gt;(obj)` から `map` に直接構築可能であること
+- (2), (5) : [`is_assignable_v`](/reference/type_traits/is_assignable.md)`&amp;lt;mapped_type&amp;amp;, M&amp;amp;&amp;amp;&amp;gt;` が `true` であること。`value_type` は、[`move`](/reference/utility/move.md)`(k)`, [`forward`](/reference/utility/forward.md)`&amp;lt;M&amp;gt;(obj)` から `map` に直接構築可能であること
 
 
 ## 効果
-- (1)、(3)、(4)、(6) : `unordered_map` が `k` と同値のキーを持つ要素 `e` を持っている場合、`e.second` に [`forward`](/reference/utility/forward.md)`&amp;lt;M&amp;gt;(obj)` を代入する。そうでなければ、`k`, [`forward`](/reference/utility/forward.md)`&amp;lt;M&amp;gt;(obj)` から構築した `value_type` 型のオブジェクトを挿入する。
-- (2)、(5) : `unordered_map` が `k` と同値のキーを持つ要素 `e` を持っている場合、`e.second` に [`forward`](/reference/utility/forward.md)`&amp;lt;M&amp;gt;(obj)` を代入する。そうでなければ、[`move`](/reference/utility/move.md)`(k)`, [`forward`](/reference/utility/forward.md)`&amp;lt;M&amp;gt;(obj)` から構築した `value_type` 型のオブジェクトを挿入する。
+- (1), (3), (4), (6) : `unordered_map` が `k` と同値のキーを持つ要素 `e` を持っている場合、`e.second` に [`forward`](/reference/utility/forward.md)`&amp;lt;M&amp;gt;(obj)` を代入する。そうでなければ、`k`, [`forward`](/reference/utility/forward.md)`&amp;lt;M&amp;gt;(obj)` から構築した `value_type` 型のオブジェクトを挿入する。
+- (2), (5) : `unordered_map` が `k` と同値のキーを持つ要素 `e` を持っている場合、`e.second` に [`forward`](/reference/utility/forward.md)`&amp;lt;M&amp;gt;(obj)` を代入する。そうでなければ、[`move`](/reference/utility/move.md)`(k)`, [`forward`](/reference/utility/forward.md)`&amp;lt;M&amp;gt;(obj)` から構築した `value_type` 型のオブジェクトを挿入する。
 
 
 ## 戻り値
-- (1)、(2)、(3) : イテレータと `bool` 値の [`pair`](/reference/utility/pair.md) を返す。
+- (1), (2), (3) : イテレータと `bool` 値の [`pair`](/reference/utility/pair.md) を返す。
     - 挿入された場合には、`first` に挿入された要素へのイテレータ、`second` に `true` が設定される。
     - 代入された場合には、`first` に代入された要素へのイテレータ、`second` に `false` が設定される。
-- (4)、(5)、(6) :
+- (4), (5), (6) :
     - 挿入された場合には、挿入された要素へのイテレータを返す。
     - 代入された場合には、代入された要素へのイテレータを返す。
 
 
 ## 計算量
-- (1)、(2)、(3) : [`emplace`](emplace.md) と同じ。
-- (4)、(5)、(6) : [`emplace_hint`](emplace_hint.md) と同じ。
+- (1), (2), (3) : [`emplace`](emplace.md) と同じ。
+- (4), (5), (6) : [`emplace_hint`](emplace_hint.md) と同じ。
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/unordered_map/unordered_map/op_constructor.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/unordered_map/unordered_map/op_constructor.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_map/unordered_map/op_constructor.md b/reference/unordered_map/unordered_map/op_constructor.md
index 34b0d996e..52717ff23 100644
--- a/reference/unordered_map/unordered_map/op_constructor.md
+++ b/reference/unordered_map/unordered_map/op_constructor.md
@@ -102,7 +102,7 @@ unordered_map(std::from_range_t, R&amp;amp;&amp;amp; rg,
 
 - (3) の形式の場合、`value_type` は `*first` からこの `unordered_map` に EmplaceConstructible であること。
 
-- (4)、(7)、および (9) の形式の場合、`value_type` はこの `unordered_map` に CopyInsertable であること。
+- (4), (7)、および (9) の形式の場合、`value_type` はこの `unordered_map` に CopyInsertable であること。
 
 - (5) の形式の場合、`allocator_type` のムーブ構築は例外終了しないこと。
 
@@ -242,7 +242,7 @@ unordered_map(std::from_range_t, R&amp;amp;&amp;amp; rg,
 - [Visual C++](/implementation.md#visual_cpp): ?
 
 #### 備考
-libstdc++ には 4.8.2 現在、(6)、(7)、(8)の形式はない。
+libstdc++ には 4.8.2 現在、(6), (7), (8)の形式はない。
 
 
 ## 関連項目
@@ -259,6 +259,6 @@ libstdc++ には 4.8.2 現在、(6)、(7)、(8)の形式はない。
 - [LWG 2193. Default constructors for standard library containers are explicit](http://cplusplus.github.io/LWG/lwg-defects.html#2193)  
     (1) + (2) を 2 つのオーバーロードに分割するきっかけとなったレポート
 - [LWG 2210. Missing allocator-extended constructor for allocator-aware containers](http://cplusplus.github.io/LWG/lwg-defects.html#2210)  
-    (10)、(11)、(12)、(13)、(14)、(15) を追加するきっかけとなったレポート  
+    (10), (11), (12), (13), (14), (15) を追加するきっかけとなったレポート  
     なお、Discussion の例はアロケータの型が誤っているので注意
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>try_emplace -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/unordered_map/unordered_map/try_emplace.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/unordered_map/unordered_map/try_emplace.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_map/unordered_map/try_emplace.md b/reference/unordered_map/unordered_map/try_emplace.md
index b4a3ccbd2..8ad001b14 100644
--- a/reference/unordered_map/unordered_map/try_emplace.md
+++ b/reference/unordered_map/unordered_map/try_emplace.md
@@ -56,9 +56,9 @@ iterator
 
 
 ## テンプレートパラメータ制約
-- (1)、(3)、(4)、(6) : `value_type` は、[`piecewise_construct`](/reference/utility/piecewise_construct_t.md), [`forward_as_tuple`](/reference/tuple/forward_as_tuple.md)`(k)`, [`forward_as_tuple`](/reference/tuple/forward_as_tuple.md)`(`[`forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...)` から `unordered_map` に直接構築可能であること
-- (2)、(5) : `value_type` は、[`piecewise_construct`](/reference/utility/piecewise_construct_t.md), [`forward_as_tuple`](/reference/tuple/forward_as_tuple.md)`(`[`move`](/reference/utility/move.md)`(k))`, [`forward_as_tuple`](/reference/tuple/forward_as_tuple.md)`(`[`forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...)` から `unordered_map` に直接構築可能であること
-- (3)、(6) :
+- (1), (3), (4), (6) : `value_type` は、[`piecewise_construct`](/reference/utility/piecewise_construct_t.md), [`forward_as_tuple`](/reference/tuple/forward_as_tuple.md)`(k)`, [`forward_as_tuple`](/reference/tuple/forward_as_tuple.md)`(`[`forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...)` から `unordered_map` に直接構築可能であること
+- (2), (5) : `value_type` は、[`piecewise_construct`](/reference/utility/piecewise_construct_t.md), [`forward_as_tuple`](/reference/tuple/forward_as_tuple.md)`(`[`move`](/reference/utility/move.md)`(k))`, [`forward_as_tuple`](/reference/tuple/forward_as_tuple.md)`(`[`forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...)` から `unordered_map` に直接構築可能であること
+- (3), (6) :
     - `key_compare::is_transparent` が妥当な式であること
     - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;K&amp;amp;&amp;amp;, const_iterator&amp;gt; == false`であること
     - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;K&amp;amp;&amp;amp;, iterator&amp;gt; == false`であること
@@ -67,22 +67,22 @@ iterator
 
 
 ## 効果
-- (1)、(3)、(4)、(6) : `unordered_map` が `k` と同値のキーを持つ要素を持っている場合、何もしない（引数への副作用もない）。そうでなければ、[`piecewise_construct`](/reference/utility/piecewise_construct_t.md), [`forward_as_tuple`](/reference/tuple/forward_as_tuple.md)`(k)`, [`forward_as_tuple`](/reference/tuple/forward_as_tuple.md)`(`[`forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...)` から構築した `value_type` 型のオブジェクトを挿入する。
-- (2)、(5) : `unordered_map` が `k` と同値のキーを持つ要素を持っている場合、何もしない（引数への副作用もない）。そうでなければ、[`piecewise_construct`](/reference/utility/piecewise_construct_t.md), [`forward_as_tuple`](/reference/tuple/forward_as_tuple.md)`(`[`move`](/reference/utility/move.md)`(k))`, [`forward_as_tuple`](/reference/tuple/forward_as_tuple.md)`(`[`forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...)` から構築した `value_type` 型のオブジェクトを挿入する。
+- (1), (3), (4), (6) : `unordered_map` が `k` と同値のキーを持つ要素を持っている場合、何もしない（引数への副作用もない）。そうでなければ、[`piecewise_construct`](/reference/utility/piecewise_construct_t.md), [`forward_as_tuple`](/reference/tuple/forward_as_tuple.md)`(k)`, [`forward_as_tuple`](/reference/tuple/forward_as_tuple.md)`(`[`forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...)` から構築した `value_type` 型のオブジェクトを挿入する。
+- (2), (5) : `unordered_map` が `k` と同値のキーを持つ要素を持っている場合、何もしない（引数への副作用もない）。そうでなければ、[`piecewise_construct`](/reference/utility/piecewise_construct_t.md), [`forward_as_tuple`](/reference/tuple/forward_as_tuple.md)`(`[`move`](/reference/utility/move.md)`(k))`, [`forward_as_tuple`](/reference/tuple/forward_as_tuple.md)`(`[`forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...)` から構築した `value_type` 型のオブジェクトを挿入する。
 
 
 ## 戻り値
-- (1)、(2)、(3) : イテレータと `bool` 値の [`pair`](/reference/utility/pair.md) を返す。
+- (1), (2), (3) : イテレータと `bool` 値の [`pair`](/reference/utility/pair.md) を返す。
     - 挿入された場合には、`first` に挿入された要素へのイテレータ、`second` に `true` が設定される。
     - 挿入されなかった場合には、`first` に `k` と等価のキーを持つ既存の要素へのイテレータ、`second` に `false` が設定される。
-- (4)、(5)、(6) :
+- (4), (5), (6) :
     - 挿入された場合には、挿入された要素へのイテレータを返す。
     - 挿入されなかった場合には、`k` と等価のキーを持つ既存の要素へのイテレータを返す。
 
 
 ## 計算量
-- (1)、(2) : [`emplace`](emplace.md) と同じ。
-- (4)、(5) : [`emplace_hint`](emplace_hint.md) と同じ。
+- (1), (2) : [`emplace`](emplace.md) と同じ。
+- (4), (5) : [`emplace_hint`](emplace_hint.md) と同じ。
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>equal_range -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/unordered_map/unordered_multimap/equal_range.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/unordered_map/unordered_multimap/equal_range.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_map/unordered_multimap/equal_range.md b/reference/unordered_map/unordered_multimap/equal_range.md
index 533f2f3a7..a9bdc8180 100644
--- a/reference/unordered_map/unordered_multimap/equal_range.md
+++ b/reference/unordered_map/unordered_multimap/equal_range.md
@@ -30,7 +30,7 @@ pair&amp;lt;const_iterator, const_iterator&amp;gt;
 - (3) : 非`const`な`this`に対してキー`k`を透過的に検索し、合致する全ての要素を含む範囲を取得する
 - (4) : `const`な`this`に対してキー`k`を透過的に検索し、合致する全ての要素を含む範囲を取得する
 
-(3)、(4)の透過的な検索は、`Pred::is_transparent`および`Hash::is_transparent`が定義される場合に有効になる機能であり、例として`unordered_multimap&amp;lt;string, int&amp;gt; m;`に対して`m.equal_range(&amp;#34;key&amp;#34;);`のように`string`型のキーを持つ連想コンテナの検索インタフェースに文字列リテラルを渡した際、`string`の一時オブジェクトが作られないようにできる。詳細は[`std::hash`](/reference/functional/hash.md)クラスのページを参照。
+(3), (4)の透過的な検索は、`Pred::is_transparent`および`Hash::is_transparent`が定義される場合に有効になる機能であり、例として`unordered_multimap&amp;lt;string, int&amp;gt; m;`に対して`m.equal_range(&amp;#34;key&amp;#34;);`のように`string`型のキーを持つ連想コンテナの検索インタフェースに文字列リテラルを渡した際、`string`の一時オブジェクトが作られないようにできる。詳細は[`std::hash`](/reference/functional/hash.md)クラスのページを参照。
 
 
 ## パラメータ
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>find -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/unordered_map/unordered_multimap/find.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/unordered_map/unordered_multimap/find.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_map/unordered_multimap/find.md b/reference/unordered_map/unordered_multimap/find.md
index d31985692..219cf8226 100644
--- a/reference/unordered_map/unordered_multimap/find.md
+++ b/reference/unordered_map/unordered_multimap/find.md
@@ -23,7 +23,7 @@ template &amp;lt;class K&amp;gt; const_iterator find(const K&amp;amp; k) const;  // (4) C++20
 - (3) : 非`const`な`*this`オブジェクトに対する透過的な検索
 - (4) : `const`な`*this`オブジェクトに対する透過的な検索
 
-(3)、(4)の透過的な検索は、`Pred::is_transparent`および`Hash::is_transparent`が定義される場合に有効になる機能であり、例として`unordered_multimap&amp;lt;string, int&amp;gt; m;`に対して`m.find(&amp;#34;key&amp;#34;);`のように`string`型のキーを持つ連想コンテナの検索インタフェースに文字列リテラルを渡した際、`string`の一時オブジェクトが作られないようにできる。詳細は[`std::hash`](/reference/functional/hash.md)クラスのページを参照。
+(3), (4)の透過的な検索は、`Pred::is_transparent`および`Hash::is_transparent`が定義される場合に有効になる機能であり、例として`unordered_multimap&amp;lt;string, int&amp;gt; m;`に対して`m.find(&amp;#34;key&amp;#34;);`のように`string`型のキーを持つ連想コンテナの検索インタフェースに文字列リテラルを渡した際、`string`の一時オブジェクトが作られないようにできる。詳細は[`std::hash`](/reference/functional/hash.md)クラスのページを参照。
 
 
 ## パラメータ
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/unordered_map/unordered_multimap/insert.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/unordered_map/unordered_multimap/insert.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_map/unordered_multimap/insert.md b/reference/unordered_map/unordered_multimap/insert.md
index 209d4ca8a..fd2dd08f5 100644
--- a/reference/unordered_map/unordered_multimap/insert.md
+++ b/reference/unordered_map/unordered_multimap/insert.md
@@ -76,7 +76,7 @@ iterator insert(const_iterator hint, node_type&amp;amp;&amp;amp; nh);          // (10) C++17
 
 ## 戻り値
 - (1)から(6) : 追加された要素を指すイテレータを返す
-- (7)、(8) : なし
+- (7), (8) : なし
 - (9), (10) : `nh` が空の場合は終端イテレータ、そうでなければ挿入された要素を指すイテレータを返す
 
 
@@ -106,7 +106,7 @@ iterator insert(const_iterator hint, node_type&amp;amp;&amp;amp; nh);          // (10) C++17
 	これは規格の誤りとして C++17 で修正されたが、使用する処理系やそのバージョンによっては以前の「よりも小さい」という条件でしかイテレータの有効性を保証していない可能性があるため、注意が必要である。
 
 - これらの関数が呼ばれた後、たとえ呼び出しの前後でこのコンテナのバケット数（[`bucket_count`](bucket_count.md)`()` の戻り値）が変わった（＝リハッシュが発生した）場合でも、等価なキーの要素同士の相対的な順序は変わらない。
-- (4)、(5), (6) :
+- (4), (5), (6) :
     - 本関数呼び出しで構築されるオブジェクトを `t` とすると、`t.first` と等価なキーの要素が既に存在する場合、`position` に応じて既存の要素と新規の要素が順序付けられると期待されるが、規格書にそのような規定は存在しない。従って、そのような期待はすべきではない。[`emplace_hint`](emplace_hint.md) も参照。
     - 引数 `position` は、C++14 までは間接参照可能（dereferenceable）でなければならない（つまり、[`cend`](cend.md)`()` ではいけない）との記載になっていたが、これは規格の誤りとして C++17 で修正された。
 - 上記の要件に示したように、`first`、および、`last` の参照先の要素は `value_type` 型でなければならないとされているが、その要件を満たさなくてももう一つの要件である直接構築可能を満たすだけで十分にライブラリを実装可能と思われる。  
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/unordered_map/unordered_multimap/op_constructor.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/unordered_map/unordered_multimap/op_constructor.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_map/unordered_multimap/op_constructor.md b/reference/unordered_map/unordered_multimap/op_constructor.md
index 0e44aed11..677cf0816 100644
--- a/reference/unordered_map/unordered_multimap/op_constructor.md
+++ b/reference/unordered_map/unordered_multimap/op_constructor.md
@@ -103,7 +103,7 @@ unordered_multimap(std::from_range_t, R&amp;amp;&amp;amp; rg,
 
 - (3) の形式の場合、`value_type` は `*first` からこの `unordered_multimap` に EmplaceConstructible であること。
 
-- (4)、(7)、および (9) の形式の場合、`value_type` はこの `unordered_multimap` に CopyInsertable であること。
+- (4), (7)、および (9) の形式の場合、`value_type` はこの `unordered_multimap` に CopyInsertable であること。
 
 - (5) の形式の場合、`allocator_type` のムーブ構築は例外終了しないこと。
 
@@ -246,7 +246,7 @@ unordered_multimap(std::from_range_t, R&amp;amp;&amp;amp; rg,
 - [Visual C++](/implementation.md#visual_cpp): ?
 
 #### 備考
-libstdc++ には 4.8.2 現在、(6)、(7)、(8)の形式はない。
+libstdc++ には 4.8.2 現在、(6), (7), (8)の形式はない。
 
 
 ## 関連項目
@@ -263,6 +263,6 @@ libstdc++ には 4.8.2 現在、(6)、(7)、(8)の形式はない。
 - [LWG 2193. Default constructors for standard library containers are explicit](http://cplusplus.github.io/LWG/lwg-defects.html#2193)  
     (1) + (2) を 2 つのオーバーロードに分割するきっかけとなったレポート
 - [LWG 2210. Missing allocator-extended constructor for allocator-aware containers](http://cplusplus.github.io/LWG/lwg-defects.html#2210)  
-    (10)、(11)、(12)、(13)、(14)、(15) を追加するきっかけとなったレポート  
+    (10), (11), (12), (13), (14), (15) を追加するきっかけとなったレポート  
     なお、Discussion の例はアロケータの型が誤っているので注意
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>equal_range -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/unordered_set/unordered_multiset/equal_range.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/unordered_set/unordered_multiset/equal_range.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_set/unordered_multiset/equal_range.md b/reference/unordered_set/unordered_multiset/equal_range.md
index db8e2b7e9..8c54ff70e 100644
--- a/reference/unordered_set/unordered_multiset/equal_range.md
+++ b/reference/unordered_set/unordered_multiset/equal_range.md
@@ -30,7 +30,7 @@ pair&amp;lt;const_iterator, const_iterator&amp;gt;
 - (3) : 非`const`な`this`に対してキー`k`を透過的に検索し、合致する全ての要素を含む範囲を取得する
 - (4) : `const`な`this`に対してキー`k`を透過的に検索し、合致する全ての要素を含む範囲を取得する
 
-(3)、(4)の透過的な検索は、`Pred::is_transparent`および`Hash::is_transparent`が定義される場合に有効になる機能であり、例として`unordered_multiset&amp;lt;string&amp;gt; s;`に対して`s.equal_range(&amp;#34;key&amp;#34;);`のように`string`型のキーを持つ連想コンテナの検索インタフェースに文字列リテラルを渡した際、`string`の一時オブジェクトが作られないようにできる。詳細は[`std::hash`](/reference/functional/hash.md)クラスのページを参照。
+(3), (4)の透過的な検索は、`Pred::is_transparent`および`Hash::is_transparent`が定義される場合に有効になる機能であり、例として`unordered_multiset&amp;lt;string&amp;gt; s;`に対して`s.equal_range(&amp;#34;key&amp;#34;);`のように`string`型のキーを持つ連想コンテナの検索インタフェースに文字列リテラルを渡した際、`string`の一時オブジェクトが作られないようにできる。詳細は[`std::hash`](/reference/functional/hash.md)クラスのページを参照。
 
 
 ## テンプレートパラメータ制約
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>find -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/unordered_set/unordered_multiset/find.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/unordered_set/unordered_multiset/find.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_set/unordered_multiset/find.md b/reference/unordered_set/unordered_multiset/find.md
index bc0fefa02..4c3809a4a 100644
--- a/reference/unordered_set/unordered_multiset/find.md
+++ b/reference/unordered_set/unordered_multiset/find.md
@@ -23,7 +23,7 @@ template &amp;lt;class K&amp;gt; const_iterator find(const K&amp;amp; k) const;  // (4) C++20
 - (3) : 非`const`な`*this`オブジェクトに対する透過的な検索
 - (4) : `const`な`*this`オブジェクトに対する透過的な検索
 
-(3)、(4)の透過的な検索は、`Pred::is_transparent`および`Hash::is_transparent`が定義される場合に有効になる機能であり、例として`unordered_multiset&amp;lt;string&amp;gt; s;`に対して`s.find(&amp;#34;key&amp;#34;);`のように`string`型のキーを持つ連想コンテナの検索インタフェースに文字列リテラルを渡した際、`string`の一時オブジェクトが作られないようにできる。詳細は[`std::hash`](/reference/functional/hash.md)クラスのページを参照。
+(3), (4)の透過的な検索は、`Pred::is_transparent`および`Hash::is_transparent`が定義される場合に有効になる機能であり、例として`unordered_multiset&amp;lt;string&amp;gt; s;`に対して`s.find(&amp;#34;key&amp;#34;);`のように`string`型のキーを持つ連想コンテナの検索インタフェースに文字列リテラルを渡した際、`string`の一時オブジェクトが作られないようにできる。詳細は[`std::hash`](/reference/functional/hash.md)クラスのページを参照。
 
 
 ## テンプレートパラメータ制約
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/unordered_set/unordered_multiset/insert.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/unordered_set/unordered_multiset/insert.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_set/unordered_multiset/insert.md b/reference/unordered_set/unordered_multiset/insert.md
index 918f905b2..40b564a3f 100644
--- a/reference/unordered_set/unordered_multiset/insert.md
+++ b/reference/unordered_set/unordered_multiset/insert.md
@@ -27,12 +27,12 @@ iterator insert(const_iterator hint, node_type&amp;amp;&amp;amp; nh);          // (6) C++17
 
 
 ## 要件
-- `v` を引数にとる形式（(1)、(2)の上側）では、`value_type` はコンテナに対してコピー挿入可能（CopyInsertable）でなければならない。  
+- `v` を引数にとる形式（(1), (2)の上側）では、`value_type` はコンテナに対してコピー挿入可能（CopyInsertable）でなければならない。  
 	コンテナに対してコピー挿入可能とは、`m` をアロケータ型 `allocator_type` の左辺値、`p` を要素型 `value_type` へのポインタとすると、以下の式が適格（well-formed）であるということである。
 
 	`std::`[`allocator_traits`](/reference/memory/allocator_traits.md)`&amp;lt;allocator_type&amp;gt;::`[`construct`](/reference/memory/allocator_traits/construct.md)`(m, p, v);`
 
-- `rv` を引数にとる形式（(1)、(2)の下側）では、`value_type` はコンテナに対してムーブ挿入可能（MoveInsertable）でなければならない。  
+- `rv` を引数にとる形式（(1), (2)の下側）では、`value_type` はコンテナに対してムーブ挿入可能（MoveInsertable）でなければならない。  
 	コンテナに対してムーブ挿入可能とは、`m` をアロケータ型 `allocator_type` の左辺値、`p` を要素型 `value_type` へのポインタとすると、以下の式が適格（well-formed）であるということである。
 
 	`std::`[`allocator_traits`](/reference/memory/allocator_traits.md)`&amp;lt;allocator_type&amp;gt;::`[`construct`](/reference/memory/allocator_traits/construct.md)`(m, p, std::`[`move`](/reference/utility/move.md)`(rv));`
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/unordered_set/unordered_multiset/op_constructor.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/unordered_set/unordered_multiset/op_constructor.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_set/unordered_multiset/op_constructor.md b/reference/unordered_set/unordered_multiset/op_constructor.md
index 3cbeb1ced..fe3d5b79b 100644
--- a/reference/unordered_set/unordered_multiset/op_constructor.md
+++ b/reference/unordered_set/unordered_multiset/op_constructor.md
@@ -104,7 +104,7 @@ unordered_multiset(std::from_range_t, R&amp;amp;&amp;amp; rg,
 
 - (3) の形式の場合、`value_type` は `*first` からこの `unordered_multiset` に EmplaceConstructible であること。
 
-- (4)、(7)、および (9) の形式の場合、`value_type` はこの `unordered_multiset` に CopyInsertable であること。
+- (4), (7)、および (9) の形式の場合、`value_type` はこの `unordered_multiset` に CopyInsertable であること。
 
 - (5) の形式の場合、`allocator_type` のムーブ構築は例外終了しないこと。
 
@@ -247,7 +247,7 @@ unordered_multiset(std::from_range_t, R&amp;amp;&amp;amp; rg,
 - [Visual C++](/implementation.md#visual_cpp): ?
 
 #### 備考
-libstdc++ には 4.8.2 現在、(6)、(7)、(8)の形式はない。
+libstdc++ には 4.8.2 現在、(6), (7), (8)の形式はない。
 
 
 ## 関連項目
@@ -264,6 +264,6 @@ libstdc++ には 4.8.2 現在、(6)、(7)、(8)の形式はない。
 - [LWG 2193. Default constructors for standard library containers are explicit](http://cplusplus.github.io/LWG/lwg-defects.html#2193)  
     (1) + (2) を 2 つのオーバーロードに分割するきっかけとなったレポート
 - [LWG 2210. Missing allocator-extended constructor for allocator-aware containers](http://cplusplus.github.io/LWG/lwg-defects.html#2210)  
-    (10)、(11)、(12)、(13)、(14)、(15) を追加するきっかけとなったレポート  
+    (10), (11), (12), (13), (14), (15) を追加するきっかけとなったレポート  
     なお、Discussion の例はアロケータの型が誤っているので注意
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>equal_range -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/unordered_set/unordered_set/equal_range.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/unordered_set/unordered_set/equal_range.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_set/unordered_set/equal_range.md b/reference/unordered_set/unordered_set/equal_range.md
index 60c1abf6f..a49cae008 100644
--- a/reference/unordered_set/unordered_set/equal_range.md
+++ b/reference/unordered_set/unordered_set/equal_range.md
@@ -30,7 +30,7 @@ pair&amp;lt;const_iterator, const_iterator&amp;gt;
 - (3) : 非`const`な`this`に対してキー`k`を透過的に検索し、合致する全ての要素を含む範囲を取得する
 - (4) : `const`な`this`に対してキー`k`を透過的に検索し、合致する全ての要素を含む範囲を取得する
 
-(3)、(4)の透過的な検索は、`Pred::is_transparent`および`Hash::is_transparent`が定義される場合に有効になる機能であり、例として`unordered_set&amp;lt;string&amp;gt; s;`に対して`s.equal_range(&amp;#34;key&amp;#34;);`のように`string`型のキーを持つ連想コンテナの検索インタフェースに文字列リテラルを渡した際、`string`の一時オブジェクトが作られないようにできる。詳細は[`std::hash`](/reference/functional/hash.md)クラスのページを参照。
+(3), (4)の透過的な検索は、`Pred::is_transparent`および`Hash::is_transparent`が定義される場合に有効になる機能であり、例として`unordered_set&amp;lt;string&amp;gt; s;`に対して`s.equal_range(&amp;#34;key&amp;#34;);`のように`string`型のキーを持つ連想コンテナの検索インタフェースに文字列リテラルを渡した際、`string`の一時オブジェクトが作られないようにできる。詳細は[`std::hash`](/reference/functional/hash.md)クラスのページを参照。
 
 
 ## テンプレートパラメータ制約
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>find -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/unordered_set/unordered_set/find.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/unordered_set/unordered_set/find.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_set/unordered_set/find.md b/reference/unordered_set/unordered_set/find.md
index 51fd19ffc..50e36f60b 100644
--- a/reference/unordered_set/unordered_set/find.md
+++ b/reference/unordered_set/unordered_set/find.md
@@ -21,7 +21,7 @@ template &amp;lt;class K&amp;gt; const_iterator find(const K&amp;amp; k) const;  // (4) C++20
 - (3) : 非`const`な`*this`オブジェクトに対する透過的な検索
 - (4) : `const`な`*this`オブジェクトに対する透過的な検索
 
-(3)、(4)の透過的な検索は、`Pred::is_transparent`および`Hash::is_transparent`が定義される場合に有効になる機能であり、例として`unordered_set&amp;lt;string&amp;gt; s;`に対して`s.find(&amp;#34;key&amp;#34;);`のように`string`型のキーを持つ連想コンテナの検索インタフェースに文字列リテラルを渡した際、`string`の一時オブジェクトが作られないようにできる。詳細は[`std::hash`](/reference/functional/hash.md)クラスのページを参照。
+(3), (4)の透過的な検索は、`Pred::is_transparent`および`Hash::is_transparent`が定義される場合に有効になる機能であり、例として`unordered_set&amp;lt;string&amp;gt; s;`に対して`s.find(&amp;#34;key&amp;#34;);`のように`string`型のキーを持つ連想コンテナの検索インタフェースに文字列リテラルを渡した際、`string`の一時オブジェクトが作られないようにできる。詳細は[`std::hash`](/reference/functional/hash.md)クラスのページを参照。
 
 
 ## テンプレートパラメータ制約
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/unordered_set/unordered_set/insert.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/unordered_set/unordered_set/insert.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_set/unordered_set/insert.md b/reference/unordered_set/unordered_set/insert.md
index 6aaa0be13..072f428bb 100644
--- a/reference/unordered_set/unordered_set/insert.md
+++ b/reference/unordered_set/unordered_set/insert.md
@@ -68,13 +68,13 @@ iterator
 
 
 ## 適格要件
-- (1)、(4) : `value_type` はコンテナに対してコピー挿入可能（CopyInsertable）でなければならない。
+- (1), (4) : `value_type` はコンテナに対してコピー挿入可能（CopyInsertable）でなければならない。
     - コンテナに対してコピー挿入可能とは、`m` をアロケータ型 `allocator_type` の左辺値、`p` を要素型 `value_type` へのポインタとすると、以下の式が適格（well-formed）であるということである。
         - `std::`[`allocator_traits`](/reference/memory/allocator_traits.md)`&amp;lt;allocator_type&amp;gt;::`[`construct`](/reference/memory/allocator_traits/construct.md)`(m, p, v);`
-- (2)、(5) : `value_type` はコンテナに対してムーブ挿入可能（MoveInsertable）でなければならない。
+- (2), (5) : `value_type` はコンテナに対してムーブ挿入可能（MoveInsertable）でなければならない。
     - コンテナに対してムーブ挿入可能とは、`m` をアロケータ型 `allocator_type` の左辺値、`p` を要素型 `value_type` へのポインタとすると、以下の式が適格（well-formed）であるということである。
         - `std::`[`allocator_traits`](/reference/memory/allocator_traits.md)`&amp;lt;allocator_type&amp;gt;::`[`construct`](/reference/memory/allocator_traits/construct.md)`(m, p, std::`[`move`](/reference/utility/move.md)`(rv));`
-- (4)、(5) : 引数 `position` は、コンテナの有効な読み取り専用イテレータでなければならない。
+- (4), (5) : 引数 `position` は、コンテナの有効な読み取り専用イテレータでなければならない。
     - なお、標準では間接参照可能（dereferenceable）である必要があることになっているが、その必要はない（つまり、最終要素の次を指すイテレータでも良い）ものと思われる。
 - (7) : 引数 `first`、および、`last`は、入力イテレータの要件を満たし、かつ、イテレータ範囲 `[first, last)` が当該コンテナ**以外を指す**有効な範囲でなければならない。
     - また、このコンテナの要素型 `value_type` は、コンテナに対して `*first` から直接構築可能（EmplaceConstructible）でなければならない。
@@ -89,8 +89,8 @@ iterator
 
 
 ## 効果
-- (1)、(2)、(3) : 引数で指定した値と等価なキーがコンテナに存在していなければ、当該要素を追加する。
-- (4)、(5)、(6) : 第1引数で指定した値と等価なキーがコンテナに存在していなければ、当該要素を追加する。
+- (1), (2), (3) : 引数で指定した値と等価なキーがコンテナに存在していなければ、当該要素を追加する。
+- (4), (5), (6) : 第1引数で指定した値と等価なキーがコンテナに存在していなければ、当該要素を追加する。
     - 引数 `position` は、要素の挿入位置を探し始める場所のヒントとして使用されるが、実装によって無視されるかもしれない。
 - (7) : イテレータ範囲 `[first, last)` のすべての要素 `t` に対して、(1)の形式の `insert(t)` を呼び出した場合と等価である。
 - (8) : (7)の形式を `insert(il.begin(), il.end())` として呼び出した場合と等価である。
@@ -100,9 +100,9 @@ iterator
 
 
 ## 戻り値
-- (1)、(2)、(3) : [`pair`](/reference/utility/pair.md) の `bool` 部分（`second` 部）は、要素が追加されたら `true`、追加されなかったら（既にあったら）`false`。
+- (1), (2), (3) : [`pair`](/reference/utility/pair.md) の `bool` 部分（`second` 部）は、要素が追加されたら `true`、追加されなかったら（既にあったら）`false`。
     - [`pair`](/reference/utility/pair.md) の `iterator` 部分（`first` 部）は、追加された要素（`bool` 部分が `true` の場合）、あるいは、既にあった要素（`bool` 部分が `false` の場合）を指すイテレータ。
-- (4)、(5)、(6) : 新たな要素が追加された場合、その追加された要素を指すイテレータ。
+- (4), (5), (6) : 新たな要素が追加された場合、その追加された要素を指すイテレータ。
     - 新たな要素が追加されなかった場合、既にあった要素を指すイテレータ。
 - (7) : なし
 - (8) : なし
@@ -117,8 +117,8 @@ iterator
 
 
 ## 計算量
-- (1)、(2)、(3) : 平均的なケースでは定数（O(1)）だが、最悪のケースではコンテナの要素数 [`size`](size.md)`()` に比例（O(N)）。
-- (4)、(5)、(6) : 平均的なケースでは定数（O(1)）だが、最悪のケースではコンテナの要素数 [`size`](size.md)`()` に比例（O(N)）。
+- (1), (2), (3) : 平均的なケースでは定数（O(1)）だが、最悪のケースではコンテナの要素数 [`size`](size.md)`()` に比例（O(N)）。
+- (4), (5), (6) : 平均的なケースでは定数（O(1)）だが、最悪のケースではコンテナの要素数 [`size`](size.md)`()` に比例（O(N)）。
 - (7) : 平均的なケースでは引数の範囲の要素数 `std::`[`distance`](/reference/iterator/distance.md)`(first, last)` に比例（O(N)）するが、最悪のケースでは引数の範囲の要素数 `std::`[`distance`](/reference/iterator/distance.md)`(first, last)` とコンテナの要素数 [`size()`](size.md) に 1 加えたものの積に比例（O(`std::`[`distance`](/reference/iterator/distance.md)`(first, last) * (`[`size`](size.md)`() + 1)`)）。
 - (8) : (7)の形式を `insert(il.begin(), il.end())` として呼び出した場合と等価。
 - (9), (10) : 平均的なケースでは `O(1)`、最悪のケースでは `O(size())`。
@@ -160,7 +160,7 @@ int main()
 {
   std::cout &amp;lt;&amp;lt; std::boolalpha;
 
-  // 一つの要素を挿入（(1)、(2)、(3)の形式）
+  // 一つの要素を挿入（(1), (2), (3)の形式）
   {
     std::unordered_set&amp;lt;int&amp;gt; us{ 0, 1, 2, 3, 4, 5, };
 
@@ -171,7 +171,7 @@ int main()
     print(&amp;#34;insert one element&amp;#34;, us);
   }
 
-  // 一つの要素を挿入（(4)、(5)、(6)の形式）
+  // 一つの要素を挿入（(4), (5), (6)の形式）
   {
     std::unordered_set&amp;lt;int&amp;gt; us{ 0, 1, 2, 3, 4, 5, };
 
@@ -233,7 +233,7 @@ insert initializer_list : 7 8 6 5 4 3 2 1 0
 - [Visual C++](/implementation.md#visual_cpp): ?
 
 ## 実装例
-(4)、(5)、(7)、(8)の形式は、(1)、(2)の形式を使って実装することができる。
+(4), (5), (7), (8)の形式は、(1), (2)の形式を使って実装することができる。
 
 ```cpp
 template &amp;lt;class Key, class Hash, class Pred, class Allocator&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/unordered_set/unordered_set/op_constructor.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/unordered_set/unordered_set/op_constructor.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_set/unordered_set/op_constructor.md b/reference/unordered_set/unordered_set/op_constructor.md
index e55faf15e..28886dd98 100644
--- a/reference/unordered_set/unordered_set/op_constructor.md
+++ b/reference/unordered_set/unordered_set/op_constructor.md
@@ -104,7 +104,7 @@ unordered_set(std::from_range_t, R&amp;amp;&amp;amp; rg,
 
 - (3) の形式の場合、`value_type` は `*first` からこの `unordered_set` に EmplaceConstructible であること。
 
-- (4)、(7)、および (9) の形式の場合、`value_type` はこの `unordered_set` に CopyInsertable であること。
+- (4), (7)、および (9) の形式の場合、`value_type` はこの `unordered_set` に CopyInsertable であること。
 
 - (5) の形式の場合、`allocator_type` のムーブ構築は例外終了しないこと。
 
@@ -247,7 +247,7 @@ unordered_set(std::from_range_t, R&amp;amp;&amp;amp; rg,
 - [Visual C++](/implementation.md#visual_cpp): ?
 
 #### 備考
-libstdc++ には 4.8.2 現在、(6)、(7)、(8)の形式はない。
+libstdc++ には 4.8.2 現在、(6), (7), (8)の形式はない。
 
 
 ## 関連項目
@@ -264,6 +264,6 @@ libstdc++ には 4.8.2 現在、(6)、(7)、(8)の形式はない。
 - [LWG 2193. Default constructors for standard library containers are explicit](http://cplusplus.github.io/LWG/lwg-defects.html#2193)  
     (1) + (2) を 2 つのオーバーロードに分割するきっかけとなったレポート
 - [LWG 2210. Missing allocator-extended constructor for allocator-aware containers](http://cplusplus.github.io/LWG/lwg-defects.html#2210)  
-    (10)、(11)、(12)、(13)、(14)、(15) を追加するきっかけとなったレポート  
+    (10), (11), (12), (13), (14), (15) を追加するきっかけとなったレポート  
     なお、Discussion の例はアロケータの型が誤っているので注意
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>get -- Merge pull request #1451 from cpprefjp/fix_overload_number_separator</title>
      <link href="https://cpprefjp.github.io/reference/utility/pair/get.html"/>
      <id>3acf283047e7ea6df63c78414eb04127a57424f1:reference/utility/pair/get.md</id>
      <updated>2025-05-26T15:26:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/utility/pair/get.md b/reference/utility/pair/get.md
index bbf59b17a..4565cc5e6 100644
--- a/reference/utility/pair/get.md
+++ b/reference/utility/pair/get.md
@@ -102,7 +102,7 @@ int main()
 {
   std::pair&amp;lt;int, char&amp;gt; p(1, &amp;#39;a&amp;#39;);
 
-  //位置を指定して取得する方法。(1)〜(4)
+  //位置を指定して取得する方法。(1)-(4)
   {
     int&amp;amp; i = std::get&amp;lt;0&amp;gt;(p);
     char&amp;amp; c = std::get&amp;lt;1&amp;gt;(p);
@@ -112,7 +112,7 @@ int main()
   }
   std::cout &amp;lt;&amp;lt; std::endl;
 
-  //型を指定して取得する方法。(5)〜(12)
+  //型を指定して取得する方法。(5)-(12)
   {
     int&amp;amp; i = std::get&amp;lt;int&amp;gt;(p);
     char&amp;amp; c = std::get&amp;lt;char&amp;gt;(p);
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>execution -- execution: when_all (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution.html"/>
      <id>047e1191ef711f8fcd7fdea93660261e9c655747:reference/execution/execution.md</id>
      <updated>2025-05-23T22:38:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution.md b/reference/execution/execution.md
index 08afa903d..fbd7bf5d4 100644
--- a/reference/execution/execution.md
+++ b/reference/execution/execution.md
@@ -123,7 +123,7 @@ namespace std::execution {
 | [`execution::let_stopped`](execution/let_stopped.md.nolink) | 停止完了を入れ子の非同期操作へ変換 (customization point object) | C++26 |
 | [`execution::bulk`](execution/bulk.md.nolink) | インデクス空間上で指定関数を連続実行 (customization point object) | C++26 |
 | [`execution::split`](execution/split.md.nolink) | 入力Senderの値を複製送信 (customization point object) | C++26 |
-| [`execution::when_all`](execution/when_all.md.nolink) | 全ての入力Sender完了を待機 (customization point object) | C++26 |
+| [`execution::when_all`](execution/when_all.md) | 全ての入力Sender完了を待機 (customization point object) | C++26 |
 | [`execution::when_all_with_variant`](execution/when_all_with_variant.md.nolink) | 複数の値完了シグネチャをもつ全ての入力Sender完了を待機 (customization point object) | C++26 |
 | [`execution::into_variant`](execution/into_variant.md) | 複数の値完了シグネチャを単一[`variant`](/reference/variant/variant.md)型の値完了シグネチャに変換 (customization point object) | C++26 |
 | [`execution::stopped_as_optional`](execution/stopped_as_optional.md.nolink) | 入力Senderの停止完了を[`optional`](/reference/optional/optional.md)型の値完了に変換 (customization point object) | C++26 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>impls-for -- execution: when_all (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/impls-for.html"/>
      <id>047e1191ef711f8fcd7fdea93660261e9c655747:reference/execution/execution/impls-for.md</id>
      <updated>2025-05-23T22:38:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/impls-for.md b/reference/execution/execution/impls-for.md
index 1ef00f637..a52188719 100644
--- a/reference/execution/execution/impls-for.md
+++ b/reference/execution/execution/impls-for.md
@@ -99,7 +99,7 @@ namespace std::execution {
 - 完了タグ`Tag`と引数リスト`args`を用いて、接続先[Receiver](receiver.md)`rcvr`の完了操作を呼び出す。
     - `Tag`型は[`set_value_t`](set_value.md), [`set_error_t`](set_error.md), [`set_stopped_t`](set_stopped.md)のいずれか。
 - 第1引数`Index`は、`default-impls`実装では利用しない。
-    - 複数の子Senderを保持するSenderアルゴリズムの`impls-for`オーバーライド実装で利用する（例 : [`when_all`](when_all.md.nolink)）。
+    - 複数の子Senderを保持するSenderアルゴリズムの`impls-for`オーバーライド実装で利用する（例 : [`when_all`](when_all.md)）。
 
 ```cpp
 []&amp;lt;class Index, class Rcvr, class Tag, class... Args&amp;gt;(
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>on-stop-request -- execution: when_all (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/on-stop-request.html"/>
      <id>047e1191ef711f8fcd7fdea93660261e9c655747:reference/execution/execution/on-stop-request.md</id>
      <updated>2025-05-23T22:38:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/on-stop-request.md b/reference/execution/execution/on-stop-request.md
new file mode 100644
index 000000000..06ad7d68c
--- /dev/null
+++ b/reference/execution/execution/on-stop-request.md
@@ -0,0 +1,30 @@
+# on-stop-request
+* execution[meta header]
+* class[meta id-type]
+* std::execution[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+struct on-stop-request {
+  inplace_stop_source&amp;amp; stop-src;  // exposition only
+  void operator()() noexcept { stop-src.request_stop(); }
+};
+```
+* inplace_stop_source[link /reference/stop_token/inplace_stop_source.md]
+* request_stop()[link /reference/stop_token/inplace_stop_source/request_stop.md]
+
+## 概要
+`on-stop-request`は、Senderアルゴリズム動作仕様定義で用いられる説明専用のクラステンプレートである。
+
+
+## バージョン
+### 言語
+- C++26
+
+
+## 関連項目
+- [`execution::when_all`](when_all.md)
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>when_all -- execution: when_all (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/when_all.html"/>
      <id>047e1191ef711f8fcd7fdea93660261e9c655747:reference/execution/execution/when_all.md</id>
      <updated>2025-05-23T22:38:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/when_all.md b/reference/execution/execution/when_all.md
new file mode 100644
index 000000000..9a727719a
--- /dev/null
+++ b/reference/execution/execution/when_all.md
@@ -0,0 +1,478 @@
+# when_all
+* execution[meta header]
+* cpo[meta id-type]
+* std::execution[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::execution {
+  struct when_all_t { unspecified };
+  inline constexpr when_all_t when_all{};
+}
+```
+* unspecified[italic]
+
+## 概要
+`when_all`は、複数の入力[Sender](sender.md)が全て完了するまで待機するSenderアダプタである。
+
+- 入力Sender全てが値完了のとき、全ての値完了結果を[`tuple`](/reference/tuple/tuple.md)に結合して値完了操作を行う。
+- いずれかがエラー完了のとき、同エラー値をもってエラー完了操作を行う。このとき停止要求が作成される。
+- いずれかが停止完了のとき、停止完了操作を行う。このとき停止要求が作成される。
+
+
+## 効果
+説明用のパック`sndrs`に対してパック`Sndrs`を`decltype((sndrs))...`としたとき、型`CD`を[`common_type_t`](/reference/type_traits/common_type.md)`&amp;lt;decltype(`[`get-domain-early`](get-domain-early.md)`(sndrs))...&amp;gt;`とする。
+
+下記いずれかが`true`となるとき、呼び出し式`when_all(sndrs...)`は不適格となる。
+
+- `sizeof...(sndrs) == 0`、または
+- `(`[`sender`](sender.md)`&amp;lt;Sndrs&amp;gt; &amp;amp;&amp;amp; ...) == false`、または
+- 型`CD`が不適格
+
+そうでなければ、呼び出し式`when_all(sndrs...)`は下記と等価。
+
+```cpp
+transform_sender(CD(), make-sender(when_all, {}, sndrs...))
+```
+* transform_sender[link transform_sender.md]
+* make-sender[link make-sender.md]
+
+
+### Senderアルゴリズムタグ `when_all`
+Senderアルゴリズム動作説明用のクラステンプレート[`impls-for`](impls-for.md)に対して、下記の特殊化が定義される。
+
+```cpp
+namespace std::execution {
+  template&amp;lt;&amp;gt;
+  struct impls-for&amp;lt;when_all_t&amp;gt; : default-impls {
+    static constexpr auto get-attrs = see below;
+    static constexpr auto get-env = see below;
+    static constexpr auto get-state = see below;
+    static constexpr auto start = see below;
+    static constexpr auto complete = see below;
+  };
+}
+```
+* impls-for[link impls-for.md]
+* default-impls[link impls-for.md]
+* see below[italic]
+
+`impls-for&amp;lt;when_all_t&amp;gt;::get-attrs`メンバは、下記ラムダ式と等価な関数呼び出し可能なオブジェクトで初期化される。
+
+```cpp
+[](auto&amp;amp;&amp;amp;, auto&amp;amp;&amp;amp;... child) noexcept {
+  if constexpr (same_as&amp;lt;CD, default_domain&amp;gt;) {
+    return env&amp;lt;&amp;gt;();
+  } else {
+    return MAKE-ENV(get_domain, CD());
+  }
+}
+```
+* default_domain[link default_domain.md]
+* env&amp;lt;&amp;gt;[link env.md]
+* MAKE-ENV[link MAKE-ENV.md.nolink]
+* get_domain[link get_domain.md]
+
+`impls-for&amp;lt;when_all_t&amp;gt;::get-env`メンバは、下記ラムダ式と等価な関数呼び出し可能なオブジェクトで初期化される。
+
+```cpp
+[]&amp;lt;class State, class Rcvr&amp;gt;(auto&amp;amp;&amp;amp;, State&amp;amp; state, const Receiver&amp;amp; rcvr) noexcept {
+  return see below;
+}
+```
+* see below[italic]
+
+ラムダ式は下記を満たすオブジェクト`e`を返す。
+
+- `decltype(e)`が[`queryable`](../queryable.md)のモデル、かつ
+- 式`e.query(`[`get_stop_token`](../get_stop_token.md)`)`が`state.stop-src.get_token()`と等価、かつ
+- [`get_stop_token`](../get_stop_token.md)以外の[クエリオブジェクト](../queryable.md)`q`に対して、式`e.query(q)`は[`get_env`](get_env.md)`(rcvr).query(q)`と等価。
+
+`impls-for&amp;lt;when_all_t&amp;gt;::get-state`メンバは、下記ラムダ式と等価な関数呼び出し可能なオブジェクトで初期化される。
+
+```cpp
+[]&amp;lt;class Sndr, class Rcvr&amp;gt;(Sndr&amp;amp;&amp;amp; sndr, Rcvr&amp;amp; rcvr) noexcept(e) -&amp;gt; decltype(e) {
+  return e;
+}
+```
+
+ラムダ式が返す式`e`は下記の通り。
+
+```cpp
+std::forward&amp;lt;Sndr&amp;gt;(sndr).apply(make-state&amp;lt;Rcvr&amp;gt;())
+```
+* apply[link product-type.md]
+
+`impls-for&amp;lt;when_all_t&amp;gt;::start`メンバは、下記ラムダ式と等価な関数呼び出し可能なオブジェクトで初期化される。
+
+```cpp
+[]&amp;lt;class State, class Rcvr, class... Ops&amp;gt;(
+    State&amp;amp; state, Rcvr&amp;amp; rcvr, Ops&amp;amp;... ops) noexcept -&amp;gt; void {
+  state.on_stop.emplace(
+    get_stop_token(get_env(rcvr)),
+    on-stop-request{state.stop_src});
+  if (state.stop_src.stop_requested()) {
+    state.on_stop.reset();
+    set_stopped(std::move(rcvr));
+  } else {
+    (start(ops), ...);
+  }
+}
+```
+* get_stop_token[link ../get_stop_token.md]
+* get_env[link get_env.md]
+* on-stop-request[link on-stop-request.md]
+* set_stopped[link set_stopped.md]
+* start[link start.md]
+* emplace[link /reference/optional/optional/emplace.md]
+* reset()[link /reference/optional/optional/reset.md]
+* stop_requested()[link /reference/stop_token/inplace_stop_token/stop_requested.md]
+* std::move[link /reference/utility/move.md]
+
+`impls-for&amp;lt;when_all_t&amp;gt;::complete`メンバは、下記ラムダ式と等価な関数呼び出し可能なオブジェクトで初期化される。
+
+```cpp
+[]&amp;lt;class Index, class State, class Rcvr, class Set, class... Args&amp;gt;(
+    this auto&amp;amp; complete, Index, State&amp;amp; state, Rcvr&amp;amp; rcvr, Set, Args&amp;amp;&amp;amp;... args) noexcept -&amp;gt; void {
+  if constexpr (same_as&amp;lt;Set, set_error_t&amp;gt;) {
+    if (disposition::error != state.disp.exchange(disposition::error)) {
+      state.stop_src.request_stop();
+      TRY-EMPLACE-ERROR(state.errors, std::forward&amp;lt;Args&amp;gt;(args)...);
+    }
+  } else if constexpr (same_as&amp;lt;Set, set_stopped_t&amp;gt;) {
+    auto expected = disposition::started;
+    if (state.disp.compare_exchange_strong(expected, disposition::stopped)) {
+      state.stop_src.request_stop();
+    }
+  } else if constexpr (!same_as&amp;lt;decltype(State::values), tuple&amp;lt;&amp;gt;&amp;gt;) {
+    if (state.disp == disposition::started) {
+      auto&amp;amp; opt = get&amp;lt;Index::value&amp;gt;(state.values);
+      TRY-EMPLACE-VALUE(complete, opt, std::forward&amp;lt;Args&amp;gt;(args)...);
+    }
+  }
+  state.arrive(rcvr);
+}
+```
+* set_error_t[link set_error.md]
+* set_stopped_t[link set_stopped.md]
+* tuple&amp;lt;&amp;gt;[link /reference/tuple/tuple.md]
+* get[link /reference/tuple/tuple/get.md]
+* exchange[link /reference/atomic/atomic/exchange.md]
+* compare_exchange_strong[link /reference/atomic/atomic/compare_exchange_strong.md]
+* request_stop()[link /reference/stop_token/inplace_stop_source/request_stop.md]
+
+説明用の式`v`, `e`に対して、式`decltype(auto(e))(e)`が潜在的に例外送出するならば、`TRY-EMPLACE-ERROR(v, e)`を下記と等価な式とする。
+そうでなければ、`v.`[`template emplace`](/reference/variant/variant/emplace.md)`&amp;lt;decltype(auto(e))&amp;gt;(e)`とする。
+
+```cpp
+try {
+  v.template emplace&amp;lt;decltype(auto(e))&amp;gt;(e);
+} catch (...) {
+  v.template emplace&amp;lt;exception_ptr&amp;gt;(current_exception());
+}
+```
+* template emplace[link /reference/variant/variant/emplace.md]
+* exception_ptr[link /reference/exception/exception_ptr.md]
+* current_exception()[link /reference/exception/current_exception.md]
+
+説明用の式`c`, `o`およびパック`as`に対して、式[`decayed-tuple`](decayed-tuple.md)`&amp;lt;decltype(as)...&amp;gt;{as...}`が潜在的に例外送出するならば、`TRY-EMPLACE-VALUE(c, o, as...)`を下記と等価な式とする。
+そうでなければ、`o.`[`emplace`](/reference/optional/optional/emplace.md)`(as...)`とする。
+
+```cpp
+try {
+  o.emplace(as...);
+} catch (...) {
+  c(Index(), state, rcvr, set_error, current_exception());
+  return;
+}
+```
+* set_error[link set_error.md]
+* emplace[link /reference/optional/optional/emplace.md]
+* current_exception()[link /reference/exception/current_exception.md]
+
+
+## 説明専用エンティティ
+説明専用のコンセプト`max-1-sender-in`, 列挙型`disposition`, クラス`make-state`は、それぞれ下記の通り定義される。
+
+```cpp
+template&amp;lt;class Sndr, class Env&amp;gt;
+concept max-1-sender-in = sender_in&amp;lt;Sndr, Env&amp;gt; &amp;amp;&amp;amp;  // exposition only
+  (tuple_size_v&amp;lt;value_types_of_t&amp;lt;Sndr, Env, tuple, tuple&amp;gt;&amp;gt; &amp;lt;= 1);
+```
+* sender_in[link sender_in.md]
+* value_types_of_t[link value_types_of_t.md]
+* tuple_size_v[link /reference/tuple/tuple_size.md]
+* tuple[link /reference/tuple/tuple.md]
+
+```cpp
+enum class disposition { started, error, stopped };  // exposition only
+```
+
+```cpp
+template&amp;lt;class Rcvr&amp;gt;
+struct make-state {
+  template&amp;lt;max-1-sender-in&amp;lt;env_of_t&amp;lt;Rcvr&amp;gt;&amp;gt;... Sndrs&amp;gt;
+  auto operator()(auto, auto, Sndrs&amp;amp;&amp;amp;... sndrs) const {
+    using values_tuple = see below;
+    using errors_variant = see below;
+    using stop_callback = stop_callback_for_t&amp;lt;stop_token_of_t&amp;lt;env_of_t&amp;lt;Rcvr&amp;gt;&amp;gt;, on-stop-request&amp;gt;;
+
+    struct state-type {
+      void arrive(Rcvr&amp;amp; rcvr) noexcept {               // exposition only
+        if (0 == --count) {
+          complete(rcvr);
+        }
+      }
+
+      void complete(Rcvr&amp;amp; rcvr) noexcept;              // exposition only
+
+      atomic&amp;lt;size_t&amp;gt; count{sizeof...(sndrs)};          // exposition only
+      inplace_stop_source stop_src{};                  // exposition only
+      atomic&amp;lt;disposition&amp;gt; disp{disposition::started};  // exposition only
+      errors_variant errors{};                         // exposition only
+      values_tuple values{};                           // exposition only
+      optional&amp;lt;stop_callback&amp;gt; on_stop{nullopt};        // exposition only
+    };
+
+    return state-type{};
+  }
+};
+```
+* env_of_t[link env_of_t.md]
+* stop_token_of_t[link ../stop_token_of_t.md]
+* on-stop-request[link on-stop-request.md]
+* atomic[link /reference/atomic/atomic.md]
+* stop_callback_for_t[link /reference/stop_token/stop_callback_for_t.md]
+* inplace_stop_source[link /reference/stop_token/inplace_stop_source.md]
+* stop_callback[link /reference/stop_token/stop_token.md]
+* optional[link /reference/optional/optional.md]
+* nullopt[link /reference/optional/nullopt_t.md]
+* see below[italic]
+
+説明用の型`copy-fail`を、いずれかの子[Sender](sender.md)の値結果データのdecayコピーが潜在的に例外送出するならば[`exception_ptr`](/reference/exception/exception_ptr.md)とする。そうでなければ、未規定の空のクラス型`none-such`とする。
+
+型`values_tuple`は、適格であるならば下記の型とする。そうでなければ、[`tuple&amp;lt;&amp;gt;`](/reference/tuple/tuple.md)とする。
+
+```cpp
+tuple&amp;lt;value_types_of_t&amp;lt;Sndrs, env_of_t&amp;lt;Rcvr&amp;gt;, decayed-tuple, optional&amp;gt;...&amp;gt;
+```
+* value_types_of_t[link value_types_of_t.md]
+* env_of_t[link env_of_t.md]
+* decayed-tuple[link decayed-tuple.md]
+* tuple[link /reference/tuple/tuple.md]
+* optional[link /reference/optional/optional.md]
+
+説明用のパック`Es`を全ての子[Sender](sender.md)のエラー結果データの[decayed](/reference/type_traits/decay.md)型としたとき、型`errors_variant`は下記定義において重複削除した型となる。
+
+```cpp
+variant&amp;lt;none-such, copy-fail, Es...&amp;gt;
+```
+* variant[link /reference/variant/variant.md]
+
+メンバ関数`void state-type::complete(Rcvr&amp;amp; rcvr) noexcept`の動作は下記の通り。
+
+- `disp == disposition::started`のとき、下記を評価する。
+
+    ```cpp
+    auto tie = []&amp;lt;class... T&amp;gt;(tuple&amp;lt;T...&amp;gt;&amp;amp; t) noexcept { return tuple&amp;lt;T&amp;amp;...&amp;gt;(t); };
+    auto set = [&amp;amp;](auto&amp;amp;... t) noexcept { set_value(std::move(rcvr), std::move(t)...); };
+
+    on_stop.reset();
+    apply(
+      [&amp;amp;](auto&amp;amp;... opts) noexcept {
+        apply(set, tuple_cat(tie(*opts)...));
+      },
+      values);
+    ```
+    * set_value[link set_value.md]
+    * tuple[link /reference/tuple/tuple.md]
+    * apply[link /reference/tuple/apply.md]
+    * tuple_cat[link /reference/tuple/tuple_cat.md]
+    * reset()[link /reference/optional/optional/reset.md]
+    * std::move[link /reference/utility/move.md]
+
+- そうではなく、`disp == disposition::error`のとき、下記を評価する。
+
+    ```cpp
+    on_stop.reset();
+    visit(
+      [&amp;amp;]&amp;lt;class Error&amp;gt;(Error&amp;amp; error) noexcept {
+        if constexpr (!same_as&amp;lt;Error, none-such&amp;gt;) {
+          set_error(std::move(rcvr), std::move(error));
+        }
+      },
+      errors);
+    ```
+    * set_error[link set_error.md]
+    * reset()[link /reference/optional/optional/reset.md]
+    * visit[link /reference/variant/visit.md]
+    * std::move[link /reference/utility/move.md]
+
+- それ以外のとき、下記を評価する。
+
+    ```cpp
+    on_stop.reset();
+    set_stopped(std::move(rcvr));
+    ```
+    * set_stopped[link set_stopped.md]
+    * reset()[link /reference/optional/optional/reset.md]
+
+
+## カスタマイゼーションポイント
+Senderアルゴリズム構築時および[Receiver](receiver.md)接続時に、関連付けられた実行ドメインに対して[`execution::transform_sender`](transform_sender.md)経由でSender変換が行われる。
+[デフォルト実行ドメイン](../execution/default_domain.md)では無変換。
+
+
+## 例
+### 例1: 基本の使い方
+```cpp example
+#include &amp;lt;print&amp;gt;
+#include &amp;lt;string&amp;gt;
+#include &amp;lt;execution&amp;gt;
+namespace ex = std::execution;
+using namespace std::string_literals;
+
+int main()
+{
+  // string型の値を送信するSender
+  ex::sender auto snd1 = ex::just(&amp;#34;C++&amp;#34;s);
+  // (int,char)型の値を送信するSender
+  ex::sender auto snd2 = ex::just(123, &amp;#39;X&amp;#39;);
+  // snd1,snd2両方の完了を待機するSender
+  ex::sender auto sndr = ex::when_all(snd1, snd2);
+
+　auto result = std::this_thread::sync_wait(sndr);
+  // result := optional&amp;lt;tuple&amp;lt;string,int,char&amp;gt;&amp;gt;型
+  std::println(&amp;#34;result={}&amp;#34;, result.value());
+}
+```
+* ex::when_all[color ff0000]
+* ex::sender[link sender.md]
+* ex::just[link just.md]
+* std::this_thread::sync_wait[link ../this_thread/sync_wait.md]
+* value()[link /reference/optional/optional/value.md]
+
+#### 出力
+```
+result=(&amp;#34;C++&amp;#34;, 123, &amp;#39;X&amp;#39;)
+```
+
+### 例2: 停止要求のハンドリング
+```cpp
+#include &amp;lt;print&amp;gt;
+#include &amp;lt;string&amp;gt;
+#include &amp;lt;execution&amp;gt;
+namespace ex = std::execution;
+
+
+// MySenderは下記いずれかの完了操作を行う
+//   値完了     set_value(string)
+//   エラー完了 set_error(int)
+//   停止完了   set_stopped()
+struct MySender {
+  using sender_concept = ex::sender_t;
+  using completion_signatures = ex::completion_signatures&amp;lt;
+    ex::set_value_t(std::string),
+    ex::set_error_t(int),
+    ex::set_stopped_t()
+  &amp;gt;;
+
+  template &amp;lt;typename Rcvr&amp;gt;
+  struct state {
+    using operation_state_concept = ex::operation_state_t;
+
+    state(Rcvr rcvr, int val)
+      : rcvr_{std::move(rcvr)}, val_{val} {}
+
+    void start() noexcept {
+      auto stok = ex::get_stop_token(ex::get_env(rcvr_));
+      if (stok.stop_requested()) {
+   　　  // 接続先Receiverにおいて停止要求が行われていれば
+        // MySenderも停止完了により早期リターンする
+        std::println(&amp;#34;{}: set_stopped&amp;#34;, val_);
+        ex::set_stopped(std::move(rcvr_));
+        return;
+      }
+      // MySenderの本体処理
+      if (0 &amp;lt;= val_) {
+        // 成功: 値完了操作
+        using namespace std::string_literals;
+        std::println(&amp;#34;{}: set_value&amp;#34;, val_);
+        ex::set_value(std::move(rcvr_), &amp;#34;Hello&amp;#34;s);
+      } else {
+        // 失敗: エラー完了操作
+        std::println(&amp;#34;{}: set_error&amp;#34;, val_);
+        ex::set_error(std::move(rcvr_), val_);
+      }
+    }
+
+    Rcvr rcvr_;
+    int val_;
+  };
+
+  template &amp;lt;typename Rcvr&amp;gt;
+  auto connect(Rcvr rcvr) noexcept {
+    return state{std::move(rcvr), val_};
+  }
+
+  int val_;
+};
+
+int main()
+{
+  ex::sender auto snd1 = MySender{1};  // 値完了
+  ex::sender auto snd2 = MySender{-2}; // エラー完了 → 停止要求
+  ex::sender auto snd3 = MySender{3};  // 停止完了
+  ex::sender auto sndr = ex::when_all(snd1, snd2, snd3);
+  try {
+    auto result = std::this_thread::sync_wait(sndr);
+    // result := optional&amp;lt;tuple&amp;lt;string,string,string&amp;gt;&amp;gt;型
+    std::println(&amp;#34;value={}&amp;#34;, *result);
+  } catch (int err) {
+    std::println(&amp;#34;error={}&amp;#34;, err);
+  }
+}
+```
+* ex::when_all[color ff0000]
+* ex::sender_t[link sender.md]
+* ex::sender[link sender.md]
+* ex::completion_signatures[link completion_signatures.md]
+* ex::set_value_t[link set_value.md]
+* ex::set_value[link set_value.md]
+* ex::set_error_t[link set_error.md]
+* ex::set_error[link set_error.md]
+* ex::set_stopped_t[link set_stopped.md]
+* ex::set_stopped[link set_stopped.md]
+* ex::operation_state_t[link operation_state.md]
+* ex::get_stop_token[link ../get_stop_token.md]
+* ex::get_env[link get_env.md]
+* std::this_thread::sync_wait[link ../this_thread/sync_wait.md]
+* stop_requested()[link /reference/stop_token/inplace_stop_token/stop_requested.md]
+* std::move[link /reference/utility/move.md]
+
+#### 出力
+```
+1: set_value
+-2: set_error
+3: set_stopped
+error=-2
+```
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution::when_all_with_variant`](when_all_with_variant.md.nolink)
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="http://cpprefjp.github.io" />
  <updated>2016-05-20T14:56:01.160471</updated>
  <id>04351e7d-fe77-471a-ba58-1169aca691e6</id>

  
    <entry>
      <title>algorithm -- 関連が強い&lt;algorithm&gt;と&lt;numeric&gt;に相互リンクを貼った</title>
      <link href="http://cpprefjp.github.io/reference/algorithm.html"/>
      <id>c45218b9290cf88c30afb15c1ef93b983b3bdfb9:reference/algorithm.md</id>
      <updated>2016-05-20 14:54:41 +0900</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;algorithm&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;全てのアルゴリズムはデータ構造の実装の詳細から切り離されていて、イテレータによってパラメータ化されている。これはアルゴリズムの要件を満たすイテレータを提供しているなら、どのようなデータ構造であっても動作するということを示している。&lt;/p&gt;
&lt;p&gt;関数オブジェクトを使用するアルゴリズムでは、&lt;code&gt;for_each&lt;/code&gt;以外、引数として渡されたオブジェクトを書き換えてはならない。&lt;/p&gt;
&lt;p&gt;ここでは、各アルゴリズムのテンプレートパラメータ名を、型の要件を表すために使っている。アルゴリズムを正しく利用するためには、テンプレートパラメータ名に応じたこれらの要件を満たしている必要がある。以下の通りである。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;テンプレートパラメータ名&lt;/th&gt;
&lt;th&gt;要件&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;InputIterator&lt;br /&gt; InputIterator1&lt;br /&gt; InputIterator2&lt;/td&gt;
&lt;td&gt;input iterator&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OutputIterator&lt;br /&gt; OutputIterator1&lt;br /&gt; OutputIterator2&lt;/td&gt;
&lt;td&gt;output iterator&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ForwardIterator&lt;br /&gt; ForwardIterator1&lt;br /&gt; ForwardIterator2&lt;/td&gt;
&lt;td&gt;forward iterator&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BidirectionalIterator&lt;br /&gt; BidirectionalIterator1&lt;br /&gt; BidirectionalIterator2&lt;/td&gt;
&lt;td&gt;bidirectional iterator&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RandomAccessIterator&lt;br /&gt; RandomAccessIterator1&lt;br /&gt; RandomAccessIterator2&lt;/td&gt;
&lt;td&gt;random-access iterator&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;もし「効果」のセクションで、イテレータの値を書き換えるという旨の文章が書かれている場合、その引数の型は mutable iterator の要件を満たしていなければならないという追加の要件がある。
もちろん、output iterator は常に書き換え可能であるため、この追加の要件は無意味である。&lt;/p&gt;
&lt;p&gt;いくつかのアルゴリズムは &lt;code&gt;_copy&lt;/code&gt; というサフィックスが付いている。これは &lt;code&gt;_copy&lt;/code&gt; サフィックスの付いていないアルゴリズムと違い、処理の結果を別のイテレータへ出力するアルゴリズムである。コピーバージョンを含めるかどうかの判断は、通常バージョンの計算量を考慮する。操作を行うコストがコピーのコストを大きく上回る場合、コピーバージョンは含めないようになっている。例えば &lt;code&gt;sort_copy&lt;/code&gt; は存在しない。なぜなら、ソートのコストは大きいし、そのような場合、ユーザは &lt;code&gt;copy&lt;/code&gt; してから &lt;code&gt;sort&lt;/code&gt; するからだ。&lt;/p&gt;
&lt;p&gt;テンプレートパラメータ名が &lt;code&gt;Predicate&lt;/code&gt; となっている場合、&lt;code&gt;Predicate&lt;/code&gt; の値 &lt;code&gt;pred&lt;/code&gt; と、引数として渡すイテレータ &lt;code&gt;i&lt;/code&gt; について以下の要件を満たす必要がある&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pred(*i)&lt;/code&gt; が &lt;code&gt;bool&lt;/code&gt; として評価できなければならない。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pred(*i)&lt;/code&gt; 内で &lt;code&gt;*i&lt;/code&gt; を書き変えてはならない。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;テンプレートパラメータ名が &lt;code&gt;BinaryPredicate&lt;/code&gt; となっている場合、&lt;code&gt;BinaryPredicate&lt;/code&gt; の値 &lt;code&gt;binary_pred&lt;/code&gt; と、引数として渡すイテレータ &lt;code&gt;i1&lt;/code&gt;, &lt;code&gt;i2&lt;/code&gt; について以下の要件を満たす必要がある&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;binary_pred(*i1, *i2)&lt;/code&gt; が &lt;code&gt;bool&lt;/code&gt; として評価できなければならない。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;binary_pred(*i1, *i2)&lt;/code&gt; 内で &lt;code&gt;*i1&lt;/code&gt; や &lt;code&gt;*i2&lt;/code&gt; を書き変えてはならない。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;関数オブジェクトを引数に取る &lt;code&gt;for_each&lt;/code&gt; 以外のアルゴリズムは、その関数オブジェクトを自由にコピーしても構わない。そのため、アルゴリズムの利用者はそのことに注意する必要がある。コピーされてしまうことが問題である場合、&lt;code&gt;reference_wrapper&amp;lt;T&amp;gt;&lt;/code&gt; や同様の解決手段を使ってオブジェクトの中身をコピーしないようなラッパークラスを使うといった対策を行う必要がある。&lt;/p&gt;
&lt;p&gt;アルゴリズムの説明で &lt;code&gt;+&lt;/code&gt; や &lt;code&gt;-&lt;/code&gt; を使っているが、random-access iterator 以外のイテレータはそれを定義していない。そういった場合、 &lt;code&gt;a+n&lt;/code&gt; というのは&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;X&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tmp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;advance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tmp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tmp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;を意味する。また、&lt;code&gt;b-a&lt;/code&gt; は&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;distance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;を意味する。&lt;/p&gt;
&lt;h2&gt;シーケンスを変更しない操作&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/all_of.html&#34;&gt;all_of&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;全ての要素が条件を満たしているかを調べる&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/any_of.html&#34;&gt;any_of&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;どれかの要素が条件を満たしているかを調べる&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/none_of.html&#34;&gt;none_of&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;全ての要素が条件を満たしていないかを調べる&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/for_each.html&#34;&gt;for_each&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;全ての要素に対して処理を行う&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/find.html&#34;&gt;find&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定された値を検索する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/find_if.html&#34;&gt;find_if&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;条件を満たす最初の要素を検索する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/find_if_not.html&#34;&gt;find_if_not&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;条件を満たしていない最初の要素を検索する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/find_end.html&#34;&gt;find_end&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定された最後のサブシーケンスを検索する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/find_first_of.html&#34;&gt;find_first_of&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ある集合の1つとマッチする最初の要素を検索する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/adjacent_find.html&#34;&gt;adjacent_find&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;隣接する要素で条件を満たしている最初の要素を検索する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/count.html&#34;&gt;count&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定された値である要素の数を数える&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/count_if.html&#34;&gt;count_if&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;条件を満たしている要素の数を数える&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/mismatch.html&#34;&gt;mismatch&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2つの範囲が一致していない場所を検索する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/equal.html&#34;&gt;equal&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2つの範囲を等値比較する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/search.html&#34;&gt;search&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定された最初のサブシーケンスを検索する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/search_n.html&#34;&gt;search_n&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定された最初のサブシーケンスを検索する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;シーケンスを変更する操作&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/copy.html&#34;&gt;copy&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定された範囲の要素をコピーする&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/copy_n.html&#34;&gt;copy_n&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定された数の要素をコピーする&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/copy_if.html&#34;&gt;copy_if&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;条件を満たす要素のみをコピーする&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/copy_backward.html&#34;&gt;copy_backward&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定された範囲の要素を後ろからコピーする&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/move.html&#34;&gt;move&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定された範囲の要素をムーブする&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/move_backward.html&#34;&gt;move_backward&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定された範囲の要素を後ろからムーブする&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/swap_ranges.html&#34;&gt;swap_ranges&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定された2つの範囲同士を swap する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/iter_swap.html&#34;&gt;iter_swap&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2つのイテレータの要素を swap する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/transform.html&#34;&gt;transform&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;全ての要素に関数を適用する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/replace.html&#34;&gt;replace&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定された値と一致する要素を指定された値に置き換える&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/replace_if.html&#34;&gt;replace_if&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;条件を満たす要素を指定された値に置き換える&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/replace_copy.html&#34;&gt;replace_copy&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定された値を一致する要素を指定された値に置き換え、その結果を出力の範囲へコピーする&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/replace_copy_if.html&#34;&gt;replace_copy_if&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;条件を満たす要素を指定された値に置き換え、その結果を出力の範囲へコピーする&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/fill.html&#34;&gt;fill&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定された値で出力の範囲に書き込む&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/fill_n.html&#34;&gt;fill_n&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定された値で出力の範囲に n 個書き込む&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/generate.html&#34;&gt;generate&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;出力の範囲へ関数の結果を書き込む&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/generate_n.html&#34;&gt;generate_n&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;出力の範囲へ関数の結果を n 個書き込む&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/remove.html&#34;&gt;remove&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定された要素を除ける&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/remove_if.html&#34;&gt;remove_if&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;条件を満たす要素を除ける&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/remove_copy.html&#34;&gt;remove_copy&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定された要素を除け、その結果を出力の範囲へコピーする&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/remove_copy_if.html&#34;&gt;remove_copy_if&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;条件を満たす要素を除け、その結果を出力の範囲へコピーする&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/unique.html&#34;&gt;unique&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;重複した要素を除ける&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/unique_copy.html&#34;&gt;unique_copy&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;重複した要素を除け、その結果を出力の範囲へコピーする&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/reverse.html&#34;&gt;reverse&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素の並びを逆にする&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/reverse_copy.html&#34;&gt;reverse_copy&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素の並びを逆にし、その結果を出力の範囲へコピーする&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/rotate.html&#34;&gt;rotate&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素の並びを回転させる&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/rotate_copy.html&#34;&gt;rotate_copy&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素の並びを回転させ、その結果を出力の範囲へコピーする&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/random_shuffle.html&#34;&gt;random_shuffle&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;それぞれの要素をランダムな位置に移動させる&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/shuffle.html&#34;&gt;shuffle&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;それぞれの要素をランダムな位置に移動させる&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/is_partitioned.html&#34;&gt;is_partitioned&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;与えられた範囲が条件によって&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm.html#sequence-is-partitioned&#34;&gt;区分化&lt;/a&gt;されているか判定する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/partition.html&#34;&gt;partition&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;与えられた範囲を条件によって&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm.html#sequence-is-partitioned&#34;&gt;区分化&lt;/a&gt;する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/stable_partition.html&#34;&gt;stable_partition&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;与えられた範囲を相対順序を保ちながら条件によって&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm.html#sequence-is-partitioned&#34;&gt;区分化&lt;/a&gt;する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/partition_copy.html&#34;&gt;partition_copy&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;与えられた範囲を条件によって 2 つの出力の範囲へ分けてコピーする&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/partition_point.html&#34;&gt;partition_point&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;与えられた範囲から条件によって&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm.html#sequence-is-partitioned&#34;&gt;区分化&lt;/a&gt;されている位置を得る&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;ソートや、それに関連した操作&lt;/h2&gt;
&lt;p&gt;ここで挙げる操作には全て２つのバージョンがある。一つは &lt;code&gt;Compare&lt;/code&gt; 型の関数オブジェクトを取る関数、もう一つは &lt;code&gt;operator&amp;lt;&lt;/code&gt; を使用する関数である。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Compare&lt;/code&gt; は関数オブジェクト型である。&lt;br /&gt;
&lt;code&gt;Compare&lt;/code&gt; 型のオブジェクトに適用した関数呼び出しの戻り値は、 &lt;code&gt;bool&lt;/code&gt; へ文脈依存の変換をされたとき、第一引数が第二引数より小さい場合は &lt;code&gt;true&lt;/code&gt; を、そうでない場合は &lt;code&gt;false&lt;/code&gt; を返す。&lt;br /&gt;
何らかの順序関係 (ordering relation) を前提とするアルゴリズム全般に対して &lt;code&gt;Compare&lt;/code&gt; 型の &lt;code&gt;comp&lt;/code&gt; を使用する。&lt;br /&gt;
&lt;code&gt;comp&lt;/code&gt; は間接参照したイテレータを通して非 &lt;code&gt;const&lt;/code&gt; な関数を適用しないものとする。  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;Compare&lt;/code&gt; を取るアルゴリズムには全て、代わりに &lt;code&gt;operator&amp;lt;&lt;/code&gt; を使うバージョンもある。&lt;br /&gt;
つまり、&lt;code&gt;comp(*i, *j) != false&lt;/code&gt; はデフォルトで &lt;code&gt;*i &amp;lt; *j != false&lt;/code&gt; である。&lt;br /&gt;
&lt;a name=&#34;strict-weak-ordering&#34;&gt;&lt;/a&gt;
&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm.html#alg.binary.search&#34;&gt;二分探索&lt;/a&gt;以外のアルゴリズムでは、&lt;code&gt;comp&lt;/code&gt; は「狭義の弱順序 (strict weak ordering) 」を示さなければならない。  &lt;/p&gt;
&lt;p&gt;ここでの用語「狭義 (strict) 」 は非反射関係 (irreflexive relation) (全ての &lt;code&gt;x&lt;/code&gt; について &lt;code&gt;!comp(x,x)&lt;/code&gt; である）の要求を示し、用語「弱 (weak) 」は全順序 (total ordering) ほど強くはないが半順序 (partial ordering) よりは強い要求を示す。&lt;code&gt;!comp(a, b) &amp;amp;&amp;amp; !comp(b, a)&lt;/code&gt; として &lt;code&gt;equiv(a, b)&lt;/code&gt; を定義する場合、用語「弱」の要求は &lt;code&gt;comp&lt;/code&gt; と &lt;code&gt;equiv&lt;/code&gt; の両方が以下のように推移的関係 (transitive relations) となることである。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;comp(a, b) &amp;amp;&amp;amp; comp(b, c)&lt;/code&gt; は &lt;code&gt;comp(a, c)&lt;/code&gt; を意味する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;equiv(a, b) &amp;amp;&amp;amp; equiv(b, c)&lt;/code&gt; は &lt;code&gt;equiv(a, c)&lt;/code&gt; を意味する&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これらの前提のもと、以下を示すことができる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;equiv&lt;/code&gt; は等価関係 (equivalence relation) である&lt;/li&gt;
&lt;li&gt;&lt;code&gt;comp&lt;/code&gt; は &lt;code&gt;equiv&lt;/code&gt; によって決まる同値類の間での明確な関係を示す&lt;/li&gt;
&lt;li&gt;その示される関係は狭義の全順序 (strict total ordering) である&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name=&#34;sequence-is-sorted&#34;&gt;&lt;/a&gt;
あるシーケンスを指す任意のイテレータ &lt;code&gt;i&lt;/code&gt; と、&lt;code&gt;i + n&lt;/code&gt; がそのシーケンス上の要素を指す有効なイテレータであるような任意の非負整数 &lt;code&gt;n&lt;/code&gt; について、&lt;code&gt;comp(*(i + n), *i) == false&lt;/code&gt; であれば、そのシーケンスは比較関数 (comparator) &lt;code&gt;comp&lt;/code&gt; によってソートされているという。  &lt;/p&gt;
&lt;p&gt;&lt;a name=&#34;sequence-is-partitioned&#34;&gt;&lt;/a&gt;
あるシーケンス &lt;code&gt;[start,finish)&lt;/code&gt; があり、&lt;code&gt;0 &amp;lt;= i &amp;lt; (finish - start)&lt;/code&gt; 内の全ての整数 &lt;code&gt;i&lt;/code&gt; について、&lt;code&gt;i &amp;lt; n&lt;/code&gt; の時かつその時に限り &lt;code&gt;f(*(start + i))&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; となるような整数 &lt;code&gt;n&lt;/code&gt; が存在するなら、そのシーケンス &lt;code&gt;[start,finish)&lt;/code&gt; は式 &lt;code&gt;f(e)&lt;/code&gt; によって区分化されているという。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「区分化されている」と「ソートされている」との関係&lt;br /&gt;
  あるシーケンスが比較関数 &lt;code&gt;comp&lt;/code&gt; でソートされている場合、そのシーケンスは &lt;code&gt;comp&lt;/code&gt; に任意の検索キー &lt;code&gt;k&lt;/code&gt; を部分適用した式 &lt;code&gt;comp(e, k)&lt;/code&gt; や &lt;code&gt;!comp(k, e)&lt;/code&gt; などにより区分化されているともいえる。&lt;br /&gt;
  例えば、ソートされた整数列 &lt;code&gt;[1, 5, 13, 17, 25]&lt;/code&gt; は「 &lt;code&gt;10&lt;/code&gt; より小さい」によって区分化されている。さらに、そのほかの任意の数値についても「～より小さい」あるいは「～より小さくない（～以上）」などによって区分化されているといえる。&lt;br /&gt;
  C++03 までの二分探索アルゴリズムは比較関数が狭義の弱順序となることおよび対象シーケンスがその比較関数でソートされていることを要求していた。しかしその後、 C++11 で異なる型のキーによる検索を明示的に許すために制限が見直された結果、比較関数そのものに対する要求はなくなり、比較関数に検索キーを部分適用した式による区分化のみに要求が緩められた。（参照: &lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#270&#34; target=&#34;_blank&#34;&gt;LWG issue 270 &#34;Binary search requirements overly strict&#34;&lt;/a&gt; ）&lt;br /&gt;
  これにより、例えばソートされていない整数列 &lt;code&gt;[5, 1, 25, 13, 17]&lt;/code&gt; に対しても &lt;code&gt;10&lt;/code&gt; をキーとして &lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/lower_bound.html&#34;&gt;lower_bound()&lt;/a&gt;&lt;/code&gt; を用いることにより &lt;code&gt;10&lt;/code&gt; より小さい範囲の境界を取り出すことが可能になっている。しかし &lt;code&gt;15&lt;/code&gt; をキーとすることは不正である。&lt;br /&gt;
  ただ、 C++03 の要件に合わない（特にソートされていない範囲に対する）二分探索を行いたい場合は、同じく C++11 で追加された &lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/partition_point.html&#34;&gt;partition_point()&lt;/a&gt;&lt;/code&gt; の使用も検討したほうがよい。  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;順序関係を扱う関数の説明において、この節では安定性 (stability) のようなコンセプトを説明するために等価性 (equivalence) の概念を頻繁に使う。&lt;br /&gt;
この節で参照する等価性は必ずしも &lt;code&gt;operator==&lt;/code&gt; ではなく、&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm.html#strict-weak-ordering&#34;&gt;狭義の弱順序&lt;/a&gt;によって示される等価関係である。つまりそれは、２つの要素 &lt;code&gt;a&lt;/code&gt; と &lt;code&gt;b&lt;/code&gt; は &lt;code&gt;!(a &amp;lt; b) &amp;amp;&amp;amp; !(b &amp;lt; a)&lt;/code&gt; の時かつその時に限り等価とみなされるということである。  &lt;/p&gt;
&lt;h3&gt;ソート&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/sort.html&#34;&gt;sort&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲を並べ替える&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/stable_sort.html&#34;&gt;stable_sort&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲を安定ソートで並べ替える&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/partial_sort.html&#34;&gt;partial_sort&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲を部分的にソートし、先頭N個を並んだ状態にする&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/partial_sort_copy.html&#34;&gt;partial_sort_copy&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲を部分的にソートした結果を他の範囲にコピーする&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/is_sorted.html&#34;&gt;is_sorted&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ソート済みか判定する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/is_sorted_until.html&#34;&gt;is_sorted_until&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ソート済みか判定し、ソートされていない位置のイテレータを取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;N 番目の要素&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/nth_element.html&#34;&gt;nth_element&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;基準となる要素よりも小さい要素が、前に来るよう並べ替える&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;&lt;a name=&#34;alg.binary.search&#34;&gt;&lt;/a&gt;二分探索&lt;/h3&gt;
&lt;p&gt;これらのアルゴリズムは全て二分探索を行う。これらは探索されるシーケンスが検索キーを比較関数（暗黙の &lt;code&gt;operator &amp;lt;&lt;/code&gt; 、または明示的に渡された &lt;code&gt;Compare comp&lt;/code&gt; ）の引数として部分適用することで得られる式によって&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm.html#sequence-is-partitioned&#34;&gt;区分化&lt;/a&gt;されていると仮定している。&lt;br /&gt;
これらはランダムアクセスイテレータでない場合でも最小の比較回数で動作する。&lt;br /&gt;
これらのアルゴリズムに渡されたイテレータがランダムアクセスイテレータである場合、データ構造を渡るときに対数のステップ数で済むため、このイテレータが適している。ランダムアクセスイテレータでない場合は線形のステップ数になる。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/lower_bound.html&#34;&gt;lower_bound&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定された要素以上の値が現れる最初の位置のイテレータを取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/upper_bound.html&#34;&gt;upper_bound&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定された要素より大きい値が現れる最も後ろの位置のイテレータを取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/equal_range.html&#34;&gt;equal_range&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;lower_bound&lt;/code&gt;と&lt;code&gt;upper_bound&lt;/code&gt;の結果を組で取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/binary_search.html&#34;&gt;binary_search&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;二分探索法による検索を行う&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;マージ&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/merge.html&#34;&gt;merge&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2つのソート済み範囲をマージする&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/inplace_merge.html&#34;&gt;inplace_merge&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2つの連続したソート済み範囲をマージする&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;ソート済み構造に対する集合演算&lt;/h3&gt;
&lt;p&gt;このセクションでは基本的なソート済み構造に対する集合演算を定義する。&lt;br /&gt;
これらの演算は、等価な要素を複数格納できる &lt;code&gt;multiset&lt;/code&gt; であっても動作する。集合演算のセマンティクスは、等価な要素が複数あっても、一般化された標準的な方法で演算できるようになっている。&lt;br /&gt;
例えば &lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/set_union.html&#34;&gt;set_union()&lt;/a&gt;&lt;/code&gt; ならそれぞれの要素の最大数を格納する、&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/set_intersection.html&#34;&gt;set_intersection()&lt;/a&gt;&lt;/code&gt; なら最小数を格納するといったようになる。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/set_union.html&#34;&gt;set_union&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2つのソート済み範囲の和集合を得る&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/set_intersection.html&#34;&gt;set_intersection&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2つのソート済み範囲の積集合を得る&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/set_difference.html&#34;&gt;set_difference&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2つのソート済み範囲の差集合を得る&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/set_symmetric_difference.html&#34;&gt;set_symmetric_difference&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2つのソート済み範囲の互いに素な集合を得る&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;ヒープ&lt;/h3&gt;
&lt;p&gt;２つのランダムアクセスイテレータ &lt;code&gt;[a,b)&lt;/code&gt; の範囲を特定の構造で構築したものをヒープ(heap)と呼ぶ。ヒープには２つの特性がある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;*a&lt;/code&gt; より大きい要素は無い&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*a&lt;/code&gt; は、&lt;code&gt;pop_heap()&lt;/code&gt; で削除したり、&lt;code&gt;push_heap()&lt;/code&gt; で要素を追加する操作が O(log(N)) でできる&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これらの特性はプライオリティキューで有用である。&lt;br /&gt;
&lt;code&gt;make_heap()&lt;/code&gt; は heap の中の範囲を変換し、&lt;code&gt;sort_heap()&lt;/code&gt; はソート済みシーケンスの中にあるヒープを turn する。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/push_heap.html&#34;&gt;push_heap&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ヒープ化された範囲に要素を追加したヒープ範囲を得る&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/pop_heap.html&#34;&gt;pop_heap&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ヒープ化された範囲の先頭と末尾を入れ替え、ヒープ範囲を作り直す&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/make_heap.html&#34;&gt;make_heap&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲をヒープ化する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/sort_heap.html&#34;&gt;sort_heap&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ヒープ化された範囲を並べ替える&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/is_heap_until.html&#34;&gt;is_heap_until&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲がヒープ化されているか判定し、ヒープ化されていない最初の要素を指すイテレータを取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/is_heap.html&#34;&gt;is_heap&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲がヒープ化されているか判定する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;最小と最大&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/min.html&#34;&gt;min&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;最小値を取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/max.html&#34;&gt;max&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;最大値を取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/minmax.html&#34;&gt;minmax&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;最小値と最大値を取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/min_element.html&#34;&gt;min_element&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲内の最小要素へのイテレータを取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/max_element.html&#34;&gt;max_element&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲内の最大要素へのイテレータを取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/minmax_element.html&#34;&gt;minmax_element&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲内の最小要素と最大要素へのイテレータを取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;辞書式比較&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/lexicographical_compare.html&#34;&gt;lexicographical_compare&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2つの範囲を辞書式順序で比較する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;順列&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/next_permutation.html&#34;&gt;next_permutation&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;次の順列を生成する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/prev_permutation.html&#34;&gt;prev_permutation&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;前の順列を生成する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/is_permutation.html&#34;&gt;is_permutation&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲が順列かを判定する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/numeric.html&#34;&gt;&amp;lt;numeric&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;数値計算のアルゴリズム&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>numeric -- 関連が強い&lt;algorithm&gt;と&lt;numeric&gt;に相互リンクを貼った</title>
      <link href="http://cpprefjp.github.io/reference/numeric.html"/>
      <id>c45218b9290cf88c30afb15c1ef93b983b3bdfb9:reference/numeric.md</id>
      <updated>2016-05-20 14:54:41 +0900</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;numeric&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;numeric&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;numeric&amp;gt;&lt;/code&gt; ヘッダは数値のシーケンスの処理に特化したアルゴリズムを定義する。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/numeric/accumulate.html&#34;&gt;accumulate&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲を集計する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/numeric/inner_product.html&#34;&gt;inner_product&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2つのシーケンスの任意の範囲の値の内積を計算する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/numeric/partial_sum.html&#34;&gt;partial_sum&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1つのシーケンスの任意の範囲の値の部分和を計算する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/numeric/adjacent_difference.html&#34;&gt;adjacent_difference&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1つのシーケンスの任意の範囲の隣接する値間の差を計算する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/numeric/iota.html&#34;&gt;iota&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定された値から始まる整数列を生成する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;より汎用的なアルゴリズム&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>numeric -- accumulateの解説を整理</title>
      <link href="http://cpprefjp.github.io/reference/numeric.html"/>
      <id>029cfeb27c94fa9f73edc840823ad47322131f6b:reference/numeric.md</id>
      <updated>2016-05-20 14:52:02 +0900</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;numeric&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;numeric&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;numeric&amp;gt;&lt;/code&gt; ヘッダは数値のシーケンスの処理に特化したアルゴリズムを定義する。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/numeric/accumulate.html&#34;&gt;accumulate&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲を集計する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/numeric/inner_product.html&#34;&gt;inner_product&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2つのシーケンスの任意の範囲の値の内積を計算する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/numeric/partial_sum.html&#34;&gt;partial_sum&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1つのシーケンスの任意の範囲の値の部分和を計算する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/numeric/adjacent_difference.html&#34;&gt;adjacent_difference&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1つのシーケンスの任意の範囲の隣接する値間の差を計算する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/numeric/iota.html&#34;&gt;iota&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定された値から始まる整数列を生成する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>accumulate -- accumulateの解説を整理</title>
      <link href="http://cpprefjp.github.io/reference/numeric/accumulate.html"/>
      <id>029cfeb27c94fa9f73edc840823ad47322131f6b:reference/numeric/accumulate.md</id>
      <updated>2016-05-20 14:52:02 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;numeric&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;accumulate&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;InputIterator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;accumulate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InputIterator&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;InputIterator&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;last&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// (1)&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;InputIterator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;BinaryOperation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;accumulate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InputIterator&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;InputIterator&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;last&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
               &lt;span class=&#34;n&#34;&gt;BinaryOperation&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;binary_op&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;                       &lt;span class=&#34;c1&#34;&gt;// (2)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;accumulate()&lt;/code&gt;は、範囲を集計する関数である。&lt;/p&gt;
&lt;p&gt;初期値(&lt;code&gt;init&lt;/code&gt;)に対して、範囲&lt;code&gt;[first, last)&lt;/code&gt;の各要素&lt;code&gt;i&lt;/code&gt;を前から順番に、任意の二項演算関数&lt;code&gt;binary_op&lt;/code&gt;を&lt;code&gt;init = f(init, *i)&lt;/code&gt;のように適用していき、範囲の全ての要素を集計した結果を戻り値として返す。&lt;/p&gt;
&lt;p&gt;他の言語でこのような処理は、&lt;code&gt;foldL&lt;/code&gt; (Haskell)、&lt;code&gt;reduce&lt;/code&gt; (Common Lisp, Ruby)、&lt;code&gt;aggregate&lt;/code&gt; (C#)などと呼ばれている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(1) : 二項演算をデフォルトで&lt;code&gt;operator+&lt;/code&gt;とする。それによって、このオーバーロードは、範囲の合計値を求める処理となる&lt;/li&gt;
&lt;li&gt;(2) : 任意の二項演算関数を受け取って集計処理を行う&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;T&lt;/code&gt;が&lt;a href=&#34;http://cpprefjp.github.io/reference/concepts/CopyConstructible.html&#34;&gt;CopyConstructible&lt;/a&gt;であること&lt;/li&gt;
&lt;li&gt;&lt;code&gt;T&lt;/code&gt;が&lt;a href=&#34;http://cpprefjp.github.io/reference/concepts/CopyAssignable.html&#34;&gt;CopyAssignable&lt;/a&gt;であること&lt;/li&gt;
&lt;li&gt;&lt;code&gt;binary_op&lt;/code&gt;は、範囲&lt;code&gt;[first, last)&lt;/code&gt;の要素変更およびイテレータの無効化をしてはならない&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : &lt;code&gt;binary_op&lt;/code&gt;を&lt;code&gt;operator+&lt;/code&gt;として (2) の効果を適用する&lt;/li&gt;
&lt;li&gt;(2) : &lt;code&gt;acc = init&lt;/code&gt;、&lt;code&gt;[first, last)&lt;/code&gt;の各イテレータを&lt;code&gt;i&lt;/code&gt;とし、&lt;code&gt;acc = binary_op(acc, *i)&lt;/code&gt;を範囲の全要素に対して適用し、その結果となる&lt;code&gt;acc&lt;/code&gt;を返す&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;集計結果の値&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;範囲&lt;code&gt;[first, last)&lt;/code&gt;の要素数に対して線形時間&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;p&gt;C++03 の場合、&lt;code&gt;binary_op&lt;/code&gt; で副作用を起こすことを禁止していた。これについては Effective STL 第37項で以下のように書かれている。&lt;/p&gt;
&lt;p&gt;(後で引用する)  &lt;/p&gt;
&lt;p&gt;C++11 以降では、要素を書き換えることと、イテレータを無効にすること以外の操作は全て認められるようになっている。&lt;br /&gt;
つまり Effective STL 第37項に載っているような例を、何の問題も無く使用することができるようになっている。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;numeric&amp;gt;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// (1) : 合計値を求める&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;std::accumulate&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;sum : &#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// (2) : 任意の二項演算を行う&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// ここでは、初期値を1として、全ての要素を掛け合わせている&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;product&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;std::accumulate&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[](&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;init&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;product : &#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;product&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;sum : 15
product : 120
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;実装例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c1&#34;&gt;// (1)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;InputIterator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;accumulate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InputIterator&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;InputIterator&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;last&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;last&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;init&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;init&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// (2)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;InputIterator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;BinaryOperation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;accumulate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InputIterator&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;InputIterator&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;last&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
             &lt;span class=&#34;n&#34;&gt;BinaryOperation&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;binary_op&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;last&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;init&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;binary_op&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>外部ライブラリ -- 外部ライブラリ： 文字列フォーマットのライブラリを追加</title>
      <link href="http://cpprefjp.github.io/third_party_library.html"/>
      <id>b0239787ce73a4653f8db6a69271de7cf0d70e3a:third_party_library.md</id>
      <updated>2016-05-19 15:07:41 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;外部ライブラリ&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;C++での開発に使用できる有用なライブラリを以下に例示する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/&#34; target=&#34;_blank&#34;&gt;Boost C++ Libraries&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++の準標準と呼ばれているライブラリ。C++標準化委員会のメンバも多く関わっており、Boostに含まれるライブラリの中から次期標準ライブラリとして採用されたものも多数ある。Intel(Boost.Polygon), Adobe(Boost.GIL)も開発に関わっている。スレッド、ネットワーク、ファイルシステム、構文解析器、正規表現、グラフ、線形代数、分散処理、区間計算、計算幾何、多倍長整数など、現在ではだいたい揃ってる。&lt;br /&gt;
ライセンス：Boost Software License 1.0&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://opencv.jp/&#34; target=&#34;_blank&#34;&gt;OpenCV&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;クロスプラットフォームな画像処理、画像認識のためのC++の高水準なクラスライブラリが提供されている。Boostとも連携しやすい。最近ではCUDAなどにも対応している。&lt;br /&gt;
ライセンス：BSD License&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.qt.io/&#34; target=&#34;_blank&#34;&gt;Qt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;クロスプラットフォームなGUIライブラリ。最近ではStackOverflowでも「C++でGUIライブラリと言えば？」と質問が上がると9割は「Qt」という答えが返ってくる。&lt;br /&gt;
ライセンス：LGPL&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://glm.g-truc.net/&#34; target=&#34;_blank&#34;&gt;GLM(OpenGL Mathematics)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3Dグラフィクスのためのヘッダオンリーライブラリ。OpenGLの生のAPIを使うよりこちらの方が扱いやすい。&lt;br /&gt;
ライセンス：MIT License&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.mongodb.org/&#34; target=&#34;_blank&#34;&gt;MongoDB&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;データベースライブラリ。&lt;br /&gt;
ライセンス：Creative Commons, CC BY-NC-SA 3.0&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/msgpack/msgpack-c&#34; target=&#34;_blank&#34;&gt;MessagePack implementation for C and C++&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通信などで使用できるデータの圧縮形式、シリアライズ／デシリアライズ、通信のライブラリ。&lt;br /&gt;
ライセンス：Boost Software License, Version 1.0&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://homepage1.nifty.com/herumi/soft/xbyak.html&#34; target=&#34;_blank&#34;&gt;Xbyak&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;x86(IA32), x64(AMD64, x86-64)のマシン語命令を実行時に生成するC++のクラスライブラリ。&lt;br /&gt;
ライセンス：修正BSDライセンス&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.mpir.org/&#34; target=&#34;_blank&#34;&gt;MPIR&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;巨大な数を扱うためのライブラリ。GMPより分岐したものであり，Visaul C++で容易に使えるようになっていることが特徴である。boost::multiprecisionと組み合わせて使用できる。&lt;br /&gt;
ライセンス：LGPL Version 3.0&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/google/googletest&#34; target=&#34;_blank&#34;&gt;Google Test&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++コードの自動テストを行うフレームワーク。&lt;br /&gt;
ライセンス：BSD Version 2&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/fmtlib/fmt&#34; target=&#34;_blank&#34;&gt;fmtlib&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;文字列フォーマットのライブラリ。&lt;br /&gt;
ライセンス：BSD&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>外部ライブラリ -- 外部ライブラリに、自動テストのデファクトスタンダードになっているGoogle Testを追加</title>
      <link href="http://cpprefjp.github.io/third_party_library.html"/>
      <id>077062561c6e07ddb7c3915919492460fbc3bb4c:third_party_library.md</id>
      <updated>2016-05-19 14:57:07 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;外部ライブラリ&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;C++での開発に使用できる有用なライブラリを以下に例示する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/&#34; target=&#34;_blank&#34;&gt;Boost C++ Libraries&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++の準標準と呼ばれているライブラリ。C++標準化委員会のメンバも多く関わっており、Boostに含まれるライブラリの中から次期標準ライブラリとして採用されたものも多数ある。Intel(Boost.Polygon), Adobe(Boost.GIL)も開発に関わっている。スレッド、ネットワーク、ファイルシステム、構文解析器、正規表現、グラフ、線形代数、分散処理、区間計算、計算幾何、多倍長整数など、現在ではだいたい揃ってる。&lt;br /&gt;
ライセンス：Boost Software License 1.0&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://opencv.jp/&#34; target=&#34;_blank&#34;&gt;OpenCV&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;クロスプラットフォームな画像処理、画像認識のためのC++の高水準なクラスライブラリが提供されている。Boostとも連携しやすい。最近ではCUDAなどにも対応している。&lt;br /&gt;
ライセンス：BSD License&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.qt.io/&#34; target=&#34;_blank&#34;&gt;Qt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;クロスプラットフォームなGUIライブラリ。最近ではStackOverflowでも「C++でGUIライブラリと言えば？」と質問が上がると9割は「Qt」という答えが返ってくる。&lt;br /&gt;
ライセンス：LGPL&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://glm.g-truc.net/&#34; target=&#34;_blank&#34;&gt;GLM(OpenGL Mathematics)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3Dグラフィクスのためのヘッダオンリーライブラリ。OpenGLの生のAPIを使うよりこちらの方が扱いやすい。&lt;br /&gt;
ライセンス：MIT License&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.mongodb.org/&#34; target=&#34;_blank&#34;&gt;MongoDB&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;データベースライブラリ。&lt;br /&gt;
ライセンス：Creative Commons, CC BY-NC-SA 3.0&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/msgpack/msgpack-c&#34; target=&#34;_blank&#34;&gt;MessagePack implementation for C and C++&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通信などで使用できるデータの圧縮形式、シリアライズ／デシリアライズ、通信のライブラリ。&lt;br /&gt;
ライセンス：Boost Software License, Version 1.0&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://homepage1.nifty.com/herumi/soft/xbyak.html&#34; target=&#34;_blank&#34;&gt;Xbyak&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;x86(IA32), x64(AMD64, x86-64)のマシン語命令を実行時に生成するC++のクラスライブラリ。&lt;br /&gt;
ライセンス：修正BSDライセンス&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.mpir.org/&#34; target=&#34;_blank&#34;&gt;MPIR&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;巨大な数を扱うためのライブラリ。GMPより分岐したものであり，Visaul C++で容易に使えるようになっていることが特徴である。boost::multiprecisionと組み合わせて使用できる。&lt;br /&gt;
ライセンス：LGPL Version 3.0&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/google/googletest&#34; target=&#34;_blank&#34;&gt;Google Test&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++コードの自動テストを行うフレームワーク。&lt;br /&gt;
ライセンス：BSD Version 2&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>外部ライブラリ -- MessagePack for C and C++のライセンスが少し前にApacheからBoostに変わったので追従して更新</title>
      <link href="http://cpprefjp.github.io/third_party_library.html"/>
      <id>bc93dacfc7f145ad35f1f6d6c2fd298e14aee626:third_party_library.md</id>
      <updated>2016-05-19 14:47:12 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;外部ライブラリ&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;C++での開発に使用できる有用なライブラリを以下に例示する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/&#34; target=&#34;_blank&#34;&gt;Boost C++ Libraries&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++の準標準と呼ばれているライブラリ。C++標準化委員会のメンバも多く関わっており、Boostに含まれるライブラリの中から次期標準ライブラリとして採用されたものも多数ある。Intel(Boost.Polygon), Adobe(Boost.GIL)も開発に関わっている。スレッド、ネットワーク、ファイルシステム、構文解析器、正規表現、グラフ、線形代数、分散処理、区間計算、計算幾何、多倍長整数など、現在ではだいたい揃ってる。&lt;br /&gt;
ライセンス：Boost Software License 1.0&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://opencv.jp/&#34; target=&#34;_blank&#34;&gt;OpenCV&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;クロスプラットフォームな画像処理、画像認識のためのC++の高水準なクラスライブラリが提供されている。Boostとも連携しやすい。最近ではCUDAなどにも対応している。&lt;br /&gt;
ライセンス：BSD License&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.qt.io/&#34; target=&#34;_blank&#34;&gt;Qt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;クロスプラットフォームなGUIライブラリ。最近ではStackOverflowでも「C++でGUIライブラリと言えば？」と質問が上がると9割は「Qt」という答えが返ってくる。&lt;br /&gt;
ライセンス：LGPL&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://glm.g-truc.net/&#34; target=&#34;_blank&#34;&gt;GLM(OpenGL Mathematics)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3Dグラフィクスのためのヘッダオンリーライブラリ。OpenGLの生のAPIを使うよりこちらの方が扱いやすい。&lt;br /&gt;
ライセンス：MIT License&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.mongodb.org/&#34; target=&#34;_blank&#34;&gt;MongoDB&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;データベースライブラリ。&lt;br /&gt;
ライセンス：Creative Commons, CC BY-NC-SA 3.0&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/msgpack/msgpack-c&#34; target=&#34;_blank&#34;&gt;MessagePack implementation for C and C++&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通信などで使用できるデータの圧縮形式、シリアライズ／デシリアライズ、通信のライブラリ。&lt;br /&gt;
ライセンス：Boost Software License, Version 1.0&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://homepage1.nifty.com/herumi/soft/xbyak.html&#34; target=&#34;_blank&#34;&gt;Xbyak&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;x86(IA32), x64(AMD64, x86-64)のマシン語命令を実行時に生成するC++のクラスライブラリ。&lt;br /&gt;
ライセンス：修正BSDライセンス&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.mpir.org/&#34; target=&#34;_blank&#34;&gt;MPIR&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;巨大な数を扱うためのライブラリ。GMPより分岐したものであり，Visaul C++で容易に使えるようになっていることが特徴である。boost::multiprecisionと組み合わせて使用できる。
ライセンス：LGPL Version 3.0&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
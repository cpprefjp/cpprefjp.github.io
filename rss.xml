<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2020-07-01T03:07:57.728814</updated>
  <id>3a1c9977-2cc8-4bd5-8689-797db4da9e2e</id>

  
    <entry>
      <title>移譲コンストラクタ -- Update delegating_constructors.md</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/delegating_constructors.html"/>
      <id>1b64f0f70f29526b3fbaac82d1ffcbb1d477bdb7:lang/cpp11/delegating_constructors.md</id>
      <updated>2020-07-01T12:03:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/delegating_constructors.md b/lang/cpp11/delegating_constructors.md
index 11f904a9e..1f6aa6494 100644
--- a/lang/cpp11/delegating_constructors.md
+++ b/lang/cpp11/delegating_constructors.md
@@ -22,10 +22,10 @@ public:
 
 ## 仕様
 - コンストラクタのメンバ初期化子(mem-initializer-list)は、他のコンストラクタに処理の移譲ができる
+    - このとき、メンバ初期化子の要素は1つでなければならない(他のコンストラクタ以外の要素を持ってはならない)
 - 移譲コンストラクタによる直接的・間接的な再帰は許可しない。再帰が検出された場合、プログラムは不適格となる
 - 移譲先のコンストラクタから例外が送出された場合、移譲先のコンストラクタの関数tryブロックのcatch節が呼び出され、そこから暗黙に再送出が行われ、移譲元の関数tryブロックのcatch節も呼び出される。
 
-
 ## 例
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>MATSUMURA Tetsuro</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator/ -- リンク修正</title>
      <link href="https://cpprefjp.github.io/reference/chrono/day/op_append.html"/>
      <id>2724eb087542885513a8bcb45fe319442e642042:reference/chrono/day/op_append.md</id>
      <updated>2020-06-30T23:00:50+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/day/op_append.md b/reference/chrono/day/op_append.md
index 0c7dda9d3..5dfd5f08c 100644
--- a/reference/chrono/day/op_append.md
+++ b/reference/chrono/day/op_append.md
@@ -53,8 +53,8 @@ int main()
 * chrono::March[link /reference/chrono/month_constants.md]
 * 1d[link /reference/chrono/day/op_d.md]
 * chrono::month_day[link /reference/chrono/month_day.md]
-* md1.month()[link /reference/chrono/month_day/month.md.nolink]
-* md1.day()[link /reference/chrono/month_day/day.md.nolink]
+* md1.month()[link /reference/chrono/month_day/month.md]
+* md1.day()[link /reference/chrono/month_day/day.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator/ -- リンク修正</title>
      <link href="https://cpprefjp.github.io/reference/chrono/month/op_append.html"/>
      <id>2724eb087542885513a8bcb45fe319442e642042:reference/chrono/month/op_append.md</id>
      <updated>2020-06-30T23:00:50+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/month/op_append.md b/reference/chrono/month/op_append.md
index d6b90bd4c..050c987c4 100644
--- a/reference/chrono/month/op_append.md
+++ b/reference/chrono/month/op_append.md
@@ -111,8 +111,8 @@ int main()
 * chrono::February[link /reference/chrono/month_constants.md]
 * 1d[link /reference/chrono/day/op_d.md]
 * chrono::month_day[link /reference/chrono/month_day.md]
-* md1.month()[link /reference/chrono/month_day/month.md.nolink]
-* md1.day()[link /reference/chrono/month_day/day.md.nolink]
+* md1.month()[link /reference/chrono/month_day/month.md]
+* md1.day()[link /reference/chrono/month_day/day.md]
 * chrono::last[link /reference/chrono/last_spec.md]
 * chrono::month_day_last[link /reference/chrono/month_day_last.md.nolink]
 * mdl1.month()[link /reference/chrono/month_day_last/month.md.nolink]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>month_day -- month_day : メンバ関数ページを追加</title>
      <link href="https://cpprefjp.github.io/reference/chrono/month_day.html"/>
      <id>61efb5887c2a507feb54b04eb260acbbb7d3c843:reference/chrono/month_day.md</id>
      <updated>2020-06-30T22:47:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/month_day.md b/reference/chrono/month_day.md
index 6918c1f3a..6087b0bb9 100644
--- a/reference/chrono/month_day.md
+++ b/reference/chrono/month_day.md
@@ -23,7 +23,7 @@ namespace std::chrono {
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`(constructor)`](month_day/op_constructor.md.nolink) | コンストラクタ | C++20 |
+| [`(constructor)`](month_day/op_constructor.md) | コンストラクタ | C++20 |
 | `month_day&amp;amp; operator=(const month_day&amp;amp;) = default;`&amp;lt;br/&amp;gt; `month_day&amp;amp; operator=(month_day&amp;amp;&amp;amp;) = default;` | 代入演算子 | C++20 |
 
 
@@ -31,15 +31,15 @@ namespace std::chrono {
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`month`](month_day/month.md.nolink) | 月要素を取得する | C++20 |
-| [`day`](month_day/day.md.nolink)     | 日要素を取得する | C++20 |
+| [`month`](month_day/month.md) | 月要素を取得する | C++20 |
+| [`day`](month_day/day.md)     | 日要素を取得する | C++20 |
 
 
 ### 検証
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`ok`](month_day/ok.md.nolink) | 値が範囲に収まっているか判定する | C++20 |
+| [`ok`](month_day/ok.md) | 値が範囲に収まっているか判定する | C++20 |
 
 
 ## 非メンバ関数
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>day -- month_day : メンバ関数ページを追加</title>
      <link href="https://cpprefjp.github.io/reference/chrono/month_day/day.html"/>
      <id>61efb5887c2a507feb54b04eb260acbbb7d3c843:reference/chrono/month_day/day.md</id>
      <updated>2020-06-30T22:47:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/month_day/day.md b/reference/chrono/month_day/day.md
new file mode 100644
index 000000000..1aacd805b
--- /dev/null
+++ b/reference/chrono/month_day/day.md
@@ -0,0 +1,53 @@
+# day
+* chrono[meta header]
+* std::chrono[meta namespace]
+* month_day[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr chrono::day day() const noexcept; // (1) C++20
+```
+* chrono::day[link /reference/chrono/day.md]
+
+## 概要
+日要素を取得する。
+
+
+## 戻り値
+コンストラクタで設定されて保持している日オブジェクトを返す。
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+
+namespace chrono = std::chrono;
+using namespace std::chrono_literals;
+
+int main()
+{
+  chrono::month_day md = chrono::March/1;
+
+  chrono::day d = md.day();
+  assert(d == 1d);
+}
+```
+* date.day()[color ff0000]
+* chrono::day[link /reference/chrono/day.md]
+* chrono::March[link /reference/chrono/month_constants.md]
+* 1d[link /reference/chrono/day/op_d.md]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 8.0
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>month -- month_day : メンバ関数ページを追加</title>
      <link href="https://cpprefjp.github.io/reference/chrono/month_day/month.html"/>
      <id>61efb5887c2a507feb54b04eb260acbbb7d3c843:reference/chrono/month_day/month.md</id>
      <updated>2020-06-30T22:47:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/month_day/month.md b/reference/chrono/month_day/month.md
new file mode 100644
index 000000000..f206568d9
--- /dev/null
+++ b/reference/chrono/month_day/month.md
@@ -0,0 +1,51 @@
+# month
+* chrono[meta header]
+* std::chrono[meta namespace]
+* month_day[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr chrono::month month() const noexcept; // (1) C++20
+```
+* chrono::month[link /reference/chrono/month.md]
+
+## 概要
+月要素を取得する。
+
+
+## 戻り値
+コンストラクタで設定されて保持している月オブジェクトを返す。
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+
+namespace chrono = std::chrono;
+
+int main()
+{
+  chrono::month_day md = chrono::March/1;
+
+  chrono::month m = md.month();
+  assert(m == chrono::March);
+}
+```
+* md.month()[color ff0000]
+* chrono::month[link /reference/chrono/month.md]
+* chrono::March[link /reference/chrono/month_constants.md]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 8.0
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ok -- month_day : メンバ関数ページを追加</title>
      <link href="https://cpprefjp.github.io/reference/chrono/month_day/ok.html"/>
      <id>61efb5887c2a507feb54b04eb260acbbb7d3c843:reference/chrono/month_day/ok.md</id>
      <updated>2020-06-30T22:47:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/month_day/ok.md b/reference/chrono/month_day/ok.md
new file mode 100644
index 000000000..d70ea525e
--- /dev/null
+++ b/reference/chrono/month_day/ok.md
@@ -0,0 +1,58 @@
+# ok
+* chrono[meta header]
+* std::chrono[meta namespace]
+* month_day[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr bool ok() const noexcept; // (1) C++20
+```
+
+## 概要
+`month_day`オブジェクトの値が有効な月日の範囲内かを判定する。
+
+
+## 戻り値
+以下の全ての条件を満たす場合にこの関数は`true`を返し、そうでなければ`false`を返す：
+
+- [`month()`](month.md)`.`[`ok()`](/reference/chrono/month/ok.md) `== true`であること
+- [`day()`](day.md)が返す値が、[`1d`](/reference/chrono/day/op_d.md)以上かつ[`month()`](month.md)の月の日数以下であること
+    - [`month()`](month.md) `==` [`February`](/reference/chrono/month_constants.md)である場合、日数は29であるとみなされる
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+
+namespace chrono = std::chrono;
+
+int main()
+{
+  assert((chrono::March/1).ok()  == true);
+  assert((chrono::March/31).ok() == true);
+  assert((chrono::March/0).ok()  == false);
+  assert((chrono::April/31).ok() == false);
+
+  assert((chrono::February/28).ok() == true);
+  assert((chrono::February/29).ok() == true);
+}
+```
+* ok()[color ff0000]
+* chrono::March[link /reference/chrono/month_constants.md]
+* chrono::April[link /reference/chrono/month_constants.md]
+* chrono::February[link /reference/chrono/month_constants.md]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 8.0
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- month_day : メンバ関数ページを追加</title>
      <link href="https://cpprefjp.github.io/reference/chrono/month_day/op_constructor.html"/>
      <id>61efb5887c2a507feb54b04eb260acbbb7d3c843:reference/chrono/month_day/op_constructor.md</id>
      <updated>2020-06-30T22:47:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/month_day/op_constructor.md b/reference/chrono/month_day/op_constructor.md
new file mode 100644
index 000000000..c26fa86f0
--- /dev/null
+++ b/reference/chrono/month_day/op_constructor.md
@@ -0,0 +1,70 @@
+# コンストラクタ
+* chrono[meta header]
+* std::chrono[meta namespace]
+* month_day[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+month_day() = default;                              // (1) C++20
+constexpr month_day(const chrono::month&amp;amp; m,
+                    const chrono::day&amp;amp; d) noexcept; // (2) C++20
+
+month_day(const month_day&amp;amp;) = default;              // (3) C++20
+month_day(month_day&amp;amp;&amp;amp;) = default;                   // (4) C++20
+```
+* chrono::month[link /reference/chrono/month.md]
+* chrono::day[link /reference/chrono/day.md]
+
+## 概要
+- (1) : デフォルトコンストラクタ
+- (2) : 月、日の値をそれぞれ指定して構築する
+- (3) : コピーコンストラクタ
+- (4) : ムーブコンストラクタ
+
+
+## 効果
+- (1) :
+    - デフォルト初期化では、月、日の値がそれぞれ符号なし整数の未初期化値となり、値初期化では値0となる
+- (2) :
+    - `m`と`d`をメンバ変数として保持する
+
+
+## 例外
+投げない
+
+
+### 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+
+namespace chrono = std::chrono;
+using namespace std::chrono_literals;
+
+int main()
+{
+  // 月、日のカレンダー要素を順に指定して構築
+  chrono::month_day md1{chrono::March, 1d};
+  chrono::month_day md2{chrono::month{3}, chrono::day{1}};
+  assert(md1 == chrono::March/1);
+  assert(md2 == chrono::March/1);
+}
+```
+* chrono::March[link /reference/chrono/month_constants.md]
+* 1d[link /reference/chrono/day/op_d.md]
+* chrono::month[link /reference/chrono/month.md]
+* chrono::day[link /reference/chrono/day.md]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 8.0
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コルーチン -- cpp20/coroutines: ソースコード変換による説明を増補</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/coroutines.html"/>
      <id>be7ecc9f784ff358ec93ce88a6a936702799cf7b:lang/cpp20/coroutines.md</id>
      <updated>2020-06-29T19:02:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/coroutines.md b/lang/cpp20/coroutines.md
index 459411187..5d0279af8 100644
--- a/lang/cpp20/coroutines.md
+++ b/lang/cpp20/coroutines.md
@@ -43,21 +43,69 @@ C++コルーチン動作理解の助けとなるよう、ここでは細部を
 コルーチン実行の基本動作は、それぞれ下記ように説明される：
 
 - 呼出し: 通常の関数と同様に、括弧(`()`)を用いた関数呼び出し構文を用いる。コルーチンに対応するユーザ定義Promiseオブジェクトが自動的に生成されるため、そこからコルーチンハンドルを取得する。
-- 中断: コルーチン本体にて`co_yield`式または`co_await`式を記述する。中断されたコルーチンから呼出し元へは、コルーチンハンドルを内包するコルーチン戻り値型オブジェクトを返す。
+- 中断: コルーチン本体にて`co_yield`式または`co_await`式を記述する。中断されたコルーチンから呼出元へは、コルーチンハンドルを内包するコルーチン戻り値型オブジェクトを返す。
 - 再開: コルーチン中断により返された戻り値型オブジェクトを介して、コルーチンハンドルの再開関数[`resume`](/reference/coroutine/coroutine_handle/resume.md)を呼び出す。
 - 復帰: コルーチン本体にて`co_return`文を記述、またはコルーチン本体終端まで到達する。全てのローカル変数とPromiseオブジェクトは破棄される。
 
-この４種類の基本動作に対して、次にようなカスタマイズポイントが提供される（_Promise_ や _Awaiter_ はコルーチンライブラリが提供するユーザ定義型とする）：
+この4種類の基本動作に対して、次のカスタマイズポイントが提供される。括弧内はコルーチンライブラリが実装すべきカスタマイズポイント名：
 
-- コルーチン呼出し直後の動作: 初期サスペンドポイント(_Promise_`::initial_suspend`)にて、コルーチン本体の開始前に中断して戻り値型オブジェクトを返すか、そのままコルーチン本体を実行継続するかを制御する。
+- コルーチン呼出し直後の動作: 初期サスペンドポイント(`initial_suspend`)にて、コルーチン本体の開始前に中断して戻り値型オブジェクトを返すか、そのままコルーチン本体を実行継続するかを制御する。
+- コルーチン復帰直前の動作: 最終サスペンドポイント(`final_suspend`)にて、コルーチンを最後に中断して戻り値型オブジェクトを返すか、そのままコルーチンに関するリソースを破棄するかを制御する。前者を選択した場合、リソースリークを防ぐためコルーチンハンドルの破棄関数[`destroy`](/reference/coroutine/coroutine_handle/destroy.md)呼出しが必要となる。
+- 値を伴うコルーチン中断: `co_yield`式により、コルーチンを中断すると同時に呼出元へ値を返す(`yield_value`)。
+- 値を伴うコルーチン復帰: `co_return`文により、呼出元へ値を返す(`return_value`)。
+- コルーチン中断／再開制御: `co_await`式により、コルーチン中断と再開に関する振る舞いを詳細に制御する(`await_transform`, `operator co_await`)。
+    - コルーチン中断の条件: `co_await`式に対して、コルーチンを中断するか否かを判断する(`await_ready`)。
+    - コルーチン中断直前の動作: `co_await`式に対して、コルーチンを中断する直前の動作を制御する(`await_suspend`)。
+    - コルーチン再開直後の動作: `co_await`式に対して、コルーチンが再開された直後の動作を制御する(`await_resume`)。
 
-- コルーチン復帰直前の動作: 最終サスペンドポイント(_Promise_`::final_suspend`)にて、コルーチンを最後に中断して戻り値型オブジェクトを返すか、そのままコルーチンに関するリソースを破棄するかを制御する。前者を選択した場合、リソースリークを防ぐためコルーチンハンドルの破棄関数[`destroy`](/reference/coroutine/coroutine_handle/destroy.md)呼出しが必要となる。
-- 値を伴うコルーチン中断: `co_yield`式により、コルーチンを中断すると同時に呼出し元へ値を返す(_Promise_`::yield_value`)。
-- 値を伴うコルーチン復帰: `co_return`文により、呼出し元へ値を返す(_Promise_`::return_value`)。
-- コルーチン中断／再開制御: `co_await`式により、コルーチン中断の条件や動作を詳細に制御する(_Promise_`::await_transform`, `operator co_await`)。
-    - コルーチン中断の条件: `co_await`式に対して、コルーチンを中断するか否かを判断する(_Awaiter_`::await_ready`)。
-    - コルーチン中断直前の動作: `co_await`式に対して、コルーチンを中断する直前の動作を制御する(_Awaiter_`::await_suspend`)。
-    - コルーチン再開直後の動作: `co_await`式に対して、コルーチンが再開された直後の動作を制御する(_Awaiter_`::await_resume`)。
+プログラマが記述するコルーチンは、コンパイル時にソースコード変換が行われると解釈できる。
+（従来のC++仕様範囲ではコルーチン動作を正確に表現できないため、下記はあくまでも疑似的なコードとなる）：
+
+```cpp
+// プログラマが記述するコルーチン
+generator iota(int end)
+{
+  for (int n = 0; n &amp;lt; end; ++n) {
+    co_yield n;
+  }
+}
+
+// C++コンパイラにより展開されたコード
+generator iota(int end)
+{
+  // コルーチンに対応するPromiseオブジェクトを初期化
+  generator::promise_type promise;
+
+  // 戻り値型オブジェクトの初期化
+  generator result = promise.get_return_object();
+  // コルーチンハンドルをget_return_object内で取得し、resultメンバで保持する。
+  // 生成したresultオブジェクトは、初回のコルーチン中断時に呼出元へ返される。
+
+  // 本例では全て co_await std::suspend_always{} 相当のため、
+  // 以降のco_await式(★箇所)においてコルーチンは中断／再開される。
+
+  // 初期サスペンドポイント
+  co_await promise.initial_suspend(); //★
+
+  // コルーチン本体部
+  {
+    for (int n = 0; n &amp;lt; end; ++n) {
+      // co_yield式は下記co_await式に展開される
+      co_await promise.yield_value(n); //★
+    }
+  }
+  promise.return_void();
+
+  // 最終サスペンドポイント
+  co_await promise.final_suspend(); //★
+
+  // 本例では最終サスペンドポイントでコルーチンを中断するため、ここには制御が到達しない。
+  // 呼出側で戻り値オブジェクトを破棄すると、デストラクタ経由で本コルーチンは破棄される。
+}
+```
+* co_yield[color ff0000]
+* co_await[color ff0000]
+* std::suspend_always{}[link /reference/coroutine/suspend_always.md]
 
 
 ## 仕様
@@ -300,8 +348,8 @@ my_future&amp;lt;void&amp;gt; g() {
   co_await h();
 }
 
-auto f(int x = co_await h()); // エラー: await式は関数中断ポイントの外
-int a[] = { co_await h() };   // エラー: await式は関数中断ポイントの外
+auto f(int x = co_await h()); // エラー: await式は関数中断コンテキストの外
+int a[] = { co_await h() };   // エラー: await式は関数中断コンテキストの外
 ```
 * co_await[color ff0000]
 * std::coroutine_handle&amp;lt;&amp;gt;[link /reference/coroutine/coroutine_handle.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コルーチン -- cpp20/coroutines: &#34;動作概略&#34;セクションを記述</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/coroutines.html"/>
      <id>4acdcd6de31ecc931c5668093f465e67355c3834:lang/cpp20/coroutines.md</id>
      <updated>2020-06-29T17:32:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/coroutines.md b/lang/cpp20/coroutines.md
index 6db8d1988..459411187 100644
--- a/lang/cpp20/coroutines.md
+++ b/lang/cpp20/coroutines.md
@@ -38,6 +38,27 @@ C++コルーチンの特徴は次の通り：
 - __非対称(Asymmetric)・対称(Symmetric)コルーチン__: 中断処理によりコルーチン再開元へ制御を戻す非対称コルーチンのほか、明示的に別コルーチンの再開に制御を移す対称コルーチンをサポートする。待機動作をカスタマイズするAwaiterオブジェクト`await_suspend`にて制御する。
 - __[スレッド(thread)](/reference/thread/thread.md)との直交__: あるスレッド上で実行されるコルーチンを中断し、その後に別スレッドから同コルーチンを再開させることもできる。ただし[スレッドローカルストレージ](/lang/cpp11/thread_local_storage.md)と組合せには注意が必要。
 
+### 動作概略
+C++コルーチン動作理解の助けとなるよう、ここでは細部を省略した説明を行う。
+コルーチン実行の基本動作は、それぞれ下記ように説明される：
+
+- 呼出し: 通常の関数と同様に、括弧(`()`)を用いた関数呼び出し構文を用いる。コルーチンに対応するユーザ定義Promiseオブジェクトが自動的に生成されるため、そこからコルーチンハンドルを取得する。
+- 中断: コルーチン本体にて`co_yield`式または`co_await`式を記述する。中断されたコルーチンから呼出し元へは、コルーチンハンドルを内包するコルーチン戻り値型オブジェクトを返す。
+- 再開: コルーチン中断により返された戻り値型オブジェクトを介して、コルーチンハンドルの再開関数[`resume`](/reference/coroutine/coroutine_handle/resume.md)を呼び出す。
+- 復帰: コルーチン本体にて`co_return`文を記述、またはコルーチン本体終端まで到達する。全てのローカル変数とPromiseオブジェクトは破棄される。
+
+この４種類の基本動作に対して、次にようなカスタマイズポイントが提供される（_Promise_ や _Awaiter_ はコルーチンライブラリが提供するユーザ定義型とする）：
+
+- コルーチン呼出し直後の動作: 初期サスペンドポイント(_Promise_`::initial_suspend`)にて、コルーチン本体の開始前に中断して戻り値型オブジェクトを返すか、そのままコルーチン本体を実行継続するかを制御する。
+
+- コルーチン復帰直前の動作: 最終サスペンドポイント(_Promise_`::final_suspend`)にて、コルーチンを最後に中断して戻り値型オブジェクトを返すか、そのままコルーチンに関するリソースを破棄するかを制御する。前者を選択した場合、リソースリークを防ぐためコルーチンハンドルの破棄関数[`destroy`](/reference/coroutine/coroutine_handle/destroy.md)呼出しが必要となる。
+- 値を伴うコルーチン中断: `co_yield`式により、コルーチンを中断すると同時に呼出し元へ値を返す(_Promise_`::yield_value`)。
+- 値を伴うコルーチン復帰: `co_return`文により、呼出し元へ値を返す(_Promise_`::return_value`)。
+- コルーチン中断／再開制御: `co_await`式により、コルーチン中断の条件や動作を詳細に制御する(_Promise_`::await_transform`, `operator co_await`)。
+    - コルーチン中断の条件: `co_await`式に対して、コルーチンを中断するか否かを判断する(_Awaiter_`::await_ready`)。
+    - コルーチン中断直前の動作: `co_await`式に対して、コルーチンを中断する直前の動作を制御する(_Awaiter_`::await_suspend`)。
+    - コルーチン再開直後の動作: `co_await`式に対して、コルーチンが再開された直後の動作を制御する(_Awaiter_`::await_resume`)。
+
 
 ## 仕様
 ### コルーチン定義
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
</feed>
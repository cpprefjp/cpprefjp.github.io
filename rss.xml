<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-01-19T11:55:36.156430</updated>
  <id>fe61f94d-e2fe-4a6a-a830-510770360bd1</id>

  
    <entry>
      <title>insert -- Merge pull request #1402 from Mugen2411/cpprefjp/typo_vector_insert</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/insert.html"/>
      <id>418d323818a0560ffb42267d65b7110901b49393:reference/vector/vector/insert.md</id>
      <updated>2025-01-19T19:55:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/insert.md b/reference/vector/vector/insert.md
index 5440514e5..7fffa97d1 100644
--- a/reference/vector/vector/insert.md
+++ b/reference/vector/vector/insert.md
@@ -7,7 +7,7 @@
 ```cpp
 iterator insert(iterator position, const T&amp;amp; x);                 // (1) C++03
 iterator insert(const_iterator position, const T&amp;amp; x);           // (1) C++11
-consrexpr iterator insert(const_iterator position, const T&amp;amp; x); // (1) C++20
+constexpr iterator insert(const_iterator position, const T&amp;amp; x); // (1) C++20
 
 iterator insert(const_iterator position, T&amp;amp;&amp;amp; x);           // (2) C++11
 constexpr iterator insert(const_iterator position, T&amp;amp;&amp;amp; x); // (2) C++20
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>linalg -- &lt;linalg&gt;: ハミルトニアン -&gt; エルミート</title>
      <link href="https://cpprefjp.github.io/reference/linalg.html"/>
      <id>a4a704d69dd914e6180a1d43fd27bee0f80f37a8:reference/linalg.md</id>
      <updated>2025-01-18T21:57:43+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;linalg&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;linalg&lt;/span&gt;&lt;span class=&#34;cpp cpp26&#34; title=&#34;C++26で追加&#34;&gt;(C++26)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;linalg&amp;gt;&lt;/code&gt;ヘッダでは、線形代数(linear algebra)に関する基礎的な演算アルゴリズムを提供する。
ベクトルや行列の成分にアクセスするアルゴリズムは、多次元配列ビュー&lt;a href=&#34;mdspan/mdspan.html&#34;&gt; &lt;code&gt;std::mdspan&lt;/code&gt; &lt;/a&gt;を通してその要素にアクセスする。
本ヘッダが提供するエンティティは、すべて名前空間&lt;code&gt;std::linalg&lt;/code&gt;に属する。&lt;/p&gt;
&lt;p&gt;1次元データであるベクトル(vector)や2次元データである行列(matrix)に対して、線形代数分野のデファクトスタンダードとされる BLAS(Basic Linear Algebra Subprograms) 互換のアルゴリズム群、いくつかの LAPACK(Linear Algebra PACKage) 互換のアルゴリズムが提供される。
BLAS互換アルゴリズムは、演算対象データの次元数や計算オーダーに応じて3段階に区分される。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Level 1 BLAS : ベクトルーベクトルの演算&lt;/li&gt;
&lt;li&gt;Level 2 BLAS : 行列ーベクトルの演算&lt;/li&gt;
&lt;li&gt;Level 3 BLAS : 行列ー行列の演算&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例えば、2個の一般行列の積を求める&lt;code&gt;std::linalg::matrix_product&lt;/code&gt;はLevel 3 BLASルーチン&lt;code&gt;xGEMM&lt;/code&gt;に対応する。
（実際のBLASルーチン名は、浮動小数点数型の単精度&lt;code&gt;S&lt;/code&gt;／倍精度&lt;code&gt;D&lt;/code&gt;とそれぞれの複素数版&lt;code&gt;C&lt;/code&gt;,&lt;code&gt;Z&lt;/code&gt;として、プレフィックス&lt;code&gt;x&lt;/code&gt;部は文字4種類のいずれか。）&lt;/p&gt;
&lt;p&gt;また、&lt;code&gt;std::mdspan&lt;/code&gt;と組み合わせて利用する拡張機能が提供される。&lt;/p&gt;
&lt;h2&gt;共通要件&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;linalg&amp;gt;&lt;/code&gt;ヘッダが提供する演算アルゴリズムは、スカラ値およびベクトル／行列の要素型として線形代数値型(linear algebra value types)を取り扱う。&lt;/p&gt;
&lt;p&gt;線形代数値型はBLASが取り扱う&lt;code&gt;float&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;complex/complex.html&#34;&gt;std::complex&lt;/a&gt;&amp;lt;float&amp;gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;complex/complex.html&#34;&gt;std::complex&lt;/a&gt;&amp;lt;double&amp;gt;&lt;/code&gt;をはじめ、&lt;code&gt;&lt;a href=&#34;concepts/semiregular.html&#34;&gt;semiregular&lt;/a&gt;&lt;/code&gt;のモデルであれば良い。
また、線形代数値型の値初期化は加法元（算術型であれば値&lt;code&gt;0&lt;/code&gt;）であること。&lt;/p&gt;
&lt;p&gt;プログラム定義型を利用する場合、演算アルゴリズムはカスタマイゼーションポイントとして&lt;code&gt;abs&lt;/code&gt;, &lt;code&gt;real&lt;/code&gt;, &lt;code&gt;imag&lt;/code&gt;, &lt;code&gt;conj&lt;/code&gt;を非修飾名で呼び出す。&lt;/p&gt;
&lt;h2&gt;&lt;code&gt;std::mdspan&lt;/code&gt;向け機能拡張&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/layout_blas_packed.html&#34;&gt;layout_blas_packed&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;行列要素のBLAS互換パックレイアウトに対応する&lt;a href=&#34;mdspan/LayoutMappingPolicy.html&#34;&gt;レイアウトマッピングポリシー&lt;/a&gt; (class template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/scaled_accessor.html&#34;&gt;scaled_accessor&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;scaled&lt;/code&gt;関数用の&lt;a href=&#34;mdspan/AccessorPolicy.html&#34;&gt;アクセサポリシー&lt;/a&gt; (class template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/scaled.html&#34;&gt;scaled&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素値をスカラー倍した読み取り専用&lt;code&gt;std::mdspan&lt;/code&gt;を作る (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/conjugated_accessor.html&#34;&gt;conjugated_accessor&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;conjugated&lt;/code&gt;関数用の&lt;a href=&#34;mdspan/AccessorPolicy.html&#34;&gt;アクセサポリシー&lt;/a&gt; (class template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/conjugated.html&#34;&gt;conjugated&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;読み取り専用の複素共役ビュー&lt;code&gt;std::mdspan&lt;/code&gt;を作る (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/layout_transpose.html&#34;&gt;layout_transpose&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;transposed&lt;/code&gt;関数用の&lt;a href=&#34;mdspan/LayoutMappingPolicy.html&#34;&gt;レイアウトマッピングポリシー&lt;/a&gt; (class template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/transposed.html&#34;&gt;transposed&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2次元&lt;code&gt;std::mdspan&lt;/code&gt;の行列転置ビューを作る (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/conjugate_transposed.html&#34;&gt;conjugate_transposed&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;読み取り専用の複素共役転置ビュー&lt;code&gt;std::mdspan&lt;/code&gt;を作る (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;BLASの要件&lt;/h2&gt;
&lt;p&gt;BLAS 1, 2, 3のアルゴリズムでテンプレートパラメータが特に制約されていない場合、テンプレートパラメータの名前によって以下の制約を満たすとする。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;制約&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ExecutionPolicy&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;is_execution_policy&amp;lt;ExecutionPolicy&amp;gt;::value == true&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Real&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;complex&amp;lt;Real&amp;gt;&lt;/code&gt;が規定できる型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Triangle&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;upper_triangle_t&lt;/code&gt;または&lt;code&gt;lower_triangle_t&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;DiagonalStorage&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;implicit_unit_diagonal_t&lt;/code&gt;または&lt;code&gt;explicit_diagonal_t&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;BLAS 1アルゴリズム&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;std::mpspan&lt;/code&gt;をパラメータに持つ、この節の全てのアルゴリズムの計算量は渡された&lt;code&gt;std::mdspan&lt;/code&gt;の&lt;code&gt;extents&lt;/code&gt;の積の最大値、つまりベクトルや行列の要素数の最大値に線形である。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/setup_givens_rotation_result.html&#34;&gt;setup_givens_rotation_result&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;setup_givens_rotation&lt;/code&gt;の結果型 (class template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/setup_givens_rotation.html&#34;&gt;setup_givens_rotation&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xLARTG: ギブンス回転をセットアップする (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/apply_givens_rotation.html&#34;&gt;apply_givens_rotation&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xROT: ベクトルにギブンス回転を適用する (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/swap_elements.html&#34;&gt;swap_elements&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xSWAP: 2つのベクトル／行列の要素を交換する (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/scale.html&#34;&gt;scale&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xSCAL: ベクトル／行列の要素にスカラ値を乗算する (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/copy.html&#34;&gt;copy&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xCOPY: ベクトル／行列の要素をコピーする (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/add.html&#34;&gt;add&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xAXPY: 2つのベクトル／行列の要素を加算する (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/dot.html&#34;&gt;dot&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xDOT, xDOTU: 2つのベクトルのドット積を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/dotc.html&#34;&gt;dotc&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xDOTC: 2つのベクトルの複素共役ドット積を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/sum_of_squares_result.html&#34;&gt;sum_of_squares_result&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;vector_sum_of_squares&lt;/code&gt;の結果型 (class template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/vector_sum_of_squares.html&#34;&gt;vector_sum_of_squares&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xLASSQ: ベクトル要素の平方和を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/vector_two_norm.html&#34;&gt;vector_two_norm&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xNRM2: ベクトルのユークリッドノルム(Euclidean norm)を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/vector_abs_sum.html&#34;&gt;vector_abs_sum&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xASUM: ベクトル要素の絶対値和を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/vector_idx_abs_max.html&#34;&gt;vector_idx_abs_max&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xIAMAX: ベクトル要素のうち最大絶対値インデクスを返す (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/matrix_frob_norm.html&#34;&gt;matrix_frob_norm&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;行列のフロベニウスノルム(Frobenius norm)を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/matrix_one_norm.html&#34;&gt;matrix_one_norm&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;行列の1ノルム(One norm)を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/matrix_inf_norm.html&#34;&gt;matrix_inf_norm&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;行列の無限大ノルム(Infinity norm)を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;BLAS 2アルゴリズム&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/matrix_vector_product.html&#34;&gt;matrix_vector_product&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xGEMV: 一般行列とベクトルの積を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/symmetric_matrix_vector_product.html&#34;&gt;symmetric_matrix_vector_product&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xSYMV: 対称行列とベクトルの積を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/hermitian_matrix_vector_product.html&#34;&gt;hermitian_matrix_vector_product&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xHEMV: エルミート行列とベクトルの積を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/triangular_matrix_vector_product.html&#34;&gt;triangular_matrix_vector_product&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xTRMV: 三角行列とベクトルの積を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/triangular_matrix_vector_solve.html&#34;&gt;triangular_matrix_vector_solve&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xTRSV: 三角行列を係数とする行列方程式を解く (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/matrix_rank_1_update.html&#34;&gt;matrix_rank_1_update&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xGER, xGERU: 行列のRank-1更新 (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/matrix_rank_1_update_c.html&#34;&gt;matrix_rank_1_update_c&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xGERC: 複素行列のRank-1更新 (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/symmetric_matrix_rank_1_update.html&#34;&gt;symmetric_matrix_rank_1_update&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xSYR: 対称行列のRank-1更新 (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/hermitian_matrix_rank_1_update.html&#34;&gt;hermitian_matrix_rank_1_update&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xHER: エルミート行列のRank-1更新 (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/symmetric_matrix_rank_2_update.html&#34;&gt;symmetric_matrix_rank_2_update&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xSYR2: 対称行列のRank-2更新 (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/hermitian_matrix_rank_2_update.html&#34;&gt;hermitian_matrix_rank_2_update&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xHER2: エルミート行列のRank-2更新 (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;BLAS 3アルゴリズム&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/matrix_product.html&#34;&gt;matrix_product&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xGEMM: 2つの一般行列の積を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/symmetric_matrix_product.html&#34;&gt;symmetric_matrix_product&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xSYMM: 対称行列と行列の積を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/hermitian_matrix_product.html&#34;&gt;hermitian_matrix_product&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xHEMM: エルミート行列と行列の積を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/triangular_matrix_product.html&#34;&gt;triangular_matrix_product&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xTRMM: 三角行列と行列の積を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/triangular_matrix_left_product.html&#34;&gt;triangular_matrix_left_product&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xTRMM: In-placeに三角行列と行列の積を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/triangular_matrix_right_product.html&#34;&gt;triangular_matrix_right_product&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xTRMM: In-placeに三角行列と行列の積を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/symmetric_matrix_rank_k_update.html&#34;&gt;symmetric_matrix_rank_k_update&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xSYRK: 対称行列のRank-k更新 (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/hermitian_matrix_rank_k_update.html&#34;&gt;hermitian_matrix_rank_k_update&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xHERK: エルミート行列のRank-k更新 (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/symmetric_matrix_rank_2k_update.html&#34;&gt;symmetric_matrix_rank_2k_update&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xSYR2K: 対称行列のRank-2k更新 (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/hermitian_matrix_rank_2k_update.html&#34;&gt;hermitian_matrix_rank_2k_update&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xHER2K: エルミート行列のRank-2k更新 (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/triangular_matrix_matrix_left_solve.html&#34;&gt;triangular_matrix_matrix_left_solve&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xTRSM: 三角行列の連立一次方程式を解く (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/triangular_matrix_matrix_right_solve.html&#34;&gt;triangular_matrix_matrix_right_solve&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xTRSM: 三角行列の連立一次方程式を解く (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;タグ&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;linalg&amp;gt;&lt;/code&gt;ヘッダでは、行列の格納順序や三角行列の上下をタグを使って表現している。&lt;/p&gt;
&lt;h3&gt;格納順序&lt;/h3&gt;
&lt;p&gt;行列の格納順序を表すタグ。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/column_major_t.html&#34;&gt;column_major_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;列優先(column-major)を表すタグ型&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/column_major_t.html&#34;&gt;column_major&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;列優先(column-major)を表すタグ値&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/row_major_t.html&#34;&gt;row_major_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;行優先(row-major)を表すタグ型&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/row_major_t.html&#34;&gt;row_major&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;行優先(row-major)を表すタグ値&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;三角行列&lt;/h3&gt;
&lt;p&gt;上三角行列か下三角行列かを表すタグ。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/upper_triangle_t.html&#34;&gt;upper_triangle_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;上三角行列を表すタグ型&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/upper_triangle_t.html&#34;&gt;upper_triangle&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;上三角行列を表すタグ値&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/lower_triangle_t.html&#34;&gt;lower_triangle_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;下三角行列を表すタグ型&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/lower_triangle_t.html&#34;&gt;lower_triangle&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;下三角行列を表すタグ値&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;対角成分&lt;/h3&gt;
&lt;p&gt;行列の全ての対角成分を暗黙に乗法における単位元とみなすかどうかを表すタグ。みなした場合、行列の対角成分にはアクセスせず、値が乗法における単位元であるとして計算する。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/implicit_unit_diagonal_t.html&#34;&gt;implicit_unit_diagonal_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;全ての対角成分を暗黙に乗法における単位元とみなすタグ型&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/implicit_unit_diagonal_t.html&#34;&gt;implicit_unit_diagonal&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;全ての対角成分を暗黙に乗法における単位元とみなすタグ値&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/explicit_diagonal_t.html&#34;&gt;explicit_diagonal_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;全ての対角成分にアクセスするタグ型&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/explicit_diagonal_t.html&#34;&gt;explicit_diagonal&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;全ての対角成分にアクセスするタグ値&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++26&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;mdspan.html&#34;&gt;&amp;lt;mdspan&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p1673r13.html&#34; target=&#34;_blank&#34;&gt;P1673R13 A free function linear algebra interface based on the BLAS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1674r2.html&#34; target=&#34;_blank&#34;&gt;P1674R2: Evolving a Standard C++ Linear Algebra Library from the BLAS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/CppCon/CppCon2023/blob/main/Presentations/stdlinalg_linear_algebra_coming_to_standard_cpp.pdf&#34; target=&#34;_blank&#34;&gt;std::linalg: Linear Algebra Coming to Standard C++&lt;/a&gt;, CppCon 2023&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.netlib.org/blas/&#34; target=&#34;_blank&#34;&gt;BLAS (Basic Linear Algebra Subprograms)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://eel.is/c++draft/complex.numbers&#34; target=&#34;_blank&#34;&gt;Numerics library&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>memory_order -- Merge pull request #1360 from akinomyoga/dfn-happens-before</title>
      <link href="https://cpprefjp.github.io/reference/atomic/memory_order.html"/>
      <id>03638225a76adffd91d4a914fdece8511cf3c427:reference/atomic/memory_order.md</id>
      <updated>2025-01-18T17:49:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/memory_order.md b/reference/atomic/memory_order.md
index 9657dfa02..3d9b32f90 100644
--- a/reference/atomic/memory_order.md
+++ b/reference/atomic/memory_order.md
@@ -27,7 +27,7 @@ namespace std {
 
 ## 概要
 コンパイラに許可されている最適化の一つに、「プログラムの意味を変えない限りにおいて、メモリアクセスの順番を変えたり、省略したりしてもよい」というものがある。また、マルチコアCPUにおいては、あるCPUコアによるメモリアクセスの順序が他のコアからも同じように見えるとは限らない。このような挙動はマルチスレッドプログラミングにおいて問題になることがある。
-この問題への対処として、C++11では各スレッドの実行に順序付けをするための&amp;#34;happens before&amp;#34;(先行発生)という関係を定義し、それによってあるスレッドでの操作が他スレッドから可視になるか否かを定めている。
+この問題への対処として、C++11では各スレッドの実行に順序付けをするための「よりも前に発生する」という関係を定義し、それによってあるスレッドでの操作が他スレッドから可視になるか否かを定めている。
 atomic変数においては、&amp;#34;release&amp;#34;操作によって書き込まれた値を&amp;#34;acquire&amp;#34;操作によって別のスレッドが読み出した場合に、そのrelease操作とacquire操作の間に順序付けが行われる。以下に例を挙げる。
 
 ```cpp example
@@ -65,8 +65,8 @@ int main()
 3
 ```
 
-[`atomic&amp;lt;bool&amp;gt;`](atomic.md)型の変数`ready`への読み書きに注目すると、`main()`では変数`ready`に `true` を&amp;#34;release&amp;#34;操作として書き込み、`f()`では&amp;#34;acquire&amp;#34;操作としての読み込みを `true` が返されるまで繰り返している。よって、`f()`の`while`ループを抜けた時点で、`main()`の`ready.store()`と`f()`の`ready.load()`の間に順序付け(happens before関係)が成立している。
-ここでさらに変数`data`への読み書き(1), (2)に注目すると、(1)は`ready.store()`より前、(2)は`ready.load()`より後にあるので、以下のようなスレッド間の順序付け(happens before関係)が成立することになる。
+[`atomic&amp;lt;bool&amp;gt;`](atomic.md)型の変数`ready`への読み書きに注目すると、`main()`では変数`ready`に `true` を&amp;#34;release&amp;#34;操作として書き込み、`f()`では&amp;#34;acquire&amp;#34;操作としての読み込みを `true` が返されるまで繰り返している。よって、`f()`の`while`ループを抜けた時点で、`main()`の`ready.store()`と`f()`の`ready.load()`の間に順序付け(「よりも前に発生する」関係)が成立している。
+ここでさらに変数`data`への読み書き(1), (2)に注目すると、(1)は`ready.store()`より前、(2)は`ready.load()`より後にあるので、以下のようなスレッド間の順序付け(「よりも前に発生する」関係)が成立することになる。
    (1) → `ready.store()` → `ready.load()` → (2)
 よって、(1)における書き込みが(2)の時点で可視であることが保証される。
 このようにしてC++のマルチスレッドプログラムにおける実行順序および可視性を理解することができる。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>barrier -- Merge pull request #1360 from akinomyoga/dfn-happens-before</title>
      <link href="https://cpprefjp.github.io/reference/barrier/barrier.html"/>
      <id>03638225a76adffd91d4a914fdece8511cf3c427:reference/barrier/barrier.md</id>
      <updated>2025-01-18T17:49:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/barrier/barrier.md b/reference/barrier/barrier.md
index 9440878df..82302258b 100644
--- a/reference/barrier/barrier.md
+++ b/reference/barrier/barrier.md
@@ -43,7 +43,7 @@ namespace std {
 - 完了関数を呼び出す。`completion()`と等価。
 - フェーズ同期ポイント上でブロックされている全スレッドのブロックを解除する。
 
-完了ステップの終了は、完了ステップによりブロック解除される全ての関数呼び出しからの復帰よりも、確実に前に発生(strongly happens before)する。
+完了ステップの終了は、完了ステップによりブロック解除される全ての関数呼び出しからの復帰**よりも確実に前に発生する**。
 テンプレートパラメータ`CompletionFunction`のデフォルト値以外の特殊化においては、完了ステップの進行中にバリアオブジェクトの[`wait()`](barrier/wait.md)を除くメンバ関数が呼び出されると、その動作は未定義となる。
 
 テンプレートパラメータ`CompletionFunction`のデフォルト値は、追加で Cpp17DefaultConstructible 要件を満たす未規定の型であり、式`completion()`は何の副作用も生じない。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>emit -- Merge pull request #1360 from akinomyoga/dfn-happens-before</title>
      <link href="https://cpprefjp.github.io/reference/syncstream/basic_syncbuf/emit.html"/>
      <id>03638225a76adffd91d4a914fdece8511cf3c427:reference/syncstream/basic_syncbuf/emit.md</id>
      <updated>2025-01-18T17:49:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/syncstream/basic_syncbuf/emit.md b/reference/syncstream/basic_syncbuf/emit.md
index 9e828bd67..0c8ddb62d 100644
--- a/reference/syncstream/basic_syncbuf/emit.md
+++ b/reference/syncstream/basic_syncbuf/emit.md
@@ -32,9 +32,9 @@ bool emit();
 
 
 ## 同期操作
-同じストリームバッファオブジェクトに文字を転送するすべての`emit()`呼び出しは、「happens before」関係と一致する全順序で実行されるように見える。各`emit()`呼び出しは、その全順序で後続の`emit()`呼び出しと同期する。実際には、これは下記の備考にあることを意味する。
+同じストリームバッファオブジェクトに文字を転送するすべての`emit()`呼び出しは、「よりも前に発生する」関係と一致する全順序で実行されるように見える。各`emit()`呼び出しは、その全順序で後続の`emit()`呼び出し**に対して同期する**。実際には、これは下記の備考にあることを意味する。
 
-注：ここでは、happens before 関係は全順序関係になっていると考えられる。また、modification order と矛盾しないとも考えられる。下記の参照を参照のこと。
+注：ここでは、「よりも前に発生する」関係は全順序関係になっていると考えられる。また、modification order と矛盾しないとも考えられる。下記の参照を参照のこと。
 
 ## 備考
 ラップされたストリームに一意に関連付けられたロックを保持しながら、ラップされたストリームのメンバ関数を呼び出すことができる。つまり、同じストリームを持つ他の`basic_syncbuf`オブジェクトに対してアトミックに転送することができる。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>join -- Merge pull request #1360 from akinomyoga/dfn-happens-before</title>
      <link href="https://cpprefjp.github.io/reference/thread/jthread/join.html"/>
      <id>03638225a76adffd91d4a914fdece8511cf3c427:reference/thread/jthread/join.md</id>
      <updated>2025-01-18T17:49:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/thread/jthread/join.md b/reference/thread/jthread/join.md
index 560271225..7ee8ae32e 100644
--- a/reference/thread/jthread/join.md
+++ b/reference/thread/jthread/join.md
@@ -22,10 +22,10 @@ void join();
 
 
 ## 同期操作
-関連付けられたスレッドの完了は、`join()`メンバ関数の正常リターンと **同期する** 。
+関連付けられたスレッドの完了は、`join()`メンバ関数の正常リターン**に対して同期する** 。
 
 つまり、「`this`に関連付けられたスレッドT1上で行われる全処理の完了」は、
-「`join()`メンバ関数を呼び出したスレッドT0上での同メンバ関数からの正常リターン」よりも **前に発生する** 。
+「`join()`メンバ関数を呼び出したスレッドT0上での同メンバ関数からの正常リターン」**よりも前に発生する** 。
 
 
 ## 事後条件
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge pull request #1360 from akinomyoga/dfn-happens-before</title>
      <link href="https://cpprefjp.github.io/reference/thread/jthread/op_constructor.html"/>
      <id>03638225a76adffd91d4a914fdece8511cf3c427:reference/thread/jthread/op_constructor.md</id>
      <updated>2025-01-18T17:49:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/thread/jthread/op_constructor.md b/reference/thread/jthread/op_constructor.md
index 1c7dc5aff..0ec9fa89f 100644
--- a/reference/thread/jthread/op_constructor.md
+++ b/reference/thread/jthread/op_constructor.md
@@ -63,13 +63,13 @@ jthread(jthread&amp;amp;&amp;amp;) noexcept;             // (4) C++20
 
 
 ## 同期操作
-- (2) : コンストラクタ呼び出しの完了は、`f`のコピーの呼び出し開始と同期する
+- (2) : コンストラクタ呼び出しの完了は、`f`のコピーの呼び出し開始**に対して同期する**
     新しいスレッドを生成し、[`INVOKE`](/reference/concepts/Invoke.md)`(DECAY_COPY(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f)), DECAY_COPY(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args))...)`を実行する。ただし`DECAY_COPY`は同コンストラクタを呼び出したスレッド上にて評価される。また`f`のコピーの戻り値は無視される。
     - `DECAY_COPY(x)`は `template &amp;lt;class T&amp;gt; typename std::decay&amp;lt;T&amp;gt;::type decay_copy(T&amp;amp;&amp;amp; v) { return` [`std::forward`](/reference/utility/forward.md)`&amp;lt;T&amp;gt;(v); }` と定義される。おおよそ、`x`が配列型なら先頭要素へのポインタ、`x`が関数型ならその関数ポインタ、`x`がコピーコンストラクト可能な型なら`x`からコピーされたオブジェクト、`x`がムーブコンストラクト可能な型なら`x`からムーブされたオブジェクトとなる。
 
 
 ## 同期操作
-- (2) : 同コンストラクタの呼び出し完了は、fのコピーの呼び出し開始と**同期する**。つまり、「コンストラクタ呼び出し側スレッドT0でのコンストラクタ呼び出し完了」は、「新しいスレッド`T1`上での`f`のコピーの呼び出し開始」よりも**前に発生する**。
+- (2) : 同コンストラクタの呼び出し完了は、fのコピーの呼び出し開始**に対して同期する**。つまり、「コンストラクタ呼び出し側スレッドT0でのコンストラクタ呼び出し完了」は、「新しいスレッド`T1`上での`f`のコピーの呼び出し開始」**よりも前に発生する**。
 
 
 ## 事後条件
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sleep_for -- Merge pull request #1360 from akinomyoga/dfn-happens-before</title>
      <link href="https://cpprefjp.github.io/reference/thread/this_thread/sleep_for.html"/>
      <id>03638225a76adffd91d4a914fdece8511cf3c427:reference/thread/this_thread/sleep_for.md</id>
      <updated>2025-01-18T17:49:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/thread/this_thread/sleep_for.md b/reference/thread/this_thread/sleep_for.md
index b6df0ab1f..0177d5b20 100644
--- a/reference/thread/this_thread/sleep_for.md
+++ b/reference/thread/this_thread/sleep_for.md
@@ -24,7 +24,7 @@ namespace this_thread {
 
 
 ## 同期操作
-特に他操作と同期しない。
+特に他操作に対して同期する規定はない。
 
 
 ## 例外
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sleep_until -- Merge pull request #1360 from akinomyoga/dfn-happens-before</title>
      <link href="https://cpprefjp.github.io/reference/thread/this_thread/sleep_until.html"/>
      <id>03638225a76adffd91d4a914fdece8511cf3c427:reference/thread/this_thread/sleep_until.md</id>
      <updated>2025-01-18T17:49:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/thread/this_thread/sleep_until.md b/reference/thread/this_thread/sleep_until.md
index a68bba072..7a0dde985 100644
--- a/reference/thread/this_thread/sleep_until.md
+++ b/reference/thread/this_thread/sleep_until.md
@@ -27,7 +27,7 @@ namespace this_thread {
 
 
 ## 同期操作
-特に他操作と同期しない。
+特に他操作に対して同期する規定はない。
 
 
 ## 例外
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>yield -- Merge pull request #1360 from akinomyoga/dfn-happens-before</title>
      <link href="https://cpprefjp.github.io/reference/thread/this_thread/yield.html"/>
      <id>03638225a76adffd91d4a914fdece8511cf3c427:reference/thread/this_thread/yield.md</id>
      <updated>2025-01-18T17:49:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/thread/this_thread/yield.md b/reference/thread/this_thread/yield.md
index 76c7e836b..edc07ef7f 100644
--- a/reference/thread/this_thread/yield.md
+++ b/reference/thread/this_thread/yield.md
@@ -20,7 +20,7 @@ namespace this_thread {
 
 
 ## 同期操作
-特に他操作と同期しない。
+特に他操作に対して同期する規定はない。
 
 
 ## 例外
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>join -- Merge pull request #1360 from akinomyoga/dfn-happens-before</title>
      <link href="https://cpprefjp.github.io/reference/thread/thread/join.html"/>
      <id>03638225a76adffd91d4a914fdece8511cf3c427:reference/thread/thread/join.md</id>
      <updated>2025-01-18T17:49:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/thread/thread/join.md b/reference/thread/thread/join.md
index 9f8497d18..51a42ba06 100644
--- a/reference/thread/thread/join.md
+++ b/reference/thread/thread/join.md
@@ -22,10 +22,10 @@ void join();
 
 
 ## 同期操作
-関連付けられたスレッドの完了は、`join()`メンバ関数の正常リターンと **同期する** 。
+関連付けられたスレッドの完了は、`join()`メンバ関数の正常リターン**に対して同期する** 。
 
 つまり、「`this`に関連付けられたスレッドT1上で行われる全処理の完了」は、
-「`join()`メンバ関数を呼び出したスレッドT0上での同メンバ関数からの正常リターン」よりも **前に発生する** 。
+「`join()`メンバ関数を呼び出したスレッドT0上での同メンバ関数からの正常リターン」**よりも前に発生する** 。
 
 
 ## 事後条件
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge pull request #1360 from akinomyoga/dfn-happens-before</title>
      <link href="https://cpprefjp.github.io/reference/thread/thread/op_constructor.html"/>
      <id>03638225a76adffd91d4a914fdece8511cf3c427:reference/thread/thread/op_constructor.md</id>
      <updated>2025-01-18T17:49:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/thread/thread/op_constructor.md b/reference/thread/thread/op_constructor.md
index 56b864510..5caff43ef 100644
--- a/reference/thread/thread/op_constructor.md
+++ b/reference/thread/thread/op_constructor.md
@@ -36,7 +36,7 @@ thread(thread&amp;amp;&amp;amp;) noexcept;              // (4)
 
 
 ## 同期操作
-- (2) : 同コンストラクタの呼び出し完了は、fのコピーの呼び出し開始と**同期する**。つまり、「コンストラクタ呼び出し側スレッドT0でのコンストラクタ呼び出し完了」は、「新しいスレッド`T1`上での`f`のコピーの呼び出し開始」よりも**前に発生する**。
+- (2) : 同コンストラクタの呼び出し完了は、fのコピーの呼び出し開始**に対して同期する**。つまり、「コンストラクタ呼び出し側スレッドT0でのコンストラクタ呼び出し完了」は、「新しいスレッド`T1`上での`f`のコピーの呼び出し開始」**よりも前に発生する**。
 
 
 ## 事後条件
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>スタイル -- Merge pull request #1360 from akinomyoga/dfn-happens-before</title>
      <link href="https://cpprefjp.github.io/working_style.html"/>
      <id>03638225a76adffd91d4a914fdece8511cf3c427:working_style.md</id>
      <updated>2025-01-18T17:49:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/working_style.md b/working_style.md
index 980f18020..0c28b90af 100644
--- a/working_style.md
+++ b/working_style.md
@@ -152,3 +152,8 @@ C++11以降対応については対応バージョンを明記します。バー
 | weak ordering                      | 弱順序                       |
 | well-formed                        | 適格                         |
 | eligible                           | 資格のある                   |
+| synchronizes with                  | に対して同期する (&amp;#34;と同期する&amp;#34; だと対称関係に見えるため) |
+| happens before                     | よりも前に発生する                                       |
+| strongly happens before            | よりも確実に前に発生する                                 |
+| sequenced before                   | よりも前に順序付けられる                                 |
+| indeterminately sequenced          | 不定順で順序付けられる                                   |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert -- typo: constrexpr→constexpr</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/insert.html"/>
      <id>deadc77b3f69ffa39f584eab776139d729bdfa0c:reference/vector/vector/insert.md</id>
      <updated>2025-01-18T17:11:39+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/insert.md b/reference/vector/vector/insert.md
index 5440514e5..7fffa97d1 100644
--- a/reference/vector/vector/insert.md
+++ b/reference/vector/vector/insert.md
@@ -7,7 +7,7 @@
 ```cpp
 iterator insert(iterator position, const T&amp;amp; x);                 // (1) C++03
 iterator insert(const_iterator position, const T&amp;amp; x);           // (1) C++11
-consrexpr iterator insert(const_iterator position, const T&amp;amp; x); // (1) C++20
+constexpr iterator insert(const_iterator position, const T&amp;amp; x); // (1) C++20
 
 iterator insert(const_iterator position, T&amp;amp;&amp;amp; x);           // (2) C++11
 constexpr iterator insert(const_iterator position, T&amp;amp;&amp;amp; x); // (2) C++20
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Mugen2411</name>
        <email>shojirintaro@gmail.com</email>
      </author>
    </entry>
  
</feed>
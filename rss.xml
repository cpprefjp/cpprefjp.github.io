<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2020-09-11T08:06:27.550039</updated>
  <id>c059e37d-3793-43e3-940e-5ade63179e61</id>

  
    <entry>
      <title>output_iterator -- output_iterator : fix typo</title>
      <link href="https://cpprefjp.github.io/reference/iterator/output_iterator.html"/>
      <id>76b4f650edce9ab5159ad5b2758355c82266a785:reference/iterator/output_iterator.md</id>
      <updated>2020-09-11T17:02:07+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/output_iterator.md b/reference/iterator/output_iterator.md
index 168601072..431c9b1ba 100644
--- a/reference/iterator/output_iterator.md
+++ b/reference/iterator/output_iterator.md
@@ -22,11 +22,11 @@ namespace std {
 
 `output_iterator`は、イテレータ型`I`が出力イテレータであることを表すコンセプトである。
 
-`output_iterator`となるイテレータは、`operator*`による書き込み前置/後置インクリメントによる進行が可能であるが、等値比較は必ずしも可能ではない。
+`output_iterator`となるイテレータは、`operator*`による書き込みと前置/後置インクリメントによる進行が可能であるが、等値比較は必ずしも可能ではない。
 
 ## モデル
 
-``decltype((E))`が型`T`を示す式`E`、間接参照可能な型`I`のオブジェクト`i`について次の条件を満たす場合に限って、型`I, T`は`output_iterator`のモデルである。
+`decltype((E))`が型`T`を示す式`E`、間接参照可能な型`I`のオブジェクト`i`について次の条件を満たす場合に限って、型`I, T`は`output_iterator`のモデルである。
 
 - `*i++ = E;`は次の式と等価となる
   ```cpp
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>モジュール -- Update modules.md</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/modules.html"/>
      <id>3fdf94fac31a626be5b00f093e3e988a9f2981cf:lang/cpp20/modules.md</id>
      <updated>2020-09-10T19:26:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/modules.md b/lang/cpp20/modules.md
index 81199e743..5872f6180 100644
--- a/lang/cpp20/modules.md
+++ b/lang/cpp20/modules.md
@@ -32,7 +32,8 @@ int main() {
 ```
 * P1103R3[link http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1103r3.pdf]
 
-ただし、C++20では標準でモジュールとして提供されるライブラリはない。
+C++20では標準ライブラリはモジュール化されないが、その中でC++ライブラリはヘッダーユニットとしてインポートできる。
+標準ライブラリのモジュール化はC++23以降に予定されている。
 
 ## 仕様
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>alignas -- add link to C++17 dynamic_memory_allocation_for_over-aligned_data.md from C++11 alianas.md and alignof.md</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/alignas.html"/>
      <id>f6197ad6afca4b589d7969a9e24b853ff6da369b:lang/cpp11/alignas.md</id>
      <updated>2020-09-10T15:35:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/alignas.md b/lang/cpp11/alignas.md
index b6e084a7f..a913e2bd0 100644
--- a/lang/cpp11/alignas.md
+++ b/lang/cpp11/alignas.md
@@ -103,6 +103,7 @@ N2341 からはわからない、恐らくないと思われる。
 
 ## 関連項目
 - [C++11 `alignof`](/lang/cpp11/alignof.md)
+- [C++17 アライメント指定されたデータの動的メモリ確保](/lang/cpp17/dynamic_memory_allocation_for_over-aligned_data.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Shunsuke Shimizu</name>
        <email>grafi@grafi.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>alignof -- add link to C++17 dynamic_memory_allocation_for_over-aligned_data.md from C++11 alianas.md and alignof.md</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/alignof.html"/>
      <id>f6197ad6afca4b589d7969a9e24b853ff6da369b:lang/cpp11/alignof.md</id>
      <updated>2020-09-10T15:35:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/alignof.md b/lang/cpp11/alignof.md
index 83e10671e..312b658cf 100644
--- a/lang/cpp11/alignof.md
+++ b/lang/cpp11/alignof.md
@@ -73,6 +73,7 @@ N2341 からはわからない、恐らくないと思われる。
 ## 関連項目
 - [C++11 `alignas`](/lang/cpp11/alignas.md)
 - [`std::max_align_t`](/reference/cstddef/max_align_t.md)
+- [C++17 アライメント指定されたデータの動的メモリ確保](/lang/cpp17/dynamic_memory_allocation_for_over-aligned_data.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Shunsuke Shimizu</name>
        <email>grafi@grafi.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>アライメント指定されたデータの動的メモリ確保 -- add link to C++17 dynamic_memory_allocation_for_over-aligned_data.md from C++11 alianas.md and alignof.md</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/dynamic_memory_allocation_for_over-aligned_data.html"/>
      <id>f6197ad6afca4b589d7969a9e24b853ff6da369b:lang/cpp17/dynamic_memory_allocation_for_over-aligned_data.md</id>
      <updated>2020-09-10T15:35:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/dynamic_memory_allocation_for_over-aligned_data.md b/lang/cpp17/dynamic_memory_allocation_for_over-aligned_data.md
index d09588484..cfee8f255 100644
--- a/lang/cpp17/dynamic_memory_allocation_for_over-aligned_data.md
+++ b/lang/cpp17/dynamic_memory_allocation_for_over-aligned_data.md
@@ -40,8 +40,8 @@ void* operator new(std::size_t size, std::align_val_t alignment);
 ## 関連項目
 - [`&amp;lt;new&amp;gt;`](/reference/new.md)
 - [`std::align`](/reference/memory/align.md)
-- [C++11 alignas](/lang/cpp11/alignas.md)
-- [C++11 alignof](/lang/cpp11/alignof.md)
+- [C++11 `alignas`](/lang/cpp11/alignas.md)
+- [C++11 `alignof`](/lang/cpp11/alignof.md)
 
 ## 参照
 - [P0035R4 Dynamic memory allocation for over-aligned data](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0035r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Shunsuke Shimizu</name>
        <email>grafi@grafi.jp</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2020-11-29T14:34:50.264631</updated>
  <id>94e64cbf-96e3-4e33-b489-6d7baf0bfba2</id>

  
    <entry>
      <title>ADLを無効にする関数定義 -- 表示調整</title>
      <link href="https://cpprefjp.github.io/article/lib/disable_adl_function.html"/>
      <id>94ec174b10291ac9d1c13c48806b27122f61bc13:article/lib/disable_adl_function.md</id>
      <updated>2020-11-27T15:47:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/article/lib/disable_adl_function.md b/article/lib/disable_adl_function.md
index 51e67c732..72f57bb7f 100644
--- a/article/lib/disable_adl_function.md
+++ b/article/lib/disable_adl_function.md
@@ -15,7 +15,7 @@ void foo() {
 }
 ```
 
-#1の箇所で呼ばれる関数は`std::distance`ではなく`std::ranges::distance`となる。オーバーロードの半順序においてはより特殊化されている関数テンプレートが選択されると言うルールがあり、`std::distance`の方が`std::ranges::distance`よりも特殊化されている（イテレータ型と番兵型が1つのテンプレートパラメータで指定されている）が、それとは関係なく常に`std::ranges::distance`が選択される。
+`#1`の箇所で呼ばれる関数は`std::distance`ではなく`std::ranges::distance`となる。オーバーロードの半順序においてはより特殊化されている関数テンプレートが選択されると言うルールがあり、`std::distance`の方が`std::ranges::distance`よりも特殊化されている（イテレータ型と番兵型が1つのテンプレートパラメータで指定されている）が、それとは関係なく常に`std::ranges::distance`が選択される。
 
 これは、`std::ranges`以下にあるこのような規定を持つ関数が通常の（修飾・非修飾名に対する）名前探索で見えているときは必ずそちらが選択されると言う事であり、その際はADLが行われない（無効化される）事を規定している。
 
@@ -31,4 +31,4 @@ void foo() {
 ## 参照
 
 - [What is a niebloid? - stackoverflow](https://stackoverflow.com/questions/62928396/what-is-a-niebloid)
-- [謎の用語niebloid - にゃははー](http://flast.hateblo.jp/entry/2019/03/19/090722)
\ No newline at end of file
+- [謎の用語niebloid - にゃははー](http://flast.hateblo.jp/entry/2019/03/19/090722)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>article -- ADLを無効化する関数について追加 #818</title>
      <link href="https://cpprefjp.github.io/article.html"/>
      <id>b7057b64179dae63474e61a140c7f1d0983955d2:article.md</id>
      <updated>2020-11-27T15:41:59+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;article&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;コア言語&lt;/h2&gt;
&lt;p&gt;現在、このカテゴリに関する記事はない。&lt;/p&gt;
&lt;h2&gt;ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/article/lib/how_to_use_cv.html&#34;&gt;条件変数の利用方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/article/lib/dont_use_noexcept.html&#34;&gt;標準ライブラリにおける、関数にnoexceptを付けない条件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/article/lib/at_thread_exit.html&#34;&gt;&lt;code&gt;_at_thread_exit&lt;/code&gt;系の関数が存在している理由&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/article/lib/disable_adl_function.html&#34;&gt;ADLを無効にする関数定義&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;プラットフォーム&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/article/platform/locales.html&#34;&gt;使用できるロケール文字列&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;方針&lt;/h2&gt;
&lt;p&gt;article階層にある記事は、以下の方針のもとに執筆しています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;個別のリファレンスページでは解説しにくい俯瞰的な記事を提供する&lt;ul&gt;
&lt;li&gt;基本的にはリファレンスページで完結する解説を書くことが望ましいが、複数機能を組み合わせる解説、複数の選択肢があるなかでの設計選択など、個別のリファレンスページで解説することがむずかしいことを、ここで解説する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;時事的な記事は書かない&lt;ul&gt;
&lt;li&gt;C++の新バージョンで新たな機能が追加されたからその解説を書く、ということはせず、その機能が追加されたバージョン以降でずっと役立つ解説を提供する&lt;/li&gt;
&lt;li&gt;キャッチーな機能がC++に追加されてどこか目立つところで解説したいという動機が起きるかもしれないが、短命でおわってしまう機能もなかにはある。長く必要になるであろう内容をある程度吟味し、ブログでなく静的サイトで記事を書く、ということを念頭に置いて内容を考えてほしい&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;プラットフォームカテゴリには、標準外のツールについて記載してもかまわない (Visual C++、GDB、Emscriptenなど)&lt;ul&gt;
&lt;li&gt;コンパイラのインストール方法といった環境構築の方法を解説する記事は歓迎したい。ただし特定のバージョンに限定された時事的なものになると更新がむずかしくなってしまう。これは相談しながら方針を決めたい&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;リファレンスページと二重管理になる記事はなるべく書かない&lt;ul&gt;
&lt;li&gt;たとえば本サイトは正引きリファレンスを提供しているが、逆引きリファレンスをこの階層で提供することは二重管理になる。二重管理になると、ひとつの機能を解説するページを書くために多くの箇所を修正しなければならず、執筆やメンテナンスがむずかしくなってしまう。少なくとも執筆リソースが余るような状況でないうちは、二重管理はできる限り避ける方針とする&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;「こういう記事を書きたいけど、cpprefjpに必要かわからない」という場合は、GitHubリポジトリのIssueで相談してほしい&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ADLを無効にする関数定義 -- ADLを無効化する関数について追加 #818</title>
      <link href="https://cpprefjp.github.io/article/lib/disable_adl_function.html"/>
      <id>b7057b64179dae63474e61a140c7f1d0983955d2:article/lib/disable_adl_function.md</id>
      <updated>2020-11-27T15:41:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/article/lib/disable_adl_function.md b/article/lib/disable_adl_function.md
new file mode 100644
index 000000000..51e67c732
--- /dev/null
+++ b/article/lib/disable_adl_function.md
@@ -0,0 +1,34 @@
+# ADLを無効にする関数定義
+
+C++20から、[`&amp;lt;iterator&amp;gt;`](/reference/iterator.md)や[`&amp;lt;algorithm&amp;gt;`](/reference/algorithm.md)にある一部の関数テンプレートに対して、よりジェネリックに定義し直されたものが`std::ranges`名前空間に同じ名前で追加されている。
+
+規格書においてはこれらの関数テンプレートはADLで発見されない事を規定している。  
+そのうちの一つである[`std::ranges::distance`](/reference/iterator/ranges_distance.md)を例として上げると、次のような場合にADLを無効化して呼び出される。
+
+```cpp
+void foo() {
+  // std::ranges名前空間を取り込む
+  using namespace std::ranges;
+
+  std::vector&amp;lt;int&amp;gt; vec{1,2,3};
+  distance(begin(vec), end(vec)); // #1
+}
+```
+
+#1の箇所で呼ばれる関数は`std::distance`ではなく`std::ranges::distance`となる。オーバーロードの半順序においてはより特殊化されている関数テンプレートが選択されると言うルールがあり、`std::distance`の方が`std::ranges::distance`よりも特殊化されている（イテレータ型と番兵型が1つのテンプレートパラメータで指定されている）が、それとは関係なく常に`std::ranges::distance`が選択される。
+
+これは、`std::ranges`以下にあるこのような規定を持つ関数が通常の（修飾・非修飾名に対する）名前探索で見えているときは必ずそちらが選択されると言う事であり、その際はADLが行われない（無効化される）事を規定している。
+
+`std::ranges`名前空間に追加される関数テンプレート群は、同名の`std`名前空間直下にある既存のものに対してC++20の`&amp;lt;ranges&amp;gt;`が規定するイテレータ/rangeコンセプトに適合するように再設計されたものであり、このような規定はC++20以降古い関数が意図せず使用されないようにするための処置であると考えられる。
+
+この性質は通常の関数では実現できず、これらの関数テンプレートは実のところ関数テンプレートではない。おそらく関数オブジェクトとして実装されるものと思われる。
+
+
+## 呼称について
+
+このように規定された関数テンプレートを指す公式の名称や広く合意された呼称はないが、これらの発明者であり提案者であるEric Niebler氏の名前から*niebloid*と呼ばれる事がある。
+
+## 参照
+
+- [What is a niebloid? - stackoverflow](https://stackoverflow.com/questions/62928396/what-is-a-niebloid)
+- [謎の用語niebloid - にゃははー](http://flast.hateblo.jp/entry/2019/03/19/090722)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>advance -- ADLを無効化する関数について追加 #818</title>
      <link href="https://cpprefjp.github.io/reference/iterator/ranges_advance.html"/>
      <id>b7057b64179dae63474e61a140c7f1d0983955d2:reference/iterator/ranges_advance.md</id>
      <updated>2020-11-27T15:41:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/ranges_advance.md b/reference/iterator/ranges_advance.md
index a9c83a180..0c05e2ad9 100644
--- a/reference/iterator/ranges_advance.md
+++ b/reference/iterator/ranges_advance.md
@@ -65,6 +65,10 @@ namespace std::ranges {
 - (3) : 指定した距離`n`と実際に進めた距離との差（進めなかった距離）を返す
     - `i`の処理終了時と開始時の位置の差を`M`として、`n - M`を返す
 
+## 備考
+
+この関数テンプレートは通常の名前探索で発見されている場合にADLを無効化する。詳しくは「[ADLを無効にする関数定義](/article/lib/disable_adl_function.md)」を参照のこと。
+
 ## 例
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>distance -- ADLを無効化する関数について追加 #818</title>
      <link href="https://cpprefjp.github.io/reference/iterator/ranges_distance.html"/>
      <id>b7057b64179dae63474e61a140c7f1d0983955d2:reference/iterator/ranges_distance.md</id>
      <updated>2020-11-27T15:41:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/ranges_distance.md b/reference/iterator/ranges_distance.md
index c60406dab..d6c99cfce 100644
--- a/reference/iterator/ranges_distance.md
+++ b/reference/iterator/ranges_distance.md
@@ -49,6 +49,10 @@ namespace std::ranges {
 - (1) : `first`から`last`までの距離
 - (2) : `r`の範囲の長さ（先頭から終端までの距離）
 
+## 備考
+
+この関数テンプレートは通常の名前探索で発見されている場合にADLを無効化する。詳しくは「[ADLを無効にする関数定義](/article/lib/disable_adl_function.md)」を参照のこと。
+
 ## 例
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>next -- ADLを無効化する関数について追加 #818</title>
      <link href="https://cpprefjp.github.io/reference/iterator/ranges_next.html"/>
      <id>b7057b64179dae63474e61a140c7f1d0983955d2:reference/iterator/ranges_next.md</id>
      <updated>2020-11-27T15:41:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/ranges_next.md b/reference/iterator/ranges_next.md
index 8cfcfbdb5..a99a74670 100644
--- a/reference/iterator/ranges_next.md
+++ b/reference/iterator/ranges_next.md
@@ -71,6 +71,10 @@ namespace std::ranges {
 - (3) : `x`を`bound`まで進めたイテレータのコピーを返す
 - (4) : `x`を`bound`以内で`n`進めたイテレータのコピーを返す
 
+## 備考
+
+この関数テンプレートは通常の名前探索で発見されている場合にADLを無効化する。詳しくは「[ADLを無効にする関数定義](/article/lib/disable_adl_function.md)」を参照のこと。
+
 ## 例
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>prev -- ADLを無効化する関数について追加 #818</title>
      <link href="https://cpprefjp.github.io/reference/iterator/ranges_prev.html"/>
      <id>b7057b64179dae63474e61a140c7f1d0983955d2:reference/iterator/ranges_prev.md</id>
      <updated>2020-11-27T15:41:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/ranges_prev.md b/reference/iterator/ranges_prev.md
index 2d4d4dc96..296a2da2b 100644
--- a/reference/iterator/ranges_prev.md
+++ b/reference/iterator/ranges_prev.md
@@ -59,6 +59,10 @@ namespace std::ranges {
 - (2) : `x`を`n`戻したイテレータのコピーを返す
 - (3) : `x`を`bound`以内で`n`戻したイテレータのコピーを返す
 
+## 備考
+
+この関数テンプレートは通常の名前探索で発見されている場合にADLを無効化する。詳しくは「[ADLを無効にする関数定義](/article/lib/disable_adl_function.md)」を参照のこと。
+
 ## 例
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cmp_less -- cmp_less : 不足していた式を追加</title>
      <link href="https://cpprefjp.github.io/reference/utility/cmp_less.html"/>
      <id>babb427dfdaac73f3ac8b19c5c9683f13cf4d23d:reference/utility/cmp_less.md</id>
      <updated>2020-11-26T15:40:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/utility/cmp_less.md b/reference/utility/cmp_less.md
index d8188d72d..84ab1bb24 100644
--- a/reference/utility/cmp_less.md
+++ b/reference/utility/cmp_less.md
@@ -32,6 +32,7 @@ for (int i = 0; i &amp;lt; v.size(); ++i) {}
 以下と等価：
 
 ```cpp
+using UT = make_unsigned_t&amp;lt;T&amp;gt;;
 using UU = make_unsigned_t&amp;lt;U&amp;gt;;
 if constexpr (is_signed_v&amp;lt;T&amp;gt; == is_signed_v&amp;lt;U&amp;gt;)
   return t &amp;lt; u;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>iter_swap -- common_iterator::iter_swap 表示調整</title>
      <link href="https://cpprefjp.github.io/reference/iterator/common_iterator/iter_swap.html"/>
      <id>b06b613b985c11fd864de3c5a5e9f4a519bbc299:reference/iterator/common_iterator/iter_swap.md</id>
      <updated>2020-11-26T11:19:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/common_iterator/iter_swap.md b/reference/iterator/common_iterator/iter_swap.md
index 03a278d80..cdcfd15fc 100644
--- a/reference/iterator/common_iterator/iter_swap.md
+++ b/reference/iterator/common_iterator/iter_swap.md
@@ -11,8 +11,8 @@ namespace std {
   class common_iterator {
 
     template&amp;lt;indirectly_swappable&amp;lt;I&amp;gt; I2, class S2&amp;gt;
-  friend void iter_swap(const common_iterator&amp;amp; x, const common_iterator&amp;lt;I2, S2&amp;gt;&amp;amp; y)
-    noexcept(noexcept(ranges::iter_swap(declval&amp;lt;const I&amp;amp;&amp;gt;(), declval&amp;lt;const I2&amp;amp;&amp;gt;())));
+    friend void iter_swap(const common_iterator&amp;amp; x, const common_iterator&amp;lt;I2, S2&amp;gt;&amp;amp; y)
+      noexcept(noexcept(ranges::iter_swap(declval&amp;lt;const I&amp;amp;&amp;gt;(), declval&amp;lt;const I2&amp;amp;&amp;gt;())));
   };
 }
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>common_iterator -- common_iterator : iter_move/swap追加 #712</title>
      <link href="https://cpprefjp.github.io/reference/iterator/common_iterator.html"/>
      <id>de5c16cd4a715476075f48a28eec9085131083b4:reference/iterator/common_iterator.md</id>
      <updated>2020-11-26T11:13:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/common_iterator.md b/reference/iterator/common_iterator.md
index ee5b89309..140b32bd3 100644
--- a/reference/iterator/common_iterator.md
+++ b/reference/iterator/common_iterator.md
@@ -66,8 +66,8 @@ namespace std {
 | [`operator==`](common_iterator/op_equal.md)         | 等値比較 | C++20 |
 | `operator!=`     | 非等値比較 (`==`により使用可能) | C++20 |
 | [`operator-`](common_iterator/op_minus.md)          | 2つの`common_iterator`の差を求める | C++20 |
-| [`iter_move`](common_iterator/iter_move.md.nolink)     | イテレータの要素の移動 | C++20 |
-| [`iter_swap`](common_iterator/iter_swap.md.nolink)     | イテレータの要素の交換 | C++20 |
+| [`iter_move`](common_iterator/iter_move.md)     | イテレータの要素の移動 | C++20 |
+| [`iter_swap`](common_iterator/iter_swap.md)     | イテレータの要素の交換 | C++20 |
 
 ## `iterator_traits`の型
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>iter_move -- common_iterator : iter_move/swap追加 #712</title>
      <link href="https://cpprefjp.github.io/reference/iterator/common_iterator/iter_move.html"/>
      <id>de5c16cd4a715476075f48a28eec9085131083b4:reference/iterator/common_iterator/iter_move.md</id>
      <updated>2020-11-26T11:13:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/common_iterator/iter_move.md b/reference/iterator/common_iterator/iter_move.md
new file mode 100644
index 000000000..e69b9b462
--- /dev/null
+++ b/reference/iterator/common_iterator/iter_move.md
@@ -0,0 +1,96 @@
+# iter_move
+* iterator[meta header]
+* std[meta namespace]
+* common_iterator[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;input_or_output_iterator I, sentinel_for&amp;lt;I&amp;gt; S&amp;gt;
+  class common_iterator {
+
+    friend iter_rvalue_reference_t&amp;lt;I&amp;gt; iter_move(const common_iterator&amp;amp; i)
+      noexcept(noexcept(ranges::iter_move(declval&amp;lt;const I&amp;amp;&amp;gt;())))
+        requires input_iterator&amp;lt;I&amp;gt;;
+  };
+}
+```
+* input_or_output_iterator[link /reference/iterator/input_or_output_iterator.md]
+* sentinel_for[link /reference/iterator/sentinel_for.md]
+* iter_rvalue_reference_t[link /reference/iterator/iter_rvalue_reference_t.md]
+* ranges::iter_move[link /reference/iterator/iter_move.md.nolink]
+* input_iterator[link /reference/iterator/input_iterator.md]
+
+## 概要
+
+`common_iterator`の指す要素をムーブする。
+
+## 事前条件
+
+[`holds_alternative`](/reference/variant/holds_alternative.md)`&amp;lt;I&amp;gt;(i.v_) == true`であること。
+
+## 効果
+
+以下と等価
+
+```cpp
+return ranges::iter_move(get&amp;lt;I&amp;gt;(i.v_));
+```
+* ranges::iter_move[link /reference/iterator/iter_move.md.nolink]
+
+## 備考
+
+この関数は`move_iterator`のクラス定義内で`friend`関数として定義される。そのため、メンバ関数としても非メンバ関数としても明示的に呼び出すことはできず、ADLによってのみ呼び出すことができる。  
+基本的には[`ranges::iter_move`](/reference/iterator/iter_move.md.nolink)カスタマイゼーションポイントオブジェクトを通して利用する。
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5, 6, 7, 8, 9};
+
+  // common_iteratorを通すことでイテレータ型と番兵型を合わせる
+  using CI = std::common_iterator&amp;lt;std::counted_iterator&amp;lt;std::vector&amp;lt;int&amp;gt;::iterator&amp;gt;, std::default_sentinel_t&amp;gt;;
+
+  CI ci{std::counted_iterator{std::ranges::begin(vec), 5}};
+
+  // ADLによる呼び出し
+  int n1 = iter_move(ci);
+  std::cout &amp;lt;&amp;lt; n1 &amp;lt;&amp;lt; std::endl;
+  
+  ++ci;
+
+  // ranges::iter_move CPOによる呼び出し
+  int n2 = std::ranges::iter_move(ci);
+  std::cout &amp;lt;&amp;lt; n2 &amp;lt;&amp;lt; std::endl;
+}
+```
+* iter_move[color ff0000]
+* ranges::iter_move[link /reference/iterator/iter_move.md.nolink]
+
+### 出力
+```
+1
+2
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 9
+
+## 関連項目
+
+- [`ranges::iter_move`](/reference/iterator/iter_move.md.nolink)
+
+## 参照
+- [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>iter_swap -- common_iterator : iter_move/swap追加 #712</title>
      <link href="https://cpprefjp.github.io/reference/iterator/common_iterator/iter_swap.html"/>
      <id>de5c16cd4a715476075f48a28eec9085131083b4:reference/iterator/common_iterator/iter_swap.md</id>
      <updated>2020-11-26T11:13:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/common_iterator/iter_swap.md b/reference/iterator/common_iterator/iter_swap.md
new file mode 100644
index 000000000..03a278d80
--- /dev/null
+++ b/reference/iterator/common_iterator/iter_swap.md
@@ -0,0 +1,105 @@
+# iter_swap
+* iterator[meta header]
+* std[meta namespace]
+* common_iterator[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;input_or_output_iterator I, sentinel_for&amp;lt;I&amp;gt; S&amp;gt;
+  class common_iterator {
+
+    template&amp;lt;indirectly_swappable&amp;lt;I&amp;gt; I2, class S2&amp;gt;
+  friend void iter_swap(const common_iterator&amp;amp; x, const common_iterator&amp;lt;I2, S2&amp;gt;&amp;amp; y)
+    noexcept(noexcept(ranges::iter_swap(declval&amp;lt;const I&amp;amp;&amp;gt;(), declval&amp;lt;const I2&amp;amp;&amp;gt;())));
+  };
+}
+```
+* move_iterator[link /reference/iterator/move_iterator.md]
+* indirectly_swappable[link /reference/iterator/indirectly_swappable.md]
+* ranges::iter_move[link /reference/iterator/iter_move.md.nolink]
+
+## 概要
+
+2つの`common_iterator`の指す要素を交換する。
+
+## 事前条件
+
+[`holds_alternative`](/reference/variant/holds_alternative.md)`&amp;lt;I&amp;gt;(x.v_)`、[`holds_alternative`](/reference/variant/holds_alternative.md)`&amp;lt;I2&amp;gt;(y.v_)`はどちらも`true`であること。
+
+## 効果
+
+以下と等価
+
+```cpp
+return ranges::iter_swap(get&amp;lt;I&amp;gt;(x.v_), get&amp;lt;I2&amp;gt;(y.v_));
+```
+* ranges::iter_swap[link /reference/iterator/iter_swap.md.nolink]
+
+## 備考
+
+この関数は`common_iterator`のクラス定義内で`friend`関数として定義される。そのため、メンバ関数としても非メンバ関数としても明示的に呼び出すことはできず、ADLによってのみ呼び出すことができる。 
+基本的には[`ranges::iter_swap`](/reference/iterator/iter_swap.md.nolink)カスタマイゼーションポイントオブジェクトを通して利用する。
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v1 = {1, 2, 3, 4, 5};
+  std::vector&amp;lt;int&amp;gt; v2 = {6, 7, 8, 9, 10};
+
+  // common_iteratorを通すことでイテレータ型と番兵型を合わせる
+  using CI = std::common_iterator&amp;lt;std::counted_iterator&amp;lt;std::vector&amp;lt;int&amp;gt;::iterator&amp;gt;, std::default_sentinel_t&amp;gt;;
+
+  CI ci1{std::counted_iterator{std::ranges::begin(v1), 2}};
+  CI ci2{std::counted_iterator{std::ranges::begin(v2), 2}};
+
+  // ADLによる呼び出し
+  iter_swap(ci1, ci2);
+
+  ++ci1;
+  ++ci2;
+
+  // ranges::iter_swap CPOによる呼び出し
+  std::ranges::iter_swap(ci1, ci2);
+
+  for (int n : v1) {
+    std::cout &amp;lt;&amp;lt; n &amp;lt;&amp;lt; &amp;#39; &amp;#39;;
+  }
+
+  std::cout &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+
+  for (int n : v2) {
+    std::cout &amp;lt;&amp;lt; n &amp;lt;&amp;lt; &amp;#39; &amp;#39;;
+  }
+}
+```
+* iter_swap[color ff0000]
+* ranges::iter_swap[link /reference/iterator/iter_swap.md.nolink]
+
+### 出力
+```
+6 7 3 4 5 
+1 2 8 9 10
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 9
+
+## 関連項目
+
+- [`ranges::iter_swap`](/reference/iterator/iter_swap.md.nolink)
+
+## 参照
+- [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- common_iterator : iter_move/swap追加 #712</title>
      <link href="https://cpprefjp.github.io/reference/iterator/common_iterator/op_equal.html"/>
      <id>de5c16cd4a715476075f48a28eec9085131083b4:reference/iterator/common_iterator/op_equal.md</id>
      <updated>2020-11-26T11:13:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/common_iterator/op_equal.md b/reference/iterator/common_iterator/op_equal.md
index 3b44f3c51..786862293 100644
--- a/reference/iterator/common_iterator/op_equal.md
+++ b/reference/iterator/common_iterator/op_equal.md
@@ -29,7 +29,7 @@ namespace std {
 
 ## 事前条件
 
-`x.v_.`[`valueless_by_exception`](/reference/variant/variant/valueless_by_exception)`()`、`y.v_.`[`valueless_by_exception`](/reference/variant/variant/valueless_by_exception)`()`はどちらも`false`であること。
+`x.v_.`[`valueless_by_exception`](/reference/variant/variant/valueless_by_exception.md)`()`、`y.v_.`[`valueless_by_exception`](/reference/variant/variant/valueless_by_exception.md)`()`はどちらも`false`であること。
 
 ## 戻り値
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator- -- common_iterator : iter_move/swap追加 #712</title>
      <link href="https://cpprefjp.github.io/reference/iterator/common_iterator/op_minus.html"/>
      <id>de5c16cd4a715476075f48a28eec9085131083b4:reference/iterator/common_iterator/op_minus.md</id>
      <updated>2020-11-26T11:13:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/common_iterator/op_minus.md b/reference/iterator/common_iterator/op_minus.md
index b7c5179d6..ac6ad56ad 100644
--- a/reference/iterator/common_iterator/op_minus.md
+++ b/reference/iterator/common_iterator/op_minus.md
@@ -17,6 +17,7 @@ namespace std {
 }
 ```
 * input_or_output_iterator[link /reference/iterator/input_or_output_iterator.md]
+* sentinel_for[link /reference/iterator/sentinel_for.md]
 * sized_sentinel_for[link /reference/iterator/sized_sentinel_for.md]
 * iter_difference_t[link /reference/iterator/iter_difference_t.md]
 
@@ -26,7 +27,7 @@ namespace std {
 
 ## 事前条件
 
-`x.v_.`[`valueless_by_exception`](/reference/variant/variant/valueless_by_exception)`()`、`y.v_.`[`valueless_by_exception`](/reference/variant/variant/valueless_by_exception)`()`はどちらも`false`であること。
+`x.v_.`[`valueless_by_exception`](/reference/variant/variant/valueless_by_exception.md)`()`、`y.v_.`[`valueless_by_exception`](/reference/variant/variant/valueless_by_exception.md)`()`はどちらも`false`であること。
 
 ## 戻り値
 
@@ -69,8 +70,8 @@ int main() {
 ```
 1
 -1
--9
-9
+-4
+4
 ```
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-05-01T15:59:24.785091</updated>
  <id>e7af2e2f-1621-454d-9f5f-5cc8945b8c4a</id>

  
    <entry>
      <title>ポインタから`bool`への変換を縮小変換とする [P1957R2] -- GLOBAL_QUALIFY_LIST: std::variant追加</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/converting_from_pointer_to_bool_should_be_considered_narrowing.html"/>
      <id>0e7abe950b0cff66280b05cf6fa06b1bdb1c968d:lang/cpp20/converting_from_pointer_to_bool_should_be_considered_narrowing.md</id>
      <updated>2025-05-02T00:54:53+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/converting_from_pointer_to_bool_should_be_considered_narrowing.md b/lang/cpp20/converting_from_pointer_to_bool_should_be_considered_narrowing.md
index 486be44f1..0a40c7441 100644
--- a/lang/cpp20/converting_from_pointer_to_bool_should_be_considered_narrowing.md
+++ b/lang/cpp20/converting_from_pointer_to_bool_should_be_considered_narrowing.md
@@ -34,8 +34,6 @@ C++17で導入された`std::variant`には当初、`const char*`から`bool`へ
 ```cpp
 std::variant&amp;lt;std::string, bool&amp;gt; x = &amp;#34;abc&amp;#34;;  // boolを保持して構築されてしまう
 ```
-* variant[link /reference/variant/variant.md]
-* string[link /reference/string/basic_string.md]
 
 この他にも構築・代入時に縮小変換が行われてしまう事から同様の問題があり、それはC++20において[P0608R3](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0608r3.html)によって解決された。そこでは、構築・代入時の縮小変換を禁止するとともに、`bool`に変換可能な型を`bool`に変換することを禁止することで問題に対処していた。
 
@@ -46,7 +44,6 @@ std::bitset&amp;lt;4&amp;gt; b(&amp;#34;0101&amp;#34;);
 std::variant&amp;lt;bool, int&amp;gt; v = b[1]; // intを保持して構築されてしまう
 ```
 * bitset[link /reference/bitset/bitset.md]
-* variant[link /reference/variant/variant.md]
 
 `std::bitset`の非`const`な[`operator[]`](/reference/bitset/bitset/op_at.md)は`bool`型へ暗黙変換可能なプロキシオブジェクトを返す。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>in_place_index_t -- GLOBAL_QUALIFY_LIST: std::variant追加</title>
      <link href="https://cpprefjp.github.io/reference/utility/in_place_index_t.html"/>
      <id>0e7abe950b0cff66280b05cf6fa06b1bdb1c968d:reference/utility/in_place_index_t.md</id>
      <updated>2025-05-02T00:54:53+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/utility/in_place_index_t.md b/reference/utility/in_place_index_t.md
index 450d23a68..24c61fae2 100644
--- a/reference/utility/in_place_index_t.md
+++ b/reference/utility/in_place_index_t.md
@@ -42,7 +42,6 @@ int main()
 }
 ```
 * std::in_place_index[color ff0000]
-* std::variant[link /reference/variant/variant.md]
 * std::visit[link /reference/variant/visit.md]
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>run -- GLOBAL_QUALIFY_LIST: std::jthread追加</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/run_loop/run.html"/>
      <id>b7bf5a18276675dc1b6a14e6c7dc2db3ad0c7a12:reference/execution/execution/run_loop/run.md</id>
      <updated>2025-05-02T00:51:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/run_loop/run.md b/reference/execution/execution/run_loop/run.md
index 3c7970871..85f406acf 100644
--- a/reference/execution/execution/run_loop/run.md
+++ b/reference/execution/execution/run_loop/run.md
@@ -90,7 +90,6 @@ int main()
 * run()[color ff0000]
 * ex::run_loop[link ../run_loop.md]
 * finish()[link finish.md]
-* std::jthread[link /reference/thread/jthread.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>schedule -- GLOBAL_QUALIFY_LIST: std::jthread追加</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/schedule.html"/>
      <id>b7bf5a18276675dc1b6a14e6c7dc2db3ad0c7a12:reference/execution/execution/schedule.md</id>
      <updated>2025-05-02T00:51:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/schedule.md b/reference/execution/execution/schedule.md
index f112291e5..778b9aa8a 100644
--- a/reference/execution/execution/schedule.md
+++ b/reference/execution/execution/schedule.md
@@ -69,7 +69,6 @@ int main()
 * run()[link run_loop/run.md]
 * finish()[link run_loop/finish.md]
 * std::move[link /reference/utility/move.md]
-* std::jthread[link /reference/thread/jthread.md]
 * std::this_thread::get_id()[link /reference/thread/this_thread/get_id.md]
 
 ### 出力例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rcu_obj_base -- GLOBAL_QUALIFY_LIST: std::jthread追加</title>
      <link href="https://cpprefjp.github.io/reference/rcu/rcu_obj_base.html"/>
      <id>b7bf5a18276675dc1b6a14e6c7dc2db3ad0c7a12:reference/rcu/rcu_obj_base.md</id>
      <updated>2025-05-02T00:51:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/rcu/rcu_obj_base.md b/reference/rcu/rcu_obj_base.md
index 3a36d3ebc..cd2d1639d 100644
--- a/reference/rcu/rcu_obj_base.md
+++ b/reference/rcu/rcu_obj_base.md
@@ -87,7 +87,6 @@ int main()
 * std::rcu_default_domain[link rcu_default_domain.md]
 * retire()[link rcu_obj_base/retire.md]
 * std::scoped_lock[link /reference/mutex/scoped_lock.md]
-* std::jthread[link /reference/thread/jthread.md]
 * exchange[link /reference/atomic/atomic/exchange.md]
 * store[link /reference/atomic/atomic/store.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rcu_retire -- GLOBAL_QUALIFY_LIST: std::jthread追加</title>
      <link href="https://cpprefjp.github.io/reference/rcu/rcu_retire.html"/>
      <id>b7bf5a18276675dc1b6a14e6c7dc2db3ad0c7a12:reference/rcu/rcu_retire.md</id>
      <updated>2025-05-02T00:51:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/rcu/rcu_retire.md b/reference/rcu/rcu_retire.md
index d4d63c374..80aa742f6 100644
--- a/reference/rcu/rcu_retire.md
+++ b/reference/rcu/rcu_retire.md
@@ -97,7 +97,6 @@ int main()
 * std::rcu_retire[color ff0000]
 * std::rcu_default_domain[link rcu_default_domain.md]
 * std::scoped_lock[link /reference/mutex/scoped_lock.md]
-* std::jthread[link /reference/thread/jthread.md]
 * exchange[link /reference/atomic/atomic/exchange.md]
 * store[link /reference/atomic/atomic/store.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rcu_synchronize -- GLOBAL_QUALIFY_LIST: std::jthread追加</title>
      <link href="https://cpprefjp.github.io/reference/rcu/rcu_synchronize.html"/>
      <id>b7bf5a18276675dc1b6a14e6c7dc2db3ad0c7a12:reference/rcu/rcu_synchronize.md</id>
      <updated>2025-05-02T00:51:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/rcu/rcu_synchronize.md b/reference/rcu/rcu_synchronize.md
index 713b6ab02..cbb1cf2df 100644
--- a/reference/rcu/rcu_synchronize.md
+++ b/reference/rcu/rcu_synchronize.md
@@ -88,7 +88,6 @@ int main()
 * std::rcu_synchronize[color ff0000]
 * std::rcu_default_domain[link rcu_default_domain.md]
 * std::scoped_lock[link /reference/mutex/scoped_lock.md]
-* std::jthread[link /reference/thread/jthread.md]
 * exchange[link /reference/atomic/atomic/exchange.md]
 * store[link /reference/atomic/atomic/store.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>run_loop -- execution/run_loop: fix typos</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/run_loop.html"/>
      <id>c629ec04a7d3e4027016f738ceb1f777f62bb852:reference/execution/execution/run_loop.md</id>
      <updated>2025-05-02T00:41:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/run_loop.md b/reference/execution/execution/run_loop.md
index e87534f35..8a4c149f2 100644
--- a/reference/execution/execution/run_loop.md
+++ b/reference/execution/execution/run_loop.md
@@ -75,9 +75,9 @@ int main()
   ex::start(op);
   // count=1, state=開始(starting)
 
-  // run_loop状態を終了中(finished)へ変更
+  // run_loop状態を終了中(finishing)へ変更
   loop.finish();
-  // count=1, state=終了中(finished)
+  // count=1, state=終了中(finishing)
 
   // run_loopキュー上の作業を逐次実行
   loop.run();
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sync-wait-receiver -- execution/sync_wait(_with_variant): 微調整 (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/this_thread/sync-wait-receiver.html"/>
      <id>7aa4a3a5a9224b867655b6a458e594698cf8f847:reference/execution/this_thread/sync-wait-receiver.md</id>
      <updated>2025-05-01T23:33:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/this_thread/sync-wait-receiver.md b/reference/execution/this_thread/sync-wait-receiver.md
index f3823750a..28b5d3e38 100644
--- a/reference/execution/this_thread/sync-wait-receiver.md
+++ b/reference/execution/this_thread/sync-wait-receiver.md
@@ -31,6 +31,7 @@ namespace std::this_thread {
 }
 ```
 * execution::receiver_t[link ../execution/receiver.md]
+* sync-wait-env[link sync-wait-env.md]
 * execution::run_loop[link ../execution/run_loop.md]
 * exception_ptr[link /reference/exception/exception_ptr.md]
 * sync-wait-result-type[link sync_wait.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sync_wait -- execution/sync_wait(_with_variant): 微調整 (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/this_thread/sync_wait.html"/>
      <id>7aa4a3a5a9224b867655b6a458e594698cf8f847:reference/execution/this_thread/sync_wait.md</id>
      <updated>2025-05-01T23:33:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/this_thread/sync_wait.md b/reference/execution/this_thread/sync_wait.md
index b54097da9..a6625caf8 100644
--- a/reference/execution/this_thread/sync_wait.md
+++ b/reference/execution/this_thread/sync_wait.md
@@ -15,7 +15,10 @@ namespace std::this_thread {
 ## 概要
 `sync_wait`は、[Sender](../execution/sender.md)が完了するまで現在のスレッドをブロックし、非同期操作の結果を取得するSenderコンシューマである。
 
-`sync_wait`は入力Senderが[値完了シグネチャ](../execution/set_value.md)をただ1種類だけ持つことを要求する。
+`sync_wait`は入力Senderが[値完了シグネチャ](../execution/set_value.md)を1個だけ持つことを要求する。
+値完了シグネチャが複数存在する場合は[`sync_wait_with_variant`](sync_wait_with_variant.md)アルゴリズムを利用する。
+
+入力Senderの値完了シグネチャが[`set_value_t`](../execution/set_value.md)`(Ts...)`のとき、`sync_wait`の結果型は[`optional`](/reference/optional/optional.md)`&amp;lt;`[`tuple`](/reference/tuple/tuple.md)`&amp;lt;Ts...&amp;gt;&amp;gt;`となる。
 
 
 ## 効果
@@ -35,8 +38,8 @@ apply_sender(get-domain-early(sndr), sync_wait, sndr)
 - 上記の`apply_sender`式を`e`としたとき、[`same_as`](/reference/concepts/same_as.md)`&amp;lt;decltype(e), sync-wait-result-type&amp;lt;Sndr&amp;gt;&amp;gt; == true`であること。
 
 
-### 戻り値型
-`sync_wait`の戻り値型となる、説明専用のエイリアステンプレート`sync-wait-result-type`を下記の通り定義する。
+### 結果型
+`sync_wait`の結果型となる、説明専用のエイリアステンプレート`sync-wait-result-type`を下記の通り定義する。
 
 ```cpp
 namespace std::this_thread {
@@ -91,9 +94,9 @@ return std::move(state.result);
 
 - 指定したSenderが完了するまで、前方進行保証委任(forward progress guarantee delegation)による現在のスレッドをブロックすること。
 - 指定したSenderの非同期操作の結果が返る場合
-    - 値完了の場合、結果データは[`optional`](/reference/optional/optional.md)オブジェクト内の[`tuple`](/reference/tuple/tuple.md)で返されること。
-    - エラー完了の場合、例外を送出すること。
-    - 停止完了の場合、空の[`optional`](/reference/optional/optional.md)オブジェクトが返されること。
+    - [値完了](../execution/set_value.md)の場合、結果データは[`optional`](/reference/optional/optional.md)オブジェクト内の[`tuple`](/reference/tuple/tuple.md)で返されること。
+    - [エラー完了](../execution/set_error.md)の場合、例外を送出すること。
+    - [停止完了](../execution/set_stopped.md)の場合、無効値[`optional`](/reference/optional/optional.md)オブジェクトが返されること。
 
 
 ## 例
@@ -108,7 +111,7 @@ int main()
   ex::sender auto sndr = ex::just(100, &amp;#39;X&amp;#39;);
   // メインスレッド上で完了待機
   auto result = std::this_thread::sync_wait(sndr);
-  // 戻り値型optional&amp;lt;tuple&amp;lt;int,char&amp;gt;&amp;gt;から値を取り出す
+  // 結果型optional&amp;lt;tuple&amp;lt;int,char&amp;gt;&amp;gt;から値を取り出す
   auto [n, c] = result.value();
   std::println(&amp;#34;result=({}, {})&amp;#34;, n, c);
 }
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sync_wait_with_variant -- execution/sync_wait(_with_variant): 微調整 (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/this_thread/sync_wait_with_variant.html"/>
      <id>7aa4a3a5a9224b867655b6a458e594698cf8f847:reference/execution/this_thread/sync_wait_with_variant.md</id>
      <updated>2025-05-01T23:33:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/this_thread/sync_wait_with_variant.md b/reference/execution/this_thread/sync_wait_with_variant.md
index 8dc96b1d2..a6e227308 100644
--- a/reference/execution/this_thread/sync_wait_with_variant.md
+++ b/reference/execution/this_thread/sync_wait_with_variant.md
@@ -16,6 +16,10 @@ namespace std::this_thread {
 `sync_wait_with_variant`は、[Sender](../execution/sender.md)が完了するまで現在のスレッドをブロックし、非同期操作の結果を取得するSenderコンシューマである。
 
 `sync_wait_with_variant`は入力Senderが複数の[値完了シグネチャ](../execution/set_value.md)を持つケースに対応する。
+値完了シグネチャが1個だけの場合は[`sync_wait`](sync_wait.md)アルゴリズムを利用する。
+
+
+入力Senderの値完了シグネチャが[`set_value_t`](../execution/set_value.md)`(Ts0...)`, ..., [`set_value_t`](../execution/set_value.md)`(TsN...)`のとき、`sync_wait_with_variant`の結果型は[`optional`](/reference/optional/optional.md)`&amp;lt;`[`variant`](/reference/variant/variant.md)`&amp;lt;`[`tuple`](/reference/tuple/tuple.md)`&amp;lt;Ts0...&amp;gt;, ...,` [`tuple`](/reference/tuple/tuple.md)`&amp;lt;TsN...&amp;gt;&amp;gt;`となる。
 
 
 ## 効果
@@ -35,8 +39,8 @@ apply_sender(get-domain-early(sndr), sync_wait_with_variant, sndr)
 - 上記の`apply_sender`式を`e`としたとき、[`same_as`](/reference/concepts/same_as.md)`&amp;lt;decltype(e), sync-wait-with-variant-result-type&amp;lt;Sndr&amp;gt;&amp;gt; == true`であること。
 
 
-### 戻り値型
-`sync_wait_with_variant`の戻り値型となる、説明専用のエイリアステンプレート`sync-wait-with-variant-result-type`を下記の通り定義する。
+### 結果型
+`sync_wait_with_variant`の結果型となる、説明専用のエイリアステンプレート`sync-wait-with-variant-result-type`を下記の通り定義する。
 
 ```cpp
 namespace std::this_thread {
@@ -81,9 +85,9 @@ return result_type(nullopt);
 
 - 指定したSenderが完了するまで、前方進行保証委任(forward progress guarantee delegation)による現在のスレッドをブロックすること。
 - 指定したSenderの非同期操作の結果が返る場合
-    - 値完了の場合、結果データは[`optional`](/reference/optional/optional.md)オブジェクト内の[`tuple`](/reference/tuple/tuple.md)の[`variant`](/reference/variant/variant.md)で返されること。
-    - エラー完了の場合、例外を送出すること。
-    - 停止完了の場合、空の[`optional`](/reference/optional/optional.md)オブジェクトが返されること。
+    - [値完了](../execution/set_value.md)の場合、結果データは[`optional`](/reference/optional/optional.md)オブジェクト内の[`tuple`](/reference/tuple/tuple.md)の[`variant`](/reference/variant/variant.md)で返されること。
+    - [エラー完了](../execution/set_error.md)の場合、例外を送出すること。
+    - [停止完了](../execution/set_stopped.md)の場合、無効値[`optional`](/reference/optional/optional.md)オブジェクトが返されること。
 
 
 ## 例
@@ -98,7 +102,7 @@ int main()
   ex::sender auto sndr = ex::just(100, &amp;#39;X&amp;#39;);
   // メインスレッド上で完了待機
   auto result = std::this_thread::sync_wait_with_variant(sndr);
-  // 戻り値型optional&amp;lt;variant&amp;lt;tuple&amp;lt;int,char&amp;gt;&amp;gt;&amp;gt;からtupleを取り出す
+  // 結果型optional&amp;lt;variant&amp;lt;tuple&amp;lt;int,char&amp;gt;&amp;gt;&amp;gt;からtupleを取り出す
   auto tup = get&amp;lt;0&amp;gt;(result.value());
   std::println(&amp;#34;result={}&amp;#34;, tup);
 }
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>execution -- execution: sync_wait(_with_variant) (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution.html"/>
      <id>2a210a5f43b9423bd5ed8e8e7f415953d99fd29d:reference/execution/execution.md</id>
      <updated>2025-05-01T16:59:53+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution.md b/reference/execution/execution.md
index 5501c1ee1..18549d320 100644
--- a/reference/execution/execution.md
+++ b/reference/execution/execution.md
@@ -133,8 +133,8 @@ namespace std::execution {
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`this_thread::sync_wait`](this_thread/sync_wait.md.nolink) | 現在のスレッド上でSender完了を待機 (customization point object) | C++26 |
-| [`this_thread::sync_wait_with_variant`](this_thread/sync_wait_with_variant.md.nolink) | 現在のスレッド上でSender完了を待機 (customization point object) | C++26 |
+| [`this_thread::sync_wait`](this_thread/sync_wait.md) | 現在のスレッド上でSender完了を待機 (customization point object) | C++26 |
+| [`this_thread::sync_wait_with_variant`](this_thread/sync_wait_with_variant.md) | 現在のスレッド上でSender完了を待機 (customization point object) | C++26 |
 
 Senderコンシューマは名前空間 `std::this_thread` で定義される。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>completion-domain -- execution: sync_wait(_with_variant) (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/completion-domain.html"/>
      <id>2a210a5f43b9423bd5ed8e8e7f415953d99fd29d:reference/execution/execution/completion-domain.md</id>
      <updated>2025-05-01T16:59:53+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/completion-domain.md b/reference/execution/execution/completion-domain.md
index 3d4aade36..2d83422ca 100644
--- a/reference/execution/execution/completion-domain.md
+++ b/reference/execution/execution/completion-domain.md
@@ -32,7 +32,7 @@ constexpr auto completion-domain(const Sndr&amp;amp; sndr) noexcept;
 
 
 ## 関連項目
-- [`get-domain-early`](get-domain-early.md.nolink)
+- [`get-domain-early`](get-domain-early.md)
 - [`get-domain-late`](get-domain-late.md)
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>get-domain-early -- execution: sync_wait(_with_variant) (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/get-domain-early.html"/>
      <id>2a210a5f43b9423bd5ed8e8e7f415953d99fd29d:reference/execution/execution/get-domain-early.md</id>
      <updated>2025-05-01T16:59:53+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/get-domain-early.md b/reference/execution/execution/get-domain-early.md
new file mode 100644
index 000000000..cb2841199
--- /dev/null
+++ b/reference/execution/execution/get-domain-early.md
@@ -0,0 +1,46 @@
+# get-domain-early
+* execution[meta header]
+* function template[meta id-type]
+* std::execution[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+template&amp;lt;class Sndr&amp;gt;
+constexpr auto get-domain-early(const Sndr&amp;amp; sndr) noexcept;
+```
+
+## 概要
+[Sender](sender.md)アルゴリズム構築時のカスタマイゼーションポイントとして、[実行ドメイン](default_domain.md)を取得する説明専用の関数テンプレート。
+
+下記の優先順で実行ドメインを検索し、最初に妥当となる型を採用する。
+
+- Senderの[属性](../queryable.md)の実行ドメイン
+- Senderの[完了Scheduler](get_completion_scheduler.md)の実行ドメイン
+- [デフォルト実行ドメイン](default_domain.md)
+
+
+## 効果
+説明用の型`Domain`を下記リストのうち最初に妥当となる式の型と定義したとき、`return Doamin();`と等価。
+
+- [`get_domain`](get_domain.md)`(`[`get_env`](get_env.md)`(sndr))`
+- [`completion-domain`](completion-domain.md)`(sndr)`
+- [`default_domain()`](default_domain.md)
+
+
+## 例外
+投げない
+
+
+## バージョン
+### 言語
+- C++26
+
+
+## 関連項目
+- [`this_thread::sync_wait`](../this_thread/sync_wait.md)
+- [`this_thread::sync_wait_with_variant`](../this_thread/sync_wait_with_variant.md)
+
+
+## 参照
+- [P2999R3 Sender Algorithm Customization](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2999r3.html)
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>get-domain-late -- execution: sync_wait(_with_variant) (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/get-domain-late.html"/>
      <id>2a210a5f43b9423bd5ed8e8e7f415953d99fd29d:reference/execution/execution/get-domain-late.md</id>
      <updated>2025-05-01T16:59:53+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/get-domain-late.md b/reference/execution/execution/get-domain-late.md
index 19daa05a9..359031a6b 100644
--- a/reference/execution/execution/get-domain-late.md
+++ b/reference/execution/execution/get-domain-late.md
@@ -15,11 +15,11 @@ constexpr auto get-domain-late(const Sndr&amp;amp; sndr, const Env&amp;amp; env) noexcept;
 下記の優先順で実行ドメインを検索し、最初に妥当となる型を採用する。
 （Senderアルゴリズム[`continue_on`](continue_on.md.nolink)のみ引数に指定した[Scheduler](scheduler.md)から取得。）
 
-- Senderの[属性](../queryable.md)
-- Senderの[完了Scheduler](get_completion_scheduler.md)
-- Receiverの[環境](../queryable.md)
-- Receiver環境の[Scheduler](scheduler.md)
-- [`default_domain`](default_domain.md)
+- Senderの[属性](../queryable.md)の実行ドメイン
+- Senderの[完了Scheduler](get_completion_scheduler.md)の実行ドメイン
+- Receiverの[環境](../queryable.md)の実行ドメイン
+- Receiver環境の[Scheduler](scheduler.md)の実行ドメイン
+- [デフォルト実行ドメイン](default_domain.md)
 
 
 ## 効果
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>this_thread -- execution: sync_wait(_with_variant) (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/this_thread.html"/>
      <id>2a210a5f43b9423bd5ed8e8e7f415953d99fd29d:reference/execution/this_thread.md</id>
      <updated>2025-05-01T16:59:53+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/this_thread.md b/reference/execution/this_thread.md
new file mode 100644
index 000000000..dfa4cee96
--- /dev/null
+++ b/reference/execution/this_thread.md
@@ -0,0 +1,23 @@
+# this_thread
+* execution[meta header]
+* std[meta namespace]
+* namespace[meta id-type]
+* cpp26[meta cpp]
+
+ヘッダ [`&amp;lt;execution&amp;gt;`](../execution.md) の名前空間 `std::this_thread` では、実行制御ライブラリの一部エンティティを定義する。
+
+```cpp
+namespace std::this_thread {
+  …
+}
+```
+
+実行制御ライブラリ全体は名前空間 [`std::execution`](../execution/execution.md) ページを参照のこと。
+
+
+## バージョン
+### 言語
+- C++26
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sync-wait-env -- execution: sync_wait(_with_variant) (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/this_thread/sync-wait-env.html"/>
      <id>2a210a5f43b9423bd5ed8e8e7f415953d99fd29d:reference/execution/this_thread/sync-wait-env.md</id>
      <updated>2025-05-01T16:59:53+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/this_thread/sync-wait-env.md b/reference/execution/this_thread/sync-wait-env.md
new file mode 100644
index 000000000..2d6ff1277
--- /dev/null
+++ b/reference/execution/this_thread/sync-wait-env.md
@@ -0,0 +1,45 @@
+# sync-wait-env
+* execution[meta header]
+* class template[meta id-type]
+* std::this_thread[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::this_thread {
+  struct sync-wait-env {
+    execution::run_loop* loop;  // exposition only
+
+    auto query(execution::get_scheduler_t) const noexcept {
+      return loop-&amp;gt;get_scheduler();
+    }
+
+    auto query(execution::get_delegation_scheduler_t) const noexcept {
+      return loop-&amp;gt;get_scheduler();
+    }
+  };
+}
+```
+* execution::run_loop[link ../execution/run_loop.md]
+* execution::get_scheduler_t[link ../execution/get_scheduler.md]
+* execution::get_delegation_scheduler_t[link ../execution/get_delegation_scheduler.md]
+* get_scheduler()[link ../execution/run_loop/get_scheduler.md]
+
+## 概要
+`sync-wait-env`は、実行制御ライブラリの仕様定義で用いられる説明専用のクラステンプレートである。
+
+Senderコンシューマ[`sync_wait`](sync_wait.md)、[`sync_wait_with_variant`](sync_wait_with_variant.md)動作において[Receiver](../execution/receiver.md)の[環境](../queryable.md)として利用される。
+
+
+## バージョン
+### 言語
+- C++26
+
+
+## 関連項目
+- [`this_thread::sync_wait`](sync_wait.md)
+- [`this_thread::sync_wait_with_variant`](sync_wait_with_variant.md)
+- [`execution::run_loop`](../execution/run_loop.md)
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sync-wait-receiver -- execution: sync_wait(_with_variant) (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/this_thread/sync-wait-receiver.html"/>
      <id>2a210a5f43b9423bd5ed8e8e7f415953d99fd29d:reference/execution/this_thread/sync-wait-receiver.md</id>
      <updated>2025-05-01T16:59:53+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/this_thread/sync-wait-receiver.md b/reference/execution/this_thread/sync-wait-receiver.md
new file mode 100644
index 000000000..f3823750a
--- /dev/null
+++ b/reference/execution/this_thread/sync-wait-receiver.md
@@ -0,0 +1,105 @@
+# sync-wait-receiver
+* execution[meta header]
+* class template[meta id-type]
+* std::this_thread[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::this_thread {
+  template&amp;lt;class Sndr&amp;gt;
+  struct sync-wait-receiver {      // exposition only
+    using receiver_concept = execution::receiver_t;
+    sync-wait-state&amp;lt;Sndr&amp;gt;* state;  // exposition only
+
+    template&amp;lt;class... Args&amp;gt;
+    void set_value(Args&amp;amp;&amp;amp;... args) &amp;amp;&amp;amp; noexcept;
+
+    template&amp;lt;class Error&amp;gt;
+    void set_error(Error&amp;amp;&amp;amp; err) &amp;amp;&amp;amp; noexcept;
+
+    void set_stopped() &amp;amp;&amp;amp; noexcept;
+
+    sync-wait-env get_env() const noexcept { return {&amp;amp;state-&amp;gt;loop}; }
+  };
+
+  template&amp;lt;class Sndr&amp;gt;
+  struct sync-wait-state {               // exposition only
+    execution::run_loop loop;            // exposition only
+    exception_ptr error;                 // exposition only
+    sync-wait-result-type&amp;lt;Sndr&amp;gt; result;  // exposition only
+  };
+}
+```
+* execution::receiver_t[link ../execution/receiver.md]
+* execution::run_loop[link ../execution/run_loop.md]
+* exception_ptr[link /reference/exception/exception_ptr.md]
+* sync-wait-result-type[link sync_wait.md]
+
+## 概要
+`sync-wait-receiver`および`sync-wait-state`は、実行制御ライブラリの仕様定義で用いられる説明専用のクラステンプレートである。
+
+Senderコンシューマ[`sync_wait`](sync_wait.md)動作において[Sender](../execution/sender.md)と[接続(connect)](../execution/connect.md)する[Receiver](../execution/receiver.md)、同Receiverの内部状態として利用される。
+
+
+### メンバ関数 `set_value`
+```cpp
+template&amp;lt;class... Args&amp;gt;
+void set_value(Args&amp;amp;&amp;amp;... args) &amp;amp;&amp;amp; noexcept;
+```
+
+効果 : 下記と等価
+
+```cpp
+try {
+  state-&amp;gt;result.emplace(std::forward&amp;lt;Args&amp;gt;(args)...);
+} catch (...) {
+  state-&amp;gt;error = current_exception();
+}
+state-&amp;gt;loop.finish();
+```
+* emplace[link /reference/optional/optional/emplace.md]
+* current_exception()[link /reference/exception/current_exception.md]
+* finish()[link ../execution/run_loop/finish.md]
+
+
+### メンバ関数 `set_error`
+```cpp
+template&amp;lt;class Error&amp;gt;
+void set_error(Error&amp;amp;&amp;amp; err) &amp;amp;&amp;amp; noexcept
+```
+
+説明用の式`err`に対して`decltype((err))`を型`Err`としたとき、式`AS-EXCEPT-PTR(err)`を下記の通り定義する。
+
+- [`decay_t`](/reference/type_traits/decay.md)`&amp;lt;Err&amp;gt;`が[`exception_ptr`](/reference/exception/exception_ptr.md)型と等しければ、`err`となる。このとき、事前条件として`!err == false`を満たすこと。
+- そうではなく、[`decay_t`](/reference/type_traits/decay.md)`&amp;lt;Err&amp;gt;`が[`error_code`](/reference/system_error/error_code.md)型と等しければ、[`make_exception_ptr`](/reference/exception/make_exception_ptr.md)`(`[`system_error`](/reference/system_error/system_error.md)`(err))`となる。
+- そうでなければ、[`make_exception_ptr`](/reference/exception/make_exception_ptr.md)`(err)`となる。
+
+効果 : 下記と等価
+
+```cpp
+state-&amp;gt;error = AS-EXCEPT-PTR(std::forward&amp;lt;Error&amp;gt;(err));
+state-&amp;gt;loop.finish();
+```
+* finish()[link ../execution/run_loop/finish.md]
+
+
+### メンバ関数 `set_stopped`
+```cpp
+void set_stopped() &amp;amp;&amp;amp; noexcept;
+```
+
+効果 : `state-&amp;gt;loop.`[`finish()`](../execution/run_loop/finish.md)と等価。
+
+
+## バージョン
+### 言語
+- C++26
+
+
+## 関連項目
+- [`this_thread::sync_wait`](sync_wait.md)
+- [`execution::run_loop`](../execution/run_loop.md)
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sync_wait -- execution: sync_wait(_with_variant) (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/this_thread/sync_wait.html"/>
      <id>2a210a5f43b9423bd5ed8e8e7f415953d99fd29d:reference/execution/this_thread/sync_wait.md</id>
      <updated>2025-05-01T16:59:53+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/this_thread/sync_wait.md b/reference/execution/this_thread/sync_wait.md
new file mode 100644
index 000000000..b54097da9
--- /dev/null
+++ b/reference/execution/this_thread/sync_wait.md
@@ -0,0 +1,144 @@
+# sync_wait
+* execution[meta header]
+* cpo[meta id-type]
+* std::this_thread[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::this_thread {
+  struct sync_wait_t { unspecified };
+  inline constexpr sync_wait_t sync_wait{};
+}
+```
+* unspecified[italic]
+
+## 概要
+`sync_wait`は、[Sender](../execution/sender.md)が完了するまで現在のスレッドをブロックし、非同期操作の結果を取得するSenderコンシューマである。
+
+`sync_wait`は入力Senderが[値完了シグネチャ](../execution/set_value.md)をただ1種類だけ持つことを要求する。
+
+
+## 効果
+説明用の`sndr`を`decltype((sndr))`が`Sndr`型となる式とする。
+
+[`sender_in`](../execution/sender_in.md)`&amp;lt;Sndr,` [`sync-wait-env`](sync-wait-env.md)`&amp;gt; == false`のとき、呼び出し式`this_thread::sync_wait(sndr)`は不適格となる。
+
+そうでなければ、呼び出し式`this_thread::sync_wait(sndr)`は`sndr`が1回だけ評価されることを除いて、下記と等価。
+
+```cpp
+apply_sender(get-domain-early(sndr), sync_wait, sndr)
+```
+* apply_sender[link ../execution/apply_sender.md]
+* get-domain-early[link ../execution/get-domain-early.md]
+
+- 型`sync-wait-result-type&amp;lt;Sndr&amp;gt;`が適格であること。
+- 上記の`apply_sender`式を`e`としたとき、[`same_as`](/reference/concepts/same_as.md)`&amp;lt;decltype(e), sync-wait-result-type&amp;lt;Sndr&amp;gt;&amp;gt; == true`であること。
+
+
+### 戻り値型
+`sync_wait`の戻り値型となる、説明専用のエイリアステンプレート`sync-wait-result-type`を下記の通り定義する。
+
+```cpp
+namespace std::this_thread {
+  template&amp;lt;execution::sender_in&amp;lt;sync-wait-env&amp;gt; Sndr&amp;gt;
+  using sync-wait-result-type =
+    optional&amp;lt;execution::value_types_of_t&amp;lt;Sndr, sync-wait-env,
+             decayed-tuple, type_identity_t&amp;gt;&amp;gt;;
+}
+```
+* execution::sender_in[link ../execution/sender_in.md]
+* sync-wait-env[link sync-wait-env.md]
+* execution::value_types_of_t[link ../execution/value_types_of_t.md]
+* optional[link /reference/optional/optional.md]
+* decayed-tuple[link decayed-tuple.md.nolink]
+* type_identity_t[link /reference/type_traits/type_identity.md]
+
+
+### Senderタグ `sync_wait`
+説明用の`sndr`を`decltype((sndr))`が`Sndr`型となる式とする。
+
+[`sender_to`](../execution/sender_to.md)`&amp;lt;Sndr,` [`sync-wait-receiver`](sync-wait-receiver.md)`&amp;lt;Sndr&amp;gt;&amp;gt; == false`のとき、式`sync_wait.apply_sender(sndr)`は不適格となる。
+
+そうでなければ、式`sync_wait.apply_sender(sndr)`は下記と等価。
+
+```cpp
+sync-wait-state&amp;lt;Sndr&amp;gt; state;
+auto op = connect(sndr, sync-wait-receiver&amp;lt;Sndr&amp;gt;{&amp;amp;state});
+start(op);
+
+state.loop.run();
+if (state.error) {
+  rethrow_exception(std::move(state.error));
+}
+return std::move(state.result);
+```
+* sync-wait-state[link sync-wait-receiver.md]
+* connect[link ../execution/connect.md]
+* sync-wait-receiver[link sync-wait-receiver.md]
+* start[link ../execution/start.md]
+* loop.run()[link ../execution/run_loop/run.md]
+* rethrow_exception[link /reference/exception/rethrow_exception.md]
+* std::move[link /reference/utility/move.md]
+
+
+## カスタマイゼーションポイント
+[Sender](../execution/sender.md)`sndr`に[関連付けられた実行ドメイン](../execution/get-domain-early.md)`dom`に対して、
+[`execution::apply_sender`](../execution/apply_sender.md)経由で`dom.apply_sender(sync_wait, sndr)`が呼ばれる。
+
+[デフォルト実行ドメイン](../execution/default_domain.md)では、`sync_wait.apply_sender(sndr)`が呼ばれる。
+
+下記を満たさない場合、呼び出し式`this_thread::sync_wait(sndr)`の動作は未定義となる。
+
+- 指定したSenderが完了するまで、前方進行保証委任(forward progress guarantee delegation)による現在のスレッドをブロックすること。
+- 指定したSenderの非同期操作の結果が返る場合
+    - 値完了の場合、結果データは[`optional`](/reference/optional/optional.md)オブジェクト内の[`tuple`](/reference/tuple/tuple.md)で返されること。
+    - エラー完了の場合、例外を送出すること。
+    - 停止完了の場合、空の[`optional`](/reference/optional/optional.md)オブジェクトが返されること。
+
+
+## 例
+```cpp
+#include &amp;lt;print&amp;gt;
+#include &amp;lt;execution&amp;gt;
+namespace ex = std::execution;
+
+int main()
+{
+  // 値(100, &amp;#39;X&amp;#39;)を送信するSender
+  ex::sender auto sndr = ex::just(100, &amp;#39;X&amp;#39;);
+  // メインスレッド上で完了待機
+  auto result = std::this_thread::sync_wait(sndr);
+  // 戻り値型optional&amp;lt;tuple&amp;lt;int,char&amp;gt;&amp;gt;から値を取り出す
+  auto [n, c] = result.value();
+  std::println(&amp;#34;result=({}, {})&amp;#34;, n, c);
+}
+```
+* std::this_thread::sync_wait[color ff0000]
+* ex::sender[link ../execution/sender.md]
+* ex::just[link ../execution/just.md.nolink]
+* value()[link /reference/optional/optional/value.md]
+
+### 出力
+```
+result=(100, X)
+```
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution::sender`](../execution/sender.md)
+- [`this_thread::sync_wait_with_variant`](sync_wait_with_variant.md)
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sync_wait_with_variant -- execution: sync_wait(_with_variant) (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/this_thread/sync_wait_with_variant.html"/>
      <id>2a210a5f43b9423bd5ed8e8e7f415953d99fd29d:reference/execution/this_thread/sync_wait_with_variant.md</id>
      <updated>2025-05-01T16:59:53+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/this_thread/sync_wait_with_variant.md b/reference/execution/this_thread/sync_wait_with_variant.md
new file mode 100644
index 000000000..8dc96b1d2
--- /dev/null
+++ b/reference/execution/this_thread/sync_wait_with_variant.md
@@ -0,0 +1,135 @@
+# sync_wait_with_variant
+* execution[meta header]
+* cpo[meta id-type]
+* std::this_thread[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::this_thread {
+  struct sync_wait_with_variant_t { unspecified };
+  inline constexpr sync_wait_with_variant_t sync_wait_with_variant{};
+}
+```
+* unspecified[italic]
+
+## 概要
+`sync_wait_with_variant`は、[Sender](../execution/sender.md)が完了するまで現在のスレッドをブロックし、非同期操作の結果を取得するSenderコンシューマである。
+
+`sync_wait_with_variant`は入力Senderが複数の[値完了シグネチャ](../execution/set_value.md)を持つケースに対応する。
+
+
+## 効果
+説明用の`sndr`を`decltype(`[`into_variant`](into_variant.md.nolink)`(sndr))`が`Sndr`型となる式とする。
+
+[`sender_in`](../execution/sender_in.md)`&amp;lt;Sndr,` [`sync-wait-env`](sync-wait-env.md)`&amp;gt; == false`のとき、呼び出し式`this_thread::sync_wait_with_variant(sndr)`は不適格となる。
+
+そうでなければ、呼び出し式`this_thread::sync_wait_with_variant(sndr)`は`sndr`が1回だけ評価されることを除いて、下記と等価。
+
+```cpp
+apply_sender(get-domain-early(sndr), sync_wait_with_variant, sndr)
+```
+* apply_sender[link ../execution/apply_sender.md]
+* get-domain-early[link ../execution/get-domain-early.md]
+
+- 型`sync-wait-with-variant-result-type&amp;lt;Sndr&amp;gt;`が適格であること。
+- 上記の`apply_sender`式を`e`としたとき、[`same_as`](/reference/concepts/same_as.md)`&amp;lt;decltype(e), sync-wait-with-variant-result-type&amp;lt;Sndr&amp;gt;&amp;gt; == true`であること。
+
+
+### 戻り値型
+`sync_wait_with_variant`の戻り値型となる、説明専用のエイリアステンプレート`sync-wait-with-variant-result-type`を下記の通り定義する。
+
+```cpp
+namespace std::this_thread {
+  template&amp;lt;execution::sender_in&amp;lt;sync-wait-env&amp;gt; Sndr&amp;gt;
+  using sync-wait-with-variant-result-type =
+    optional&amp;lt;execution::value_types_of_t&amp;lt;Sndr, sync-wait-env&amp;gt;&amp;gt;;
+```
+* execution::sender_in[link ../execution/sender_in.md]
+* sync-wait-env[link sync-wait-env.md]
+* execution::value_types_of_t[link ../execution/value_types_of_t.md]
+* optional[link /reference/optional/optional.md]
+
+
+### Senderタグ `sync_wait_with_variant`
+説明用の`sndr`を`decltype(`[`into_variant`](into_variant.md.nolink)`(sndr))`が`Sndr`型となる式とする。
+
+`callable&amp;lt;`[`sync_wait_t`](sync_wait.md)`, Sndr&amp;gt; == false`のとき、式`sync_wait_with_variant.apply_sender(sndr)`は不適格となる。
+
+そうでなければ、式`sync_wait_with_variant.apply_sender(sndr)`は下記と等価。
+
+```cpp
+using result_type = sync-wait-with-variant-result-type&amp;lt;Sndr&amp;gt;;
+if (auto opt_value = sync_wait(into_variant(sndr))) {
+  return result_type(std::move(get&amp;lt;0&amp;gt;(*opt_value)));
+}
+return result_type(nullopt);
+```
+* sync_wait[link sync_wait.md]
+* into_variant[link into_variant.md.nolink]
+* std::move[link /reference/utility/move.md]
+* get&amp;lt;0&amp;gt;[link /reference/tuple/tuple/get.md]
+* nullopt[link /reference/optional/nullopt_t.md]
+
+
+## カスタマイゼーションポイント
+[Sender](../execution/sender.md)`sndr`に[関連付けられた実行ドメイン](../execution/get-domain-early.md)`dom`に対して、
+[`execution::apply_sender`](../execution/apply_sender.md)経由で`dom.apply_sender(sync_wait_with_variant, sndr)`が呼ばれる。
+
+[デフォルト実行ドメイン](../execution/default_domain.md)では、`sync_wait_with_variant.apply_sender(sndr)`が呼ばれる。
+
+下記を満たさない場合、呼び出し式`this_thread::sync_wait_with_variant(sndr)`の動作は未定義となる。
+
+- 指定したSenderが完了するまで、前方進行保証委任(forward progress guarantee delegation)による現在のスレッドをブロックすること。
+- 指定したSenderの非同期操作の結果が返る場合
+    - 値完了の場合、結果データは[`optional`](/reference/optional/optional.md)オブジェクト内の[`tuple`](/reference/tuple/tuple.md)の[`variant`](/reference/variant/variant.md)で返されること。
+    - エラー完了の場合、例外を送出すること。
+    - 停止完了の場合、空の[`optional`](/reference/optional/optional.md)オブジェクトが返されること。
+
+
+## 例
+```cpp
+#include &amp;lt;print&amp;gt;
+#include &amp;lt;execution&amp;gt;
+namespace ex = std::execution;
+
+int main()
+{
+  // 値(100, &amp;#39;X&amp;#39;)を送信するSender
+  ex::sender auto sndr = ex::just(100, &amp;#39;X&amp;#39;);
+  // メインスレッド上で完了待機
+  auto result = std::this_thread::sync_wait_with_variant(sndr);
+  // 戻り値型optional&amp;lt;variant&amp;lt;tuple&amp;lt;int,char&amp;gt;&amp;gt;&amp;gt;からtupleを取り出す
+  auto tup = get&amp;lt;0&amp;gt;(result.value());
+  std::println(&amp;#34;result={}&amp;#34;, tup);
+}
+```
+* std::this_thread::sync_wait_with_variant[color ff0000]
+* ex::sender[link ../execution/sender.md]
+* ex::just[link ../execution/just.md.nolink]
+* get&amp;lt;0&amp;gt;[link /reference/variant/variant/get.md]
+* value()[link /reference/optional/optional/value.md]
+
+### 出力
+```
+result=(100, &amp;#39;X&amp;#39;)
+```
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution::sender`](../execution/sender.md)
+- [`this_thread::sync_wait`](sync_wait.md)
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
</feed>
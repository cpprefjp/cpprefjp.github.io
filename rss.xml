<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2020-06-15T06:46:29.097872</updated>
  <id>cf7636f1-ea7a-4fa0-a94d-f488b2e67dc5</id>

  
    <entry>
      <title>counting_semaphore -- counting_semaphore: try_acquire_{for,until}, 他調整 (#683)</title>
      <link href="https://cpprefjp.github.io/reference/semaphore/counting_semaphore.html"/>
      <id>71929318d7ce941bcbf3f9201a70e6b96299717d:reference/semaphore/counting_semaphore.md</id>
      <updated>2020-06-15T15:42:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/semaphore/counting_semaphore.md b/reference/semaphore/counting_semaphore.md
index 3ac141934..a8002fc85 100644
--- a/reference/semaphore/counting_semaphore.md
+++ b/reference/semaphore/counting_semaphore.md
@@ -43,8 +43,8 @@ namespace std {
 | [`release`](counting_semaphore/release.md) | カウンタ値を加算し、待機中スレッドをブロック解除する | C++20 |
 | [`acquire`](counting_semaphore/acquire.md) | カウンタ値が`0`より大きくなるまで待機し、カウンタ値を1つ減算する | C++20 |
 | [`try_acquire`](counting_semaphore/try_acquire.md) | カウンタ値の1減算を試みる | C++20 |
-| [`try_acquire_for`](counting_semaphore/try_acquire_for.md.nolink) | 相対時間のタイムアウトを指定して、カウンタ値の1減算を試みる | C++20 |
-| [`try_acquire_until`](counting_semaphore/try_acquire_until.md.nolink) | 絶対時間のタイムアウトを指定して、カウンタ値の1減算を試みる | C++20 |
+| [`try_acquire_for`](counting_semaphore/try_acquire_for.md) | 相対時間のタイムアウトを指定して、カウンタ値の1減算を試みる | C++20 |
+| [`try_acquire_until`](counting_semaphore/try_acquire_until.md) | 絶対時間のタイムアウトを指定して、カウンタ値の1減算を試みる | C++20 |
 
 ## 静的メンバ関数
 
@@ -107,6 +107,8 @@ int main()
 }
 ```
 * std::counting_semaphore[color ff0000]
+* release()[link counting_semaphore/release.md]
+* acquire()[link counting_semaphore/acquire.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>acquire -- counting_semaphore: try_acquire_{for,until}, 他調整 (#683)</title>
      <link href="https://cpprefjp.github.io/reference/semaphore/counting_semaphore/acquire.html"/>
      <id>71929318d7ce941bcbf3f9201a70e6b96299717d:reference/semaphore/counting_semaphore/acquire.md</id>
      <updated>2020-06-15T15:42:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/semaphore/counting_semaphore/acquire.md b/reference/semaphore/counting_semaphore/acquire.md
index 8210e70c3..b29a40b35 100644
--- a/reference/semaphore/counting_semaphore/acquire.md
+++ b/reference/semaphore/counting_semaphore/acquire.md
@@ -10,7 +10,7 @@ void acquire();
 ```
 
 ## 概要
-カウンティングセマフォのカウンタ値が`0`より大きくなるまで待機し、カウンタ値を`1`つ減算してから制御を戻す。
+カウンティングセマフォのカウンタ値が`0`より大きくなるまで待機し、カウンタ値を`1`だけ減算してから制御を戻す。
 
 説明のため、ここではカウンタ値を`counter`と表記する。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>release -- counting_semaphore: try_acquire_{for,until}, 他調整 (#683)</title>
      <link href="https://cpprefjp.github.io/reference/semaphore/counting_semaphore/release.html"/>
      <id>71929318d7ce941bcbf3f9201a70e6b96299717d:reference/semaphore/counting_semaphore/release.md</id>
      <updated>2020-06-15T15:42:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/semaphore/counting_semaphore/release.md b/reference/semaphore/counting_semaphore/release.md
index 764e2b955..2008c6bfb 100644
--- a/reference/semaphore/counting_semaphore/release.md
+++ b/reference/semaphore/counting_semaphore/release.md
@@ -10,7 +10,7 @@ void release(ptrdiff_t update = 1);
 ```
 
 ## 概要
-カウンティングセマフォのカウンタ値に加算し、待機中スレッドのブロック解除を行う。
+カウンティングセマフォのカウンタ値に`update`を加算し、待機中スレッドのブロック解除を行う。
 
 説明のため、ここではカウンタ値を`counter`と表記する。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>try_acquire -- counting_semaphore: try_acquire_{for,until}, 他調整 (#683)</title>
      <link href="https://cpprefjp.github.io/reference/semaphore/counting_semaphore/try_acquire.html"/>
      <id>71929318d7ce941bcbf3f9201a70e6b96299717d:reference/semaphore/counting_semaphore/try_acquire.md</id>
      <updated>2020-06-15T15:42:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/semaphore/counting_semaphore/try_acquire.md b/reference/semaphore/counting_semaphore/try_acquire.md
index cc2b46bc8..eccbd53c2 100644
--- a/reference/semaphore/counting_semaphore/try_acquire.md
+++ b/reference/semaphore/counting_semaphore/try_acquire.md
@@ -10,7 +10,7 @@ bool try_acquire() noexcept;
 ```
 
 ## 概要
-カウンティングセマフォのカウンタ値が`0`の場合は何もせず`fales`を返し、そうでなければカウンタ値を`1`つ減算して`true`を返す。
+カウンティングセマフォのカウンタ値が`0`の場合は何もせず`false`を返し、そうでなければカウンタ値を1つ減算して`true`を返す。
 
 説明のため、ここではカウンタ値を`counter`と表記する。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>try_acquire_for -- counting_semaphore: try_acquire_{for,until}, 他調整 (#683)</title>
      <link href="https://cpprefjp.github.io/reference/semaphore/counting_semaphore/try_acquire_for.html"/>
      <id>71929318d7ce941bcbf3f9201a70e6b96299717d:reference/semaphore/counting_semaphore/try_acquire_for.md</id>
      <updated>2020-06-15T15:42:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/semaphore/counting_semaphore/try_acquire_for.md b/reference/semaphore/counting_semaphore/try_acquire_for.md
new file mode 100644
index 000000000..098eb900c
--- /dev/null
+++ b/reference/semaphore/counting_semaphore/try_acquire_for.md
@@ -0,0 +1,85 @@
+# try_acquire_for
+* semaphore[meta header]
+* std[meta namespace]
+* counting_semaphore[meta class]
+* function template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+template&amp;lt;class Rep, class Period&amp;gt;
+  bool try_acquire_for(const chrono::duration&amp;lt;Rep, Period&amp;gt;&amp;amp; rel_time);
+```
+
+## 概要
+カウンティングセマフォのカウンタ値が`0`より大きくなるまで待機し、カウンタ値を1つ減算してから`true`を返す。
+相対時間で指定されるタイムアウトが発生した場合は`false`を返す。
+
+説明のため、ここではカウンタ値を`counter`と表記する。
+
+
+## 効果
+次のステップを繰り返す：
+
+- [`try_acquire`](try_acquire.md)を評価し、その結果が`true`ならば`true`を返す。
+- `counter`が`0`より大きくなる、または指定された相対時間が経過するまで、`*this`上で関数呼び出しスレッドをブロッキングする。タイムアウトが発生した場合は`false`を返す。
+
+
+## 戻り値
+カウンタ値を減算できた場合は`true`を返す。タイムアウトが発生した場合は`false`を返す。
+
+
+## 例外
+この関数はタイムアウト関連の例外オブジェクト、もしくは以下のerror conditionを持つ[`system_error`](/reference/system_error/system_error.md)例外オブジェクトを送出する可能性がある：
+
+- [`resource_unavailable_try_again`](/reference/system_error/errc.md) : 操作対象のネイティブハンドル型が無効
+- [`operation_not_permitted`](/reference/system_error/errc.md) : スレッドにこの操作を行う権限がない
+- [`invalid_argument`](/reference/system_error/errc.md) : 実引数が無効
+
+
+## 例
+```cpp example
+#include &amp;lt;chrono&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;semaphore&amp;gt;
+#include &amp;lt;thread&amp;gt;
+
+int main()
+{
+  int shared_data = 0;
+  std::counting_semaphore sem{0};
+
+  std::thread t([&amp;amp;]{
+    // 通知を待機し、共有データから読取り
+    constexpr auto duration = std::chrono::seconds{5};
+    if (sem.try_acquire_for(duration)) {
+      std::cout &amp;lt;&amp;lt; shared_data &amp;lt;&amp;lt; std::endl;
+    } else {
+      std::cout &amp;lt;&amp;lt; &amp;#34;(timed out)&amp;#34; &amp;lt;&amp;lt; std::endl;
+	}
+  });
+
+  // 共有データへ書込み、通知を行う
+  shared_data = 42;
+  sem.release();
+
+  t.join();
+}
+```
+* try_acquire_for[color ff0000]
+* release()[link release.md]
+
+### 出力例
+```
+42
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 11.0
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>try_acquire_until -- counting_semaphore: try_acquire_{for,until}, 他調整 (#683)</title>
      <link href="https://cpprefjp.github.io/reference/semaphore/counting_semaphore/try_acquire_until.html"/>
      <id>71929318d7ce941bcbf3f9201a70e6b96299717d:reference/semaphore/counting_semaphore/try_acquire_until.md</id>
      <updated>2020-06-15T15:42:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/semaphore/counting_semaphore/try_acquire_until.md b/reference/semaphore/counting_semaphore/try_acquire_until.md
new file mode 100644
index 000000000..5094b65c8
--- /dev/null
+++ b/reference/semaphore/counting_semaphore/try_acquire_until.md
@@ -0,0 +1,87 @@
+# try_acquire_until
+* semaphore[meta header]
+* std[meta namespace]
+* counting_semaphore[meta class]
+* function template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+template&amp;lt;class Clock, class Duration&amp;gt;
+  bool try_acquire_until(const chrono::time_point&amp;lt;Clock, Duration&amp;gt;&amp;amp; abs_time);
+```
+
+## 概要
+カウンティングセマフォのカウンタ値が`0`より大きくなるまで待機し、カウンタ値を1つ減算してから`true`を返す。
+絶対時間で指定されるタイムアウトが発生した場合は`false`を返す。
+
+説明のため、ここではカウンタ値を`counter`と表記する。
+
+
+## 効果
+次のステップを繰り返す：
+
+- [`try_acquire`](try_acquire.md)を評価し、その結果が`true`ならば`true`を返す。
+- `counter`が`0`より大きくなる、または指定された絶対時間を過ぎるまで、`*this`上で関数呼び出しスレッドをブロッキングする。タイムアウトが発生した場合は`false`を返す。
+
+
+## 戻り値
+カウンタ値を減算できた場合は`true`を返す。タイムアウトが発生した場合は`false`を返す。
+
+
+## 例外
+この関数はタイムアウト関連の例外オブジェクト、もしくは以下のerror conditionを持つ[`system_error`](/reference/system_error/system_error.md)例外オブジェクトを送出する可能性がある：
+
+- [`resource_unavailable_try_again`](/reference/system_error/errc.md) : 操作対象のネイティブハンドル型が無効
+- [`operation_not_permitted`](/reference/system_error/errc.md) : スレッドにこの操作を行う権限がない
+- [`invalid_argument`](/reference/system_error/errc.md) : 実引数が無効
+
+
+## 例
+```cpp example
+#include &amp;lt;chrono&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;semaphore&amp;gt;
+#include &amp;lt;thread&amp;gt;
+
+using Clock = std::chrono::system_clock;
+
+int main()
+{
+  int shared_data = 0;
+  std::counting_semaphore sem{0};
+
+  std::thread t([&amp;amp;]{
+    // 通知を待機し、共有データから読取り
+    const auto tp = Clock::now() + std::chrono::seconds{5};
+    if (sem.try_acquire_until(tp)) {
+      std::cout &amp;lt;&amp;lt; shared_data &amp;lt;&amp;lt; std::endl;
+    } else {
+      std::cout &amp;lt;&amp;lt; &amp;#34;(timed out)&amp;#34; &amp;lt;&amp;lt; std::endl;
+	}
+  });
+
+  // 共有データへ書込み、通知を行う
+  shared_data = 42;
+  sem.release();
+
+  t.join();
+}
+```
+* try_acquire_until[color ff0000]
+* release()[link release.md]
+
+### 出力例
+```
+42
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 11.0
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>counting_semaphore -- counting_semaphore: 概要説明から誤解を招く注記文を削除</title>
      <link href="https://cpprefjp.github.io/reference/semaphore/counting_semaphore.html"/>
      <id>f515288c05a2f1689c3f3c6ff3985d211b6fca0d:reference/semaphore/counting_semaphore.md</id>
      <updated>2020-06-15T13:51:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/semaphore/counting_semaphore.md b/reference/semaphore/counting_semaphore.md
index c1a3a9721..3ac141934 100644
--- a/reference/semaphore/counting_semaphore.md
+++ b/reference/semaphore/counting_semaphore.md
@@ -25,8 +25,7 @@ namespace std {
 
 カウンティングセマフォの最大値を`1`としたものはバイナリセマフォと呼ばれ、ヘッダ[`&amp;lt;semaphore&amp;gt;`](/reference/semaphore.md)ではエイリアス型`binary_semaphore`として定義される。
 バイナリセマフォはミューテックス（[`mutex`](/reference/mutex/mutex.md)など）と同様に共有リソースの排他制御を実現する同期プリミティブだが、ミューテックスとは異なりスレッドがロックを所有(own)するという概念が存在しない。
-このためバイナリセマフォでは、あるスレッド上でカウンタ値を減少（1→0; `lock`相当）させ、別のスレッド上でカウンタ値を増加（0→1; `unlock`相当）させることも可能となる。
-（注：ここではミューテックスとの違いを説明しており、バイナリセマフォのこのような使い方を推奨するものではない。）
+このためバイナリセマフォでは、あるスレッド上でカウンタ値を減少（1→0; `lock`相当）させ、別のスレッド上でカウンタ値を増加（0→1; `unlock`相当）させてもよい。
 
 
 ## 適格要件
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>counting_semaphore -- counting_semaphore: some cosmetics</title>
      <link href="https://cpprefjp.github.io/reference/semaphore/counting_semaphore.html"/>
      <id>438648a421a38841538ed55b29273f18133536d7:reference/semaphore/counting_semaphore.md</id>
      <updated>2020-06-15T13:49:30+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/semaphore/counting_semaphore.md b/reference/semaphore/counting_semaphore.md
index bf671cc63..c1a3a9721 100644
--- a/reference/semaphore/counting_semaphore.md
+++ b/reference/semaphore/counting_semaphore.md
@@ -16,7 +16,7 @@ namespace std {
 
 カウンティングセマフォ（または単にセマフォ）は他の同期プリミティブを実装するための部品として広く用いられ、セマフォと条件変数のいずれも適用可能なケースでは[`condition_variable`](/reference/condition_variable/condition_variable.md)よりも効率的である。
 
-セマフォは1つのカウンタで状態管理される同期プリミティブとみなせる。カウンタは`0`から[`max()`](counting_semaphore/max.md)までの値をとり、このカウンタ値がセマフォで管理する共有リソースの個数と解釈される。
+セマフォは1つのカウンタで状態管理される同期プリミティブとみなせる。カウンタは`0`以上かつ[`max()`](counting_semaphore/max.md)以下の値をとり、このカウンタ値がセマフォで管理する共有リソースの個数と解釈される。
 
 - カウンタの最大値はテンプレートパラメータ`least_max_value`にて設定する。省略時は処理系がサポートする最大値が設定される。
 - カウンタの初期値は[コンストラクタ](counting_semaphore/op_constructor.md)でセマフォ構築時に指定する。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>acquire -- counting_semaphore: some cosmetics</title>
      <link href="https://cpprefjp.github.io/reference/semaphore/counting_semaphore/acquire.html"/>
      <id>438648a421a38841538ed55b29273f18133536d7:reference/semaphore/counting_semaphore/acquire.md</id>
      <updated>2020-06-15T13:49:30+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/semaphore/counting_semaphore/acquire.md b/reference/semaphore/counting_semaphore/acquire.md
index e48d55d23..8210e70c3 100644
--- a/reference/semaphore/counting_semaphore/acquire.md
+++ b/reference/semaphore/counting_semaphore/acquire.md
@@ -16,7 +16,8 @@ void acquire();
 
 
 ## 効果
-次のステップを繰り返す。
+次のステップを繰り返す：
+
 - [`try_acquire`](try_acquire.md)を評価し、結果が`true`ならば関数呼び出し元へ制御を戻す。
 - `counter`が`0`より大きくなるまで、`*this`上で関数呼び出しスレッドをブロッキングする。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>try_acquire -- counting_semaphore: some cosmetics</title>
      <link href="https://cpprefjp.github.io/reference/semaphore/counting_semaphore/try_acquire.html"/>
      <id>438648a421a38841538ed55b29273f18133536d7:reference/semaphore/counting_semaphore/try_acquire.md</id>
      <updated>2020-06-15T13:49:30+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/semaphore/counting_semaphore/try_acquire.md b/reference/semaphore/counting_semaphore/try_acquire.md
index fc00778c0..cc2b46bc8 100644
--- a/reference/semaphore/counting_semaphore/try_acquire.md
+++ b/reference/semaphore/counting_semaphore/try_acquire.md
@@ -21,7 +21,7 @@ bool try_acquire() noexcept;
 
 処理系には、`counter &amp;gt; 0`であっても`counter`の減算に失敗することが許容される。
 ただし、セマフォに対する操作が競合していない状況下において、`try_acquire`が一貫して`false`を返すような実装は許容されない。
-（Spurious Failure が生じることは滅多にないが、これによりアトミック変数を用いた Swap-and-Compare ベースの興味深い実装が許容される。）
+（Spurious Failure が生じることは滅多にないが、これによりアトミック変数を用いる単純な Compare-and-Exchange ベースの興味深い実装が許容される。）
 
 
 ## 戻り値
@@ -47,8 +47,8 @@ int main()
     // 通知を待機し、共有データから読取り
     while (!sem.try_acquire()) {
       std::this_thread::yield();
-      // ここではtry_acquire()動作例示のためビジーループを行うが、
-      // セマフォ待機が目的であればacquire()利用が適切である。
+      // ここでは try_acquire 動作例示のためビジーループを行うが、
+      // セマフォ待機が目的であれば acquire() 利用が適切である。
     }
     std::cout &amp;lt;&amp;lt; shared_data &amp;lt;&amp;lt; std::endl;
   });
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>iter_difference_t -- リンク修正</title>
      <link href="https://cpprefjp.github.io/reference/iterator/iter_difference_t.html"/>
      <id>869920574349134310571edb409bd07b5c421723:reference/iterator/iter_difference_t.md</id>
      <updated>2020-06-15T12:59:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/iter_difference_t.md b/reference/iterator/iter_difference_t.md
index 59d225825..520f1e012 100644
--- a/reference/iterator/iter_difference_t.md
+++ b/reference/iterator/iter_difference_t.md
@@ -20,14 +20,14 @@ namespace std {
 
 `RI = remove_cvref_t&amp;lt;I&amp;gt;`とすると、次のどちらか
 
-- [`incrementable_traits`](iterator/incrementable_traits.md)`&amp;lt;RI&amp;gt;::difference_type`
+- [`incrementable_traits`](incrementable_traits.md)`&amp;lt;RI&amp;gt;::difference_type`
     - [`iterator_traits`](iterator_traits.md)`&amp;lt;RI&amp;gt;`がプライマリテンプレートの特殊化となる場合
 - [`iterator_traits`](iterator_traits.md)`&amp;lt;RI&amp;gt;::difference_type`
     - その他の場合
 
 ## 備考
 
-プログラム定義型（ユーザー定義の任意のイテレータ型）でこの結果をカスタマイズするには、[`incrementable_traits`](iterator/incrementable_traits.md)を特殊化する。
+プログラム定義型（ユーザー定義の任意のイテレータ型）でこの結果をカスタマイズするには、[`incrementable_traits`](incrementable_traits.md)を特殊化する。
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>iter_value_t -- リンク修正</title>
      <link href="https://cpprefjp.github.io/reference/iterator/iter_value_t.html"/>
      <id>869920574349134310571edb409bd07b5c421723:reference/iterator/iter_value_t.md</id>
      <updated>2020-06-15T12:59:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/iter_value_t.md b/reference/iterator/iter_value_t.md
index a55bd50f8..3e077d691 100644
--- a/reference/iterator/iter_value_t.md
+++ b/reference/iterator/iter_value_t.md
@@ -19,14 +19,14 @@ namespace std {
 
 `RI = remove_cvref_t&amp;lt;I&amp;gt;`とすると、次のどちらか
 
-- [`indirectly_readable_traits`](iterator/indirectly_readable_traits.md)`&amp;lt;RI&amp;gt;::value_type`
+- [`indirectly_readable_traits`](indirectly_readable_traits.md)`&amp;lt;RI&amp;gt;::value_type`
     - [`iterator_traits`](iterator_traits.md)`&amp;lt;RI&amp;gt;`がプライマリテンプレートの特殊化となる場合
 - [`iterator_traits`](iterator_traits.md)`&amp;lt;RI&amp;gt;::value_type`
     - その他の場合
 
 ## 備考
 
-プログラム定義型（ユーザー定義の任意のイテレータ型）でこの結果をカスタマイズするには、[`indirectly_readable_traits`](iterator/indirectly_readable_traits.md)を特殊化する。
+プログラム定義型（ユーザー定義の任意のイテレータ型）でこの結果をカスタマイズするには、[`indirectly_readable_traits`](indirectly_readable_traits.md)を特殊化する。
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>counting_semaphore -- Merge branch &#39;master&#39; of https://github.com/cpprefjp/site</title>
      <link href="https://cpprefjp.github.io/reference/semaphore/counting_semaphore.html"/>
      <id>c9fad6ae63786398416745c4bd98591d26feefb1:reference/semaphore/counting_semaphore.md</id>
      <updated>2020-06-15T12:57:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/semaphore/counting_semaphore.md b/reference/semaphore/counting_semaphore.md
index ed495076b..bf671cc63 100644
--- a/reference/semaphore/counting_semaphore.md
+++ b/reference/semaphore/counting_semaphore.md
@@ -16,12 +16,12 @@ namespace std {
 
 カウンティングセマフォ（または単にセマフォ）は他の同期プリミティブを実装するための部品として広く用いられ、セマフォと条件変数のいずれも適用可能なケースでは[`condition_variable`](/reference/condition_variable/condition_variable.md)よりも効率的である。
 
-セマフォは1つのカウンタで状態管理される同期プリミティブとみなせる。カウンタは`0`から最大値[`max()`](counting_semaphore/max.md)までの値をとり、このカウンタ値がセマフォで管理する共有リソースの個数と解釈される。
+セマフォは1つのカウンタで状態管理される同期プリミティブとみなせる。カウンタは`0`から[`max()`](counting_semaphore/max.md)までの値をとり、このカウンタ値がセマフォで管理する共有リソースの個数と解釈される。
 
 - カウンタの最大値はテンプレートパラメータ`least_max_value`にて設定する。省略時は処理系がサポートする最大値が設定される。
 - カウンタの初期値は[コンストラクタ](counting_semaphore/op_constructor.md)でセマフォ構築時に指定する。
-- [`release()`](counting_semaphore/release.md.nolink)メンバ関数呼び出しによりカウンタ値の加算と通知処理、つまり利用可能な共有リソースの増加を表現する。（歴史的にはオランダ語由来の&amp;#34;V操作&amp;#34;と呼ばれる。英語では&amp;#34;up&amp;#34;／&amp;#34;signal&amp;#34;／&amp;#34;post&amp;#34;とも呼ばれる。）
-- [`acquire()`](counting_semaphore/acquire.md.nolink)メンバ関数呼び出しにより待機処理とカウンタ値の減算、つまり利用可能な共有リソースの減少を表現する。（同様に&amp;#34;P操作&amp;#34;や&amp;#34;down&amp;#34;／&amp;#34;wait&amp;#34;／&amp;#34;pend&amp;#34;とも呼ばれる。）
+- [`release()`](counting_semaphore/release.md)メンバ関数呼び出しによりカウンタ値の加算と通知処理、つまり利用可能な共有リソースの増加を表現する。（歴史的にはオランダ語由来の&amp;#34;V操作&amp;#34;と呼ばれる。英語では&amp;#34;up&amp;#34;／&amp;#34;signal&amp;#34;／&amp;#34;post&amp;#34;とも呼ばれる。）
+- [`acquire()`](counting_semaphore/acquire.md)メンバ関数呼び出しにより待機処理とカウンタ値の減算、つまり利用可能な共有リソースの減少を表現する。（同様に&amp;#34;P操作&amp;#34;や&amp;#34;down&amp;#34;／&amp;#34;wait&amp;#34;／&amp;#34;pend&amp;#34;とも呼ばれる。）
 
 カウンティングセマフォの最大値を`1`としたものはバイナリセマフォと呼ばれ、ヘッダ[`&amp;lt;semaphore&amp;gt;`](/reference/semaphore.md)ではエイリアス型`binary_semaphore`として定義される。
 バイナリセマフォはミューテックス（[`mutex`](/reference/mutex/mutex.md)など）と同様に共有リソースの排他制御を実現する同期プリミティブだが、ミューテックスとは異なりスレッドがロックを所有(own)するという概念が存在しない。
@@ -36,14 +36,14 @@ namespace std {
 ## メンバ関数
 ### 構築・破棄
 
-| 名前            | 説明           | 対応バージョン |
-|-----------------|----------------|----------------|
+| 名前             | 説明            | 対応バージョン |
+|-----------------|----------------|------------|
 | [`(constructor)`](counting_semaphore/op_constructor.md) | コンストラクタ | C++20 |
 | `(destructor)` | デストラクタ | C++20 |
 | `operator=(const counting_semaphore&amp;amp;) = delete;` | 代入演算子 | C++20 |
-| [`release`](counting_semaphore/release.md.nolink) | カウンタ値を加算し、待機中スレッドをブロック解除する | C++20 |
-| [`acquire`](counting_semaphore/acquire.md.nolink) | カウンタ値が正数になるまで待機し、カウンタ値を1つ減算する | C++20 |
-| [`try_acquire`](counting_semaphore/try_acquire.md.nolink) | カウンタ値の1減算を試みる | C++20 |
+| [`release`](counting_semaphore/release.md) | カウンタ値を加算し、待機中スレッドをブロック解除する | C++20 |
+| [`acquire`](counting_semaphore/acquire.md) | カウンタ値が`0`より大きくなるまで待機し、カウンタ値を1つ減算する | C++20 |
+| [`try_acquire`](counting_semaphore/try_acquire.md) | カウンタ値の1減算を試みる | C++20 |
 | [`try_acquire_for`](counting_semaphore/try_acquire_for.md.nolink) | 相対時間のタイムアウトを指定して、カウンタ値の1減算を試みる | C++20 |
 | [`try_acquire_until`](counting_semaphore/try_acquire_until.md.nolink) | 絶対時間のタイムアウトを指定して、カウンタ値の1減算を試みる | C++20 |
 
@@ -109,7 +109,6 @@ int main()
 ```
 * std::counting_semaphore[color ff0000]
 
-
 ### 出力
 ```
 100
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>acquire -- Merge branch &#39;master&#39; of https://github.com/cpprefjp/site</title>
      <link href="https://cpprefjp.github.io/reference/semaphore/counting_semaphore/acquire.html"/>
      <id>c9fad6ae63786398416745c4bd98591d26feefb1:reference/semaphore/counting_semaphore/acquire.md</id>
      <updated>2020-06-15T12:57:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/semaphore/counting_semaphore/acquire.md b/reference/semaphore/counting_semaphore/acquire.md
new file mode 100644
index 000000000..e48d55d23
--- /dev/null
+++ b/reference/semaphore/counting_semaphore/acquire.md
@@ -0,0 +1,83 @@
+# acquire
+* semaphore[meta header]
+* std[meta namespace]
+* counting_semaphore[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+void acquire();
+```
+
+## 概要
+カウンティングセマフォのカウンタ値が`0`より大きくなるまで待機し、カウンタ値を`1`つ減算してから制御を戻す。
+
+説明のため、ここではカウンタ値を`counter`と表記する。
+
+
+## 効果
+次のステップを繰り返す。
+- [`try_acquire`](try_acquire.md)を評価し、結果が`true`ならば関数呼び出し元へ制御を戻す。
+- `counter`が`0`より大きくなるまで、`*this`上で関数呼び出しスレッドをブロッキングする。
+
+
+## 戻り値
+なし
+
+
+## 例外
+この関数は、以下のerror conditionを持つ[`system_error`](/reference/system_error/system_error.md)例外オブジェクトを送出する可能性がある：
+
+- [`resource_unavailable_try_again`](/reference/system_error/errc.md) : 操作対象のネイティブハンドル型が無効
+- [`operation_not_permitted`](/reference/system_error/errc.md) : スレッドにこの操作を行う権限がない
+
+
+## 備考
+「効果」欄では`acquire`メンバ関数の振る舞いを手続き的に説明しているが、実際の処理系においてはオペレーティングシステムが提供する効率的なセマフォ操作関数が利用されると期待される。
+
+- POSIXセマフォでは[`sem_wait`関数](https://linuxjm.osdn.jp/html/LDP_man-pages/man3/sem_wait.3.html)が提供される。
+- Windowsセマフォでは[`WaitForSingleObject`関数](https://docs.microsoft.com/en-us/windows/win32/api/synchapi/nf-synchapi-waitforsingleobject)ファミリが提供される。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;semaphore&amp;gt;
+#include &amp;lt;thread&amp;gt;
+
+int main()
+{
+  int shared_data = 0;
+  std::counting_semaphore sem{0};
+
+  std::thread t([&amp;amp;]{
+    // 通知を待機し、共有データから読取り
+    sem.acquire();
+    std::cout &amp;lt;&amp;lt; shared_data &amp;lt;&amp;lt; std::endl;
+  });
+
+  // 共有データへ書込み、通知を行う
+  shared_data = 42;
+  sem.release();
+
+  t.join();
+}
+```
+* acquire()[color ff0000]
+* release()[link release.md]
+
+### 出力
+```
+42
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 11.0
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>max -- Merge branch &#39;master&#39; of https://github.com/cpprefjp/site</title>
      <link href="https://cpprefjp.github.io/reference/semaphore/counting_semaphore/max.html"/>
      <id>c9fad6ae63786398416745c4bd98591d26feefb1:reference/semaphore/counting_semaphore/max.md</id>
      <updated>2020-06-15T12:57:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/semaphore/counting_semaphore/max.md b/reference/semaphore/counting_semaphore/max.md
index d0c5de4bd..038e89e9c 100644
--- a/reference/semaphore/counting_semaphore/max.md
+++ b/reference/semaphore/counting_semaphore/max.md
@@ -25,20 +25,24 @@ static constexpr ptrdiff_t max() noexcept;
 
 ## 例
 ```cpp example
-#include &amp;lt;semaphore&amp;gt;
 #include &amp;lt;iostream&amp;gt;
+#include &amp;lt;semaphore&amp;gt;
 
 int main()
 {
   using Semaphore = std::counting_semaphore&amp;lt;10&amp;gt;;
   std::cout &amp;lt;&amp;lt; Semaphore::max() &amp;lt;&amp;lt; std::endl;
+
+  // 処理系定義のデフォルト値
+  std::cout &amp;lt;&amp;lt; std::counting_semaphore&amp;lt;&amp;gt;::max() &amp;lt;&amp;lt; std::endl;
 }
 ```
-* max[color ff0000]
+* max()[color ff0000]
 
 ### 出力例
 ```
 10
+2147483647
 ```
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge branch &#39;master&#39; of https://github.com/cpprefjp/site</title>
      <link href="https://cpprefjp.github.io/reference/semaphore/counting_semaphore/op_constructor.html"/>
      <id>c9fad6ae63786398416745c4bd98591d26feefb1:reference/semaphore/counting_semaphore/op_constructor.md</id>
      <updated>2020-06-15T12:57:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/semaphore/counting_semaphore/op_constructor.md b/reference/semaphore/counting_semaphore/op_constructor.md
index 87bd3dee0..d96c05fe9 100644
--- a/reference/semaphore/counting_semaphore/op_constructor.md
+++ b/reference/semaphore/counting_semaphore/op_constructor.md
@@ -36,6 +36,7 @@ std::counting_semaphore&amp;lt;1&amp;gt; mtx{1};
 
 int main() {}
 ```
+* std::counting_semaphore[color ff0000]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>release -- Merge branch &#39;master&#39; of https://github.com/cpprefjp/site</title>
      <link href="https://cpprefjp.github.io/reference/semaphore/counting_semaphore/release.html"/>
      <id>c9fad6ae63786398416745c4bd98591d26feefb1:reference/semaphore/counting_semaphore/release.md</id>
      <updated>2020-06-15T12:57:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/semaphore/counting_semaphore/release.md b/reference/semaphore/counting_semaphore/release.md
new file mode 100644
index 000000000..764e2b955
--- /dev/null
+++ b/reference/semaphore/counting_semaphore/release.md
@@ -0,0 +1,79 @@
+# release
+* semaphore[meta header]
+* std[meta namespace]
+* counting_semaphore[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+void release(ptrdiff_t update = 1);
+```
+
+## 概要
+カウンティングセマフォのカウンタ値に加算し、待機中スレッドのブロック解除を行う。
+
+説明のため、ここではカウンタ値を`counter`と表記する。
+
+
+## 事前条件
+`update &amp;gt;= 0` かつ `update &amp;lt;=` [`max()`](max.md) `- counter`
+
+
+## 効果
+アトミックに`counter += update`を実行し、`counter`が値`0`より大きくなるまで待機中のスレッド群をブロック解除する。
+
+
+## 戻り値
+なし
+
+
+## 例外
+この関数は、以下のerror conditionを持つ[`system_error`](/reference/system_error/system_error.md)例外オブジェクトを送出する可能性がある：
+
+- [`resource_unavailable_try_again`](/reference/system_error/errc.md) : 操作対象のネイティブハンドル型が無効
+- [`operation_not_permitted`](/reference/system_error/errc.md) : スレッドにこの操作を行う権限がない
+- [`invalid_argument`](/reference/system_error/errc.md) : 実引数が無効
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;semaphore&amp;gt;
+#include &amp;lt;thread&amp;gt;
+
+int main()
+{
+  int shared_data = 0;
+  std::counting_semaphore sem{0};
+
+  std::thread t([&amp;amp;]{
+    // 通知を待機し、共有データから読取り
+    sem.acquire();
+    std::cout &amp;lt;&amp;lt; shared_data &amp;lt;&amp;lt; std::endl;
+  });
+
+  // 共有データへ書込み、通知を行う
+  shared_data = 42;
+  sem.release();
+
+  t.join();
+}
+```
+* release()[color ff0000]
+* acquire()[link acquire.md]
+
+### 出力
+```
+42
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 11.0
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>try_acquire -- Merge branch &#39;master&#39; of https://github.com/cpprefjp/site</title>
      <link href="https://cpprefjp.github.io/reference/semaphore/counting_semaphore/try_acquire.html"/>
      <id>c9fad6ae63786398416745c4bd98591d26feefb1:reference/semaphore/counting_semaphore/try_acquire.md</id>
      <updated>2020-06-15T12:57:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/semaphore/counting_semaphore/try_acquire.md b/reference/semaphore/counting_semaphore/try_acquire.md
new file mode 100644
index 000000000..fc00778c0
--- /dev/null
+++ b/reference/semaphore/counting_semaphore/try_acquire.md
@@ -0,0 +1,81 @@
+# try_acquire
+* semaphore[meta header]
+* std[meta namespace]
+* counting_semaphore[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+bool try_acquire() noexcept;
+```
+
+## 概要
+カウンティングセマフォのカウンタ値が`0`の場合は何もせず`fales`を返し、そうでなければカウンタ値を`1`つ減算して`true`を返す。
+
+説明のため、ここではカウンタ値を`counter`と表記する。
+
+
+## 効果
+`counter &amp;gt; 0`の場合は、呼び出しスレッドをブロッキングすることなく、アトミックに`counter -= 1`を実行する。
+`counter`が減算されなかった場合は、副作用は発生せず`try_acquire`関数は即座に呼び出し元へ戻る。
+
+処理系には、`counter &amp;gt; 0`であっても`counter`の減算に失敗することが許容される。
+ただし、セマフォに対する操作が競合していない状況下において、`try_acquire`が一貫して`false`を返すような実装は許容されない。
+（Spurious Failure が生じることは滅多にないが、これによりアトミック変数を用いた Swap-and-Compare ベースの興味深い実装が許容される。）
+
+
+## 戻り値
+`counter`が減算された場合は`true`を返し、そうでなければ`false`を返す。
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;semaphore&amp;gt;
+#include &amp;lt;thread&amp;gt;
+
+int main()
+{
+  int shared_data = 0;
+  std::counting_semaphore sem{0};
+
+  std::thread t([&amp;amp;]{
+    // 通知を待機し、共有データから読取り
+    while (!sem.try_acquire()) {
+      std::this_thread::yield();
+      // ここではtry_acquire()動作例示のためビジーループを行うが、
+      // セマフォ待機が目的であればacquire()利用が適切である。
+    }
+    std::cout &amp;lt;&amp;lt; shared_data &amp;lt;&amp;lt; std::endl;
+  });
+
+  // 共有データへ書込み、通知を行う
+  shared_data = 42;
+  sem.release();
+
+  t.join();
+}
+```
+* try_acquire()[color ff0000]
+* acquire()[link acquire.md]
+* release()[link release.md]
+
+### 出力
+```
+42
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 11.0
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++ Reference Site</title>
  <link href="http://cpprefjp.github.io" />
  <updated>2014-12-25T14:28:57.801068</updated>
  <id>d722e6b1-aaa6-4cc4-bb2e-5cc51ca6985b</id>

  
    <entry>
      <title>is_trivially_assignable (C++11) -- is_trivially_*系の型特性 : GCC 5.0から使用可能であることを記載</title>
      <link href="http://cpprefjp.github.io/reference/type_traits/is_trivially_assignable.html"/>
      <id>047a302f4e80b14ad2144eb2ef42136e1f607835:reference/type_traits/is_trivially_assignable.md</id>
      <updated>2014-12-25 14:28:34 +0900</updated>
      
        <content type="html">&lt;h1&gt;is_trivially_assignable (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;U&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; is_trivially_assignable;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;型&lt;code&gt;T&lt;/code&gt;が型&lt;code&gt;U&lt;/code&gt;からトリビアルに代入可能か調べる。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;型&lt;code&gt;T&lt;/code&gt;と型&lt;code&gt;U&lt;/code&gt;は完全型であるか、&lt;code&gt;const&lt;/code&gt;/&lt;code&gt;volatile&lt;/code&gt;修飾された(あるいはされていない)&lt;code&gt;void&lt;/code&gt;か、要素数不明の配列型でなければならない。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;is_trivially_assignable&lt;/code&gt;は、型&lt;code&gt;T&lt;/code&gt;が型&lt;code&gt;U&lt;/code&gt;からトリビアルに代入可能であるならば&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/integral_constant-true_type-false_type.html&#34;&gt;&lt;code&gt;true_type&lt;/code&gt;&lt;/a&gt;から派生し、そうでなければ&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/integral_constant-true_type-false_type.html&#34;&gt;&lt;code&gt;false_type&lt;/code&gt;&lt;/a&gt;から派生する。&lt;br /&gt;
「トリビアルに代入可能」とは、ユーザー定義されない代入演算子を持っているということを意味する。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;type_traits&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; X {
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// トリビアルな代入演算子を持っている&lt;/span&gt;
};

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; Y {
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 非トリビアルな代入演算子を持っている&lt;/span&gt;
  Y&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Y&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;) { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;; }
};

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; Z {
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 非トリビアルな代入演算子を持つ型を包含している&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Z型は非トリビアルな代入演算子を持つ&lt;/span&gt;
};

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 組み込み型は全てトリビアルに代入可能&lt;/span&gt;
static_assert(
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_trivially_assignable&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;,
  &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;int is trivially assignable&#34;&lt;/span&gt;);

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// トリビアルな代入演算子を持っている型&lt;/span&gt;
static_assert(
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_trivially_assignable&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;X&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; X&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;,
  &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;X is trivially assignable&#34;&lt;/span&gt;);

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 非トリビアルな代入演算子を持っている型&lt;/span&gt;
static_assert(
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_trivially_assignable&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Y&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Y&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;,
  &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Y isn&#39;t trivially assignable&#34;&lt;/span&gt;);

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 非トリビアルな代入演算子を持つ型を包含する型&lt;/span&gt;
static_assert(
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_trivially_assignable&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Z&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Z&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;,
  &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Z isn&#39;t trivially assignable&#34;&lt;/span&gt;);

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;() {}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 5.0&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_trivially_constructible (C++11) -- is_trivially_*系の型特性 : GCC 5.0から使用可能であることを記載</title>
      <link href="http://cpprefjp.github.io/reference/type_traits/is_trivially_constructible.html"/>
      <id>047a302f4e80b14ad2144eb2ef42136e1f607835:reference/type_traits/is_trivially_constructible.md</id>
      <updated>2014-12-25 14:28:34 +0900</updated>
      
        <content type="html">&lt;h1&gt;is_trivially_constructible (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, class... Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; is_trivially_constructible;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;型&lt;code&gt;T&lt;/code&gt;がトリビアルに構築可能か調べる。&lt;code&gt;T( Args... )&lt;/code&gt; の形式のコンストラクタ呼び出しがトリビアルに可能であるか。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;型&lt;code&gt;T&lt;/code&gt;および、&lt;code&gt;Args...&lt;/code&gt;の全ての型は、完全型であるか、&lt;code&gt;const&lt;/code&gt;/&lt;code&gt;volatile&lt;/code&gt;修飾された(あるいはされていない)&lt;code&gt;void&lt;/code&gt;か、要素数不明の配列型でなければならない。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;is_trivially_constructible&lt;/code&gt;は、&lt;code&gt;T( Args... )&lt;/code&gt;の形式のコンストラクタ呼出しがトリビアルに可能であるならば&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/integral_constant-true_type-false_type.html&#34;&gt;&lt;code&gt;true_type&lt;/code&gt;&lt;/a&gt;から派生し、そうでなければ&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/integral_constant-true_type-false_type.html&#34;&gt;&lt;code&gt;false_type&lt;/code&gt;&lt;/a&gt;から派生する。&lt;/p&gt;
&lt;p&gt;「トリビアルに構築可能」とは、ユーザー定義されないコンストラクタを持っていることを意味する。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;type_traits&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; X {
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// トリビアルなコンストラクタを持っている&lt;/span&gt;
};

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; Y {
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 非トリビアルなコピーコンストラクタを持っている&lt;/span&gt;
  Y(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Y&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;) {}
};

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; Z {
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 非トリビアルなコピーコンストラクタを持つ型を包含している&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Z型は非トリビアルなコピーコンストラクタを持つ&lt;/span&gt;
};

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 組み込み型は全てトリビアルに構築可能&lt;/span&gt;
static_assert(
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_trivially_constructible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;,
  &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;int is trivially constructible&#34;&lt;/span&gt;);

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// トリビアルなコンストラクタを持っている型&lt;/span&gt;
static_assert(
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_trivially_constructible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;X, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; X&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;,
  &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;X is trivially constructible&#34;&lt;/span&gt;);

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 非トリビアルなコンストラクタを持っている型&lt;/span&gt;
static_assert(
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_trivially_constructible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Y, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Y&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;,
  &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Y isn&#39;t trivially constructible&#34;&lt;/span&gt;);

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 非トリビアルなコンストラクタを持つ型を包含する型&lt;/span&gt;
static_assert(
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_trivially_constructible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Z, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Z&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;,
  &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Z isn&#39;t trivially constructible&#34;&lt;/span&gt;);

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;() {}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 5.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;備考&lt;/h4&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_trivially_copy_assignable (C++11) -- is_trivially_*系の型特性 : GCC 5.0から使用可能であることを記載</title>
      <link href="http://cpprefjp.github.io/reference/type_traits/is_trivially_copy_assignable.html"/>
      <id>047a302f4e80b14ad2144eb2ef42136e1f607835:reference/type_traits/is_trivially_copy_assignable.md</id>
      <updated>2014-12-25 14:28:34 +0900</updated>
      
        <content type="html">&lt;h1&gt;is_trivially_copy_assignable (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; is_trivially_copy_assignable;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;型&lt;code&gt;T&lt;/code&gt;がトリビアルにコピー代入可能か調べる。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;型&lt;code&gt;T&lt;/code&gt;は完全型であるか、&lt;code&gt;const&lt;/code&gt;/&lt;code&gt;volatile&lt;/code&gt;修飾された(あるいはされていない)&lt;code&gt;void&lt;/code&gt;か、要素数不明の配列型でなければならない。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;is_trivially_copy_assignable&lt;/code&gt;は、型&lt;code&gt;T&lt;/code&gt;がトリビアルにコピー代入可能であるならば&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/integral_constant-true_type-false_type.html&#34;&gt;&lt;code&gt;true_type&lt;/code&gt;&lt;/a&gt;から派生し、そうでなければ&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/integral_constant-true_type-false_type.html&#34;&gt;&lt;code&gt;false_type&lt;/code&gt;&lt;/a&gt;から派生する。&lt;br /&gt;
&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_trivially_assignable.html&#34;&gt;&lt;code&gt;is_trivially_assignable&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;T&amp;amp;, const T&amp;amp;&amp;gt;::value == true&lt;/code&gt;ならば、トリビアルにコピー代入可能であると判断される。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;type_traits&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; X {
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// トリビアルなコピー代入演算子を持っている&lt;/span&gt;
};

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; Y {
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 非トリビアルなコピー代入演算子を持っている&lt;/span&gt;
  Y&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Y&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;) { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;; }
};

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; Z {
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 非トリビアルなコピー代入演算子を持つ型を包含している&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Z型は非トリビアルなコピー代入演算子を持つ&lt;/span&gt;
};

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 組み込み型は全てトリビアルにコピー代入可能&lt;/span&gt;
static_assert(
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_trivially_copy_assignable&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;,
  &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;int is trivially copy assignable&#34;&lt;/span&gt;);

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// トリビアルなコピー代入演算子を持っている型&lt;/span&gt;
static_assert(
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_trivially_copy_assignable&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;X&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;,
  &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;X is trivially copy assignable&#34;&lt;/span&gt;);

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 非トリビアルなコピー代入演算子を持っている型&lt;/span&gt;
static_assert(
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_trivially_copy_assignable&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Y&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;,
  &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Y isn&#39;t trivially copy assignable&#34;&lt;/span&gt;);

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 非トリビアルなコピー代入演算子を持つ型を包含する型&lt;/span&gt;
static_assert(
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_trivially_copy_assignable&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Z&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;,
  &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Z isn&#39;t trivially copy assignable&#34;&lt;/span&gt;);

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;() {}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 5.0&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_trivially_copy_constructible (C++11) -- is_trivially_*系の型特性 : GCC 5.0から使用可能であることを記載</title>
      <link href="http://cpprefjp.github.io/reference/type_traits/is_trivially_copy_constructible.html"/>
      <id>047a302f4e80b14ad2144eb2ef42136e1f607835:reference/type_traits/is_trivially_copy_constructible.md</id>
      <updated>2014-12-25 14:28:34 +0900</updated>
      
        <content type="html">&lt;h1&gt;is_trivially_copy_constructible (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; is_trivially_copy_constructible;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;型&lt;code&gt;T&lt;/code&gt;がトリビアルにコピー構築可能か調べる。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;型&lt;code&gt;T&lt;/code&gt;は完全型であるか、&lt;code&gt;const&lt;/code&gt;/&lt;code&gt;volatile&lt;/code&gt;修飾された(あるいはされていない)&lt;code&gt;void&lt;/code&gt;か、要素数不明の配列型でなければならない。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;is_trivially_copy_constructible&lt;/code&gt;は、型&lt;code&gt;T&lt;/code&gt;がトリビアルにコピー構築可能であるならば&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/integral_constant-true_type-false_type.html&#34;&gt;&lt;code&gt;true_type&lt;/code&gt;&lt;/a&gt;から派生し、そうでなければ&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/integral_constant-true_type-false_type.html&#34;&gt;&lt;code&gt;false_type&lt;/code&gt;&lt;/a&gt;から派生する。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_trivially_constructible.html&#34;&gt;&lt;code&gt;is_trivially_constructible&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;T, const T&amp;amp;&amp;gt;::value == true&lt;/code&gt;ならば、トリビアルにコピー構築可能であると判断される。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;type_traits&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; X {
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// トリビアルなコピーコンストラクタを持っている&lt;/span&gt;
};

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; Y {
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 非トリビアルなコピーコンストラクタを持っている&lt;/span&gt;
  Y(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Y&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;) {}
};

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; Z {
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 非トリビアルなコピーコンストラクタを持つ型を包含している&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Z型は非トリビアルなコピーコンストラクタを持つ&lt;/span&gt;
};

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 組み込み型は全てトリビアルにコピー構築可能&lt;/span&gt;
static_assert(
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_trivially_copy_constructible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;,
  &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;int is trivially copy constructible&#34;&lt;/span&gt;);

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// トリビアルなコピーコンストラクタを持っている型&lt;/span&gt;
static_assert(
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_trivially_copy_constructible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;X&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;,
  &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;X is trivially copy constructible&#34;&lt;/span&gt;);

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 非トリビアルなコピーコンストラクタを持っている型&lt;/span&gt;
static_assert(
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_trivially_copy_constructible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Y&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;,
  &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Y isn&#39;t trivially copy constructible&#34;&lt;/span&gt;);

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 非トリビアルなコピーコンストラクタを持つ型を包含する型&lt;/span&gt;
static_assert(
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_trivially_copy_constructible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Z&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;,
  &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Z isn&#39;t trivially copy constructible&#34;&lt;/span&gt;);

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;() {}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 5.0&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_trivially_copyable (C++11) -- is_trivially_*系の型特性 : GCC 5.0から使用可能であることを記載</title>
      <link href="http://cpprefjp.github.io/reference/type_traits/is_trivially_copyable.html"/>
      <id>047a302f4e80b14ad2144eb2ef42136e1f607835:reference/type_traits/is_trivially_copyable.md</id>
      <updated>2014-12-25 14:28:34 +0900</updated>
      
        <content type="html">&lt;h1&gt;is_trivially_copyable (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; is_trivially_copyable;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;型&lt;code&gt;T&lt;/code&gt;がトリビアルコピー可能か調べる。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;型&lt;code&gt;T&lt;/code&gt;は完全型であるか、&lt;code&gt;const&lt;/code&gt;/&lt;code&gt;volatile&lt;/code&gt;修飾された(あるいはされていない)&lt;code&gt;void&lt;/code&gt;か、要素数不明の配列型でなければならない。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;is_trivially_copyable&lt;/code&gt;は、&lt;code&gt;T&lt;/code&gt;がトリビアルコピー可能な型であるならば&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/integral_constant-true_type-false_type.html&#34;&gt;&lt;code&gt;true_type&lt;/code&gt;&lt;/a&gt;から派生し、そうでなければ&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/integral_constant-true_type-false_type.html&#34;&gt;&lt;code&gt;false_type&lt;/code&gt;&lt;/a&gt;から派生する。&lt;br /&gt;
「トリビアルコピー可能な型」とは、「&lt;code&gt;std::memcpy()&lt;/code&gt;可能な型である」と言い換えることもできる。これに分類される型は、以下の全ての条件を満たす必要がある：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;非トリビアルなコピーコンストラクタを持っていないこと&lt;/li&gt;
&lt;li&gt;非トリビアルなムーブコンストラクタを持っていないこと&lt;/li&gt;
&lt;li&gt;非トリビアルなコピー代入演算子を持っていないこと&lt;/li&gt;
&lt;li&gt;非トリビアルなムーブ代入演算子を持っていないこと&lt;/li&gt;
&lt;li&gt;トリビアルなデストラクタを持っていること&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;トリビアル(trivial)な特殊関数(コンストラクタ、代入演算子、デストラクタ)とは、「ユーザー定義されない特殊関数」のことを意味する。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;type_traits&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; C1 {
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// トリビアルな特殊関数を持っていない&lt;/span&gt;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 特殊関数ではないメンバ関数は持っている&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; f(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; x; }
};

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; C2 {
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// トリビアルな特殊関数(デストラクタ)を持っている&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;~&lt;/span&gt;C2() {}
};

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 組み込み型は全てトリビアルコピー可能&lt;/span&gt;
static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_trivially_copyable&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;int is trivially copyable&#34;&lt;/span&gt;);
static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_trivially_copyable&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;int* is trivially copyable&#34;&lt;/span&gt;);

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ユーザー定義型は、ユーザー定義の特殊関数を持っていなければトリビアルコピー可能&lt;/span&gt;
static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_trivially_copyable&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;C1&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;C1 is trivially copyable&#34;&lt;/span&gt;);
static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_trivially_copyable&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;C2&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;C2 isn&#39;t trivially copyable&#34;&lt;/span&gt;);

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;() {}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 5.0&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_trivially_default_constructible (C++11) -- is_trivially_*系の型特性 : GCC 5.0から使用可能であることを記載</title>
      <link href="http://cpprefjp.github.io/reference/type_traits/is_trivially_default_constructible.html"/>
      <id>047a302f4e80b14ad2144eb2ef42136e1f607835:reference/type_traits/is_trivially_default_constructible.md</id>
      <updated>2014-12-25 14:28:34 +0900</updated>
      
        <content type="html">&lt;h1&gt;is_trivially_default_constructible (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; is_trivially_default_constructible;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;型&lt;code&gt;T&lt;/code&gt;がトリビアルにデフォルト構築可能か調べる。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;型&lt;code&gt;T&lt;/code&gt;は完全型であるか、&lt;code&gt;const&lt;/code&gt;/&lt;code&gt;volatile&lt;/code&gt;修飾された(あるいはされていない)&lt;code&gt;void&lt;/code&gt;か、要素数不明の配列型でなければならない。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;is_trivially_default_constructible&lt;/code&gt;は、型&lt;code&gt;T&lt;/code&gt;がトリビアルにデフォルト構築可能であるならば&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/integral_constant-true_type-false_type.html&#34;&gt;&lt;code&gt;true_type&lt;/code&gt;&lt;/a&gt;から派生し、そうでなければ&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/integral_constant-true_type-false_type.html&#34;&gt;&lt;code&gt;false_type&lt;/code&gt;&lt;/a&gt;から派生する。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_trivially_constructible.html&#34;&gt;&lt;code&gt;is_trivially_constructible&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;T&amp;gt;::value == true&lt;/code&gt;ならば、トリビアルにデフォルト構築可能であると判断される。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;type_traits&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; X {
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// トリビアルなデフォルトコンストラクタを持っている&lt;/span&gt;
};

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; Y {
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 非トリビアルなデフォルトコンストラクタを持っている&lt;/span&gt;
  Y() {}
};

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; Z {
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 非トリビアルなデフォルトコンストラクタを持つ型を包含している&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Z型は非トリビアルなデフォルトコンストラクタを持つ&lt;/span&gt;
};

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 組み込み型は全てトリビアルにデフォルト構築可能&lt;/span&gt;
static_assert(
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_trivially_default_constructible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;,
  &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;int is trivially default constructible&#34;&lt;/span&gt;);

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// トリビアルなデフォルトコンストラクタを持っている型&lt;/span&gt;
static_assert(
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_trivially_default_constructible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;X&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;,
  &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;X is trivially default constructible&#34;&lt;/span&gt;);

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 非トリビアルなデフォルトコンストラクタを持っている型&lt;/span&gt;
static_assert(
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_trivially_default_constructible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Y&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;,
  &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Y isn&#39;t trivially default constructible&#34;&lt;/span&gt;);

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 非トリビアルなデフォルトコンストラクタを持つ型を包含する型&lt;/span&gt;
static_assert(
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_trivially_default_constructible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Z&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;,
  &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Z isn&#39;t trivially default constructible&#34;&lt;/span&gt;);

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;() {}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 5.0&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_trivially_move_assignable (C++11) -- is_trivially_*系の型特性 : GCC 5.0から使用可能であることを記載</title>
      <link href="http://cpprefjp.github.io/reference/type_traits/is_trivially_move_assignable.html"/>
      <id>047a302f4e80b14ad2144eb2ef42136e1f607835:reference/type_traits/is_trivially_move_assignable.md</id>
      <updated>2014-12-25 14:28:34 +0900</updated>
      
        <content type="html">&lt;h1&gt;is_trivially_move_assignable (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; is_trivially_move_assignable;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;型&lt;code&gt;T&lt;/code&gt;がトリビアルにムーブ代入可能か調べる。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;型&lt;code&gt;T&lt;/code&gt;は完全型であるか、&lt;code&gt;const&lt;/code&gt;/&lt;code&gt;volatile&lt;/code&gt;修飾された(あるいはされていない)&lt;code&gt;void&lt;/code&gt;か、要素数不明の配列型でなければならない。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;is_trivially_move_assignable&lt;/code&gt;は、型&lt;code&gt;T&lt;/code&gt;がトリビアルにムーブ代入可能であるならば&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/integral_constant-true_type-false_type.html&#34;&gt;&lt;code&gt;true_type&lt;/code&gt;&lt;/a&gt;から派生し、そうでなければ&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/integral_constant-true_type-false_type.html&#34;&gt;&lt;code&gt;false_type&lt;/code&gt;&lt;/a&gt;から派生する。&lt;br /&gt;
&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_trivially_assignable.html&#34;&gt;&lt;code&gt;is_trivially_assignable&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;T&amp;amp;, T&amp;amp;&amp;amp;&amp;gt;::value == true&lt;/code&gt;ならば、トリビアルにムーブ代入可能であると判断される。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;type_traits&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; X {
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// トリビアルなムーブ代入演算子を持っている&lt;/span&gt;
};

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; Y {
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 非トリビアルなムーブ代入演算子を持っている&lt;/span&gt;
  Y&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(Y&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;) { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;; }
};

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; Z {
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 非トリビアルなムーブ代入演算子を持つ型を包含している&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Z型は非トリビアルなムーブ代入演算子を持つ&lt;/span&gt;
};

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 組み込み型は全てトリビアルにムーブ代入可能&lt;/span&gt;
static_assert(
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_trivially_move_assignable&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;,
  &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;int is trivially move assignable&#34;&lt;/span&gt;);

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// トリビアルなムーブ代入演算子を持っている型&lt;/span&gt;
static_assert(
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_trivially_move_assignable&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;X&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;,
  &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;X is trivially move assignable&#34;&lt;/span&gt;);

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 非トリビアルなムーブ代入演算子を持っている型&lt;/span&gt;
static_assert(
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_trivially_move_assignable&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Y&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;,
  &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Y isn&#39;t trivially move assignable&#34;&lt;/span&gt;);

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 非トリビアルなムーブ代入演算子を持つ型を包含する型&lt;/span&gt;
static_assert(
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_trivially_move_assignable&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Z&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;,
  &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Z isn&#39;t trivially move assignable&#34;&lt;/span&gt;);

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;() {}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.3&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 5.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;備考&lt;/h3&gt;
&lt;p&gt;Clang 3.0から3.2は、上記例の&lt;code&gt;Y&lt;/code&gt;クラスがトリビアルにムーブ代入可能と判定される。Clang 3.3から修正されている。&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_trivially_move_constructible (C++11) -- is_trivially_*系の型特性 : GCC 5.0から使用可能であることを記載</title>
      <link href="http://cpprefjp.github.io/reference/type_traits/is_trivially_move_constructible.html"/>
      <id>047a302f4e80b14ad2144eb2ef42136e1f607835:reference/type_traits/is_trivially_move_constructible.md</id>
      <updated>2014-12-25 14:28:34 +0900</updated>
      
        <content type="html">&lt;h1&gt;is_trivially_move_constructible (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; is_trivially_move_constructible;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;型&lt;code&gt;T&lt;/code&gt;がトリビアルにムーブ構築可能か調べる。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;型&lt;code&gt;T&lt;/code&gt;は完全型であるか、&lt;code&gt;const&lt;/code&gt;/&lt;code&gt;volatile&lt;/code&gt;修飾された(あるいはされていない)&lt;code&gt;void&lt;/code&gt;か、要素数不明の配列型でなければならない。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;is_trivially_move_constructible&lt;/code&gt;は、型&lt;code&gt;T&lt;/code&gt;がトリビアルにムーブ構築可能であるならば&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/integral_constant-true_type-false_type.html&#34;&gt;&lt;code&gt;true_type&lt;/code&gt;&lt;/a&gt;から派生し、そうでなければ&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/integral_constant-true_type-false_type.html&#34;&gt;&lt;code&gt;false_type&lt;/code&gt;&lt;/a&gt;から派生する。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_trivially_constructible.html&#34;&gt;&lt;code&gt;is_trivially_constructible&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;T, T&amp;amp;&amp;amp;&amp;gt;::value == true&lt;/code&gt;ならば、トリビアルにムーブ構築可能であると判断される。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;type_traits&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; X {
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// トリビアルなムーブコンストラクタを持っている&lt;/span&gt;
};

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; Y {
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 非トリビアルなムーブコンストラクタを持っている&lt;/span&gt;
  Y(Y&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;) {}
};

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; Z {
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 非トリビアルなムーブコンストラクタを持つ型を包含している&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Z型は非トリビアルなムーブコンストラクタを持つ&lt;/span&gt;
};

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 組み込み型は全てトリビアルにムーブ構築可能&lt;/span&gt;
static_assert(
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_trivially_move_constructible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;,
  &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;int is trivially move constructible&#34;&lt;/span&gt;);

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// トリビアルなムーブコンストラクタを持っている型&lt;/span&gt;
static_assert(
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_trivially_move_constructible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;X&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;,
  &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;X is trivially move constructible&#34;&lt;/span&gt;);

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 非トリビアルなムーブコンストラクタを持っている型&lt;/span&gt;
static_assert(
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_trivially_move_constructible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Y&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;,
  &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Y isn&#39;t trivially move constructible&#34;&lt;/span&gt;);

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 非トリビアルなムーブコンストラクタを持つ型を包含する型&lt;/span&gt;
static_assert(
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_trivially_move_constructible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Z&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;,
  &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Z isn&#39;t trivially move constructible&#34;&lt;/span&gt;);

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;() {}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.3&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 5.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;備考&lt;/h3&gt;
&lt;p&gt;Clang 3.0から3.2は、上記例の&lt;code&gt;Y&lt;/code&gt;クラスがトリビアルにムーブ構築可能と判定される。Clang 3.3から修正されている。&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>notify_all_at_thread_exit (C++11) -- notify_all_at_thread_exit : GCCの対応が5.0からであることを記載</title>
      <link href="http://cpprefjp.github.io/reference/condition_variable/condition_variable/notify_all_at_thread_exit.html"/>
      <id>f7f8362efa341acb03d9c741c5462d49081b4a40:reference/condition_variable/condition_variable/notify_all_at_thread_exit.md</id>
      <updated>2014-12-25 14:24:28 +0900</updated>
      
        <content type="html">&lt;h1&gt;notify_all_at_thread_exit (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; notify_all_at_thread_exit(condition_variable&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; cond, &lt;a href=&#34;http://cpprefjp.github.io/reference/mutex/unique_lock.html&#34;&gt;unique_lock&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/mutex/mutex.html&#34;&gt;mutex&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; lk);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;現在のスレッド終了時に、条件変数が待っている全てのスレッドを起床させる&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lk&lt;/code&gt;が呼び出し元スレッドによってロック取得されていること&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*this&lt;/code&gt;の&lt;code&gt;condition_variable&lt;/code&gt;オブジェクトが他スレッドで待機していないか、もしくは並行に待機している全てのスレッドで&lt;code&gt;lock&lt;/code&gt;パラメータが同じミューテックスオブジェクトを参照していること&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;lk&lt;/code&gt;のロック所有権を（スレッドライブラリの）内部ストレージへと移し、スレッド終了時、スレッドローカルなデータを解放した後、&lt;code&gt;cond&lt;/code&gt;を使って通知する。通知は以下のように行う：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ここでスレッドローカルストレージを解放&lt;/span&gt;
lk.unlock();
cond.&lt;a href=&#34;http://cpprefjp.github.io/reference/condition_variable/condition_variable/notify_all.html&#34;&gt;notify_all&lt;/a&gt;();
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;なし&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;p&gt;ロックはスレッド終了まで保持され続けるため、デッドロックを避けるためにできるだけ早くスレッドを終了させることを推奨する。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;condition_variable&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;mutex&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;thread&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; ProcessData {
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mutex mtx_;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;condition_variable cond_;

  &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; data_ready_;

&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
  ProcessData() &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; data_ready_(&lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;) {}

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 処理に必要なデータの準備をする&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; prepare_data_for_processing()
  {
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ...準備処理...&lt;/span&gt;

    {
      std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;unique_lock&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mutex&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; lk(mtx_);
      data_ready_ &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;;

      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// このスレッドが終了したら、cond_を待機している全てのスレッドを起床させる&lt;/span&gt;
      std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;notify_all_at_thread_exit&lt;/span&gt;(cond_, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;move(lk));
    }
  }

  &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; wait_for_data_to_process()
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;unique_lock&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mutex&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; lk(mtx_);

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// データの準備ができるまで待機してから処理する&lt;/span&gt;
    cond_.wait(lk, [&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;] { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; data_ready_; });
    process_data();
  }

&lt;span style=&#34;color: #A0A000&#34;&gt;private:&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; process_data()
  {
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ...データを処理する...&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;boolalpha &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;data is ready: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; data_ready_ &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  ProcessData p;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;thread&lt;/span&gt; t1([&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;] { p.prepare_data_for_processing(); });
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;thread&lt;/span&gt; t2([&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;] { p.wait_for_data_to_process(); });
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;thread&lt;/span&gt; t3([&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;] { p.wait_for_data_to_process(); });

  t1.detach(); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 準備スレッドの管理を手放す&lt;/span&gt;

  t2.join();
  t3.join();
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;data is ready: true
data is ready: true
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.1, 3.2, 3.3, 3.4&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 5.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: 11.0, 12.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/article/at_thread_exit.html&#34;&gt;_at_thread_exit系の関数が存在している理由&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3070.html&#34; target=&#34;_blank&#34;&gt;N3070 - Handling Detached Threads and thread_local Variables&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>size -- list::size : GCC 5.0から定数時間であることを記載。</title>
      <link href="http://cpprefjp.github.io/reference/list/size.html"/>
      <id>74e407a628dd0bc50daf2cfcf8cd698761f6a3d0:reference/list/size.md</id>
      <updated>2014-12-25 14:20:39 +0900</updated>
      
        <content type="html">&lt;h1&gt;size&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;size_type size() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++03&lt;/span&gt;
size_type size() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; noexcept; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;コンテナの要素数を取得する。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;要素数を返す。&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;投げない&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++03 : 線形時間&lt;/li&gt;
&lt;li&gt;C++11 : 定数時間&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;list&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; ls &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;};

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;size&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; ls.&lt;span style=&#34;color:#ff0000&#34;&gt;size&lt;/span&gt;();
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;size&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;5
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h3&gt;備考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;GCC(libstdc++, C++11)は、5.0から定数時間。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/faith_and_brave/20090902/1251879571&#34; target=&#34;_blank&#34;&gt;C++0x 標準コンテナのsize()の計算量を規定 - Faith and Brave - C++で遊ぼう&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>type_traits (C++11) -- type_traits : C++14対応として、is_finalを追加。</title>
      <link href="http://cpprefjp.github.io/reference/type_traits.html"/>
      <id>c0d770d1b686912d731bc36417e5a113f93098d2:reference/type_traits.md</id>
      <updated>2014-12-25 14:15:51 +0900</updated>
      
        <content type="html">&lt;h1&gt;type_traits (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;type_traits&amp;gt;&lt;/code&gt;ヘッダでは、型の特性を判定、操作するためのクラスを定義する。
このライブラリに含まれるクラステンプレートは、メタ関数(meta function)と呼ばれている。&lt;/p&gt;
&lt;h2&gt;ヘルパークラス&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/integral_constant-true_type-false_type.html&#34;&gt;&lt;code&gt;integral_constant&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;定数を表す型 (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/integral_constant-true_type-false_type.html&#34;&gt;&lt;code&gt;true_type&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;true&lt;/code&gt;を表す型 (typedef)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/integral_constant-true_type-false_type.html&#34;&gt;&lt;code&gt;false_type&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;false&lt;/code&gt;を表す型 (typedef)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;基本的な型&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_void.html&#34;&gt;&lt;code&gt;is_void&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型が&lt;code&gt;void&lt;/code&gt;型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_integral.html&#34;&gt;&lt;code&gt;is_integral&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型が整数型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_floating_point.html&#34;&gt;&lt;code&gt;is_floating_point&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型が浮動小数点型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_array.html&#34;&gt;&lt;code&gt;is_array&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型が配列型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_pointer.html&#34;&gt;&lt;code&gt;is_pointer&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型がポインタ型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_lvalue_reference.html&#34;&gt;&lt;code&gt;is_lvalue_reference&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型が左辺値参照型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_rvalue_reference.html&#34;&gt;&lt;code&gt;is_rvalue_reference&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型が右辺値参照型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_member_object_pointer.html&#34;&gt;&lt;code&gt;is_member_object_pointer&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型がデータメンバへのポインタ型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_member_function_pointer.html&#34;&gt;&lt;code&gt;is_member_function_pointer&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型がメンバ関数へのポインタ型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_enum.html&#34;&gt;&lt;code&gt;is_enum&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型が列挙型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_union.html&#34;&gt;&lt;code&gt;is_union&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型が共用型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_class.html&#34;&gt;&lt;code&gt;is_class&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型がクラス型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_function.html&#34;&gt;&lt;code&gt;is_function&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型が関数型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;組み合わせた型&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_reference.html&#34;&gt;&lt;code&gt;is_reference&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型が参照型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_arithmetic.html&#34;&gt;&lt;code&gt;is_arithmetic&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型が算術型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_fundamental.html&#34;&gt;&lt;code&gt;is_fundamental&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型が単純型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_object.html&#34;&gt;&lt;code&gt;is_object&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型がオブジェクト型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_scalar.html&#34;&gt;&lt;code&gt;is_scalar&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型がスカラ型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_compound.html&#34;&gt;&lt;code&gt;is_compound&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型が複合型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_member_pointer.html&#34;&gt;&lt;code&gt;is_member_pointer&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型がメンバポインタ型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;型の特性&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_const.html&#34;&gt;&lt;code&gt;is_const&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型が&lt;code&gt;const&lt;/code&gt;修飾型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_volatile.html&#34;&gt;&lt;code&gt;is_volatile&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型が&lt;code&gt;volatile&lt;/code&gt;修飾型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_trivial.html&#34;&gt;&lt;code&gt;is_trivial&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型がトリビアル型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_trivially_copyable.html&#34;&gt;&lt;code&gt;is_trivially_copyable&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型がトリビアルコピー可能か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_standard_layout.html&#34;&gt;&lt;code&gt;is_standard_layout&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型がスタンダードレイアウト型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_pod.html&#34;&gt;&lt;code&gt;is_pod&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型がPOD型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_literal_type.html&#34;&gt;&lt;code&gt;is_literal_type&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型がリテラル型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_empty.html&#34;&gt;&lt;code&gt;is_empty&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型が空のクラスか調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_polymorphic.html&#34;&gt;&lt;code&gt;is_polymorphic&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型が多相的クラスか調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_abstract.html&#34;&gt;&lt;code&gt;is_abstract&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型が抽象クラスか調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_final.html&#34;&gt;&lt;code&gt;is_final&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型に&lt;code&gt;final&lt;/code&gt;属性が付いているかを調べる (class template)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_signed.html&#34;&gt;&lt;code&gt;is_signed&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型が符号付き算術型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_unsigned.html&#34;&gt;&lt;code&gt;is_unsigned&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型が符号無し算術型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_constructible.html&#34;&gt;&lt;code&gt;is_constructible&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型のコンストラクタ呼出しが適格か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_default_constructible.html&#34;&gt;&lt;code&gt;is_default_constructible&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型がデフォルト構築可能か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_copy_constructible.html&#34;&gt;&lt;code&gt;is_copy_constructible&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型がコピー構築可能か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_move_constructible.html&#34;&gt;&lt;code&gt;is_move_constructible&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型がムーブ構築可能か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_assignable.html&#34;&gt;&lt;code&gt;is_assignable&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型が代入可能か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_copy_assignable.html&#34;&gt;&lt;code&gt;is_copy_assignable&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型がコピー代入可能か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_move_assignable.html&#34;&gt;&lt;code&gt;is_move_assignable&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型がムーブ代入可能か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_destructible.html&#34;&gt;&lt;code&gt;is_destructible&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型が破棄可能か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_trivially_constructible.html&#34;&gt;&lt;code&gt;is_trivially_constructible&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型がトリビアルに構築可能か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_trivially_default_constructible.html&#34;&gt;&lt;code&gt;is_trivially_default_constructible&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型がトリビアルにデフォルト構築可能かを調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_trivially_copy_constructible.html&#34;&gt;&lt;code&gt;is_trivially_copy_constructible&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型がトリビアルにコピー構築可能か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_trivially_move_constructible.html&#34;&gt;&lt;code&gt;is_trivially_move_constructible&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型がトリビアルにムーブ構築可能か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_trivially_assignable.html&#34;&gt;&lt;code&gt;is_trivially_assignable&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型がトリビアルに代入可能か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_trivially_copy_assignable.html&#34;&gt;&lt;code&gt;is_trivially_copy_assignable&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型がトリビアルにコピー代入可能か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_trivially_move_assignable.html&#34;&gt;&lt;code&gt;is_trivially_move_assignable&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型がトリビアルにムーブ代入可能か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_trivially_destructible.html&#34;&gt;&lt;code&gt;is_trivially_destructible&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型がトリビアルに破棄可能か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_nothrow_constructible.html&#34;&gt;&lt;code&gt;is_nothrow_constructible&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型のコンストラクタ呼出しが適格であり、かつそのコンストラクタが例外を投げないか調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_nothrow_default_constructible.html&#34;&gt;&lt;code&gt;is_nothrow_default_constructible&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型がデフォルト構築でき、かつそのデフォルトコンストラクタが例外を投げないか調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_nothrow_copy_constructible.html&#34;&gt;&lt;code&gt;is_nothrow_copy_constructible&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型がコピー構築でき、かつそのコピーコンストラクタが例外を投げないか調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_nothrow_move_constructible.html&#34;&gt;&lt;code&gt;is_nothrow_move_constructible&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型がムーブ構築でき、かつそのムーブコンストラクタが例外を投げないか調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_nothrow_assignable.html&#34;&gt;&lt;code&gt;is_nothrow_assignable&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型の代入演算子呼び出しが適格であり、かつその代入演算子が例外を投げないか調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_nothrow_copy_assignable.html&#34;&gt;&lt;code&gt;is_nothrow_copy_assignable&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型がコピー代入でき、かつそのコピー代入演算子が例外を投げないか調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_nothrow_move_assignable.html&#34;&gt;&lt;code&gt;is_nothrow_move_assignable&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型がムーブ代入でき、かつそのムーブ代入演算子が例外を投げないか調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_nothrow_destructible.html&#34;&gt;&lt;code&gt;is_nothrow_destructible&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型が破棄でき、かつそのデストラクタが例外を投げないか調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/has_virtual_destructor.html&#34;&gt;&lt;code&gt;has_virtual_destructor&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型が仮想デストラクタを持っているか調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;型の特性についての問い合わせ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/alignment_of.html&#34;&gt;&lt;code&gt;alignment_of&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型のアラインメントを取得する (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/rank.html&#34;&gt;&lt;code&gt;rank&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;配列型の次元数を取得する (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/extent.html&#34;&gt;&lt;code&gt;extent&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;配列型の&lt;code&gt;i&lt;/code&gt;番目の次元の要素数を取得する (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;型の関係&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_same.html&#34;&gt;&lt;code&gt;is_same&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;二つの型が同じ型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_base_of.html&#34;&gt;&lt;code&gt;is_base_of&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ある型が別の型の基底クラスか調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_convertible.html&#34;&gt;&lt;code&gt;is_convertible&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ある型から別の型へ変換可能か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;const-volatile の変更&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/remove_const.html&#34;&gt;&lt;code&gt;remove_const&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型の&lt;code&gt;const&lt;/code&gt;修飾を除去する (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/remove_volatile.html&#34;&gt;&lt;code&gt;remove_volatile&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型の&lt;code&gt;volatile&lt;/code&gt;修飾を除去する (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/remove_cv.html&#34;&gt;&lt;code&gt;remove_cv&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型の&lt;code&gt;const-volatile&lt;/code&gt;修飾を除去する (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/add_const.html&#34;&gt;&lt;code&gt;add_const&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型を&lt;code&gt;const&lt;/code&gt;修飾する (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/add_volatile.html&#34;&gt;&lt;code&gt;add_volatile&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型を&lt;code&gt;volatile&lt;/code&gt;修飾する (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/add_cv.html&#34;&gt;&lt;code&gt;add_cv&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型を&lt;code&gt;const-volatile&lt;/code&gt;修飾する (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照の変更&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/remove_reference.html&#34;&gt;&lt;code&gt;remove_reference&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型から参照を除去する(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/add_lvalue_reference.html&#34;&gt;&lt;code&gt;add_lvalue_reference&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型に左辺値参照を追加する (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/add_rvalue_reference.html&#34;&gt;&lt;code&gt;add_rvalue_reference&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型に右辺値参照を追加する (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;符号の変更&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/make_signed.html&#34;&gt;&lt;code&gt;make_signed&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;整数型を符号付きにする (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/make_unsigned.html&#34;&gt;&lt;code&gt;make_unsigned&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;整数型を符号なしにする (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;配列の変更&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/remove_extent.html&#34;&gt;&lt;code&gt;remove_extent&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;配列型から次元を除去する (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/remove_all_extents.html&#34;&gt;&lt;code&gt;remove_all_extents&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;配列型から全ての次元を除去する (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;ポインタの変更&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/add_pointer.html&#34;&gt;&lt;code&gt;add_pointer&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型にポインタを追加する (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/remove_pointer.html&#34;&gt;&lt;code&gt;remove_pointer&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型からポインタを除去する (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;その他の変換&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/aligned_storage.html&#34;&gt;&lt;code&gt;aligned_storage&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;アラインメント調整された領域を作る (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/aligned_union.html&#34;&gt;&lt;code&gt;aligned_union&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;アラインメント調整された共用体領域を作る (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/decay.html&#34;&gt;&lt;code&gt;decay&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;関数テンプレートと同じ規則で推論された型を取得する (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/enable_if.html&#34;&gt;&lt;code&gt;enable_if&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンパイル時条件式が真の場合のみ有効な型 (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/conditional.html&#34;&gt;&lt;code&gt;conditional&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンパイル時条件式 (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/common_type.html&#34;&gt;&lt;code&gt;common_type&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;変換可能な共通の型を取得する (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/underlying_type.html&#34;&gt;&lt;code&gt;underlying_type&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;enum&lt;/code&gt;の基底型を取得する (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/result_of.html&#34;&gt;&lt;code&gt;result_of&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;関数の戻り値の型を取得する (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2003/n1424.htm&#34; target=&#34;_blank&#34;&gt;N1424 A Proposal to add Type Traits to the Standard Library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/type_traits/doc/html/index.html&#34; target=&#34;_blank&#34;&gt;Boost Type Traits Library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html&#34; target=&#34;_blank&#34;&gt;型特性 - Boost逆引きリファレンス&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_final (C++14) -- type_traits : C++14対応として、is_finalを追加。</title>
      <link href="http://cpprefjp.github.io/reference/type_traits/is_final.html"/>
      <id>c0d770d1b686912d731bc36417e5a113f93098d2:reference/type_traits/is_final.md</id>
      <updated>2014-12-25 14:15:51 +0900</updated>
      
        <content type="html">&lt;h1&gt;is_final (C++14)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; is_final;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;型に&lt;code&gt;final&lt;/code&gt;属性が付いているかを調べる。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;型&lt;code&gt;T&lt;/code&gt;がクラス型である場合、その型は完全型でなければならない。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;is_final&lt;/code&gt;は、型&lt;code&gt;T&lt;/code&gt;に&lt;code&gt;final&lt;/code&gt;属性が付いていれば&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/integral_constant-true_type-false_type.html&#34;&gt;&lt;code&gt;true_type&lt;/code&gt;&lt;/a&gt;から派生し、そうでなければ&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/integral_constant-true_type-false_type.html&#34;&gt;&lt;code&gt;false_type&lt;/code&gt;&lt;/a&gt;から派生する。&lt;/p&gt;
&lt;p&gt;「これ以上継承できない場合は&lt;code&gt;true_type&lt;/code&gt;」ではなく&lt;code&gt;final&lt;/code&gt;属性で判断することに注意。&lt;code&gt;int&lt;/code&gt;のような組み込み型は、継承はできないが&lt;code&gt;false_type&lt;/code&gt;となる。&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;p&gt;この型特性は、EBCO(empty-base-class optimization)のために使用できる。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;type_traits&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; A {};
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; B final {};

static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_final&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;A&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;A is a not final class&#34;&lt;/span&gt;);
static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_final&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;B&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;,  &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;B is a final class&#34;&lt;/span&gt;);
static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_final&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;int is a not final class&#34;&lt;/span&gt;);

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;(){}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++14&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++14 mode&lt;/a&gt;: 3.5&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 5.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2112&#34; target=&#34;_blank&#34;&gt;LWG issue 2112. User-defined classes that cannot be derived from&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンパイラの実装状況 -- コンパイラの実装状況： GCC 5.0のC++14実装を更新。</title>
      <link href="http://cpprefjp.github.io/implementation-status.html"/>
      <id>6ba87a904db1b27038392460b6d89d5551031faf:implementation-status.md</id>
      <updated>2014-12-24 18:36:13 +0900</updated>
      
        <content type="html">&lt;h1&gt;コンパイラの実装状況&lt;/h1&gt;
&lt;p&gt;このページでは、C++のバージョンごとの言語機能を、どのコンパイラがどのバージョンからサポートしているかをまとめる。&lt;/p&gt;
&lt;p&gt;ライブラリ機能については、本サイトのリファレンスで各機能を参照してもらいたい。&lt;/p&gt;
&lt;p&gt;MSVC(Microsoft Visual C++)のバージョン表記の、製品との対応付けは以下のようになっている：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;MSVCのバージョン&lt;/th&gt;
&lt;th&gt;製品のバージョン&lt;/th&gt;
&lt;th&gt;定数&lt;code&gt;_MSC_VER&lt;/code&gt;の値&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;6.0&lt;/td&gt;
&lt;td&gt;Visual Studio 6.0&lt;/td&gt;
&lt;td&gt;1200&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7.0&lt;/td&gt;
&lt;td&gt;Visual Studio .NET 2002&lt;/td&gt;
&lt;td&gt;1300&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7.1&lt;/td&gt;
&lt;td&gt;Visual Studio .NET 2003&lt;/td&gt;
&lt;td&gt;1310&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8.0&lt;/td&gt;
&lt;td&gt;Visual Studio 2005&lt;/td&gt;
&lt;td&gt;1400&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9.0&lt;/td&gt;
&lt;td&gt;Visual Studio 2008&lt;/td&gt;
&lt;td&gt;1500&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10.0&lt;/td&gt;
&lt;td&gt;Visual Studio 2010&lt;/td&gt;
&lt;td&gt;1600&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11.0&lt;/td&gt;
&lt;td&gt;Visual Studio 2012&lt;/td&gt;
&lt;td&gt;1700&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;td&gt;Visual Studio 2013&lt;/td&gt;
&lt;td&gt;1800&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;14.0 CTP&lt;/td&gt;
&lt;td&gt;Visual Studio “14” CTP&lt;/td&gt;
&lt;td&gt;1900&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;C++11言語機能の実装状況&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;GCC&lt;/th&gt;
&lt;th&gt;Clang&lt;/th&gt;
&lt;th&gt;ICC&lt;/th&gt;
&lt;th&gt;MSVC&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;alignas&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アラインメント指定&lt;/td&gt;
&lt;td&gt;4.8&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;14.0 CTP&lt;br /&gt;7.1あるいはそれ以前からある&lt;code&gt;__declspec(align(x))&lt;/code&gt;構文で代替可能。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;alignof&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アラインメント取得&lt;/td&gt;
&lt;td&gt;4.5&lt;/td&gt;
&lt;td&gt;3.3&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;14.0 CTP&lt;br /&gt;7.1あるいはそれ以前よりある&lt;code&gt;__alignof&lt;/code&gt;で代替可能。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;auto&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型推論&lt;/td&gt;
&lt;td&gt;4.4&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;td&gt;10.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C99互換のプリプロセッサ&lt;/td&gt;
&lt;td&gt;可変引数マクロ等&lt;/td&gt;
&lt;td&gt;4.3&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;11.1&lt;/td&gt;
&lt;td&gt;8.0 (partial) 可変引数のみ &lt;code&gt;_Pragma&lt;/code&gt;の代わりに&lt;code&gt;__pragma&lt;/code&gt;が存在する。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;constexpr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;定数式&lt;/td&gt;
&lt;td&gt;4.6&lt;/td&gt;
&lt;td&gt;3.1&lt;/td&gt;
&lt;td&gt;13.0 (partial)&lt;br /&gt; 14.0&lt;/td&gt;
&lt;td&gt;14.0 CTP (partial)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;decltype&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;式の型を取得&lt;/td&gt;
&lt;td&gt;4.3&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;13.0&lt;/td&gt;
&lt;td&gt;10.0 (partial)&lt;br /&gt; 11.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;関数の&lt;code&gt;default/delete&lt;/code&gt;宣言&lt;/td&gt;
&lt;td&gt;自動定義される特殊関数の制御&lt;/td&gt;
&lt;td&gt;4.4&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;td&gt;14.0 CTP&lt;br /&gt;12.0 ムーブコンストラクタ・ムーブ代入演算子の&lt;code&gt;default&lt;/code&gt;は不可&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;移譲コンストラクタ&lt;/td&gt;
&lt;td&gt;コンストラクタから他のコンストラクタに処理を移譲する&lt;/td&gt;
&lt;td&gt;4.7&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;explicit operator T()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;明示的型変換の演算子&lt;/td&gt;
&lt;td&gt;4.5&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;14.0&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;拡張&lt;code&gt;friend&lt;/code&gt;宣言&lt;/td&gt;
&lt;td&gt;テンプレートパラメータや&lt;code&gt;typedef&lt;/code&gt;名を&lt;code&gt;friend&lt;/code&gt;宣言&lt;/td&gt;
&lt;td&gt;4.7&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;11.1 (partial) &lt;br /&gt; 12.0&lt;/td&gt;
&lt;td&gt;10.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;extern template&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;テンプレートのインスタンス化抑止&lt;/td&gt;
&lt;td&gt;3.3&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;11.1&lt;/td&gt;
&lt;td&gt;6.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;enum&lt;/code&gt;の先行宣言&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;4.6&lt;/td&gt;
&lt;td&gt;3.1&lt;/td&gt;
&lt;td&gt;11.1 (partial)&lt;br /&gt; 14.0&lt;/td&gt;
&lt;td&gt;11.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;継承コンストラクタ&lt;/td&gt;
&lt;td&gt;基本クラスのコンストラクタを継承&lt;/td&gt;
&lt;td&gt;4.8&lt;/td&gt;
&lt;td&gt;3.3&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;14.0 CTP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ラムダ式&lt;/td&gt;
&lt;td&gt;関数オブジェクトをその場に書く&lt;/td&gt;
&lt;td&gt;4.5&lt;/td&gt;
&lt;td&gt;3.1&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;td&gt;10.0 (partial)&lt;br /&gt; 11.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ローカルクラスと無名クラスを、テンプレート実引数として使用する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;4.5&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;td&gt;10.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;long long&lt;/code&gt;型&lt;/td&gt;
&lt;td&gt;&lt;code&gt;long&lt;/code&gt;以上の大きさを持つ整数型&lt;/td&gt;
&lt;td&gt;4.3&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;11.1&lt;/td&gt;
&lt;td&gt;7.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;inline namespace&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ネストした名前空間に、透過的にアクセスする&lt;/td&gt;
&lt;td&gt;4.4&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;14.0&lt;/td&gt;
&lt;td&gt;14.0 CTP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;char16_t&lt;/code&gt;、&lt;code&gt;char32_t&lt;/code&gt;型&lt;/td&gt;
&lt;td&gt;UTF-16とUTF-32の文字型&lt;/td&gt;
&lt;td&gt;4.4&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;12.1 (Windows: partial) &lt;br /&gt; 12.1 (GNU/Linux, OS X)&lt;br /&gt; 14.0&lt;/td&gt;
&lt;td&gt;No&lt;br /&gt; 10.0より同名のtypedefが存在する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;戻り値の型を後置する関数宣言構文&lt;/td&gt;
&lt;td&gt;以下のような形式での関数宣言&lt;br /&gt; &lt;code&gt;auto f(arg_types...) -&amp;gt; return_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;4.4&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;td&gt;10.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;nullptr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ヌルポインタを表すポインタリテラル&lt;/td&gt;
&lt;td&gt;4.6&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;11.1&lt;/td&gt;
&lt;td&gt;10.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Unicode文字列リテラル&lt;/td&gt;
&lt;td&gt;uプレフィックスでUTF-16 (&lt;code&gt;char16_t&lt;/code&gt;)&lt;br /&gt; UプレフィックスでUTF-32 (&lt;code&gt;char32_t&lt;/code&gt;)&lt;br /&gt; u8プレフィックスでUTF-8 (&lt;code&gt;char&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;4.5&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;生文字列リテラル&lt;/td&gt;
&lt;td&gt;文字列リテラルにRプレフィックスを付けることで、エスケープシーケンスを無視する&lt;/td&gt;
&lt;td&gt;4.5&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;14.0&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ユーザー定義リテラル&lt;/td&gt;
&lt;td&gt;リテラルのサフィックスをユーザー定義する&lt;/td&gt;
&lt;td&gt;4.7&lt;/td&gt;
&lt;td&gt;3.1&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;14.0 CTP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;テンプレートの右山括弧&lt;/td&gt;
&lt;td&gt;&lt;code&gt;vector&amp;lt;basic_string&amp;gt;&amp;gt;&lt;/code&gt;のように、&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;をスペースを空けずに記述可能にする&lt;/td&gt;
&lt;td&gt;4.3&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;11.1&lt;/td&gt;
&lt;td&gt;8.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;右辺値参照と&lt;code&gt;std::move()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;右辺値によるオーバーロード、およびそれによるリソースの所有権移動&lt;/td&gt;
&lt;td&gt;4.3 (partial)&lt;br /&gt; 4.6&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;td&gt;10.0 (partial) ムーブコンストラクタと代入演算子の暗黙定義に対応していない。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;static_assert&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コンパイル時アサート&lt;/td&gt;
&lt;td&gt;4.3&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;11.1&lt;/td&gt;
&lt;td&gt;10.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;enum class&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;強い型付けを持つ列挙型&lt;/td&gt;
&lt;td&gt;4.4&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;11.1 (partial)&lt;br /&gt; 14.0&lt;/td&gt;
&lt;td&gt;11.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;エイリアステンプレート&lt;/td&gt;
&lt;td&gt;テンプレートによる型の別名付け&lt;/td&gt;
&lt;td&gt;4.7&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;12.1&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;thread_local&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;スレッドローカルストレージ&lt;/td&gt;
&lt;td&gt;4.8&lt;/td&gt;
&lt;td&gt;3.3&lt;/td&gt;
&lt;td&gt;11.1 (partial)&lt;/td&gt;
&lt;td&gt;10.0&lt;br /&gt; &lt;code&gt;__declspec(thread)&lt;/code&gt;属性での部分サポート&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;union&lt;/code&gt;の制限解除&lt;/td&gt;
&lt;td&gt;共用体のメンバ変数として、クラスオブジェクトを持つ&lt;/td&gt;
&lt;td&gt;4.6&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;14.0(Linux系OSおよびMacのみ。Windowsは非対応)&lt;/td&gt;
&lt;td&gt;14.0 CTP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;可変引数テンプレート&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;4.3 (partial)&lt;br /&gt; 4.4&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;12.1&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;範囲for文&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;4.6&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;13.0&lt;/td&gt;
&lt;td&gt;11.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;override&lt;/code&gt;と&lt;code&gt;final&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;メンバ関数のオーバーライド指定、および派生クラスでのオーバーロードを禁止する指定&lt;/td&gt;
&lt;td&gt;4.7&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;14.0&lt;/td&gt;
&lt;td&gt;8.0 (partial): &lt;code&gt;override&lt;/code&gt;のみ。&lt;code&gt;final&lt;/code&gt;の代わりにsealedが存在する。ただし両者ともデストラクタには指定できない。&lt;br /&gt; 11.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;属性構文&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[[attr]]&lt;/code&gt;構文による、クラス、関数、変数の属性指定&lt;/td&gt;
&lt;td&gt;4.8&lt;/td&gt;
&lt;td&gt;3.3&lt;/td&gt;
&lt;td&gt;12.1&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;メンバ関数の左辺値／右辺値修飾&lt;/td&gt;
&lt;td&gt;オブジェクトが左辺値／右辺値の場合のみ呼び出し可能であることの指定&lt;/td&gt;
&lt;td&gt;4.8.1&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;14.0&lt;/td&gt;
&lt;td&gt;14.0 CTP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;非静的データメンバの初期化&lt;/td&gt;
&lt;td&gt;メンバ変数を、宣言と同時に初期値指定する&lt;/td&gt;
&lt;td&gt;4.7&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;14.0&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ブロックスコープな&lt;code&gt;static&lt;/code&gt;変数初期化のスレッドセーフ化&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;4.0&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td&gt;14.0 CTP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;初期化子リスト&lt;/td&gt;
&lt;td&gt;波括弧による初期化。&lt;code&gt;vector&amp;lt;int&amp;gt; v = {1, 2, 3};&lt;/code&gt;など。&lt;/td&gt;
&lt;td&gt;4.4&lt;/td&gt;
&lt;td&gt;3.1&lt;/td&gt;
&lt;td&gt;14.0&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;noexcept&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;関数の例外指定、例外を投げる可能性のある式かbool値を返す演算子&lt;/td&gt;
&lt;td&gt;4.6&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;13.0(partial)&lt;br /&gt;14.0&lt;/td&gt;
&lt;td&gt;14.0 CTP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;任意の式によるSFINAE&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;4.4&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;一様初期化&lt;/td&gt;
&lt;td&gt;コンストラクタ呼び出しを波カッコで行う &lt;code&gt;T x { a, b, c }&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;4.6&lt;/td&gt;
&lt;td&gt;3.1&lt;/td&gt;
&lt;td&gt;13.0(partial)&lt;br /&gt; 14.0&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;各処理系のC++11実装状況ページ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全体的な対応状況： &lt;a href=&#34;http://wiki.apache.org/stdcxx/C++0xCompilerSupport&#34; target=&#34;_blank&#34;&gt;C++0xCompilerSupport&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GCC： &lt;a href=&#34;http://gcc.gnu.org/projects/cxx0x.html&#34; target=&#34;_blank&#34;&gt;C++0x/C++11 Support in GCC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;libstdc++ : &lt;a href=&#34;http://gcc.gnu.org/onlinedocs/libstdc++/manual/status.html#status.iso.2011&#34; target=&#34;_blank&#34;&gt;C++ 2011&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Clang： &lt;a href=&#34;http://clang.llvm.org/cxx_status.html&#34; target=&#34;_blank&#34;&gt;C++98 and C++11 Support in Clang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ICC : &lt;a href=&#34;http://software.intel.com/en-us/articles/c0x-features-supported-by-intel-c-compiler&#34; target=&#34;_blank&#34;&gt;C++11 Features Supported by Intel® C++ Compiler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;VC++： &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/vstudio/hh567368%28v=vs.120%29.aspx&#34; target=&#34;_blank&#34;&gt;C++11 Features (Modern C++)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;VC++ November 2013 CTP: &lt;a href=&#34;http://herbsutter.com/2013/11/18/visual-c-compiler-november-2013-ctp/&#34; target=&#34;_blank&#34;&gt;Visual C++ Compiler November 2013 CTP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Visual Studio “14” CTP: &lt;a href=&#34;http://blogs.msdn.com/b/vcblog/archive/2014/06/03/visual-studio-14-ctp.aspx&#34; target=&#34;_blank&#34;&gt;Visual Studio “14” CTP - Visual C++ Team Blog - Site Home - MSDN Blogs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;C++14&lt;/h2&gt;
&lt;p&gt;C++14は、C++11のバグフィックス + マイナーアップデートが予定されているバージョンである。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;GCC&lt;/th&gt;
&lt;th&gt;Clang&lt;/th&gt;
&lt;th&gt;ICC&lt;/th&gt;
&lt;th&gt;MSVC&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2進数リテラル&lt;/td&gt;
&lt;td&gt;2進数を表す&lt;code&gt;0b&lt;/code&gt; or &lt;code&gt;0B&lt;/code&gt;プレフィックスを付けた数値リテラルの記述を可能とする&lt;/td&gt;
&lt;td&gt;4.3(GNU)&lt;br /&gt; 4.9&lt;/td&gt;
&lt;td&gt;3.2&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;通常関数の戻り値型推論&lt;/td&gt;
&lt;td&gt;関数の戻り値型を&lt;code&gt;auto&lt;/code&gt;にすることで、&lt;code&gt;return&lt;/code&gt;文から戻り値の型を推論させる&lt;/td&gt;
&lt;td&gt;4.8(partial)&lt;br /&gt;4.9&lt;/td&gt;
&lt;td&gt;3.3(partial)&lt;br /&gt; 3.4&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;14.0 CTP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;汎用ラムダキャプチャ&lt;/td&gt;
&lt;td&gt;キャプチャに代入構文を導入し、一つの変数に複数のキャプチャ方法を指定可能にする&lt;/td&gt;
&lt;td&gt;4.9&lt;/td&gt;
&lt;td&gt;3.4&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;14.0 CTP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ジェネリックラムダ&lt;/td&gt;
&lt;td&gt;ラムダ式のパラメータを&lt;code&gt;auto&lt;/code&gt;にすることで、ジェネリックな関数呼び出し演算子を持つ関数オブジェクトを生成する&lt;/td&gt;
&lt;td&gt;4.9&lt;/td&gt;
&lt;td&gt;3.4&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;14.0 CTP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;変数テンプレート&lt;/td&gt;
&lt;td&gt;変数定義時のテンプレート指定を可能にする。&lt;/td&gt;
&lt;td&gt;5.0&lt;/td&gt;
&lt;td&gt;3.4&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;constexpr&lt;/code&gt;の制限緩和&lt;/td&gt;
&lt;td&gt;&lt;code&gt;if&lt;/code&gt;文、&lt;code&gt;switch&lt;/code&gt;文による条件分岐の許可。&lt;br /&gt;&lt;code&gt;for&lt;/code&gt;文、&lt;code&gt;while&lt;/code&gt;文、&lt;code&gt;do-while&lt;/code&gt;文によるループの許可。&lt;br /&gt;&lt;code&gt;void&lt;/code&gt;戻り値型の許可&lt;br /&gt;初期化を伴う変数宣言の許可。&lt;br /&gt;変数書き換えの許可。&lt;/td&gt;
&lt;td&gt;5.0&lt;/td&gt;
&lt;td&gt;3.3(partial)&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;宣言時のメンバ初期化を持つ型の集成体初期化を許可&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;5.0&lt;/td&gt;
&lt;td&gt;3.3&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[[deprecated]]&lt;/code&gt;属性&lt;/td&gt;
&lt;td&gt;非推奨の機能であることを示す属性。&lt;/td&gt;
&lt;td&gt;4.9&lt;/td&gt;
&lt;td&gt;3.4&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;No&lt;br /&gt;&lt;code&gt;__declspec(deprecated)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;数値リテラルの桁区切り文字&lt;/td&gt;
&lt;td&gt;シングルクォーテーションで数値リテラルを桁区切りする。&lt;/td&gt;
&lt;td&gt;4.9&lt;/td&gt;
&lt;td&gt;3.4&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;サイズ付きデアロケーション&lt;/td&gt;
&lt;td&gt;サイズをとる&lt;code&gt;delete&lt;/code&gt;演算子のオーバーロードを許可する。&lt;/td&gt;
&lt;td&gt;5.0&lt;/td&gt;
&lt;td&gt;3.4&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;14.0正式版で予定&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;GCCとClangでは、-std=c++1yコンパイルオプションを付けることで、これらの機能を使用できる。&lt;/p&gt;
&lt;p&gt;各処理系のC++14実装状況ページ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GCC: &lt;a href=&#34;http://gcc.gnu.org/projects/cxx1y.html&#34; target=&#34;_blank&#34;&gt;C++1y/C++14 Support in GCC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;libstdc++: &lt;a href=&#34;http://gcc.gnu.org/onlinedocs/libstdc++/manual/status.html#status.iso.2014&#34; target=&#34;_blank&#34;&gt;C++ 2014&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Clang: &lt;a href=&#34;http://clang.llvm.org/cxx_status.html&#34; target=&#34;_blank&#34;&gt;C++98, C++11, and C++14 Support in Clang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;libc++: &lt;a href=&#34;http://libcxx.llvm.org/cxx1y_status.html&#34; target=&#34;_blank&#34;&gt;libc++ C++1Y Status&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Visual C++: &lt;a href=&#34;http://blogs.msdn.com/b/vcblog/archive/2014/06/11/c-11-14-feature-tables-for-visual-studio-14-ctp1.aspx&#34; target=&#34;_blank&#34;&gt;C++11/14 Feature Tables For Visual Studio 14 CTP1 - Visual C++ Team Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Technical Specificationの実装状況&lt;/h2&gt;
&lt;p&gt;Technical Specificationは、C++14に追加で導入する言語機能、およびライブラリである。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;GCC&lt;/th&gt;
&lt;th&gt;Clang&lt;/th&gt;
&lt;th&gt;ICC&lt;/th&gt;
&lt;th&gt;MSVC&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;実行時サイズの配列&lt;/td&gt;
&lt;td&gt;組み込み配列を、実行時の要素数で構築することを可能にする&lt;/td&gt;
&lt;td&gt;4.9&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
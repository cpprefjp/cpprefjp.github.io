<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2022-04-10T10:56:46.269005</updated>
  <id>19385f9e-9994-4408-a069-40f268aa4ae7</id>

  
    <entry>
      <title>all -- リンク修正</title>
      <link href="https://cpprefjp.github.io/reference/ranges/all.html"/>
      <id>c5a478e2f2e679de71c8596e7bd4ad8ec59cbf41:reference/ranges/all.md</id>
      <updated>2022-04-10T19:51:15+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/all.md b/reference/ranges/all.md
index 850ce9ca8..7f887472c 100644
--- a/reference/ranges/all.md
+++ b/reference/ranges/all.md
@@ -65,4 +65,4 @@ int main() {
 ## 参照
 - [N4892 24 Ranges library](https://timsong-cpp.github.io/cppwp/ranges)
 - [C++20 ranges](https://techbookfest.org/product/5134506308665344)
-- [［C++］ &amp;lt;ranges&amp;gt;のviewを見る19 - owning_view](https://zenn.dev/onihusube/articles/fd07528b68ae0c)
\ No newline at end of file
+- [［C++］ `&amp;lt;ranges&amp;gt;`のviewを見る19 - owning_view](https://zenn.dev/onihusube/articles/fd07528b68ae0c)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>owning_view -- リンク修正</title>
      <link href="https://cpprefjp.github.io/reference/ranges/owning_view.html"/>
      <id>c5a478e2f2e679de71c8596e7bd4ad8ec59cbf41:reference/ranges/owning_view.md</id>
      <updated>2022-04-10T19:51:15+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/owning_view.md b/reference/ranges/owning_view.md
index 873b0b228..990e2ff81 100644
--- a/reference/ranges/owning_view.md
+++ b/reference/ranges/owning_view.md
@@ -170,4 +170,4 @@ namespace std::ranges {
 ## 参照
 - [N4892 24 Ranges library](https://timsong-cpp.github.io/cppwp/ranges)
 - [C++20 ranges](https://techbookfest.org/product/5134506308665344)
-- [［C++］ &amp;lt;ranges&amp;gt;のviewを見る19 - owning_view](https://zenn.dev/onihusube/articles/fd07528b68ae0c)
+- [［C++］ `&amp;lt;ranges&amp;gt;`のviewを見る19 - owning_view](https://zenn.dev/onihusube/articles/fd07528b68ae0c)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>reverse_view -- reverse_view 実装例を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/reverse_view.html"/>
      <id>bda01cce129454d2fe2b18009e289924ae563b58:reference/ranges/reverse_view.md</id>
      <updated>2022-04-10T16:04:50+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/reverse_view.md b/reference/ranges/reverse_view.md
index 684fe38f4..3b4c80ece 100644
--- a/reference/ranges/reverse_view.md
+++ b/reference/ranges/reverse_view.md
@@ -104,6 +104,74 @@ int main() {
 olleH
 ```
 
+## 実装例
+```cpp
+namespace std::ranges {
+  template&amp;lt;view V&amp;gt;
+    requires bidirectional_range&amp;lt;V&amp;gt;
+  class reverse_view : public view_interface&amp;lt;reverse_view&amp;lt;V&amp;gt;&amp;gt; {
+  private:
+    V base_ = V();
+    optional&amp;lt;reverse_iterator&amp;lt;iterator_t&amp;lt;V&amp;gt;&amp;gt;&amp;gt; cache_;
+  public:
+    reverse_view() requires default_initializable&amp;lt;V&amp;gt; = default;
+
+    constexpr explicit reverse_view(V r) : base_(std::move(r)) {}
+
+    constexpr V base() const &amp;amp; requires copy_constructible&amp;lt;V&amp;gt; { return base_; }
+    constexpr V base() &amp;amp;&amp;amp; { return std::move(base_); }
+
+    constexpr reverse_iterator&amp;lt;iterator_t&amp;lt;V&amp;gt;&amp;gt; begin() {
+      // 償却定数時間で返すためのキャッシュ
+      if (!cache_)
+        cache_ = make_reverse_iterator(ranges::next(ranges::begin(base_), ranges::end(base_)));
+      return *cache_;
+    }
+    constexpr reverse_iterator&amp;lt;iterator_t&amp;lt;V&amp;gt;&amp;gt; begin() requires common_range&amp;lt;V&amp;gt; {
+      return make_reverse_iterator(ranges::end(base_));
+    }
+    constexpr auto begin() const requires common_range&amp;lt;const V&amp;gt; {
+      return make_reverse_iterator(ranges::end(base_));
+    }
+
+    constexpr reverse_iterator&amp;lt;iterator_t&amp;lt;V&amp;gt;&amp;gt; end() {
+      return make_reverse_iterator(ranges::begin(base_));
+    }
+    constexpr auto end() const requires common_range&amp;lt;const V&amp;gt; {
+      return make_reverse_iterator(ranges::begin(base_));
+    }
+
+    constexpr auto size() requires sized_range&amp;lt;V&amp;gt; {
+      return ranges::size(base_);
+    }
+
+    constexpr auto size() const requires sized_range&amp;lt;const V&amp;gt; {
+      return ranges::size(base_);
+    }
+  };
+
+  template&amp;lt;class R&amp;gt;
+  reverse_view(R&amp;amp;&amp;amp;) -&amp;gt; reverse_view&amp;lt;views::all_t&amp;lt;R&amp;gt;&amp;gt;;
+}
+```
+* view[link view.md]
+* bidirectional_range[link bidirectional_range.md]
+* view_interface[link view_interface.md]
+* common_range[link common_range.md]
+* sized_range[link sized_range.md]
+* copyable[link /reference/concepts/copyable.md]
+* default_initializable[link /reference/concepts/default_initializable.md]
+* copy_constructible[link /reference/concepts/copy_constructible.md]
+* reverse_iterator[link /reference/iterator/reverse_iterator.md]
+* make_reverse_iterator[link /reference/iterator/make_reverse_iterator.md]
+* iterator_t[link iterator_t.md]
+* sentinel_t[link sentinel_t.md]
+* ranges::next[link /reference/iterator/ranges_next.md]
+* ranges::begin[link begin.md]
+* ranges::end[link end.md]
+* ranges::size[link size.md]
+
+
 ## バージョン
 ### 言語
 - C++20
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>common_view -- common_view 実装例を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/common_view.html"/>
      <id>8f20105008d8c88c64e121ff3bd73d2524b3673a:reference/ranges/common_view.md</id>
      <updated>2022-04-10T15:48:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/common_view.md b/reference/ranges/common_view.md
index 66031dd1f..355f071a1 100644
--- a/reference/ranges/common_view.md
+++ b/reference/ranges/common_view.md
@@ -18,7 +18,6 @@ namespace std::ranges {
 * view[link view.md]
 * view_interface[link view_interface.md]
 * common_range[link common_range.md]
-* is_object_v[link /reference/type_traits/is_object.md]
 * copyable[link /reference/concepts/copyable.md]
 * iterator_t[link iterator_t.md]
 
@@ -103,6 +102,80 @@ int main() {
 ```
 ```
 
+## 実装例
+```cpp
+namespace std::ranges {
+  template&amp;lt;view V&amp;gt;
+    requires (!common_range&amp;lt;V&amp;gt; &amp;amp;&amp;amp; copyable&amp;lt;iterator_t&amp;lt;V&amp;gt;&amp;gt;)
+  class common_view : public view_interface&amp;lt;common_view&amp;lt;V&amp;gt;&amp;gt; {
+  private:
+    V base_ = V();
+  public:
+    common_view() requires default_initializable&amp;lt;V&amp;gt; = default;
+
+    constexpr explicit common_view(V r) : base_(std::move(r)) {}
+
+    constexpr V base() const &amp;amp; requires copy_constructible&amp;lt;V&amp;gt; { return base_; }
+    constexpr V base() &amp;amp;&amp;amp; { return std::move(base_); }
+
+    constexpr auto begin() {
+      if constexpr (random_access_range&amp;lt;V&amp;gt; &amp;amp;&amp;amp; sized_range&amp;lt;V&amp;gt;)
+        return ranges::begin(base_);
+      else
+        return common_iterator&amp;lt;iterator_t&amp;lt;V&amp;gt;, sentinel_t&amp;lt;V&amp;gt;&amp;gt;(ranges::begin(base_));
+    }
+
+    constexpr auto begin() const requires range&amp;lt;const V&amp;gt; {
+      if constexpr (random_access_range&amp;lt;const V&amp;gt; &amp;amp;&amp;amp; sized_range&amp;lt;const V&amp;gt;)
+        return ranges::begin(base_);
+      else
+        return common_iterator&amp;lt;iterator_t&amp;lt;const V&amp;gt;, sentinel_t&amp;lt;const V&amp;gt;&amp;gt;(ranges::begin(base_));
+    }
+
+    constexpr auto end() {
+      if constexpr (random_access_range&amp;lt;V&amp;gt; &amp;amp;&amp;amp; sized_range&amp;lt;V&amp;gt;)
+        return ranges::begin(base_) + ranges::size(base_);
+      else
+        return common_iterator&amp;lt;iterator_t&amp;lt;V&amp;gt;, sentinel_t&amp;lt;V&amp;gt;&amp;gt;(ranges::end(base_));
+    }
+
+    constexpr auto end() const requires range&amp;lt;const V&amp;gt; {
+      if constexpr (random_access_range&amp;lt;const V&amp;gt; &amp;amp;&amp;amp; sized_range&amp;lt;const V&amp;gt;)
+        return ranges::begin(base_) + ranges::size(base_);
+      else
+        return common_iterator&amp;lt;iterator_t&amp;lt;const V&amp;gt;, sentinel_t&amp;lt;const V&amp;gt;&amp;gt;(ranges::end(base_));
+    }
+
+    constexpr auto size() requires sized_range&amp;lt;V&amp;gt; {
+      return ranges::size(base_);
+    }
+    constexpr auto size() const requires sized_range&amp;lt;const V&amp;gt; {
+      return ranges::size(base_);
+    }
+  };
+
+  template&amp;lt;class R&amp;gt;
+  common_view(R&amp;amp;&amp;amp;) -&amp;gt; common_view&amp;lt;views::all_t&amp;lt;R&amp;gt;&amp;gt;;
+}
+```
+* view[link view.md]
+* view_interface[link view_interface.md]
+* common_range[link common_range.md]
+* random_access_range[link random_access_range.md]
+* sized_range[link sized_range.md]
+* copyable[link /reference/concepts/copyable.md]
+* default_initializable[link /reference/concepts/default_initializable.md]
+* copy_constructible[link /reference/concepts/copy_constructible.md]
+* common_iterator[link /reference/iterator/common_iterator.md]
+* iterator_t[link iterator_t.md]
+* sentinel_t[link sentinel_t.md]
+* ranges::begin[link begin.md]
+* ranges::end[link end.md]
+* ranges::empty[link empty.md]
+* ranges::size[link size.md]
+* ranges::data[link data.md]
+* views::all_t[link all.md]
+
 ## バージョン
 ### 言語
 - C++20
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>common_view -- リンク修正</title>
      <link href="https://cpprefjp.github.io/reference/ranges/common_view.html"/>
      <id>4274fc320d1c1804513c642dfcfedf3ec3f0c45a:reference/ranges/common_view.md</id>
      <updated>2022-04-10T15:40:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/common_view.md b/reference/ranges/common_view.md
index 4aed848ad..66031dd1f 100644
--- a/reference/ranges/common_view.md
+++ b/reference/ranges/common_view.md
@@ -52,11 +52,11 @@ namespace std::ranges {
 
 | 名前                                             | 説明                              | 対応バージョン |
 |--------------------------------------------------|-----------------------------------|----------------|
-| [`(constructor)`](ref_view/op_constructor.md.nolink)  | コンストラクタ                    | C++20          |
-| [`base`](ref_view/base.md.nolink)                     | `R`の参照を取得する               | C++20          |
-| [`begin`](ref_view/begin.md.nolink)                   | 先頭を指すイテレータを取得する    | C++20          |
-| [`end`](ref_view/end.md.nolink)                       | 番兵を取得する                    | C++20          |
-| [`size`](ref_view/size.md.nolink)                     | 要素数を取得する                  | C++20          |
+| [`(constructor)`](common_view/op_constructor.md.nolink)  | コンストラクタ                    | C++20          |
+| [`base`](common_view/base.md.nolink)                     | `R`の参照を取得する               | C++20          |
+| [`begin`](common_view/begin.md.nolink)                   | 先頭を指すイテレータを取得する    | C++20          |
+| [`end`](common_view/end.md.nolink)                       | 番兵を取得する                    | C++20          |
+| [`size`](common_view/size.md.nolink)                     | 要素数を取得する                  | C++20          |
 
 `r`を参照先のRangeとする。`size`は、[`ranges::size`](size.md)`(r)`が有効な式であるときに定義される。
 
@@ -75,7 +75,7 @@ namespace std::ranges {
 
 | 名前                                                  | 説明                         | 対応バージョン |
 |-------------------------------------------------------|------------------------------|----------------|
-| [`(deduction_guide)`](ref_view/op_deduction_guide.md.nolink) | クラステンプレートの推論補助 | C++20          |
+| [`(deduction_guide)`](common_view/op_deduction_guide.md.nolink) | クラステンプレートの推論補助 | C++20          |
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>reverse_view -- リンク修正</title>
      <link href="https://cpprefjp.github.io/reference/ranges/reverse_view.html"/>
      <id>4274fc320d1c1804513c642dfcfedf3ec3f0c45a:reference/ranges/reverse_view.md</id>
      <updated>2022-04-10T15:40:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/reverse_view.md b/reference/ranges/reverse_view.md
index 49a406758..684fe38f4 100644
--- a/reference/ranges/reverse_view.md
+++ b/reference/ranges/reverse_view.md
@@ -51,11 +51,11 @@ namespace std::ranges {
 
 | 名前                                             | 説明                              | 対応バージョン |
 |--------------------------------------------------|-----------------------------------|----------------|
-| [`(constructor)`](ref_view/op_constructor.md.nolink)  | コンストラクタ                    | C++20          |
-| [`base`](ref_view/base.md.nolink)                     | `V`の参照を取得する               | C++20          |
-| [`begin`](ref_view/begin.md.nolink)                   | 先頭を指すイテレータを取得する    | C++20          |
-| [`end`](ref_view/end.md.nolink)                       | 番兵を取得する                    | C++20          |
-| [`size`](ref_view/size.md.nolink)                     | 要素数を取得する                  | C++20          |
+| [`(constructor)`](reverse_view/op_constructor.md.nolink)  | コンストラクタ                    | C++20          |
+| [`base`](reverse_view/base.md.nolink)                     | `V`の参照を取得する               | C++20          |
+| [`begin`](reverse_view/begin.md.nolink)                   | 先頭を指すイテレータを取得する    | C++20          |
+| [`end`](reverse_view/end.md.nolink)                       | 番兵を取得する                    | C++20          |
+| [`size`](reverse_view/size.md.nolink)                     | 要素数を取得する                  | C++20          |
 
 `r`を参照先のRangeとする。`size`は、[`ranges::size`](size.md)`(r)`が有効な式であるときに定義される。
 
@@ -74,7 +74,7 @@ namespace std::ranges {
 
 | 名前                                                  | 説明                         | 対応バージョン |
 |-------------------------------------------------------|------------------------------|----------------|
-| [`(deduction_guide)`](ref_view/op_deduction_guide.md.nolink) | クラステンプレートの推論補助 | C++20          |
+| [`(deduction_guide)`](reverse_view/op_deduction_guide.md.nolink) | クラステンプレートの推論補助 | C++20          |
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ranges -- owning_viewの説明を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges.html"/>
      <id>68a2c7c9a721a7b15d2f956ac6505a7329539258:reference/ranges.md</id>
      <updated>2022-04-10T15:38:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges.md b/reference/ranges.md
index e5fadd07d..4709e2176 100644
--- a/reference/ranges.md
+++ b/reference/ranges.md
@@ -199,8 +199,9 @@ range | adaptor(args...)
 | 名前                                    | 説明                                                                     | 対応バージョン |
 |-----------------------------------------|--------------------------------------------------------------------------|----------------|
 | [`ref_view`](ranges/ref_view.md)        | Rangeへの参照として振る舞うビュー (class template)                       | C++20          |
-| [`views::all`](ranges/ref_view.md)      | Rangeへの参照として振る舞うビューを生成する (customization point object) | C++20          |
-| [`views::all_t`](ranges/ref_view.md)    | `all`の戻り値型 (alias template)                                         | C++20          |
+| [`owning_view`](ranges/owning_view.md)  | Rangeの右辺値をムーブして所有するビュー (class template)                 | C++20          |
+| [`views::all`](ranges/all.md)           | Rangeへの参照として振る舞うビューを生成する (customization point object) | C++20          |
+| [`views::all_t`](ranges/all.md)         | `all`の戻り値型 (alias template)                                         | C++20          |
 
 ### filter view
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>all -- owning_viewの説明を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/all.html"/>
      <id>68a2c7c9a721a7b15d2f956ac6505a7329539258:reference/ranges/all.md</id>
      <updated>2022-04-10T15:38:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/all.md b/reference/ranges/all.md
new file mode 100644
index 000000000..850ce9ca8
--- /dev/null
+++ b/reference/ranges/all.md
@@ -0,0 +1,68 @@
+# all
+* ranges[meta header]
+* std::ranges[meta namespace]
+* cpo[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::ranges::views {
+  inline constexpr /*unspecified*/ all = /*unspecified*/;     // (1)
+
+  template&amp;lt;viewable_range R&amp;gt;
+  using all_t = decltype(all(declval&amp;lt;R&amp;gt;()));                  // (2)
+}
+```
+* viewable_range[link viewable_range.md]
+* declval[link /reference/utility/declval.md]
+
+## 概要
+- (1): Rangeへの参照として振る舞う[`view`](view.md)を生成するRangeアダプタクロージャオブジェクト
+- (2): `all`の戻り値の型を得るエイリアステンプレート
+
+`all`は、元のRange全体を表す[`view`](view.md)。これは、[`view`](view.md)ではないRangeを[`view`](view.md)として扱うために利用できる。
+Rangeアダプタオブジェクトでも暗黙的に使用され、それにより[`view`](view.md)かどうかを気にせず使えるようになっている。
+
+`all`が生成する`view`をまとめて&amp;#34;all view&amp;#34;という。`all_t`を使えば、`all`の型を得ることができる。
+
+## 効果
+
+式`views::all(E)`の効果は次の通り
+- `E`の[`decay`](/reference/type_traits/decay.md)した型が[`view`](view.md)のモデルであれば、[`decay-copy`](/reference/exposition-only/decay-copy.md)`(E)`と等しい
+- それ以外のとき、[`ref_view`](ref_view.md)`{E}`が有効な式であれば、[`ref_view`](ref_view.md)`{E}`と等しい
+- それ以外のとき、[`owning_view`](owning_view.md)`{E}`と等しい
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  using namespace std;
+  int a[] = {1, 2, 3, 4, 5};
+
+  for (int i : a | views::all) {
+    cout &amp;lt;&amp;lt; i;
+  }
+}
+```
+* views::all[color ff0000]
+
+### 出力
+```
+12345
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4892 24 Ranges library](https://timsong-cpp.github.io/cppwp/ranges)
+- [C++20 ranges](https://techbookfest.org/product/5134506308665344)
+- [［C++］ &amp;lt;ranges&amp;gt;のviewを見る19 - owning_view](https://zenn.dev/onihusube/articles/fd07528b68ae0c)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>common_view -- owning_viewの説明を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/common_view.html"/>
      <id>68a2c7c9a721a7b15d2f956ac6505a7329539258:reference/ranges/common_view.md</id>
      <updated>2022-04-10T15:38:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/common_view.md b/reference/ranges/common_view.md
index 54dc52a9a..4aed848ad 100644
--- a/reference/ranges/common_view.md
+++ b/reference/ranges/common_view.md
@@ -45,7 +45,7 @@ namespace std::ranges {
 ## 効果
 
 - (2): 式`views::common(E)`の効果は次の通り
-    - [`decltype`](/lang/cpp11/decltype.md)`((E))`が[`common_range`](common_range.md)のモデルであり、[`views::all`](ref_view.md)`(E)`が有効な式であれば、[`views::all`](ref_view.md)`(E)`と等しい
+    - [`decltype`](/lang/cpp11/decltype.md)`((E))`が[`common_range`](common_range.md)のモデルであり、[`views::all`](all.md)`(E)`が有効な式であれば、[`views::all`](all.md)`(E)`と等しい
     - それ以外のとき、`common_view{E}`と等しい
 
 ## メンバ関数
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>contiguous_range -- owning_viewの説明を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/contiguous_range.html"/>
      <id>68a2c7c9a721a7b15d2f956ac6505a7329539258:reference/ranges/contiguous_range.md</id>
      <updated>2022-04-10T15:38:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/contiguous_range.md b/reference/ranges/contiguous_range.md
index 061f27a31..09451f7d8 100644
--- a/reference/ranges/contiguous_range.md
+++ b/reference/ranges/contiguous_range.md
@@ -48,7 +48,7 @@ int main() {
 ```
 * ranges::contiguous_range[color ff0000]
 * ranges::elements_view[link elements_view.md]
-* ranges::views::all_t[link ref_view.md]
+* ranges::views::all_t[link all.md]
 * ranges::random_access_range[link random_access_range.md]
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>elements_view -- owning_viewの説明を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/elements_view.html"/>
      <id>68a2c7c9a721a7b15d2f956ac6505a7329539258:reference/ranges/elements_view.md</id>
      <updated>2022-04-10T15:38:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/elements_view.md b/reference/ranges/elements_view.md
index 3cf3a481d..bb6cc5924 100644
--- a/reference/ranges/elements_view.md
+++ b/reference/ranges/elements_view.md
@@ -32,7 +32,7 @@ namespace std::ranges {
 * remove_reference_t[link /reference/type_traits/remove_reference.md]
 * range_reference_t[link range_reference_t.md]
 * view_interface[link view_interface.md]
-* views::all_t[link ref_view.md]
+* views::all_t[link all.md]
 
 ## 概要
 
@@ -84,7 +84,7 @@ concept has-tuple-element =
 
 ## 効果
 
-- (4): `E`を部分式、`N`を定数式とするとき、式`views::elements&amp;lt;N&amp;gt;(E)`の効果は`elements_view&amp;lt;`[`views::all_t`](ref_view.md)`&amp;lt;`[`decltype`](/lang/cpp11/decltype.md)`((E))&amp;gt;, N&amp;gt;{E}`と等しい。
+- (4): `E`を部分式、`N`を定数式とするとき、式`views::elements&amp;lt;N&amp;gt;(E)`の効果は`elements_view&amp;lt;`[`views::all_t`](all.md)`&amp;lt;`[`decltype`](/lang/cpp11/decltype.md)`((E))&amp;gt;, N&amp;gt;{E}`と等しい。
 
 ## メンバ関数
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>owning_view -- owning_viewの説明を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/owning_view.html"/>
      <id>68a2c7c9a721a7b15d2f956ac6505a7329539258:reference/ranges/owning_view.md</id>
      <updated>2022-04-10T15:38:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/owning_view.md b/reference/ranges/owning_view.md
new file mode 100644
index 000000000..873b0b228
--- /dev/null
+++ b/reference/ranges/owning_view.md
@@ -0,0 +1,173 @@
+# owning_view
+* ranges[meta header]
+* std::ranges[meta namespace]
+* class template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;range R&amp;gt;
+    requires movable&amp;lt;R&amp;gt; &amp;amp;&amp;amp; (!is-initializer-list&amp;lt;R&amp;gt;)
+  class owning_view : public view_interface&amp;lt;owning_view&amp;lt;R&amp;gt;&amp;gt; { …… };
+}
+```
+* range[link range.md]
+* movable[link /reference/concepts/movable.md]
+* is-initializer-list[italic]
+* view_interface[link view_interface.md]
+
+## 概要
+Rangeの右辺値をムーブして所有する[`view`](view.md)。このクラスのオブジェクトは、Rangeアダプタ[`all`](all.md)によって生成される。
+
+### Rangeコンセプト
+
+| borrowed | sized | output | input | forward | bidirectional | random_access | contiguous | common | viewable | view |
+|----------|-------|--------|-------|---------|---------------|---------------|------------|--------|----------|------|
+|          | ※    | ※     | ※    | ※      | ※            | ※            | ※         | ※     | ○       | ○   |
+
+※ 参照先のRangeに従う
+
+## メンバ関数
+
+| 名前                                             | 説明                              | 対応バージョン |
+|--------------------------------------------------|-----------------------------------|----------------|
+| [`(constructor)`](owning_view/op_constructor.md.nolink)  | コンストラクタ                    | C++20          |
+| [`base`](owning_view/base.md.nolink)                     | `R`の参照を取得する               | C++20          |
+| [`begin`](owning_view/begin.md.nolink)                   | 先頭を指すイテレータを取得する    | C++20          |
+| [`end`](owning_view/end.md.nolink)                       | 番兵を取得する                    | C++20          |
+| [`empty`](owning_view/empty.md.nolink)                   | Rangeが空かどうかを判定する       | C++20          |
+| [`size`](owning_view/size.md.nolink)                     | 要素数を取得する                  | C++20          |
+| [`data`](owning_view/data.md.nolink)                     | Rangeの先頭へのポインタを取得する | C++20          |
+
+`r`を参照先のRangeとする。`empty`、`size`、`data`は、それぞれ[`ranges::empty`](empty.md)`(r)`、[`ranges::size`](size.md)`(r)`、[`ranges::data`](data.md)`(r)`が有効な式であるときに定義される。
+
+## 継承しているメンバ関数
+
+| 名前                                         | 説明                              | 対応バージョン |
+|----------------------------------------------|-----------------------------------|----------------|
+| [`operator bool`](view_interface/op_bool.md) | Rangeが空でないかどうかを判定する | C++20          |
+| [`front`](view_interface/front.md)           | 先頭要素への参照を取得する        | C++20          |
+| [`back`](view_interface/back.md)             | 末尾要素への参照を取得する        | C++20          |
+| [`operator[]`](view_interface/op_at.md)      | 要素へアクセスする                | C++20          |
+
+## 推論補助
+
+| 名前                                                  | 説明                         | 対応バージョン |
+|-------------------------------------------------------|------------------------------|----------------|
+| [`(deduction_guide)`](owning_view/op_deduction_guide.md.nolink) | クラステンプレートの推論補助 | C++20          |
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  auto ov1 = std::views::all(std::vector&amp;lt;int&amp;gt;{1, 2, 3});
+  for (int n : ov1) {
+    std::cout &amp;lt;&amp;lt; n;  // 123
+  }
+
+  std::cout &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+
+  auto ov2 = std::vector&amp;lt;int&amp;gt;{1, 2, 3} | std::views::all;
+  for (int n : ov2) {
+    std::cout &amp;lt;&amp;lt; n;  // 123
+  }
+}
+```
+* views::all[link all.md]
+
+### 出力
+```
+123
+123
+```
+
+
+## 実装例
+```cpp
+namespace std::ranges {
+  template&amp;lt;range R&amp;gt;
+    requires movable&amp;lt;R&amp;gt; &amp;amp;&amp;amp; (!is-initializer-list&amp;lt;R&amp;gt;)
+  class owning_view : public view_interface&amp;lt;owning_view&amp;lt;R&amp;gt;&amp;gt; {
+  private:
+    R r_ = R();
+  public:
+    owning_view() requires default_initializable&amp;lt;R&amp;gt; = default;
+    constexpr owning_view(R&amp;amp;&amp;amp; t) : r_(std::move(t)) {}
+
+    owning_view(owning_view&amp;amp;&amp;amp;) = default;
+    owning_view&amp;amp; operator=(owning_view&amp;amp;&amp;amp;) = default;
+
+    constexpr R&amp;amp; base() &amp;amp; noexcept { return r_; }
+    constexpr const R&amp;amp; base() const &amp;amp; noexcept { return r_; }
+    constexpr R&amp;amp;&amp;amp; base() &amp;amp;&amp;amp; noexcept { return std::move(r_); }
+    constexpr const R&amp;amp;&amp;amp; base() const &amp;amp;&amp;amp; noexcept { return std::move(r_); }
+
+    constexpr iterator_t&amp;lt;R&amp;gt; begin() { return ranges::begin(r_); }
+    constexpr sentinel_t&amp;lt;R&amp;gt; end() { return ranges::end(r_); }
+
+    constexpr auto begin() const requires range&amp;lt;const R&amp;gt; {
+      return ranges::begin(r_);
+    }
+    constexpr auto end() const requires range&amp;lt;const R&amp;gt; {
+      return ranges::end(r_);
+    }
+
+    constexpr bool empty() requires requires { ranges::empty(r_); } {
+      return ranges::empty(r_);
+    }
+    constexpr bool empty() const requires requires { ranges::empty(r_); } {
+      return ranges::empty(r_);
+    }
+
+    constexpr auto size() requires sized_range&amp;lt;R&amp;gt; {
+      return ranges::size(r_);
+    }
+    constexpr auto size() const requires sized_range&amp;lt;const R&amp;gt; {
+      return ranges::size(r_);
+    }
+
+    constexpr auto data() requires contiguous_range&amp;lt;R&amp;gt; {
+      return ranges::data(r_);
+    }
+    constexpr auto data() const requires contiguous_range&amp;lt;const R&amp;gt; {
+      return ranges::data(r_);
+    }
+  };
+}
+```
+* is-initializer-list[italic]
+* range[link range.md]
+* is_object_v[link /reference/type_traits/is_object.md]
+* default_initializable[link /reference/concepts/default_initializable.md]
+* declval[link /reference/utility/declval.md]
+* std::forward[link /reference/utility/forward.md]
+* addressof[link /reference/memory/addressof.md]
+* same_as[link /reference/concepts/same_as.md]
+* iterator_t[link iterator_t.md]
+* sentinel_t[link sentinel_t.md]
+* ranges::begin[link begin.md]
+* ranges::end[link end.md]
+* ranges::empty[link empty.md]
+* ranges::size[link size.md]
+* ranges::data[link data.md]
+* sized_range[link sized_range.md]
+* contiguous_range[link contiguous_range.md]
+* view_interface[link view_interface.md]
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4892 24 Ranges library](https://timsong-cpp.github.io/cppwp/ranges)
+- [C++20 ranges](https://techbookfest.org/product/5134506308665344)
+- [［C++］ &amp;lt;ranges&amp;gt;のviewを見る19 - owning_view](https://zenn.dev/onihusube/articles/fd07528b68ae0c)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ref_view -- owning_viewの説明を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/ref_view.html"/>
      <id>68a2c7c9a721a7b15d2f956ac6505a7329539258:reference/ranges/ref_view.md</id>
      <updated>2022-04-10T15:38:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/ref_view.md b/reference/ranges/ref_view.md
index 4f21528c7..96f37ff23 100644
--- a/reference/ranges/ref_view.md
+++ b/reference/ranges/ref_view.md
@@ -8,28 +8,16 @@
 namespace std::ranges {
   template&amp;lt;range R&amp;gt;
     requires is_object_v&amp;lt;R&amp;gt;
-  class ref_view : public view_interface&amp;lt;ref_view&amp;lt;R&amp;gt;&amp;gt; { …… };   // (1)
-
-  namespace views {
-    inline constexpr /*unspecified*/ all = /*unspecified*/;     // (2)
-
-    template&amp;lt;viewable_range R&amp;gt;
-    using all_t = decltype(all(declval&amp;lt;R&amp;gt;()));                  // (3)
-  }
+  class ref_view : public view_interface&amp;lt;ref_view&amp;lt;R&amp;gt;&amp;gt; { …… };
 }
 ```
 * range[link range.md]
 * is_object_v[link /reference/type_traits/is_object.md]
-* movable[link /reference/concepts/movable.md]
-* default_initializable[link /reference/concepts/default_initializable.md]
-* viewable_range[link viewable_range.md]
 * view_interface[link view_interface.md]
-* declval[link /reference/utility/declval.md]
 
 ## 概要
-- (1): Rangeへの参照として振る舞う[`view`](view.md)
-- (2): Rangeへの参照として振る舞う[`view`](view.md)を生成するRangeアダプタクロージャオブジェクト。`all`の戻り値は`ref_view`の他に、元のRangeそのものや[`subrange`](subrange.md)の場合があり、まとめて&amp;#34;all view&amp;#34;と呼ぶことがある
-- (3): `all`の戻り値の型を得るエイリアステンプレート。`all_t`を使えば、`all`の分岐を気にせずに&amp;#34;all view&amp;#34;の型を得ることができる
+
+Rangeへの参照として振る舞う[`view`](view.md)。このクラスのオブジェクトは、Rangeアダプタ[`all`](all.md)によって生成される。
 
 ### Rangeコンセプト
 
@@ -39,20 +27,6 @@ namespace std::ranges {
 
 ※ 参照先のRangeに従う
 
-## テンプレートパラメータ制約
-
-- [`range`](range.md)`&amp;lt;R&amp;gt;`
-- [`is_object_v`](/reference/type_traits/is_object.md)`&amp;lt;R&amp;gt;`
-
-## 効果
-
-- (2): 式`views::all(E)`の効果は次の通り
-    - `E`の[`decay`](/reference/type_traits/decay.md)した型が[`view`](view.md)のモデルであれば、[`decay-copy`](/reference/exposition-only/decay-copy.md)`(E)`と等しい
-    - それ以外のとき、`ref_view{E}`が有効な式であれば、`ref_view{E}`と等しい
-    - それ以外のとき、[`subrange`](subrange.md)`{E}`と等しい
-
-引数にしたRangeが元々[`view`](view.md)である場合はそのまま使用する。そうでないときは、まず引数を`ref_view`でラップしようとする。それもできないときは、イテレータと番兵を[`subrange`](subrange.md)でラップする。
-
 ## メンバ関数
 
 | 名前                                             | 説明                              | 対応バージョン |
@@ -96,13 +70,79 @@ int main() {
   }
 }
 ```
-* views::all[color ff0000]
+* views::all[link all.md]
 
 ### 出力
 ```
 12345
 ```
 
+## 実装例
+```cpp
+namespace std::ranges {
+  template&amp;lt;class T, class U&amp;gt;
+  concept __different_from = !same_as&amp;lt;remove_cvref_t&amp;lt;T&amp;gt;, remove_cvref_t&amp;lt;U&amp;gt;&amp;gt;;
+
+  void __FUN(R&amp;amp;);
+  void __FUN(R&amp;amp;&amp;amp;) = delete;
+
+  template&amp;lt;range R&amp;gt;
+    requires is_object_v&amp;lt;R&amp;gt;
+  class ref_view : public view_interface&amp;lt;ref_view&amp;lt;R&amp;gt;&amp;gt; {
+  private:
+    R* r_;
+  public:
+    template&amp;lt;__different_from&amp;lt;ref_view&amp;gt; T&amp;gt;
+      requires convertible_to&amp;lt;T, R&amp;amp;&amp;gt; &amp;amp;&amp;amp; requires { __FUN(declval&amp;lt;T&amp;gt;()); }
+    constexpr ref_view(T&amp;amp;&amp;amp; t) : r_(addressof(static_cast&amp;lt;R&amp;amp;&amp;gt;(std::forward&amp;lt;T&amp;gt;(t)))) {}
+
+    constexpr R&amp;amp; base() const { return *r_; }
+
+    constexpr iterator_t&amp;lt;R&amp;gt; begin() const {
+      return ranges::begin(*r_);
+    }
+
+    constexpr sentinel_t&amp;lt;R&amp;gt; end() const {
+      return ranges::end(*r_);
+    }
+
+    constexpr bool empty() const requires requires { ranges::empty(*r_); } {
+      return ranges::empty(*r_);
+    }
+
+    constexpr auto size() const requires sized_range&amp;lt;R&amp;gt; {
+      return ranges::size(*r_);
+    }
+
+    constexpr auto data() const requires contiguous_range&amp;lt;R&amp;gt; {
+      return ranges::data(*r_);
+    }
+  };
+
+  template&amp;lt;class R&amp;gt;
+  ref_view(R&amp;amp;) -&amp;gt; ref_view&amp;lt;R&amp;gt;;
+}
+```
+* is-initializer-list[italic]
+* range[link range.md]
+* is_object_v[link /reference/type_traits/is_object.md]
+* convertible_to[link /reference/concepts/convertible_to.md]
+* remove_cvref_t[link /reference/type_traits/remove_cvref.md]
+* declval[link /reference/utility/declval.md]
+* std::forward[link /reference/utility/forward.md]
+* addressof[link /reference/memory/addressof.md]
+* same_as[link /reference/concepts/same_as.md]
+* iterator_t[link iterator_t.md]
+* sentinel_t[link sentinel_t.md]
+* ranges::begin[link begin.md]
+* ranges::end[link end.md]
+* ranges::empty[link empty.md]
+* ranges::size[link size.md]
+* ranges::data[link data.md]
+* sized_range[link sized_range.md]
+* contiguous_range[link contiguous_range.md]
+* view_interface[link view_interface.md]
+
 ## バージョン
 ### 言語
 - C++20
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
</feed>
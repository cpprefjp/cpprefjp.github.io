<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-10-14T14:47:17.932760</updated>
  <id>036f663c-3beb-4c30-9c1d-0adf7464453e</id>

  
    <entry>
      <title>execution -- execution: P3552R3 エンティティ列挙のみ (#1521)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution.html"/>
      <id>85387aabaabf4946531c32e13023688627219473:reference/execution/execution.md</id>
      <updated>2025-10-14T22:10:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution.md b/reference/execution/execution.md
index 4c1346b44..b6af20ac8 100644
--- a/reference/execution/execution.md
+++ b/reference/execution/execution.md
@@ -160,6 +160,12 @@ Senderコンシューマは名前空間 `std::this_thread` および名前空間
 |------|------|----------------|
 | [`execution::as_awaitable`](execution/as_awaitable.md) | Senderを[Awaitable型](/lang/cpp20/coroutines.md)へ変換 (customization point object) | C++26 |
 | [`execution::with_awaitable_senders`](execution/with_awaitable_senders.md) | [Promise型](/lang/cpp20/coroutines.md)の基底クラス (class template) | C++26 |
+| [`execution::affine_on`](execution/affine_on.md.nolink) | (customization point object) | C++26 |
+| [`execution::inline_scheduler`](execution/inline_scheduler.md.nolink) | インラインScheduler (class) | C++26 |
+| [`execution::task_scheduler`](execution/task_scheduler.md.nolink) | 型消去タスクScheduler (class) | C++26 |
+| [`execution::with_error`](execution/with_error.md.nolink) | コルーチンからのエラー完了 (class template) | C++26 |
+| [`execution::change_coroutine_scheduler`](execution/change_coroutine_scheduler.md.nolink) | コルーチンのScheduler変更 (class template) | C++26 |
+| [`execution::task`](execution/task.md.nolink) | 非同期タスクコルーチン戻り値型 (class template) | C++26 |
 
 ### 実行スコープユーティリティ
 
@@ -190,6 +196,7 @@ Senderコンシューマは名前空間 `std::this_thread` および名前空間
 - [P3149R11 `async_scope` - Creating scopes for non-sequential concurrency](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3149r11.html)
 - [P3284R4 `write_env` and `unstoppable` Sender Adaptors](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3284r4.html)
 - [P3481R5 `std::execution::bulk()` issues](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3481r5.html)
+- [P3552R3 Add a Coroutine Task Type](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3552r3.html)
 - [P3557R3 High-Quality Sender Diagnostics with Constexpr Exceptions](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3557r3.html)
 - [P3570R2 optional variants in sender/receiver](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3570r2.html)
 - [P3682R0 Remove `std::execution::split`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3682r0.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>可変長データを扱うクラスの効率的なdelete [P0722R3] -- 可変長データを扱うクラスの効率的なdelete : コード例を修正</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/efficient_sized_delete_for_variable_sized_classes.html"/>
      <id>71fab6aa524f83154f1c7ad81ff3aff60d7fd44f:lang/cpp20/efficient_sized_delete_for_variable_sized_classes.md</id>
      <updated>2025-10-14T19:29:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/efficient_sized_delete_for_variable_sized_classes.md b/lang/cpp20/efficient_sized_delete_for_variable_sized_classes.md
index 39a311846..ed1d91130 100644
--- a/lang/cpp20/efficient_sized_delete_for_variable_sized_classes.md
+++ b/lang/cpp20/efficient_sized_delete_for_variable_sized_classes.md
@@ -202,7 +202,7 @@ public:
   inlined_fixed_string() = delete;
 
   auto size() const -&amp;gt; std::size_t {
-    return length;
+    return length - 1;
   }
 
   auto view() const -&amp;gt; std::string_view {
@@ -232,12 +232,12 @@ public:
     // 末尾領域の長さを取得
     const std::size_t full_size = sizeof(inlined_fixed_string) + p-&amp;gt;length;
 
+    // char（トリビアルに破棄可能な）型はデストラクタ呼び出しを省略可能
+    std::ranges::destroy(reinterpret_cast&amp;lt;char*&amp;gt;(p + 1), reinterpret_cast&amp;lt;char*&amp;gt;(p + 1) + p-&amp;gt;length);
+
     // デストラクタ呼び出し
     std::destroy_at(p);
 
-    // char（トリビアルに破棄可能な）型はデストラクタ呼び出しを省略可能
-    std::ranges::destroy(p + 1, p + 1 + p-&amp;gt;length + 1);
-
     // メモリ解放
     ::operator delete(p, full_size);
     
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>spawn_future -- execution::spawn_future : Typo、リンクを修正</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/spawn_future.html"/>
      <id>4e673b3e0c8b38e78c71560af53b492cb7727be6:reference/execution/execution/spawn_future.md</id>
      <updated>2025-10-14T19:23:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/spawn_future.md b/reference/execution/execution/spawn_future.md
index c11c232dd..d52b97629 100644
--- a/reference/execution/execution/spawn_future.md
+++ b/reference/execution/execution/spawn_future.md
@@ -141,7 +141,7 @@ namespace std::execution {
 * exception_ptr[link /reference/exception/exception_ptr.md]
 * current_exception()[link /reference/exception/current_exception.md]
 
-型`ssource-t`を[`stoppabe-source`](/reference/stop_token/stoppable-source.md)のモデルである未規定の型、`ssource`を型`ssource-t`の左辺値とする。
+型`ssource-t`を[`stoppable-source`](/reference/stop_token/stoppable-source.md)のモデルである未規定の型、`ssource`を型`ssource-t`の左辺値とする。
 型`stoken-t`を`decltype(ssource.get_token())`とする。
 
 ### エイリアステンプレート `future-spawned-sender`
@@ -199,7 +199,7 @@ namespace std::execution {
   };
 }
 ```
-* scope_token[link /reference/stop_token/stop_token.md]
+* scope_token[link scope_token.md]
 * sender[link sender.md]
 * completion_signatures_of_t[link completion_signatures_of_t.md]
 * receiver[link receiver.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>allocate_shared -- C++26対応としてshared_ptr関連をconstexpr対応 #1500</title>
      <link href="https://cpprefjp.github.io/reference/memory/allocate_shared.html"/>
      <id>97c5f4bd841835d9f91a9fc657881c9f3230cbca:reference/memory/allocate_shared.md</id>
      <updated>2025-10-14T14:41:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/allocate_shared.md b/reference/memory/allocate_shared.md
index 62aa625e2..25e51ca62 100644
--- a/reference/memory/allocate_shared.md
+++ b/reference/memory/allocate_shared.md
@@ -7,21 +7,43 @@
 ```cpp
 namespace std {
   template&amp;lt;class T, class Alloc, class... Args&amp;gt;
-  shared_ptr&amp;lt;T&amp;gt; allocate_shared(const Alloc&amp;amp; a, Args&amp;amp;&amp;amp;... args); // (1)
+  shared_ptr&amp;lt;T&amp;gt;
+    allocate_shared(const Alloc&amp;amp; a, Args&amp;amp;&amp;amp;... args); // (1) C++11
+  template&amp;lt;class T, class Alloc, class... Args&amp;gt;
+  constexpr shared_ptr&amp;lt;T&amp;gt;
+    allocate_shared(const Alloc&amp;amp; a, Args&amp;amp;&amp;amp;... args); // (1) C++26
 
   template&amp;lt;class T, class A&amp;gt;
-  shared_ptr&amp;lt;T&amp;gt; allocate_shared(const A&amp;amp; a, size_t N);           // (2) C++20 から
+  shared_ptr&amp;lt;T&amp;gt;
+    allocate_shared(const A&amp;amp; a, size_t N);           // (2) C++20
+  template&amp;lt;class T, class A&amp;gt;
+  constexpr shared_ptr&amp;lt;T&amp;gt;
+    allocate_shared(const A&amp;amp; a, size_t N);           // (2) C++26
 
   template&amp;lt;class T, class A&amp;gt;
-  shared_ptr&amp;lt;T&amp;gt; allocate_shared(const A&amp;amp; a);                     // (3) C++20 から
+  shared_ptr&amp;lt;T&amp;gt;
+    allocate_shared(const A&amp;amp; a);                     // (3) C++20
+  template&amp;lt;class T, class A&amp;gt;
+  constexpr shared_ptr&amp;lt;T&amp;gt;
+    allocate_shared(const A&amp;amp; a);                     // (3) C++26
 
   template&amp;lt;class T, class A&amp;gt;
-  shared_ptr&amp;lt;T&amp;gt; allocate_shared(const A&amp;amp; a, size_t N,
-                                const remove_extent_t&amp;lt;T&amp;gt;&amp;amp; u);    // (4) C++20 から
+  shared_ptr&amp;lt;T&amp;gt;
+    allocate_shared(const A&amp;amp; a, size_t N,
+                    const remove_extent_t&amp;lt;T&amp;gt;&amp;amp; u);    // (4) C++20
+  template&amp;lt;class T, class A&amp;gt;
+  constexpr shared_ptr&amp;lt;T&amp;gt;
+    allocate_shared(const A&amp;amp; a, size_t N,
+                    const remove_extent_t&amp;lt;T&amp;gt;&amp;amp; u);    // (4) C++26
 
   template&amp;lt;class T, class A&amp;gt;
-  shared_ptr&amp;lt;T&amp;gt; allocate_shared(const A&amp;amp; a,
-                                const remove_extent_t&amp;lt;T&amp;gt;&amp;amp; u);    // (5) C++20 から  
+  shared_ptr&amp;lt;T&amp;gt;
+    allocate_shared(const A&amp;amp; a,
+                    const remove_extent_t&amp;lt;T&amp;gt;&amp;amp; u);    // (5) C++20
+  template&amp;lt;class T, class A&amp;gt;
+  constexpr shared_ptr&amp;lt;T&amp;gt;
+    allocate_shared(const A&amp;amp; a,
+                    const remove_extent_t&amp;lt;T&amp;gt;&amp;amp; u);    // (5) C++26
 }
 ```
 * shared_ptr[link shared_ptr.md]
@@ -135,3 +157,4 @@ int main() {
 
 ## 参照
 - [P0674R1 Extending `make_shared` to support arrays](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0674r1.html)
+- [P3037R6 `constexpr std::shared_ptr` and friends](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3037r6.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>allocate_shared_for_overwrite -- C++26対応としてshared_ptr関連をconstexpr対応 #1500</title>
      <link href="https://cpprefjp.github.io/reference/memory/allocate_shared_for_overwrite.html"/>
      <id>97c5f4bd841835d9f91a9fc657881c9f3230cbca:reference/memory/allocate_shared_for_overwrite.md</id>
      <updated>2025-10-14T14:41:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/allocate_shared_for_overwrite.md b/reference/memory/allocate_shared_for_overwrite.md
index efc54ee6f..e7f47f2b5 100644
--- a/reference/memory/allocate_shared_for_overwrite.md
+++ b/reference/memory/allocate_shared_for_overwrite.md
@@ -7,10 +7,18 @@
 ```cpp
 namespace std {
   template&amp;lt;class T, class A&amp;gt;
-  shared_ptr&amp;lt;T&amp;gt; allocate_shared_for_overwrite(const A&amp;amp; a);           // (1)
+  shared_ptr&amp;lt;T&amp;gt;
+    allocate_shared_for_overwrite(const A&amp;amp; a);           // (1) C++20
+  template&amp;lt;class T, class A&amp;gt;
+  constexpr shared_ptr&amp;lt;T&amp;gt;
+    allocate_shared_for_overwrite(const A&amp;amp; a);           // (1) C++26
 
   template&amp;lt;class T, class A&amp;gt;
-  shared_ptr&amp;lt;T&amp;gt; allocate_shared_for_overwrite(const A&amp;amp; a, size_t N); // (2)
+  shared_ptr&amp;lt;T&amp;gt;
+    allocate_shared_for_overwrite(const A&amp;amp; a, size_t N); // (2) C++20
+  template&amp;lt;class T, class A&amp;gt;
+  constexpr shared_ptr&amp;lt;T&amp;gt;
+    allocate_shared_for_overwrite(const A&amp;amp; a, size_t N); // (2) C++26
 }
 ```
 * shared_ptr[link shared_ptr.md]
@@ -98,3 +106,4 @@ int main() {
 ## 参照
 - [P1020R1 Smart pointer creation with default initialization](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1020r1.html)
 - [P1973R1 Rename &amp;#34;_default_init&amp;#34; Functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1973r1.pdf)
+- [P3037R6 `constexpr std::shared_ptr` and friends](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3037r6.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atomic -- C++26対応としてshared_ptr関連をconstexpr対応 #1500</title>
      <link href="https://cpprefjp.github.io/reference/memory/atomic.html"/>
      <id>97c5f4bd841835d9f91a9fc657881c9f3230cbca:reference/memory/atomic.md</id>
      <updated>2025-10-14T14:41:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/atomic.md b/reference/memory/atomic.md
index 9d97732a0..9af6f75ae 100644
--- a/reference/memory/atomic.md
+++ b/reference/memory/atomic.md
@@ -110,3 +110,4 @@ int main()
 - [P0718R2 Revising `atomic_shared_ptr` for C++20](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0718r2.html)
 - [cplusplus/draft #2824 - add forward declaration of `atomic` class for `atomic&amp;lt;shared_ptr&amp;lt;T&amp;gt;&amp;gt;` (P0718R2)](https://github.com/cplusplus/draft/pull/2824)
 - [P1644R0 Add wait/notify to `atomic&amp;lt;shared_ptr&amp;lt;T&amp;gt;&amp;gt;`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1644r0.html)
+- [P3037R6 `constexpr std::shared_ptr` and friends](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3037r6.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>bad_weak_ptr -- C++26対応としてshared_ptr関連をconstexpr対応 #1500</title>
      <link href="https://cpprefjp.github.io/reference/memory/bad_weak_ptr.html"/>
      <id>97c5f4bd841835d9f91a9fc657881c9f3230cbca:reference/memory/bad_weak_ptr.md</id>
      <updated>2025-10-14T14:41:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/bad_weak_ptr.md b/reference/memory/bad_weak_ptr.md
index 46974d88e..8525fc4cf 100644
--- a/reference/memory/bad_weak_ptr.md
+++ b/reference/memory/bad_weak_ptr.md
@@ -23,7 +23,7 @@ namespace std {
 | `bad_weak_ptr() noexcept;`&amp;lt;br/&amp;gt;`bad_weak_ptr(const bad_weak_ptr&amp;amp;) noexcept;` | コンストラクタ | C++11 |
 | `virtual ~bad_weak_ptr() = default;`                     | デストラクタ | C++11 |
 | `bad_weak_ptr&amp;amp; operator=(const bad_weak_ptr&amp;amp;) noexcept;` | 代入演算子 | C++11 |
-| `virtual const char* what() const noexcept;`             | エラー内容を取得する。文字列`&amp;#34;bad_weak_ptr&amp;#34;`が返される | C++11 |
+| [`what()`](bad_weak_ptr/what.md)                         | エラー内容を取得する。文字列`&amp;#34;bad_weak_ptr&amp;#34;`が返される | C++11 |
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>what -- C++26対応としてshared_ptr関連をconstexpr対応 #1500</title>
      <link href="https://cpprefjp.github.io/reference/memory/bad_weak_ptr/what.html"/>
      <id>97c5f4bd841835d9f91a9fc657881c9f3230cbca:reference/memory/bad_weak_ptr/what.md</id>
      <updated>2025-10-14T14:41:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/bad_weak_ptr/what.md b/reference/memory/bad_weak_ptr/what.md
new file mode 100644
index 000000000..75f226872
--- /dev/null
+++ b/reference/memory/bad_weak_ptr/what.md
@@ -0,0 +1,23 @@
+# what
+* memory[meta header]
+* std[meta namespace]
+* bad_weak_ptr[meta class]
+* function[meta id-type]
+* cpp11[meta cpp]
+
+```cpp
+virtual const char* what() const noexcept;            // (1) C++11
+const char* what() const noexcept override;           // (1) C++17
+constexpr const char* what() const noexcept override; // (1) C++26
+```
+
+## 概要
+エラー理由となる実装依存文字列を取得する。
+
+
+## 例外
+投げない
+
+
+## 参照
+- [P3037R6 `constexpr std::shared_ptr` and friends](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3037r6.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- C++26対応としてshared_ptr関連をconstexpr対応 #1500</title>
      <link href="https://cpprefjp.github.io/reference/memory/enable_shared_from_this/op_assign.html"/>
      <id>97c5f4bd841835d9f91a9fc657881c9f3230cbca:reference/memory/enable_shared_from_this/op_assign.md</id>
      <updated>2025-10-14T14:41:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/enable_shared_from_this/op_assign.md b/reference/memory/enable_shared_from_this/op_assign.md
index 047c1b27e..f54fb062f 100644
--- a/reference/memory/enable_shared_from_this/op_assign.md
+++ b/reference/memory/enable_shared_from_this/op_assign.md
@@ -6,7 +6,10 @@
 * cpp11[meta cpp]
 
 ```cpp
-enable_shared_from_this&amp;amp; operator=(const enable_shared_from_this&amp;amp;) noexcept;
+enable_shared_from_this&amp;amp;
+  operator=(const enable_shared_from_this&amp;amp;) noexcept; // (1) C++11
+constexpr enable_shared_from_this&amp;amp;
+  operator=(const enable_shared_from_this&amp;amp;) noexcept; // (1) C++26
 ```
 
 ## 概要
@@ -27,3 +30,7 @@ enable_shared_from_this&amp;amp; operator=(const enable_shared_from_this&amp;amp;) noexcept;
 - [Clang](/implementation.md#clang): 3.0 [mark verified]
 - [ICC](/implementation.md#icc): ?
 - [Visual C++](/implementation.md#visual_cpp): 2008 (TR1) [mark verified], 2010 [mark verified], 2012 [mark verified], 2013 [mark verified]
+
+
+## 参照
+- [P3037R6 `constexpr std::shared_ptr` and friends](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3037r6.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- C++26対応としてshared_ptr関連をconstexpr対応 #1500</title>
      <link href="https://cpprefjp.github.io/reference/memory/enable_shared_from_this/op_constructor.html"/>
      <id>97c5f4bd841835d9f91a9fc657881c9f3230cbca:reference/memory/enable_shared_from_this/op_constructor.md</id>
      <updated>2025-10-14T14:41:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/enable_shared_from_this/op_constructor.md b/reference/memory/enable_shared_from_this/op_constructor.md
index 114cb916f..938d67f5d 100644
--- a/reference/memory/enable_shared_from_this/op_constructor.md
+++ b/reference/memory/enable_shared_from_this/op_constructor.md
@@ -6,8 +6,12 @@
 * cpp11[meta cpp]
 
 ```cpp
-constexpr enable_shared_from_this() noexcept;                     // (1)
-enable_shared_from_this(const enable_shared_from_this&amp;amp;) noexcept; // (2)
+constexpr
+enable_shared_from_this() noexcept;                               // (1) C++11
+
+enable_shared_from_this(const enable_shared_from_this&amp;amp;) noexcept; // (2) C++11
+constexpr
+enable_shared_from_this(const enable_shared_from_this&amp;amp;) noexcept; // (2) C++26
 ```
 
 ## enable_shared_from_thisオブジェクトの構築
@@ -33,3 +37,4 @@ enable_shared_from_this(const enable_shared_from_this&amp;amp;) noexcept; // (2)
 ## 参照
 - [P0033R0 Re-enabling `shared_from_this`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0033r0.html)
 - [P0033R1 Re-enabling `shared_from_this` (revision 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0033r1.html)
+- [P3037R6 `constexpr std::shared_ptr` and friends](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3037r6.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>デストラクタ -- C++26対応としてshared_ptr関連をconstexpr対応 #1500</title>
      <link href="https://cpprefjp.github.io/reference/memory/enable_shared_from_this/op_destructor.html"/>
      <id>97c5f4bd841835d9f91a9fc657881c9f3230cbca:reference/memory/enable_shared_from_this/op_destructor.md</id>
      <updated>2025-10-14T14:41:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/enable_shared_from_this/op_destructor.md b/reference/memory/enable_shared_from_this/op_destructor.md
index 356c1f7f4..3e9aaf37b 100644
--- a/reference/memory/enable_shared_from_this/op_destructor.md
+++ b/reference/memory/enable_shared_from_this/op_destructor.md
@@ -6,10 +6,11 @@
 * cpp11[meta cpp]
 
 ```cpp
-~enable_shared_from_this();
+~enable_shared_from_this();           // (1) C++11
+constexpr ~enable_shared_from_this(); // (1) C++26
 ```
 
-## enable_shared_from_thisオブジェクトの破棄（C++11）
+## 概要
 `*this`を破棄する。
 
 
@@ -26,3 +27,4 @@
 ## 参照
 - [P0033R0 Re-enabling `shared_from_this`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0033r0.html)
 - [P0033R1 Re-enabling `shared_from_this` (revision 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0033r1.html)
+- [P3037R6 `constexpr std::shared_ptr` and friends](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3037r6.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>shared_from_this -- C++26対応としてshared_ptr関連をconstexpr対応 #1500</title>
      <link href="https://cpprefjp.github.io/reference/memory/enable_shared_from_this/shared_from_this.html"/>
      <id>97c5f4bd841835d9f91a9fc657881c9f3230cbca:reference/memory/enable_shared_from_this/shared_from_this.md</id>
      <updated>2025-10-14T14:41:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/enable_shared_from_this/shared_from_this.md b/reference/memory/enable_shared_from_this/shared_from_this.md
index cdde92b54..f19ffb8b6 100644
--- a/reference/memory/enable_shared_from_this/shared_from_this.md
+++ b/reference/memory/enable_shared_from_this/shared_from_this.md
@@ -6,8 +6,15 @@
 * cpp11[meta cpp]
 
 ```cpp
-shared_ptr&amp;lt;T&amp;gt; shared_from_this();
-shared_ptr&amp;lt;const T&amp;gt; shared_from_this() const;
+shared_ptr&amp;lt;T&amp;gt;
+  shared_from_this();             // (1) C++11
+constexpr shared_ptr&amp;lt;T&amp;gt;
+  shared_from_this();             // (1) C++26
+
+shared_ptr&amp;lt;const T&amp;gt;
+  shared_from_this() const;       // (2) C++11
+constexpr shared_ptr&amp;lt;const T&amp;gt;
+  shared_from_this() const;       // (2) C++26
 ```
 * shared_ptr[link /reference/memory/shared_ptr.md]
 
@@ -80,3 +87,4 @@ int main()
 ## 参照
 - [P0033R0 Re-enabling `shared_from_this`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0033r0.html)
 - [P0033R1 Re-enabling `shared_from_this` (revision 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0033r1.html)
+- [P3037R6 `constexpr std::shared_ptr` and friends](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3037r6.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>weak_from_this -- C++26対応としてshared_ptr関連をconstexpr対応 #1500</title>
      <link href="https://cpprefjp.github.io/reference/memory/enable_shared_from_this/weak_from_this.html"/>
      <id>97c5f4bd841835d9f91a9fc657881c9f3230cbca:reference/memory/enable_shared_from_this/weak_from_this.md</id>
      <updated>2025-10-14T14:41:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/enable_shared_from_this/weak_from_this.md b/reference/memory/enable_shared_from_this/weak_from_this.md
index 3a552a426..3035c55a0 100644
--- a/reference/memory/enable_shared_from_this/weak_from_this.md
+++ b/reference/memory/enable_shared_from_this/weak_from_this.md
@@ -6,8 +6,15 @@
 * cpp17[meta cpp]
 
 ```cpp
-weak_ptr&amp;lt;T&amp;gt; weak_from_this() noexcept;
-weak_ptr&amp;lt;const T&amp;gt; weak_from_this() const noexcept;
+weak_ptr&amp;lt;T&amp;gt;
+  weak_from_this() noexcept;       // (1) C++17
+constexpr weak_ptr&amp;lt;T&amp;gt;
+  weak_from_this() noexcept;       // (1) C++26
+
+weak_ptr&amp;lt;const T&amp;gt;
+  weak_from_this() const noexcept; // (2) C++17
+constexpr weak_ptr&amp;lt;const T&amp;gt;
+  weak_from_this() const noexcept; // (2) C++26
 ```
 * weak_ptr[link /reference/memory/weak_ptr.md]
 
@@ -64,3 +71,4 @@ int main()
 ## 参照
 - [P0033R0 Re-enabling `shared_from_this`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0033r0.html)
 - [P0033R1 Re-enabling `shared_from_this` (revision 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0033r1.html)
+- [P3037R6 `constexpr std::shared_ptr` and friends](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3037r6.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>inout_ptr -- C++26対応としてshared_ptr関連をconstexpr対応 #1500</title>
      <link href="https://cpprefjp.github.io/reference/memory/inout_ptr.html"/>
      <id>97c5f4bd841835d9f91a9fc657881c9f3230cbca:reference/memory/inout_ptr.md</id>
      <updated>2025-10-14T14:41:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/inout_ptr.md b/reference/memory/inout_ptr.md
index 21bce258d..e8cea861a 100644
--- a/reference/memory/inout_ptr.md
+++ b/reference/memory/inout_ptr.md
@@ -7,7 +7,11 @@
 ```cpp
 namespace std {
   template&amp;lt;class Pointer = void, class Smart, class... Args&amp;gt;
-  auto inout_ptr(Smart&amp;amp; s, Args&amp;amp;&amp;amp;... args);
+  auto
+    inout_ptr(Smart&amp;amp; s, Args&amp;amp;&amp;amp;... args); // (1) C++23
+  template&amp;lt;class Pointer = void, class Smart, class... Args&amp;gt;
+  constexpr auto
+    inout_ptr(Smart&amp;amp; s, Args&amp;amp;&amp;amp;... args); // (1) C++26
 }
 ```
 
@@ -81,3 +85,4 @@ int main() {
 
 ## 参照
 - [P1132R8 out_ptr - a scalable output pointer abstraction](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p1132r8.html)
+- [P3037R6 `constexpr std::shared_ptr` and friends](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3037r6.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- C++26対応としてshared_ptr関連をconstexpr対応 #1500</title>
      <link href="https://cpprefjp.github.io/reference/memory/inout_ptr_t/op_constructor.html"/>
      <id>97c5f4bd841835d9f91a9fc657881c9f3230cbca:reference/memory/inout_ptr_t/op_constructor.md</id>
      <updated>2025-10-14T14:41:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/inout_ptr_t/op_constructor.md b/reference/memory/inout_ptr_t/op_constructor.md
index 63978cd94..8b7dcb523 100644
--- a/reference/memory/inout_ptr_t/op_constructor.md
+++ b/reference/memory/inout_ptr_t/op_constructor.md
@@ -6,8 +6,12 @@
 * cpp23[meta cpp]
 
 ```cpp
-explicit inout_ptr_t(Smart&amp;amp; smart, Args... args);  // (1)
-inout_ptr_t(const inout_ptr_t&amp;amp;) = delete;  // (2)
+explicit
+inout_ptr_t(Smart&amp;amp; smart, Args... args);  // (1) C++23
+constexpr explicit
+inout_ptr_t(Smart&amp;amp; smart, Args... args);  // (1) C++26
+
+inout_ptr_t(const inout_ptr_t&amp;amp;) = delete; // (2) C++23
 ```
 
 ## 概要
@@ -50,3 +54,4 @@ inout_ptr_t(const inout_ptr_t&amp;amp;) = delete;  // (2)
 
 ## 参照
 - [P1132R8 out_ptr - a scalable output pointer abstraction](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p1132r8.html)
+- [P3037R6 `constexpr std::shared_ptr` and friends](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3037r6.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>デストラクタ -- C++26対応としてshared_ptr関連をconstexpr対応 #1500</title>
      <link href="https://cpprefjp.github.io/reference/memory/inout_ptr_t/op_destructor.html"/>
      <id>97c5f4bd841835d9f91a9fc657881c9f3230cbca:reference/memory/inout_ptr_t/op_destructor.md</id>
      <updated>2025-10-14T14:41:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/inout_ptr_t/op_destructor.md b/reference/memory/inout_ptr_t/op_destructor.md
index e7428512a..c555b3c30 100644
--- a/reference/memory/inout_ptr_t/op_destructor.md
+++ b/reference/memory/inout_ptr_t/op_destructor.md
@@ -6,7 +6,8 @@
 * cpp23[meta cpp]
 
 ```cpp
-~inout_ptr_t();
+~inout_ptr_t();           // (1) C++23
+constexpr ~inout_ptr_t(); // (1) C++26
 ```
 
 ## 概要
@@ -84,3 +85,4 @@
 ## 参照
 - [P1132R8 out_ptr - a scalable output pointer abstraction](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p1132r8.html)
 - [LWG Issue 3897. `inout_ptr` will not update raw pointer to 0](https://cplusplus.github.io/LWG/issue3897)
+- [P3037R6 `constexpr std::shared_ptr` and friends](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3037r6.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator Pointer* -- C++26対応としてshared_ptr関連をconstexpr対応 #1500</title>
      <link href="https://cpprefjp.github.io/reference/memory/inout_ptr_t/op_pointer.html"/>
      <id>97c5f4bd841835d9f91a9fc657881c9f3230cbca:reference/memory/inout_ptr_t/op_pointer.md</id>
      <updated>2025-10-14T14:41:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/inout_ptr_t/op_pointer.md b/reference/memory/inout_ptr_t/op_pointer.md
index f6ab1c1a4..11248a15e 100644
--- a/reference/memory/inout_ptr_t/op_pointer.md
+++ b/reference/memory/inout_ptr_t/op_pointer.md
@@ -6,7 +6,9 @@
 * cpp23[meta cpp]
 
 ```cpp
-operator Pointer*() const noexcept;
+operator Pointer*() const noexcept; // (1) C++23
+constexpr
+operator Pointer*() const noexcept; // (1) C++26
 ```
 
 ## 概要
@@ -42,3 +44,4 @@ operator Pointer*() const noexcept;
 
 ## 参照
 - [P1132R8 out_ptr - a scalable output pointer abstraction](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p1132r8.html)
+- [P3037R6 `constexpr std::shared_ptr` and friends](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3037r6.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>make_shared -- C++26対応としてshared_ptr関連をconstexpr対応 #1500</title>
      <link href="https://cpprefjp.github.io/reference/memory/make_shared.html"/>
      <id>97c5f4bd841835d9f91a9fc657881c9f3230cbca:reference/memory/make_shared.md</id>
      <updated>2025-10-14T14:41:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/make_shared.md b/reference/memory/make_shared.md
index c391ef254..ef9d12e0d 100644
--- a/reference/memory/make_shared.md
+++ b/reference/memory/make_shared.md
@@ -7,19 +7,41 @@
 ```cpp
 namespace std {
   template &amp;lt;class T, class... Args&amp;gt;
-  shared_ptr&amp;lt;T&amp;gt; make_shared(Args&amp;amp;&amp;amp;... args);                        // (1)
+  shared_ptr&amp;lt;T&amp;gt;
+    make_shared(Args&amp;amp;&amp;amp;... args);              // (1) C++11
+  template &amp;lt;class T, class... Args&amp;gt;
+  constexpr shared_ptr&amp;lt;T&amp;gt;
+    make_shared(Args&amp;amp;&amp;amp;... args);              // (1) C++26
 
   template &amp;lt;class T&amp;gt;
-  shared_ptr&amp;lt;T&amp;gt; make_shared(size_t N);                              // (2) C++20 から
+  shared_ptr&amp;lt;T&amp;gt;
+    make_shared(size_t N);                    // (2) C++20
+  template &amp;lt;class T&amp;gt;
+  constexpr shared_ptr&amp;lt;T&amp;gt;
+    make_shared(size_t N);                    // (2) C++26
 
   template &amp;lt;class T&amp;gt;
-  shared_ptr&amp;lt;T&amp;gt; make_shared();                                      // (3) C++20 から
+  shared_ptr&amp;lt;T&amp;gt;
+    make_shared();                            // (3) C++20
+  template &amp;lt;class T&amp;gt;
+  constexpr shared_ptr&amp;lt;T&amp;gt;
+    make_shared();                            // (3) C++26
 
   template &amp;lt;class T&amp;gt;
-  shared_ptr&amp;lt;T&amp;gt; make_shared(size_t N, const remove_extent_t&amp;lt;T&amp;gt;&amp;amp; u); // (4) C++20 から
+  shared_ptr&amp;lt;T&amp;gt;
+    make_shared(size_t N,
+                const remove_extent_t&amp;lt;T&amp;gt;&amp;amp; u); // (4) C++20
+  template &amp;lt;class T&amp;gt;
+  constexpr shared_ptr&amp;lt;T&amp;gt;
+    make_shared(size_t N,
+                const remove_extent_t&amp;lt;T&amp;gt;&amp;amp; u); // (4) C++26
 
   template &amp;lt;class T&amp;gt;
-  shared_ptr&amp;lt;T&amp;gt; make_shared(const remove_extent_t&amp;lt;T&amp;gt;&amp;amp; u);           // (5) C++20 から
+  shared_ptr&amp;lt;T&amp;gt;
+    make_shared(const remove_extent_t&amp;lt;T&amp;gt;&amp;amp; u); // (5) C++20
+  template &amp;lt;class T&amp;gt;
+  constexpr shared_ptr&amp;lt;T&amp;gt;
+    make_shared(const remove_extent_t&amp;lt;T&amp;gt;&amp;amp; u); // (5) C++26
 }
 ```
 * shared_ptr[link shared_ptr.md]
@@ -122,3 +144,4 @@ int main() {
 - [N2351 Improving `shared_ptr` for C++0x, Revision 2](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2351.htm)
 - [std::make_shared から private コンストラクタを呼び出す - 野良C++erの雑記帳](http://d.hatena.ne.jp/gintenlabo/20131211/1386771626)
 - [P0674R1 Extending `make_shared` to support arrays](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0674r1.html)
+- [P3037R6 `constexpr std::shared_ptr` and friends](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3037r6.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>out_ptr -- C++26対応としてshared_ptr関連をconstexpr対応 #1500</title>
      <link href="https://cpprefjp.github.io/reference/memory/out_ptr.html"/>
      <id>97c5f4bd841835d9f91a9fc657881c9f3230cbca:reference/memory/out_ptr.md</id>
      <updated>2025-10-14T14:41:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/out_ptr.md b/reference/memory/out_ptr.md
index e613eec81..ebd0588e9 100644
--- a/reference/memory/out_ptr.md
+++ b/reference/memory/out_ptr.md
@@ -7,7 +7,11 @@
 ```cpp
 namespace std {
   template&amp;lt;class Pointer = void, class Smart, class... Args&amp;gt;
-  auto out_ptr(Smart&amp;amp; s, Args&amp;amp;&amp;amp;... args);
+  auto
+    out_ptr(Smart&amp;amp; s, Args&amp;amp;&amp;amp;... args); // (1) C++23
+  template&amp;lt;class Pointer = void, class Smart, class... Args&amp;gt;
+  constexpr auto
+    out_ptr(Smart&amp;amp; s, Args&amp;amp;&amp;amp;... args); // (1) C++26
 }
 ```
 
@@ -78,3 +82,4 @@ int main() {
 
 ## 参照
 - [P1132R8 out_ptr - a scalable output pointer abstraction](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p1132r8.html)
+- [P3037R6 `constexpr std::shared_ptr` and friends](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3037r6.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- C++26対応としてshared_ptr関連をconstexpr対応 #1500</title>
      <link href="https://cpprefjp.github.io/reference/memory/out_ptr_t/op_constructor.html"/>
      <id>97c5f4bd841835d9f91a9fc657881c9f3230cbca:reference/memory/out_ptr_t/op_constructor.md</id>
      <updated>2025-10-14T14:41:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/out_ptr_t/op_constructor.md b/reference/memory/out_ptr_t/op_constructor.md
index 76c09cfa7..acc899e9a 100644
--- a/reference/memory/out_ptr_t/op_constructor.md
+++ b/reference/memory/out_ptr_t/op_constructor.md
@@ -6,8 +6,12 @@
 * cpp23[meta cpp]
 
 ```cpp
-explicit out_ptr_t(Smart&amp;amp; smart, Args... args);  // (1)
-out_ptr_t(const out_ptr_t&amp;amp;) = delete;  // (2)
+explicit
+out_ptr_t(Smart&amp;amp; smart, Args... args);  // (1) C++23
+constexpr explicit
+out_ptr_t(Smart&amp;amp; smart, Args... args);  // (1) C++26
+
+out_ptr_t(const out_ptr_t&amp;amp;) = delete;   // (2) C++23
 ```
 
 ## 概要
@@ -43,3 +47,4 @@ out_ptr_t(const out_ptr_t&amp;amp;) = delete;  // (2)
 
 ## 参照
 - [P1132R8 out_ptr - a scalable output pointer abstraction](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p1132r8.html)
+- [P3037R6 `constexpr std::shared_ptr` and friends](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3037r6.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>デストラクタ -- C++26対応としてshared_ptr関連をconstexpr対応 #1500</title>
      <link href="https://cpprefjp.github.io/reference/memory/out_ptr_t/op_destructor.html"/>
      <id>97c5f4bd841835d9f91a9fc657881c9f3230cbca:reference/memory/out_ptr_t/op_destructor.md</id>
      <updated>2025-10-14T14:41:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/out_ptr_t/op_destructor.md b/reference/memory/out_ptr_t/op_destructor.md
index ff1fae12d..0a336c825 100644
--- a/reference/memory/out_ptr_t/op_destructor.md
+++ b/reference/memory/out_ptr_t/op_destructor.md
@@ -6,7 +6,8 @@
 * cpp23[meta cpp]
 
 ```cpp
-~out_ptr_t();
+~out_ptr_t();           // (1) C++23
+constexpr ~out_ptr_t(); // (1) C++26
 ```
 
 ## 概要
@@ -73,3 +74,4 @@
 
 ## 参照
 - [P1132R8 out_ptr - a scalable output pointer abstraction](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p1132r8.html)
+- [P3037R6 `constexpr std::shared_ptr` and friends](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3037r6.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator Pointer* -- C++26対応としてshared_ptr関連をconstexpr対応 #1500</title>
      <link href="https://cpprefjp.github.io/reference/memory/out_ptr_t/op_pointer.html"/>
      <id>97c5f4bd841835d9f91a9fc657881c9f3230cbca:reference/memory/out_ptr_t/op_pointer.md</id>
      <updated>2025-10-14T14:41:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/out_ptr_t/op_pointer.md b/reference/memory/out_ptr_t/op_pointer.md
index 3154decf6..f4063743f 100644
--- a/reference/memory/out_ptr_t/op_pointer.md
+++ b/reference/memory/out_ptr_t/op_pointer.md
@@ -6,7 +6,9 @@
 * cpp23[meta cpp]
 
 ```cpp
-operator Pointer*() const noexcept;
+operator Pointer*() const noexcept; // (1) C++23
+constexpr
+operator Pointer*() const noexcept; // (1) C++26
 ```
 
 ## 概要
@@ -42,3 +44,4 @@ operator Pointer*() const noexcept;
 
 ## 参照
 - [P1132R8 out_ptr - a scalable output pointer abstraction](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p1132r8.html)
+- [P3037R6 `constexpr std::shared_ptr` and friends](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3037r6.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator() -- C++26対応としてshared_ptr関連をconstexpr対応 #1500</title>
      <link href="https://cpprefjp.github.io/reference/memory/owner_less/op_call.html"/>
      <id>97c5f4bd841835d9f91a9fc657881c9f3230cbca:reference/memory/owner_less/op_call.md</id>
      <updated>2025-10-14T14:41:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/owner_less/op_call.md b/reference/memory/owner_less/op_call.md
index a43ddd9c2..a6c8c5575 100644
--- a/reference/memory/owner_less/op_call.md
+++ b/reference/memory/owner_less/op_call.md
@@ -9,28 +9,59 @@
 // shared_ptr特殊化版
 bool operator()(const shared_ptr&amp;lt;T&amp;gt;&amp;amp; a, const shared_ptr&amp;lt;T&amp;gt;&amp;amp; b) const;          // (1) C++11
 bool operator()(const shared_ptr&amp;lt;T&amp;gt;&amp;amp; a, const shared_ptr&amp;lt;T&amp;gt;&amp;amp; b) const noexcept; // (1) C++17
+constexpr bool
+  operator()(const shared_ptr&amp;lt;T&amp;gt;&amp;amp; a, const shared_ptr&amp;lt;T&amp;gt;&amp;amp; b) const noexcept;    // (1) C++26
+
 bool operator()(const shared_ptr&amp;lt;T&amp;gt;&amp;amp; a, const weak_ptr&amp;lt;T&amp;gt;&amp;amp; b) const;            // (2) C++11
 bool operator()(const shared_ptr&amp;lt;T&amp;gt;&amp;amp; a, const weak_ptr&amp;lt;T&amp;gt;&amp;amp; b) const noexcept;   // (2) C++17
+constexpr bool
+  operator()(const shared_ptr&amp;lt;T&amp;gt;&amp;amp; a, const weak_ptr&amp;lt;T&amp;gt;&amp;amp; b) const noexcept;      // (2) C++26
+
 bool operator()(const weak_ptr&amp;lt;T&amp;gt;&amp;amp; a, const shared_ptr&amp;lt;T&amp;gt;&amp;amp; b) const;            // (3) C++11
 bool operator()(const weak_ptr&amp;lt;T&amp;gt;&amp;amp; a, const shared_ptr&amp;lt;T&amp;gt;&amp;amp; b) const noexcept;   // (3) C++17
+constexpr bool
+  operator()(const weak_ptr&amp;lt;T&amp;gt;&amp;amp; a, const shared_ptr&amp;lt;T&amp;gt;&amp;amp; b) const noexcept;      // (3) C++26
 
 // weak_ptr特殊化版
 bool operator()(const weak_ptr&amp;lt;T&amp;gt;&amp;amp; a, const weak_ptr&amp;lt;T&amp;gt;&amp;amp; b) const;              // (4) C++11
 bool operator()(const weak_ptr&amp;lt;T&amp;gt;&amp;amp; a, const weak_ptr&amp;lt;T&amp;gt;&amp;amp; b) const noexcept;     // (4) C++17
+constexpr bool
+  operator()(const weak_ptr&amp;lt;T&amp;gt;&amp;amp; a, const weak_ptr&amp;lt;T&amp;gt;&amp;amp; b) const noexcept;        // (4) C++26
+
 bool operator()(const shared_ptr&amp;lt;T&amp;gt;&amp;amp; a, const weak_ptr&amp;lt;T&amp;gt;&amp;amp; b) const;            // (5) C++11
 bool operator()(const shared_ptr&amp;lt;T&amp;gt;&amp;amp; a, const weak_ptr&amp;lt;T&amp;gt;&amp;amp; b) const noexcept;   // (5) C++17
+constexpr bool
+  operator()(const shared_ptr&amp;lt;T&amp;gt;&amp;amp; a, const weak_ptr&amp;lt;T&amp;gt;&amp;amp; b) const noexcept;      // (5) C++26
+
 bool operator()(const weak_ptr&amp;lt;T&amp;gt;&amp;amp; a, const shared_ptr&amp;lt;T&amp;gt;&amp;amp; b) const;            // (6) C++11
 bool operator()(const weak_ptr&amp;lt;T&amp;gt;&amp;amp; a, const shared_ptr&amp;lt;T&amp;gt;&amp;amp; b) const noexcept;   // (6) C++17
+constexpr bool
+  operator()(const weak_ptr&amp;lt;T&amp;gt;&amp;amp; a, const shared_ptr&amp;lt;T&amp;gt;&amp;amp; b) const noexcept;      // (6) C++26
 
 // void特殊化版
 template&amp;lt;class T, class U&amp;gt;
 bool operator()(const shared_ptr&amp;lt;T&amp;gt;&amp;amp;, const shared_ptr&amp;lt;U&amp;gt;&amp;amp;) const noexcept;     // (7) C++17
+template&amp;lt;class T, class U&amp;gt;
+constexpr bool
+  operator()(const shared_ptr&amp;lt;T&amp;gt;&amp;amp;, const shared_ptr&amp;lt;U&amp;gt;&amp;amp;) const noexcept;        // (7) C++26
+
 template&amp;lt;class T, class U&amp;gt;
 bool operator()(const shared_ptr&amp;lt;T&amp;gt;&amp;amp;, const weak_ptr&amp;lt;U&amp;gt;&amp;amp;) const noexcept;       // (8) C++17
+template&amp;lt;class T, class U&amp;gt;
+constexpr bool
+  operator()(const shared_ptr&amp;lt;T&amp;gt;&amp;amp;, const weak_ptr&amp;lt;U&amp;gt;&amp;amp;) const noexcept;          // (8) C++26
+
 template&amp;lt;class T, class U&amp;gt;
 bool operator()(const weak_ptr&amp;lt;T&amp;gt;&amp;amp;, const shared_ptr&amp;lt;U&amp;gt;&amp;amp;) const noexcept;       // (9) C++17
+template&amp;lt;class T, class U&amp;gt;
+constexpr bool
+  operator()(const weak_ptr&amp;lt;T&amp;gt;&amp;amp;, const shared_ptr&amp;lt;U&amp;gt;&amp;amp;) const noexcept;          // (9) C++26
+
 template&amp;lt;class T, class U&amp;gt;
 bool operator()(const weak_ptr&amp;lt;T&amp;gt;&amp;amp;, const weak_ptr&amp;lt;U&amp;gt;&amp;amp;) const noexcept;         // (10) C++17
+template&amp;lt;class T, class U&amp;gt;
+constexpr bool
+  operator()(const weak_ptr&amp;lt;T&amp;gt;&amp;amp;, const weak_ptr&amp;lt;U&amp;gt;&amp;amp;) const noexcept;            // (10) C++26
 ```
 * shared_ptr[link /reference/memory/shared_ptr.md]
 * weak_ptr[link /reference/memory/weak_ptr.md]
@@ -58,3 +89,4 @@ a.owner_before(b)
 ## 参照
 - [LWG Issue 2873. Add `noexcept` to several `shared_ptr` related functions](https://wg21.cmeerw.net/lwg/issue2873)
 - [P0074R0 Making `std::owner_less` more flexible](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0074r0.html)
+- [P3037R6 `constexpr std::shared_ptr` and friends](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3037r6.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>const_pointer_cast -- C++26対応としてshared_ptr関連をconstexpr対応 #1500</title>
      <link href="https://cpprefjp.github.io/reference/memory/shared_ptr/const_pointer_cast.html"/>
      <id>97c5f4bd841835d9f91a9fc657881c9f3230cbca:reference/memory/shared_ptr/const_pointer_cast.md</id>
      <updated>2025-10-14T14:41:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/shared_ptr/const_pointer_cast.md b/reference/memory/shared_ptr/const_pointer_cast.md
index 476a1696f..5531922ea 100644
--- a/reference/memory/shared_ptr/const_pointer_cast.md
+++ b/reference/memory/shared_ptr/const_pointer_cast.md
@@ -7,10 +7,18 @@
 ```cpp
 namespace std {
   template &amp;lt;class T, class U&amp;gt;
-  shared_ptr&amp;lt;T&amp;gt; const_pointer_cast(const shared_ptr&amp;lt;U&amp;gt;&amp;amp; r) noexcept; // (1) C++11
+  shared_ptr&amp;lt;T&amp;gt;
+    const_pointer_cast(const shared_ptr&amp;lt;U&amp;gt;&amp;amp; r) noexcept; // (1) C++11
+  template &amp;lt;class T, class U&amp;gt;
+  constexpr shared_ptr&amp;lt;T&amp;gt;
+    const_pointer_cast(const shared_ptr&amp;lt;U&amp;gt;&amp;amp; r) noexcept; // (1) C++26
 
   template &amp;lt;class T, class U&amp;gt;
-  shared_ptr&amp;lt;T&amp;gt; const_pointer_cast(shared_ptr&amp;lt;U&amp;gt;&amp;amp;&amp;amp; r) noexcept;      // (2) C++20
+  shared_ptr&amp;lt;T&amp;gt;
+    const_pointer_cast(shared_ptr&amp;lt;U&amp;gt;&amp;amp;&amp;amp; r) noexcept;      // (2) C++20
+  template &amp;lt;class T, class U&amp;gt;
+  constexpr shared_ptr&amp;lt;T&amp;gt;
+    const_pointer_cast(shared_ptr&amp;lt;U&amp;gt;&amp;amp;&amp;amp; r) noexcept;      // (2) C++26
 }
 ```
 
@@ -75,3 +83,4 @@ int main()
 
 ## 参照
 - [LWG Issue 2996. Missing rvalue overloads for `shared_ptr` operations](https://wg21.cmeerw.net/lwg/issue2996)
+- [P3037R6 `constexpr std::shared_ptr` and friends](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3037r6.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>dynamic_pointer_cast -- C++26対応としてshared_ptr関連をconstexpr対応 #1500</title>
      <link href="https://cpprefjp.github.io/reference/memory/shared_ptr/dynamic_pointer_cast.html"/>
      <id>97c5f4bd841835d9f91a9fc657881c9f3230cbca:reference/memory/shared_ptr/dynamic_pointer_cast.md</id>
      <updated>2025-10-14T14:41:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/shared_ptr/dynamic_pointer_cast.md b/reference/memory/shared_ptr/dynamic_pointer_cast.md
index 3efeafe34..a65a5eaaa 100644
--- a/reference/memory/shared_ptr/dynamic_pointer_cast.md
+++ b/reference/memory/shared_ptr/dynamic_pointer_cast.md
@@ -7,10 +7,18 @@
 ```cpp
 namespace std {
   template &amp;lt;class T, class U&amp;gt;
-  shared_ptr&amp;lt;T&amp;gt; dynamic_pointer_cast(const shared_ptr&amp;lt;U&amp;gt;&amp;amp; r) noexcept; // (1) C++11
+  shared_ptr&amp;lt;T&amp;gt;
+    dynamic_pointer_cast(const shared_ptr&amp;lt;U&amp;gt;&amp;amp; r) noexcept; // (1) C++11
+  template &amp;lt;class T, class U&amp;gt;
+  constexpr shared_ptr&amp;lt;T&amp;gt;
+    dynamic_pointer_cast(const shared_ptr&amp;lt;U&amp;gt;&amp;amp; r) noexcept; // (1) C++26
 
   template &amp;lt;class T, class U&amp;gt;
-  shared_ptr&amp;lt;T&amp;gt; dynamic_pointer_cast(shared_ptr&amp;lt;U&amp;gt;&amp;amp;&amp;amp; r) noexcept;      // (2) C++20
+  shared_ptr&amp;lt;T&amp;gt;
+    dynamic_pointer_cast(shared_ptr&amp;lt;U&amp;gt;&amp;amp;&amp;amp; r) noexcept;      // (2) C++20
+  template &amp;lt;class T, class U&amp;gt;
+  constexpr shared_ptr&amp;lt;T&amp;gt;
+    dynamic_pointer_cast(shared_ptr&amp;lt;U&amp;gt;&amp;amp;&amp;amp; r) noexcept;      // (2) C++26
 }
 ```
 
@@ -95,3 +103,4 @@ B::call()
 
 ## 参照
 - [LWG Issue 2996. Missing rvalue overloads for `shared_ptr` operations](https://wg21.cmeerw.net/lwg/issue2996)
+- [P3037R6 `constexpr std::shared_ptr` and friends](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3037r6.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>get -- C++26対応としてshared_ptr関連をconstexpr対応 #1500</title>
      <link href="https://cpprefjp.github.io/reference/memory/shared_ptr/get.html"/>
      <id>97c5f4bd841835d9f91a9fc657881c9f3230cbca:reference/memory/shared_ptr/get.md</id>
      <updated>2025-10-14T14:41:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/shared_ptr/get.md b/reference/memory/shared_ptr/get.md
index 6c9c1af54..0868a48b3 100644
--- a/reference/memory/shared_ptr/get.md
+++ b/reference/memory/shared_ptr/get.md
@@ -6,8 +6,12 @@
 * cpp11[meta cpp]
 
 ```cpp
-T* get() const noexcept;            // (1) C++11
-element_type* get() const noexcept; // (1) C++17
+T*
+  get() const noexcept; // (1) C++11
+element_type*
+  get() const noexcept; // (1) C++17
+constexpr element_type*
+  get() const noexcept; // (1) C++26
 ```
 
 ## 概要
@@ -56,3 +60,4 @@ int main()
 
 ## 参照
 - [P0414R1 Merging `shared_ptr` changes from Library Fundamentals to C++17](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0414r1.html)
+- [P3037R6 `constexpr std::shared_ptr` and friends](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3037r6.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>get_deleter -- C++26対応としてshared_ptr関連をconstexpr対応 #1500</title>
      <link href="https://cpprefjp.github.io/reference/memory/shared_ptr/get_deleter.html"/>
      <id>97c5f4bd841835d9f91a9fc657881c9f3230cbca:reference/memory/shared_ptr/get_deleter.md</id>
      <updated>2025-10-14T14:41:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/shared_ptr/get_deleter.md b/reference/memory/shared_ptr/get_deleter.md
index 0bc4dbec7..c7545a477 100644
--- a/reference/memory/shared_ptr/get_deleter.md
+++ b/reference/memory/shared_ptr/get_deleter.md
@@ -7,7 +7,11 @@
 ```cpp
 namespace std {
   template &amp;lt;class D, class T&amp;gt;
-  D* get_deleter(const shared_ptr&amp;lt;T&amp;gt;&amp;amp; p) noexcept;
+  D*
+    get_deleter(const shared_ptr&amp;lt;T&amp;gt;&amp;amp; p) noexcept; // (1) C++11
+  template &amp;lt;class D, class T&amp;gt;
+  constexpr D*
+    get_deleter(const shared_ptr&amp;lt;T&amp;gt;&amp;amp; p) noexcept; // (1) C++26
 }
 ```
 
@@ -64,3 +68,7 @@ int main()
 - [GCC](/implementation.md#gcc): 4.3.6 [mark verified]
 - [ICC](/implementation.md#icc): ??
 - [Visual C++](/implementation.md#visual_cpp): 2008 (TR1) [mark verified], 2010 [mark verified], 2012 [mark verified], 2013 [mark verified]
+
+
+## 参照
+- [P3037R6 `constexpr std::shared_ptr` and friends](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3037r6.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator-&gt; -- C++26対応としてshared_ptr関連をconstexpr対応 #1500</title>
      <link href="https://cpprefjp.github.io/reference/memory/shared_ptr/op_arrow.html"/>
      <id>97c5f4bd841835d9f91a9fc657881c9f3230cbca:reference/memory/shared_ptr/op_arrow.md</id>
      <updated>2025-10-14T14:41:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/shared_ptr/op_arrow.md b/reference/memory/shared_ptr/op_arrow.md
index b6a41ea5f..f4d40de2f 100644
--- a/reference/memory/shared_ptr/op_arrow.md
+++ b/reference/memory/shared_ptr/op_arrow.md
@@ -7,7 +7,10 @@
 
 ```cpp
 // 非配列版のみ
-T* operator-&amp;gt;() const noexcept;
+T*
+  operator-&amp;gt;() const noexcept; // (1) C++11
+constexpr T*
+  operator-&amp;gt;() const noexcept; // (1) C++26
 ```
 
 ## 概要
@@ -58,3 +61,7 @@ hello
 - [Clang](/implementation.md#clang): 3.0 [mark verified]
 - [ICC](/implementation.md#icc): ?
 - [Visual C++](/implementation.md#visual_cpp): 2008 (TR1) [mark verified], 2010 [mark verified], 2012 [mark verified], 2013 [mark verified]
+
+
+## 参照
+- [P3037R6 `constexpr std::shared_ptr` and friends](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3037r6.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- C++26対応としてshared_ptr関連をconstexpr対応 #1500</title>
      <link href="https://cpprefjp.github.io/reference/memory/shared_ptr/op_assign.html"/>
      <id>97c5f4bd841835d9f91a9fc657881c9f3230cbca:reference/memory/shared_ptr/op_assign.md</id>
      <updated>2025-10-14T14:41:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/shared_ptr/op_assign.md b/reference/memory/shared_ptr/op_assign.md
index cb15085fd..443fea884 100644
--- a/reference/memory/shared_ptr/op_assign.md
+++ b/reference/memory/shared_ptr/op_assign.md
@@ -6,23 +6,42 @@
 * cpp11[meta cpp]
 
 ```cpp
-shared_ptr&amp;amp; operator=(const shared_ptr&amp;amp; r) noexcept;    // (1)
+shared_ptr&amp;amp;
+  operator=(const shared_ptr&amp;amp; r) noexcept;    // (1) C++11
+constexpr shared_ptr&amp;amp;
+  operator=(const shared_ptr&amp;amp; r) noexcept;    // (1) C++26
 
 template &amp;lt;class Y&amp;gt;
-shared_ptr&amp;amp; operator=(const shared_ptr&amp;lt;Y&amp;gt;&amp;amp; r) noexcept; // (2)
+shared_ptr&amp;amp;
+  operator=(const shared_ptr&amp;lt;Y&amp;gt;&amp;amp; r) noexcept; // (2) C++11
+template &amp;lt;class Y&amp;gt;
+constexpr shared_ptr&amp;amp;
+  operator=(const shared_ptr&amp;lt;Y&amp;gt;&amp;amp; r) noexcept; // (2) C++26
 
-shared_ptr&amp;amp; operator=(shared_ptr&amp;amp;&amp;amp; r) noexcept;         // (3)
+shared_ptr&amp;amp;
+  operator=(shared_ptr&amp;amp;&amp;amp; r) noexcept;         // (3) C++11
+constexpr shared_ptr&amp;amp;
+  operator=(shared_ptr&amp;amp;&amp;amp; r) noexcept;         // (3) C++26
 
 template &amp;lt;class Y&amp;gt;
-shared_ptr&amp;amp; operator=(shared_ptr&amp;lt;Y&amp;gt;&amp;amp;&amp;amp; r) noexcept;      // (4)
+shared_ptr&amp;amp;
+  operator=(shared_ptr&amp;lt;Y&amp;gt;&amp;amp;&amp;amp; r) noexcept;      // (4) C++11
+template &amp;lt;class Y&amp;gt;
+constexpr shared_ptr&amp;amp;
+  operator=(shared_ptr&amp;lt;Y&amp;gt;&amp;amp;&amp;amp; r) noexcept;      // (4) C++26
 
 template &amp;lt;class Y&amp;gt;
-shared_ptr&amp;amp; operator=(auto_ptr&amp;lt;Y&amp;gt;&amp;amp;&amp;amp; r);                 // (5)
-                                                        // C++11から非推奨
-                                                        // C++17で削除
+shared_ptr&amp;amp;
+  operator=(auto_ptr&amp;lt;Y&amp;gt;&amp;amp;&amp;amp; r);                 // (5)
+                                              // C++11から非推奨
+                                              // C++17で削除
 
 template &amp;lt;class Y, class D&amp;gt;
-shared_ptr&amp;amp; operator=(unique_ptr&amp;lt;Y, D&amp;gt;&amp;amp;&amp;amp; r);            // (6)
+shared_ptr&amp;amp;
+  operator=(unique_ptr&amp;lt;Y, D&amp;gt;&amp;amp;&amp;amp; r);            // (6) C++11
+template &amp;lt;class Y, class D&amp;gt;
+constexpr shared_ptr&amp;amp;
+  operator=(unique_ptr&amp;lt;Y, D&amp;gt;&amp;amp;&amp;amp; r);            // (6) C++26
 ```
 * unique_ptr[link /reference/memory/unique_ptr.md]
 
@@ -141,3 +160,4 @@ int main()
 
 ## 参照
 - [N4190 Removing `auto_ptr`, `random_shuffle()`, And Old `&amp;lt;functional&amp;gt;` Stuff](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4190.htm)
+- [P3037R6 `constexpr std::shared_ptr` and friends](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3037r6.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator[] -- C++26対応としてshared_ptr関連をconstexpr対応 #1500</title>
      <link href="https://cpprefjp.github.io/reference/memory/shared_ptr/op_at.html"/>
      <id>97c5f4bd841835d9f91a9fc657881c9f3230cbca:reference/memory/shared_ptr/op_at.md</id>
      <updated>2025-10-14T14:41:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/shared_ptr/op_at.md b/reference/memory/shared_ptr/op_at.md
index 466900946..1a453a8f1 100644
--- a/reference/memory/shared_ptr/op_at.md
+++ b/reference/memory/shared_ptr/op_at.md
@@ -7,7 +7,10 @@
 
 ```cpp
 // 配列版のみ
-element_type&amp;amp; operator[](ptrdiff_t i) const;
+element_type&amp;amp;
+  operator[](ptrdiff_t i) const; // (1) C++17
+constexpr element_type&amp;amp;
+  operator[](ptrdiff_t i) const; // (1) C++26
 ```
 * ptrdiff_t[link /reference/cstddef/ptrdiff_t.md]
 
@@ -62,3 +65,7 @@ int main()
 - [GCC](/implementation.md#gcc): 7.2 [mark verified]
 - [Clang](/implementation.md#clang):
 - [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P3037R6 `constexpr std::shared_ptr` and friends](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3037r6.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator bool -- C++26対応としてshared_ptr関連をconstexpr対応 #1500</title>
      <link href="https://cpprefjp.github.io/reference/memory/shared_ptr/op_bool.html"/>
      <id>97c5f4bd841835d9f91a9fc657881c9f3230cbca:reference/memory/shared_ptr/op_bool.md</id>
      <updated>2025-10-14T14:41:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/shared_ptr/op_bool.md b/reference/memory/shared_ptr/op_bool.md
index 5dd1b2460..052013068 100644
--- a/reference/memory/shared_ptr/op_bool.md
+++ b/reference/memory/shared_ptr/op_bool.md
@@ -6,7 +6,10 @@
 * cpp11[meta cpp]
 
 ```cpp
-explicit operator bool() const noexcept;
+explicit
+  operator bool() const noexcept; // (1) C++11
+constexpr explicit
+  operator bool() const noexcept; // (1) C++26
 ```
 
 ## 概要
@@ -58,3 +61,4 @@ p has resource
 
 ## 参照
 - [N2435 Explicit bool for Smart Pointers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2435.htm)
+- [P3037R6 `constexpr std::shared_ptr` and friends](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3037r6.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;=&gt; -- C++26対応としてshared_ptr関連をconstexpr対応 #1500</title>
      <link href="https://cpprefjp.github.io/reference/memory/shared_ptr/op_compare_3way.html"/>
      <id>97c5f4bd841835d9f91a9fc657881c9f3230cbca:reference/memory/shared_ptr/op_compare_3way.md</id>
      <updated>2025-10-14T14:41:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/shared_ptr/op_compare_3way.md b/reference/memory/shared_ptr/op_compare_3way.md
index 74e67ca5a..a6358bb53 100644
--- a/reference/memory/shared_ptr/op_compare_3way.md
+++ b/reference/memory/shared_ptr/op_compare_3way.md
@@ -10,11 +10,19 @@ namespace std {
   strong_ordering
     operator&amp;lt;=&amp;gt;(const shared_ptr&amp;lt;T&amp;gt;&amp;amp; a,
                 const shared_ptr&amp;lt;U&amp;gt;&amp;amp; b) noexcept; // (1) C++20
+  template &amp;lt;class T, class U&amp;gt;
+  constexpr strong_ordering
+    operator&amp;lt;=&amp;gt;(const shared_ptr&amp;lt;T&amp;gt;&amp;amp; a,
+                const shared_ptr&amp;lt;U&amp;gt;&amp;amp; b) noexcept; // (1) C++26
 
   template &amp;lt;class T&amp;gt;
   strong_ordering
     operator&amp;lt;=&amp;gt;(const shared_ptr&amp;lt;T&amp;gt;&amp;amp; x,
                 nullptr_t) noexcept;              // (2) C++20
+  template &amp;lt;class T&amp;gt;
+  constexpr strong_ordering
+    operator&amp;lt;=&amp;gt;(const shared_ptr&amp;lt;T&amp;gt;&amp;amp; x,
+                nullptr_t) noexcept;              // (2) C++26
 }
 ```
 
@@ -90,3 +98,4 @@ p3 is nullptr
 ## 参照
 - [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
     - C++20での三方比較演算子の追加と、関連する演算子の自動導出
+- [P3037R6 `constexpr std::shared_ptr` and friends](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3037r6.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- C++26対応としてshared_ptr関連をconstexpr対応 #1500</title>
      <link href="https://cpprefjp.github.io/reference/memory/shared_ptr/op_constructor.html"/>
      <id>97c5f4bd841835d9f91a9fc657881c9f3230cbca:reference/memory/shared_ptr/op_constructor.md</id>
      <updated>2025-10-14T14:41:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/shared_ptr/op_constructor.md b/reference/memory/shared_ptr/op_constructor.md
index c6790ee80..4fae6d3fb 100644
--- a/reference/memory/shared_ptr/op_constructor.md
+++ b/reference/memory/shared_ptr/op_constructor.md
@@ -6,56 +6,111 @@
 * cpp11[meta cpp]
 
 ```cpp
-constexpr shared_ptr() noexcept;                         // (1)
+constexpr
+shared_ptr() noexcept;                       // (1) C++11
 
 template &amp;lt;class Y&amp;gt;
-explicit shared_ptr(Y* p);                               // (2)
+explicit
+shared_ptr(Y* p);                            // (2) C++11
+template &amp;lt;class Y&amp;gt;
+constexpr explicit
+shared_ptr(Y* p);                            // (2) C++26
 
 template &amp;lt;class Y, class Deleter&amp;gt;
-shared_ptr(Y* p, Deleter d);                             // (3)
+shared_ptr(Y* p,
+           Deleter d);                       // (3) C++11
+template &amp;lt;class Y, class Deleter&amp;gt;
+constexpr
+shared_ptr(Y* p,
+           Deleter d);                       // (3) C++26
 
 template &amp;lt;class Y, class Deleter, class Alloc&amp;gt;
-shared_ptr(Y* p, Deleter d, Alloc a);                    // (4)
+constexpr
+shared_ptr(Y* p,
+           Deleter d,
+           Alloc a);                         // (4) C++11
+template &amp;lt;class Y, class Deleter, class Alloc&amp;gt;
+shared_ptr(Y* p,
+           Deleter d,
+           Alloc a);                         // (4) C++26
 
 template &amp;lt;class Deleter&amp;gt;
-shared_ptr(nullptr_t p, Deleter d);                      // (5)
+shared_ptr(nullptr_t p,
+           Deleter d);                       // (5) C++11
+template &amp;lt;class Deleter&amp;gt;
+constexpr
+shared_ptr(nullptr_t p,
+           Deleter d);                       // (5) C++26
 
 template &amp;lt;class Deleter, class Alloc&amp;gt;
-shared_ptr(nullptr_t p, Deleter d, Alloc a);             // (6)
+shared_ptr(nullptr_t p,
+           Deleter d,
+           Alloc a);                         // (6) C++11
+template &amp;lt;class Deleter, class Alloc&amp;gt;
+constexpr
+shared_ptr(nullptr_t p,
+           Deleter d,
+           Alloc a);                         // (6) C++26
 
 template&amp;lt;class Y&amp;gt;
-shared_ptr(const shared_ptr&amp;lt;Y&amp;gt;&amp;amp; r, T* p) noexcept;            // (7) C++11
-
+shared_ptr(const shared_ptr&amp;lt;Y&amp;gt;&amp;amp; r,
+           T* p) noexcept;                   // (7) C++11
+template&amp;lt;class Y&amp;gt;
+shared_ptr(const shared_ptr&amp;lt;Y&amp;gt;&amp;amp; r,
+           element_type* p) noexcept;        // (7) C++17
 template&amp;lt;class Y&amp;gt;
-shared_ptr(const shared_ptr&amp;lt;Y&amp;gt;&amp;amp; r, element_type* p) noexcept; // (7) C++17
+constexpr
+shared_ptr(const shared_ptr&amp;lt;Y&amp;gt;&amp;amp; r,
+           element_type* p) noexcept;        // (7) C++26
 
-shared_ptr(const shared_ptr&amp;amp; r) noexcept;                // (8)
+shared_ptr(const shared_ptr&amp;amp; r) noexcept;    // (8) C++11
+constexpr
+shared_ptr(const shared_ptr&amp;amp; r) noexcept;    // (8) C++26
 
 template &amp;lt;class Y&amp;gt;
-shared_ptr(const shared_ptr&amp;lt;Y&amp;gt;&amp;amp; r) noexcept;             // (9)
+shared_ptr(const shared_ptr&amp;lt;Y&amp;gt;&amp;amp; r) noexcept; // (9) C++11
+template &amp;lt;class Y&amp;gt;
+constexpr
+shared_ptr(const shared_ptr&amp;lt;Y&amp;gt;&amp;amp; r) noexcept; // (9) C++26
 
-shared_ptr(shared_ptr&amp;amp;&amp;amp; r) noexcept;                     // (10)
+shared_ptr(shared_ptr&amp;amp;&amp;amp; r) noexcept;         // (10) C++11
+constexpr
+shared_ptr(shared_ptr&amp;amp;&amp;amp; r) noexcept;         // (10) C++26
 
 template &amp;lt;class Y&amp;gt;
-shared_ptr(shared_ptr&amp;lt;Y&amp;gt;&amp;amp;&amp;amp; r) noexcept;                  // (11)
+shared_ptr(shared_ptr&amp;lt;Y&amp;gt;&amp;amp;&amp;amp; r) noexcept;      // (11) C++11
+template &amp;lt;class Y&amp;gt;
+constexpr
+shared_ptr(shared_ptr&amp;lt;Y&amp;gt;&amp;amp;&amp;amp; r) noexcept;      // (11) C++26
 
 template &amp;lt;class Y&amp;gt;
-explicit shared_ptr(const weak_ptr&amp;lt;Y&amp;gt;&amp;amp; r);               // (12)
+explicit
+shared_ptr(const weak_ptr&amp;lt;Y&amp;gt;&amp;amp; r);            // (12) C++11
+template &amp;lt;class Y&amp;gt;
+constexpr explicit
+shared_ptr(const weak_ptr&amp;lt;Y&amp;gt;&amp;amp; r);            // (12) C++26
 
 template &amp;lt;class Y&amp;gt;
-shared_ptr(auto_ptr&amp;lt;Y&amp;gt;&amp;amp;&amp;amp; r);                             // (13)
-                                                         // C++11から非推奨
-                                                         // C++17で削除
+shared_ptr(auto_ptr&amp;lt;Y&amp;gt;&amp;amp;&amp;amp; r);                 // (13)
+                                             // C++11から非推奨
+                                             // C++17で削除
 
 template &amp;lt;class Y, class Deleter&amp;gt;
-shared_ptr(unique_ptr&amp;lt;Y, Deleter&amp;gt;&amp;amp;&amp;amp; r);                  // (14)
-
-constexpr shared_ptr(nullptr_t);                         // (15)  C++14
+shared_ptr(unique_ptr&amp;lt;Y, Deleter&amp;gt;&amp;amp;&amp;amp; r);      // (14) C++11
+template &amp;lt;class Y, class Deleter&amp;gt;
+constexpr
+shared_ptr(unique_ptr&amp;lt;Y, Deleter&amp;gt;&amp;amp;&amp;amp; r);      // (14) C++26
 
-constexpr shared_ptr(nullptr_t) noexcept;                // (15)  C++17
+constexpr shared_ptr(nullptr_t);             // (15)  C++14
+constexpr shared_ptr(nullptr_t) noexcept;    // (15)  C++17
 
 template &amp;lt;class Y&amp;gt;
-shared_ptr(shared_ptr&amp;lt;Y&amp;gt;&amp;amp;&amp;amp; r, element_type* p) noexcept; // (16) C++20
+shared_ptr(shared_ptr&amp;lt;Y&amp;gt;&amp;amp;&amp;amp; r,
+           element_type* p) noexcept;        // (16) C++20
+template &amp;lt;class Y&amp;gt;
+constexpr
+shared_ptr(shared_ptr&amp;lt;Y&amp;gt;&amp;amp;&amp;amp; r,
+           element_type* p) noexcept;        // (16) C++26
 ```
 * weak_ptr[link /reference/memory/weak_ptr.md]
 * unique_ptr[link /reference/memory/unique_ptr.md]
@@ -285,3 +340,4 @@ int main()
 - [P0497R0 Fixes to `shared_ptr` support for arrays](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0497r0.html)
 - [LWG Issue 2996. Missing rvalue overloads for `shared_ptr` operations](https://wg21.cmeerw.net/lwg/issue2996)
 - [LWG Issue 2365. Missing `noexcept` in `shared_ptr::shared_ptr(nullptr_t)`](https://wg21.cmeerw.net/lwg/issue2365)
+- [P3037R6 `constexpr std::shared_ptr` and friends](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3037r6.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator* -- C++26対応としてshared_ptr関連をconstexpr対応 #1500</title>
      <link href="https://cpprefjp.github.io/reference/memory/shared_ptr/op_deref.html"/>
      <id>97c5f4bd841835d9f91a9fc657881c9f3230cbca:reference/memory/shared_ptr/op_deref.md</id>
      <updated>2025-10-14T14:41:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/shared_ptr/op_deref.md b/reference/memory/shared_ptr/op_deref.md
index 5ab589c85..36812e14a 100644
--- a/reference/memory/shared_ptr/op_deref.md
+++ b/reference/memory/shared_ptr/op_deref.md
@@ -7,7 +7,10 @@
 
 ```cpp
 // 非配列版、非void版のみ
-T&amp;amp; operator*() const noexcept;
+T&amp;amp;
+  operator*() const noexcept; // (1) C++11
+constexpr T&amp;amp;
+  operator*() const noexcept; // (1) C++26
 ```
 
 ## 概要
@@ -64,3 +67,4 @@ int main()
 ## 参照
 - [LWG Issue 2572. The remarks for `shared_ptr::operator*` should apply to cv-qualified void as well](https://wg21.cmeerw.net/lwg/issue2572)
 - [P0414R1 Merging `shared_ptr` changes from Library Fundamentals to C++17](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0414r1.html)
+- [P3037R6 `constexpr std::shared_ptr` and friends](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3037r6.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>デストラクタ -- C++26対応としてshared_ptr関連をconstexpr対応 #1500</title>
      <link href="https://cpprefjp.github.io/reference/memory/shared_ptr/op_destructor.html"/>
      <id>97c5f4bd841835d9f91a9fc657881c9f3230cbca:reference/memory/shared_ptr/op_destructor.md</id>
      <updated>2025-10-14T14:41:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/shared_ptr/op_destructor.md b/reference/memory/shared_ptr/op_destructor.md
index 5a50aae7f..ba7e8ade1 100644
--- a/reference/memory/shared_ptr/op_destructor.md
+++ b/reference/memory/shared_ptr/op_destructor.md
@@ -6,7 +6,8 @@
 * cpp11[meta cpp]
 
 ```cpp
-~shared_ptr();
+~shared_ptr();           // (1) C++11
+constexpr ~shared_ptr(); // (1) C++26
 ```
 
 ## `shared_ptr`オブジェクトの破棄
@@ -67,3 +68,7 @@ X dtor
 1
 Y dtor
 ```
+
+
+## 参照
+- [P3037R6 `constexpr std::shared_ptr` and friends](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3037r6.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- C++26対応としてshared_ptr関連をconstexpr対応 #1500</title>
      <link href="https://cpprefjp.github.io/reference/memory/shared_ptr/op_equal.html"/>
      <id>97c5f4bd841835d9f91a9fc657881c9f3230cbca:reference/memory/shared_ptr/op_equal.md</id>
      <updated>2025-10-14T14:41:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/shared_ptr/op_equal.md b/reference/memory/shared_ptr/op_equal.md
index 6c848faf5..66974b915 100644
--- a/reference/memory/shared_ptr/op_equal.md
+++ b/reference/memory/shared_ptr/op_equal.md
@@ -7,17 +7,32 @@
 ```cpp
 namespace std {
   template&amp;lt;class T, class U&amp;gt;
-  bool operator==(const shared_ptr&amp;lt;T&amp;gt;&amp;amp; a,
-                  const shared_ptr&amp;lt;U&amp;gt;&amp;amp; b) noexcept; // (1) C++11
+  bool
+    operator==(const shared_ptr&amp;lt;T&amp;gt;&amp;amp; a,
+               const shared_ptr&amp;lt;U&amp;gt;&amp;amp; b) noexcept; // (1) C++11
+  template&amp;lt;class T, class U&amp;gt;
+  constexpr bool
+    operator==(const shared_ptr&amp;lt;T&amp;gt;&amp;amp; a,
+               const shared_ptr&amp;lt;U&amp;gt;&amp;amp; b) noexcept; // (1) C++26
 
   template &amp;lt;class T&amp;gt;
-  bool operator==(const shared_ptr&amp;lt;T&amp;gt;&amp;amp; x,
-                  nullptr_t) noexcept;              // (2) C++11
+  bool
+    operator==(const shared_ptr&amp;lt;T&amp;gt;&amp;amp; x,
+               nullptr_t) noexcept;              // (2) C++11
+  template &amp;lt;class T&amp;gt;
+  constexpr bool
+    operator==(const shared_ptr&amp;lt;T&amp;gt;&amp;amp; x,
+               nullptr_t) noexcept;              // (2) C++26
 
   // (2)により、以下のオーバーロードが使用可能になる (C++20)
   template &amp;lt;class T&amp;gt;
-  bool operator==(nullptr_t,
-                  const shared_ptr&amp;lt;T&amp;gt;&amp;amp; x) noexcept; // (3) C++11
+  bool
+    operator==(nullptr_t,
+               const shared_ptr&amp;lt;T&amp;gt;&amp;amp; x) noexcept; // (3) C++11
+  template &amp;lt;class T&amp;gt;
+  constexpr bool
+    operator==(nullptr_t,
+               const shared_ptr&amp;lt;T&amp;gt;&amp;amp; x) noexcept; // (3) C++26
 }
 ```
 
@@ -81,3 +96,4 @@ p3 is nullptr
 ## 参照
 - [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
     - C++20での三方比較演算子の追加と、関連する演算子の自動導出
+- [P3037R6 `constexpr std::shared_ptr` and friends](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3037r6.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>owner_before -- C++26対応としてshared_ptr関連をconstexpr対応 #1500</title>
      <link href="https://cpprefjp.github.io/reference/memory/shared_ptr/owner_before.html"/>
      <id>97c5f4bd841835d9f91a9fc657881c9f3230cbca:reference/memory/shared_ptr/owner_before.md</id>
      <updated>2025-10-14T14:41:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/shared_ptr/owner_before.md b/reference/memory/shared_ptr/owner_before.md
index 06752b4fd..5ea30d205 100644
--- a/reference/memory/shared_ptr/owner_before.md
+++ b/reference/memory/shared_ptr/owner_before.md
@@ -7,16 +7,24 @@
 
 ```cpp
 template &amp;lt;class U&amp;gt;
-bool owner_before(const shared_ptr&amp;lt;U&amp;gt;&amp;amp; b) const;          // (1) C++11
-
+bool
+  owner_before(const shared_ptr&amp;lt;U&amp;gt;&amp;amp; b) const;          // (1) C++11
 template &amp;lt;class U&amp;gt;
-bool owner_before(const shared_ptr&amp;lt;U&amp;gt;&amp;amp; b) const noexcept; // (1) C++17
-
+bool
+  owner_before(const shared_ptr&amp;lt;U&amp;gt;&amp;amp; b) const noexcept; // (1) C++17
 template &amp;lt;class U&amp;gt;
-bool owner_before(const weak_ptr&amp;lt;U&amp;gt;&amp;amp; b) const;            // (2) C++11
+constexpr bool
+  owner_before(const shared_ptr&amp;lt;U&amp;gt;&amp;amp; b) const noexcept; // (1) C++26
 
 template &amp;lt;class U&amp;gt;
-bool owner_before(const weak_ptr&amp;lt;U&amp;gt;&amp;amp; b) const noexcept;   // (2) C++17
+bool
+  owner_before(const weak_ptr&amp;lt;U&amp;gt;&amp;amp; b) const;            // (2) C++11
+template &amp;lt;class U&amp;gt;
+bool
+  owner_before(const weak_ptr&amp;lt;U&amp;gt;&amp;amp; b) const noexcept;   // (2) C++17
+template &amp;lt;class U&amp;gt;
+constexpr bool
+  owner_before(const weak_ptr&amp;lt;U&amp;gt;&amp;amp; b) const noexcept;   // (2) C++26
 ```
 * weak_ptr[link /reference/memory/weak_ptr.md]
 
@@ -106,3 +114,4 @@ false
 - [N2637 Revisiting std::shared_ptr comparison](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2637.pdf)
 - [LWG Issue 1406. Support hashing smart-pointers based on owner](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#1406)
 - [LWG Issue 2873. Add `noexcept` to several `shared_ptr` related functions](https://wg21.cmeerw.net/lwg/issue2873)
+- [P3037R6 `constexpr std::shared_ptr` and friends](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3037r6.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>reset -- C++26対応としてshared_ptr関連をconstexpr対応 #1500</title>
      <link href="https://cpprefjp.github.io/reference/memory/shared_ptr/reset.html"/>
      <id>97c5f4bd841835d9f91a9fc657881c9f3230cbca:reference/memory/shared_ptr/reset.md</id>
      <updated>2025-10-14T14:41:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/shared_ptr/reset.md b/reference/memory/shared_ptr/reset.md
index a62c6e485..cdf1fa2b1 100644
--- a/reference/memory/shared_ptr/reset.md
+++ b/reference/memory/shared_ptr/reset.md
@@ -6,16 +6,43 @@
 * cpp11[meta cpp]
 
 ```cpp
-void reset() noexcept;                              // (1)
+void
+  reset() noexcept;             // (1) C++11
+constexpr void
+  reset() noexcept;             // (1) C++26
 
 template &amp;lt;class Y&amp;gt;
-void reset(Y* p);                                   // (2)
-
-template &amp;lt;class Y, class Deleter&amp;gt;
-void reset(Y* p, Deleter d);                        // (3)
-
-template &amp;lt;class Y, class Deleter, class Allocator&amp;gt;
-void reset(Y* p, Deleter d, Allocator a);           // (4)
+void
+  reset(Y* p);                  // (2) C++11
+template &amp;lt;class Y&amp;gt;
+constexpr void
+  reset(Y* p);                  // (2) C++26
+
+template &amp;lt;class Y,
+          class Deleter&amp;gt;
+void
+  reset(Y* p,
+        Deleter d);             // (3) C++11
+template &amp;lt;class Y,
+          class Deleter&amp;gt;
+constexpr void
+  reset(Y* p,
+        Deleter d);             // (3) C++26
+
+template &amp;lt;class Y,
+          class Deleter,
+          class Allocator&amp;gt;
+void
+  reset(Y* p,
+        Deleter d,
+        Allocator a);           // (4) C++11
+template &amp;lt;class Y,
+          class Deleter,
+          class Allocator&amp;gt;
+constexpr void
+  reset(Y* p,
+        Deleter d,
+        Allocator a);           // (4) C++26
 ```
 
 ## 概要
@@ -71,3 +98,7 @@ int main()
 - [Clang](/implementation.md#clang): 3.0 [mark verified]
 - [ICC](/implementation.md#icc): ?
 - [Visual C++](/implementation.md#visual_cpp): 2008 (TR1) [mark verified], 2010 [mark verified], 2012 [mark verified], 2013 [mark verified]
+
+
+## 参照
+- [P3037R6 `constexpr std::shared_ptr` and friends](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3037r6.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>static_pointer_cast -- C++26対応としてshared_ptr関連をconstexpr対応 #1500</title>
      <link href="https://cpprefjp.github.io/reference/memory/shared_ptr/static_pointer_cast.html"/>
      <id>97c5f4bd841835d9f91a9fc657881c9f3230cbca:reference/memory/shared_ptr/static_pointer_cast.md</id>
      <updated>2025-10-14T14:41:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/shared_ptr/static_pointer_cast.md b/reference/memory/shared_ptr/static_pointer_cast.md
index 453569fcd..1107b896d 100644
--- a/reference/memory/shared_ptr/static_pointer_cast.md
+++ b/reference/memory/shared_ptr/static_pointer_cast.md
@@ -7,10 +7,18 @@
 ```cpp
 namespace std {
   template&amp;lt;class T, class U&amp;gt;
-  shared_ptr&amp;lt;T&amp;gt; static_pointer_cast(const shared_ptr&amp;lt;U&amp;gt;&amp;amp; r) noexcept; // (1) C++11
+  shared_ptr&amp;lt;T&amp;gt;
+    static_pointer_cast(const shared_ptr&amp;lt;U&amp;gt;&amp;amp; r) noexcept; // (1) C++11
+  template&amp;lt;class T, class U&amp;gt;
+  constexpr shared_ptr&amp;lt;T&amp;gt;
+    static_pointer_cast(const shared_ptr&amp;lt;U&amp;gt;&amp;amp; r) noexcept; // (1) C++26
 
   template &amp;lt;class T, class U&amp;gt;
-  shared_ptr&amp;lt;T&amp;gt; static_pointer_cast(shared_ptr&amp;lt;U&amp;gt;&amp;amp;&amp;amp; r) noexcept;      // (2) C++20
+  shared_ptr&amp;lt;T&amp;gt;
+    static_pointer_cast(shared_ptr&amp;lt;U&amp;gt;&amp;amp;&amp;amp; r) noexcept;      // (2) C++20
+  template &amp;lt;class T, class U&amp;gt;
+  constexpr shared_ptr&amp;lt;T&amp;gt;
+    static_pointer_cast(shared_ptr&amp;lt;U&amp;gt;&amp;amp;&amp;amp; r) noexcept;      // (2) C++26
 }
 ```
 
@@ -87,3 +95,4 @@ B::call()
 
 ## 参照
 - [LWG Issue 2996. Missing rvalue overloads for `shared_ptr` operations](https://wg21.cmeerw.net/lwg/issue2996)
+- [P3037R6 `constexpr std::shared_ptr` and friends](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3037r6.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap -- C++26対応としてshared_ptr関連をconstexpr対応 #1500</title>
      <link href="https://cpprefjp.github.io/reference/memory/shared_ptr/swap.html"/>
      <id>97c5f4bd841835d9f91a9fc657881c9f3230cbca:reference/memory/shared_ptr/swap.md</id>
      <updated>2025-10-14T14:41:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/shared_ptr/swap.md b/reference/memory/shared_ptr/swap.md
index 81425942b..ced73f433 100644
--- a/reference/memory/shared_ptr/swap.md
+++ b/reference/memory/shared_ptr/swap.md
@@ -6,7 +6,10 @@
 * cpp11[meta cpp]
 
 ```cpp
-void swap(shared_ptr&amp;amp; x) noexcept;
+void
+  swap(shared_ptr&amp;amp; x) noexcept; // (1) C++11
+constexpr void
+  swap(shared_ptr&amp;amp; x) noexcept; // (1) C++26
 ```
 
 ## 概要
@@ -64,3 +67,7 @@ int main()
 - [Clang](/implementation.md#clang): 3.0 [mark verified]
 - [ICC](/implementation.md#icc): ?
 - [Visual C++](/implementation.md#visual_cpp): 2008 (TR1) [mark verified], 2010 [mark verified], 2012 [mark verified], 2013 [mark verified]
+
+
+## 参照
+- [P3037R6 `constexpr std::shared_ptr` and friends](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3037r6.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap (非メンバ関数) -- C++26対応としてshared_ptr関連をconstexpr対応 #1500</title>
      <link href="https://cpprefjp.github.io/reference/memory/shared_ptr/swap_free.html"/>
      <id>97c5f4bd841835d9f91a9fc657881c9f3230cbca:reference/memory/shared_ptr/swap_free.md</id>
      <updated>2025-10-14T14:41:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/shared_ptr/swap_free.md b/reference/memory/shared_ptr/swap_free.md
index cba035670..d054eb0ab 100644
--- a/reference/memory/shared_ptr/swap_free.md
+++ b/reference/memory/shared_ptr/swap_free.md
@@ -7,7 +7,11 @@
 ```cpp
 namespace std {
   template &amp;lt;class T&amp;gt;
-  void swap(shared_ptr&amp;lt;T&amp;gt;&amp;amp; a, shared_ptr&amp;lt;T&amp;gt;&amp;amp; b) noexcept;
+  void
+    swap(shared_ptr&amp;lt;T&amp;gt;&amp;amp; a, shared_ptr&amp;lt;T&amp;gt;&amp;amp; b) noexcept; // (1) C++11
+  template &amp;lt;class T&amp;gt;
+  constexpr void
+    swap(shared_ptr&amp;lt;T&amp;gt;&amp;amp; a, shared_ptr&amp;lt;T&amp;gt;&amp;amp; b) noexcept; // (1) C++26
 }
 ```
 
@@ -66,3 +70,7 @@ int main()
 - [Clang](/implementation.md#clang): 3.0 [mark verified]
 - [ICC](/implementation.md#icc): ?
 - [Visual C++](/implementation.md#visual_cpp): 2008 (TR1) [mark verified], 2010 [mark verified], 2012 [mark verified], 2013 [mark verified]
+
+
+## 参照
+- [P3037R6 `constexpr std::shared_ptr` and friends](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3037r6.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>use_count -- C++26対応としてshared_ptr関連をconstexpr対応 #1500</title>
      <link href="https://cpprefjp.github.io/reference/memory/shared_ptr/use_count.html"/>
      <id>97c5f4bd841835d9f91a9fc657881c9f3230cbca:reference/memory/shared_ptr/use_count.md</id>
      <updated>2025-10-14T14:41:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/shared_ptr/use_count.md b/reference/memory/shared_ptr/use_count.md
index 7da71ec8e..82299a1a7 100644
--- a/reference/memory/shared_ptr/use_count.md
+++ b/reference/memory/shared_ptr/use_count.md
@@ -6,7 +6,10 @@
 * cpp11[meta cpp]
 
 ```cpp
-long use_count() const noexcept;
+long
+  use_count() const noexcept; // (1) C++11
+constexpr long
+  use_count() const noexcept; // (1) C++26
 ```
 
 ## 概要
@@ -61,3 +64,4 @@ int main()
 
 ## 参照
 - [P0521R0 Proposed Resolution for CA 14 (`shared_ptr` `use_count`/`unique`)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0521r0.html)
+- [P3037R6 `constexpr std::shared_ptr` and friends](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3037r6.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;=&gt; -- C++26対応としてshared_ptr関連をconstexpr対応 #1500</title>
      <link href="https://cpprefjp.github.io/reference/memory/unique_ptr/op_compare_3way.html"/>
      <id>97c5f4bd841835d9f91a9fc657881c9f3230cbca:reference/memory/unique_ptr/op_compare_3way.md</id>
      <updated>2025-10-14T14:41:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/unique_ptr/op_compare_3way.md b/reference/memory/unique_ptr/op_compare_3way.md
index 43bc88088..d9233cf25 100644
--- a/reference/memory/unique_ptr/op_compare_3way.md
+++ b/reference/memory/unique_ptr/op_compare_3way.md
@@ -14,12 +14,19 @@ namespace std {
     typename unique_ptr&amp;lt;T1, D1&amp;gt;::pointer,
     typename unique_ptr&amp;lt;T2, D2&amp;gt;::pointer&amp;gt;
   operator&amp;lt;=&amp;gt;(const unique_ptr&amp;lt;T1, D1&amp;gt;&amp;amp; x, const unique_ptr&amp;lt;T2, D2&amp;gt;&amp;amp; y); // (1) C++20
+  template &amp;lt;class T1, class D1, class T2, class D2&amp;gt;
+    requires three_way_comparable_with&amp;lt;
+               typename unique_ptr&amp;lt;T1, D1&amp;gt;::pointer,
+               typename unique_ptr&amp;lt;T2, D2&amp;gt;::pointer&amp;gt;
+  constexpr compare_three_way_result_t&amp;lt;
+    typename unique_ptr&amp;lt;T1, D1&amp;gt;::pointer,
+    typename unique_ptr&amp;lt;T2, D2&amp;gt;::pointer&amp;gt;
+  operator&amp;lt;=&amp;gt;(const unique_ptr&amp;lt;T1, D1&amp;gt;&amp;amp; x, const unique_ptr&amp;lt;T2, D2&amp;gt;&amp;amp; y); // (1) C++26
 
   template &amp;lt;class T, class D&amp;gt;
     requires three_way_comparable_with&amp;lt;typename unique_ptr&amp;lt;T, D&amp;gt;::pointer&amp;gt;
   compare_three_way_result_t&amp;lt;typename unique_ptr&amp;lt;T, D&amp;gt;::pointer&amp;gt;
   operator&amp;lt;=&amp;gt;(const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x, nullptr_t);                     // (2) C++20
-
   template &amp;lt;class T, class D&amp;gt;
     requires three_way_comparable_with&amp;lt;typename unique_ptr&amp;lt;T, D&amp;gt;::pointer&amp;gt;
   constexpr compare_three_way_result_t&amp;lt;typename unique_ptr&amp;lt;T, D&amp;gt;::pointer&amp;gt;
@@ -98,3 +105,4 @@ p2 is nullptr
     - C++20での三方比較演算子の追加と、関連する演算子の自動導出
 - [LWG3426 `operator&amp;lt;=&amp;gt;(const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp;, nullptr_t)` can&amp;#39;t get no satisfaction](https://cplusplus.github.io/LWG/issue3426)
 - [P2273R3 Making `std::unique_ptr` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2273r3.pdf)
+- [P3037R6 `constexpr std::shared_ptr` and friends](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3037r6.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt; -- C++26対応としてshared_ptr関連をconstexpr対応 #1500</title>
      <link href="https://cpprefjp.github.io/reference/memory/unique_ptr/op_greater.html"/>
      <id>97c5f4bd841835d9f91a9fc657881c9f3230cbca:reference/memory/unique_ptr/op_greater.md</id>
      <updated>2025-10-14T14:41:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/unique_ptr/op_greater.md b/reference/memory/unique_ptr/op_greater.md
index 25831b453..f1a5f863f 100644
--- a/reference/memory/unique_ptr/op_greater.md
+++ b/reference/memory/unique_ptr/op_greater.md
@@ -7,17 +7,25 @@
 ```cpp
 namespace std {
   template &amp;lt;class T1, class D1, class T2, class D2&amp;gt;
-  bool operator&amp;gt;(const unique_ptr&amp;lt;T1, D1&amp;gt;&amp;amp; a, const unique_ptr&amp;lt;T2, D2&amp;gt;&amp;amp; b); // (1) C++11
+  bool
+    operator&amp;gt;(const unique_ptr&amp;lt;T1, D1&amp;gt;&amp;amp; a, const unique_ptr&amp;lt;T2, D2&amp;gt;&amp;amp; b); // (1) C++11
+  template &amp;lt;class T1, class D1, class T2, class D2&amp;gt;
+  constexpr bool
+    operator&amp;gt;(const unique_ptr&amp;lt;T1, D1&amp;gt;&amp;amp; a, const unique_ptr&amp;lt;T2, D2&amp;gt;&amp;amp; b); // (1) C++26
 
   template &amp;lt;class T, class D&amp;gt;
-  bool operator&amp;gt;(const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x, nullptr_t);                     // (2) C++11
+  bool
+    operator&amp;gt;(const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x, nullptr_t);                     // (2) C++11
   template &amp;lt;class T, class D&amp;gt;
-  constexpr bool operator&amp;gt;(const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x, nullptr_t);           // (2) C++23
+  constexpr bool
+    operator&amp;gt;(const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x, nullptr_t);                     // (2) C++23
 
   template &amp;lt;class T, class D&amp;gt;
-  bool operator&amp;gt;(nullptr_t, const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x);                     // (3) C++11
+  bool
+    operator&amp;gt;(nullptr_t, const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x);                     // (3) C++11
   template &amp;lt;class T, class D&amp;gt;
-  constexpr bool operator&amp;gt;(nullptr_t, const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x);           // (3) C++23
+  constexpr bool
+    operator&amp;gt;(nullptr_t, const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x);                     // (3) C++23
 }
 ```
 
@@ -77,3 +85,4 @@ false
 
 ## 参照
 - [P2273R3 Making `std::unique_ptr` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2273r3.pdf)
+- [P3037R6 `constexpr std::shared_ptr` and friends](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3037r6.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt;= -- C++26対応としてshared_ptr関連をconstexpr対応 #1500</title>
      <link href="https://cpprefjp.github.io/reference/memory/unique_ptr/op_greater_equal.html"/>
      <id>97c5f4bd841835d9f91a9fc657881c9f3230cbca:reference/memory/unique_ptr/op_greater_equal.md</id>
      <updated>2025-10-14T14:41:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/unique_ptr/op_greater_equal.md b/reference/memory/unique_ptr/op_greater_equal.md
index bb4c6e474..48306df50 100644
--- a/reference/memory/unique_ptr/op_greater_equal.md
+++ b/reference/memory/unique_ptr/op_greater_equal.md
@@ -7,17 +7,25 @@
 ```cpp
 namespace std {
   template &amp;lt;class T1, class D1, class T2, class D2&amp;gt;
-  bool operator&amp;gt;=(const unique_ptr&amp;lt;T1, D1&amp;gt;&amp;amp; a, const unique_ptr&amp;lt;T2, D2&amp;gt;&amp;amp; b); // (1) C++11
+  bool
+    operator&amp;gt;=(const unique_ptr&amp;lt;T1, D1&amp;gt;&amp;amp; a, const unique_ptr&amp;lt;T2, D2&amp;gt;&amp;amp; b); // (1) C++11
+  template &amp;lt;class T1, class D1, class T2, class D2&amp;gt;
+  constexpr bool
+    operator&amp;gt;=(const unique_ptr&amp;lt;T1, D1&amp;gt;&amp;amp; a, const unique_ptr&amp;lt;T2, D2&amp;gt;&amp;amp; b); // (1) C++26
 
   template &amp;lt;class T, class D&amp;gt;
-  bool operator&amp;gt;=(const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x, nullptr_t);                     // (2) C++11
+  bool
+    operator&amp;gt;=(const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x, nullptr_t);                     // (2) C++11
   template &amp;lt;class T, class D&amp;gt;
-  constexpr bool operator&amp;gt;=(const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x, nullptr_t);           // (2) C++23
+  constexpr bool
+    operator&amp;gt;=(const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x, nullptr_t);                     // (2) C++26
 
   template &amp;lt;class T, class D&amp;gt;
-  bool operator&amp;gt;=(nullptr_t, const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x);                     // (3) C++11
+  bool
+    operator&amp;gt;=(nullptr_t, const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x);                     // (3) C++11
   template &amp;lt;class T, class D&amp;gt;
-  constexpr bool operator&amp;gt;=(nullptr_t, const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x);           // (3) C++23
+  constexpr bool
+    operator&amp;gt;=(nullptr_t, const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x);                     // (3) C++23
 }
 ```
 
@@ -77,3 +85,4 @@ false
 
 ## 参照
 - [P2273R3 Making `std::unique_ptr` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2273r3.pdf)
+- [P3037R6 `constexpr std::shared_ptr` and friends](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3037r6.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt; -- C++26対応としてshared_ptr関連をconstexpr対応 #1500</title>
      <link href="https://cpprefjp.github.io/reference/memory/unique_ptr/op_less.html"/>
      <id>97c5f4bd841835d9f91a9fc657881c9f3230cbca:reference/memory/unique_ptr/op_less.md</id>
      <updated>2025-10-14T14:41:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/unique_ptr/op_less.md b/reference/memory/unique_ptr/op_less.md
index 2a2d16148..fb67e059c 100644
--- a/reference/memory/unique_ptr/op_less.md
+++ b/reference/memory/unique_ptr/op_less.md
@@ -7,17 +7,25 @@
 ```cpp
 namespace std {
   template &amp;lt;class T1, class D1, class T2, class D2&amp;gt;
-  bool operator&amp;lt;(const unique_ptr&amp;lt;T1, D1&amp;gt;&amp;amp; a, const unique_ptr&amp;lt;T2, D2&amp;gt;&amp;amp; b); // (1) C++11
+  bool
+    operator&amp;lt;(const unique_ptr&amp;lt;T1, D1&amp;gt;&amp;amp; a, const unique_ptr&amp;lt;T2, D2&amp;gt;&amp;amp; b); // (1) C++11
+  template &amp;lt;class T1, class D1, class T2, class D2&amp;gt;
+  constexpr bool
+    operator&amp;lt;(const unique_ptr&amp;lt;T1, D1&amp;gt;&amp;amp; a, const unique_ptr&amp;lt;T2, D2&amp;gt;&amp;amp; b); // (1) C++26
 
   template &amp;lt;class T, class D&amp;gt;
-  bool operator&amp;lt;(const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x, nullptr_t);                     // (2) C++11
+  bool
+    operator&amp;lt;(const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x, nullptr_t);                     // (2) C++11
   template &amp;lt;class T, class D&amp;gt;
-  constexpr bool operator&amp;lt;(const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x, nullptr_t);           // (2) C++23
+  constexpr bool
+    operator&amp;lt;(const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x, nullptr_t);                     // (2) C++23
 
   template &amp;lt;class T, class D&amp;gt;
-  bool operator&amp;lt;(nullptr_t, const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x);                     // (3) C++11
+  bool
+    operator&amp;lt;(nullptr_t, const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x);                     // (3) C++11
   template &amp;lt;class T, class D&amp;gt;
-  constexpr bool operator&amp;lt;(nullptr_t, const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x);           // (3) C++23
+  constexpr bool
+    operator&amp;lt;(nullptr_t, const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x);                     // (3) C++23
 }
 ```
 
@@ -79,3 +87,4 @@ true
 
 ## 参照
 - [P2273R3 Making `std::unique_ptr` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2273r3.pdf)
+- [P3037R6 `constexpr std::shared_ptr` and friends](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3037r6.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;= -- C++26対応としてshared_ptr関連をconstexpr対応 #1500</title>
      <link href="https://cpprefjp.github.io/reference/memory/unique_ptr/op_less_equal.html"/>
      <id>97c5f4bd841835d9f91a9fc657881c9f3230cbca:reference/memory/unique_ptr/op_less_equal.md</id>
      <updated>2025-10-14T14:41:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/unique_ptr/op_less_equal.md b/reference/memory/unique_ptr/op_less_equal.md
index 44a69bd99..2e63dba6b 100644
--- a/reference/memory/unique_ptr/op_less_equal.md
+++ b/reference/memory/unique_ptr/op_less_equal.md
@@ -7,17 +7,25 @@
 ```cpp
 namespace std {
   template &amp;lt;class T1, class D1, class T2, class D2&amp;gt;
-  bool operator&amp;lt;=(const unique_ptr&amp;lt;T1, D1&amp;gt;&amp;amp; a, const unique_ptr&amp;lt;T2, D2&amp;gt;&amp;amp; b); // (1) C++11
+  bool
+    operator&amp;lt;=(const unique_ptr&amp;lt;T1, D1&amp;gt;&amp;amp; a, const unique_ptr&amp;lt;T2, D2&amp;gt;&amp;amp; b); // (1) C++11
+  template &amp;lt;class T1, class D1, class T2, class D2&amp;gt;
+  constexpr bool
+    operator&amp;lt;=(const unique_ptr&amp;lt;T1, D1&amp;gt;&amp;amp; a, const unique_ptr&amp;lt;T2, D2&amp;gt;&amp;amp; b); // (1) C++26
 
   template &amp;lt;class T, class D&amp;gt;
-  bool operator&amp;lt;=(const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x, nullptr_t);                     // (2) C++11
+  bool
+    operator&amp;lt;=(const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x, nullptr_t);                     // (2) C++11
   template &amp;lt;class T, class D&amp;gt;
-  constexpr bool operator&amp;lt;=(const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x, nullptr_t);           // (2) C++23
+  constexpr bool
+    operator&amp;lt;=(const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x, nullptr_t);                     // (2) C++23
 
   template &amp;lt;class T, class D&amp;gt;
-  bool operator&amp;lt;=(nullptr_t, const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x);                     // (3) C++11
+  bool
+    operator&amp;lt;=(nullptr_t, const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x);                     // (3) C++11
   template &amp;lt;class T, class D&amp;gt;
-  constexpr bool operator&amp;lt;=(nullptr_t, const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x);           // (3) C++23
+  constexpr bool
+    operator&amp;lt;=(nullptr_t, const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x);                     // (3) C++23
 }
 ```
 
@@ -77,3 +85,4 @@ true
 
 ## 参照
 - [P2273R3 Making `std::unique_ptr` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2273r3.pdf)
+- [P3037R6 `constexpr std::shared_ptr` and friends](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3037r6.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>expired -- C++26対応としてshared_ptr関連をconstexpr対応 #1500</title>
      <link href="https://cpprefjp.github.io/reference/memory/weak_ptr/expired.html"/>
      <id>97c5f4bd841835d9f91a9fc657881c9f3230cbca:reference/memory/weak_ptr/expired.md</id>
      <updated>2025-10-14T14:41:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/weak_ptr/expired.md b/reference/memory/weak_ptr/expired.md
index 8d98c08d3..7e9f5099e 100644
--- a/reference/memory/weak_ptr/expired.md
+++ b/reference/memory/weak_ptr/expired.md
@@ -6,7 +6,10 @@
 * cpp11[meta cpp]
 
 ```cpp
-bool expired() const noexcept;
+bool
+  expired() const noexcept; // (1) C++11
+constexpr bool
+  expired() const noexcept; // (1) C++26
 ```
 
 ## 概要
@@ -65,3 +68,7 @@ int main()
 - [Clang](/implementation.md#clang): 3.0 [mark verified]
 - [ICC](/implementation.md#icc): ?
 - [Visual C++](/implementation.md#visual_cpp): ?
+
+
+## 参照
+- [P3037R6 `constexpr std::shared_ptr` and friends](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3037r6.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>lock -- C++26対応としてshared_ptr関連をconstexpr対応 #1500</title>
      <link href="https://cpprefjp.github.io/reference/memory/weak_ptr/lock.html"/>
      <id>97c5f4bd841835d9f91a9fc657881c9f3230cbca:reference/memory/weak_ptr/lock.md</id>
      <updated>2025-10-14T14:41:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/weak_ptr/lock.md b/reference/memory/weak_ptr/lock.md
index 0be2fa8b1..f7b4712e7 100644
--- a/reference/memory/weak_ptr/lock.md
+++ b/reference/memory/weak_ptr/lock.md
@@ -6,7 +6,10 @@
 * cpp11[meta cpp]
 
 ```cpp
-shared_ptr&amp;lt;T&amp;gt; lock() const noexcept;
+shared_ptr&amp;lt;T&amp;gt;
+  lock() const noexcept; // (1) C++11
+constexpr shared_ptr&amp;lt;T&amp;gt;
+  lock() const noexcept; // (1) C++26
 ```
 * shared_ptr[link /reference/memory/shared_ptr.md]
 
@@ -96,3 +99,4 @@ int main()
 
 ## 参照
 - [LWG 2316 - weak_ptr::lock() should be atomic](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#2316)
+- [P3037R6 `constexpr std::shared_ptr` and friends](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3037r6.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- C++26対応としてshared_ptr関連をconstexpr対応 #1500</title>
      <link href="https://cpprefjp.github.io/reference/memory/weak_ptr/op_assign.html"/>
      <id>97c5f4bd841835d9f91a9fc657881c9f3230cbca:reference/memory/weak_ptr/op_assign.md</id>
      <updated>2025-10-14T14:41:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/weak_ptr/op_assign.md b/reference/memory/weak_ptr/op_assign.md
index 18beef1d8..9272c2554 100644
--- a/reference/memory/weak_ptr/op_assign.md
+++ b/reference/memory/weak_ptr/op_assign.md
@@ -6,18 +6,36 @@
 * cpp11[meta cpp]
 
 ```cpp
-weak_ptr&amp;amp; operator=(const weak_ptr&amp;amp; r) noexcept;      // (1)
+weak_ptr&amp;amp;
+operator=(const weak_ptr&amp;amp; r) noexcept;      // (1) C++11
+constexpr weak_ptr&amp;amp;
+operator=(const weak_ptr&amp;amp; r) noexcept;      // (1) C++26
 
 template &amp;lt;class Y&amp;gt;
-weak_ptr&amp;amp; operator=(const weak_ptr&amp;lt;Y&amp;gt;&amp;amp; r) noexcept;   // (2)
+weak_ptr&amp;amp;
+operator=(const weak_ptr&amp;lt;Y&amp;gt;&amp;amp; r) noexcept;   // (2) C++11
+template &amp;lt;class Y&amp;gt;
+constexpr weak_ptr&amp;amp;
+operator=(const weak_ptr&amp;lt;Y&amp;gt;&amp;amp; r) noexcept;   // (2) C++26
 
 template &amp;lt;class Y&amp;gt;
-weak_ptr&amp;amp; operator=(const shared_ptr&amp;lt;Y&amp;gt;&amp;amp; r) noexcept; // (3)
+weak_ptr&amp;amp;
+operator=(const shared_ptr&amp;lt;Y&amp;gt;&amp;amp; r) noexcept; // (3) C++11
+template &amp;lt;class Y&amp;gt;
+constexpr weak_ptr&amp;amp;
+operator=(const shared_ptr&amp;lt;Y&amp;gt;&amp;amp; r) noexcept; // (3) C++26
 
-weak_ptr&amp;amp; operator=(weak_ptr&amp;amp;&amp;amp; r) noexcept;           // (4) C++14
+weak_ptr&amp;amp;
+operator=(weak_ptr&amp;amp;&amp;amp; r) noexcept;           // (4) C++14
+constexpr weak_ptr&amp;amp;
+operator=(weak_ptr&amp;amp;&amp;amp; r) noexcept;           // (4) C++26
 
 template &amp;lt;class Y&amp;gt;
-weak_ptr&amp;amp; operator=(weak_ptr&amp;lt;Y&amp;gt;&amp;amp;&amp;amp; r) noexcept;        // (5) C++14
+weak_ptr&amp;amp;
+operator=(weak_ptr&amp;lt;Y&amp;gt;&amp;amp;&amp;amp; r) noexcept;        // (5) C++14
+template &amp;lt;class Y&amp;gt;
+constexpr weak_ptr&amp;amp;
+operator=(weak_ptr&amp;lt;Y&amp;gt;&amp;amp;&amp;amp; r) noexcept;        // (5) C++26
 ```
 
 ## 概要
@@ -144,3 +162,4 @@ int main()
 
 ## 参照
 - [LWG Issue 2315. `weak_ptr` should be movable](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2315)
+- [P3037R6 `constexpr std::shared_ptr` and friends](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3037r6.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- C++26対応としてshared_ptr関連をconstexpr対応 #1500</title>
      <link href="https://cpprefjp.github.io/reference/memory/weak_ptr/op_constructor.html"/>
      <id>97c5f4bd841835d9f91a9fc657881c9f3230cbca:reference/memory/weak_ptr/op_constructor.md</id>
      <updated>2025-10-14T14:41:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/weak_ptr/op_constructor.md b/reference/memory/weak_ptr/op_constructor.md
index 1af17989e..e19c3c5ec 100644
--- a/reference/memory/weak_ptr/op_constructor.md
+++ b/reference/memory/weak_ptr/op_constructor.md
@@ -6,19 +6,34 @@
 * cpp11[meta cpp]
 
 ```cpp
-constexpr weak_ptr() noexcept;             // (1)
-weak_ptr(const weak_ptr&amp;amp; r) noexcept;      // (2)
+constexpr
+weak_ptr() noexcept;                       // (1) C++11
 
+weak_ptr(const weak_ptr&amp;amp; r) noexcept;      // (2) C++11
+constexpr
+weak_ptr(const weak_ptr&amp;amp; r) noexcept;      // (2) C++26
+
+template &amp;lt;class Y&amp;gt;
+weak_ptr(const weak_ptr&amp;lt;Y&amp;gt;&amp;amp; r) noexcept;   // (3) C++11
 template &amp;lt;class Y&amp;gt;
-weak_ptr(const weak_ptr&amp;lt;Y&amp;gt;&amp;amp; r) noexcept;   // (3)
+constexpr
+weak_ptr(const weak_ptr&amp;lt;Y&amp;gt;&amp;amp; r) noexcept;   // (3) C++26
 
 template &amp;lt;class Y&amp;gt;
-weak_ptr(const shared_ptr&amp;lt;Y&amp;gt;&amp;amp; r) noexcept; // (4)
+weak_ptr(const shared_ptr&amp;lt;Y&amp;gt;&amp;amp; r) noexcept; // (4) C++11
+template &amp;lt;class Y&amp;gt;
+constexpr
+weak_ptr(const shared_ptr&amp;lt;Y&amp;gt;&amp;amp; r) noexcept; // (4) C++26
 
 weak_ptr(weak_ptr&amp;amp;&amp;amp; r) noexcept;           // (5) C++14
+constexpr
+weak_ptr(weak_ptr&amp;amp;&amp;amp; r) noexcept;           // (5) C++26
 
 template &amp;lt;class Y&amp;gt;
 weak_ptr(weak_ptr&amp;lt;Y&amp;gt;&amp;amp;&amp;amp; r) noexcept;        // (6) C++14
+template &amp;lt;class Y&amp;gt;
+constexpr
+weak_ptr(weak_ptr&amp;lt;Y&amp;gt;&amp;amp;&amp;amp; r) noexcept;        // (6) C++26
 ```
 * shared_ptr[link /reference/memory/shared_ptr.md]
 
@@ -139,3 +154,4 @@ int main()
 ## 参照
 - [LWG Issue 2315. `weak_ptr` should be movable](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2315)
 - [P0414R1 Merging `shared_ptr` changes from Library Fundamentals to C++17](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0414r1.html)
+- [P3037R6 `constexpr std::shared_ptr` and friends](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3037r6.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>デストラクタ -- C++26対応としてshared_ptr関連をconstexpr対応 #1500</title>
      <link href="https://cpprefjp.github.io/reference/memory/weak_ptr/op_destructor.html"/>
      <id>97c5f4bd841835d9f91a9fc657881c9f3230cbca:reference/memory/weak_ptr/op_destructor.md</id>
      <updated>2025-10-14T14:41:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/weak_ptr/op_destructor.md b/reference/memory/weak_ptr/op_destructor.md
index ee7e69931..b601f6ec7 100644
--- a/reference/memory/weak_ptr/op_destructor.md
+++ b/reference/memory/weak_ptr/op_destructor.md
@@ -6,7 +6,8 @@
 * cpp11[meta cpp]
 
 ```cpp
-~weak_ptr();
+~weak_ptr();           // (1) C++11
+constexpr ~weak_ptr(); // (1) C++26
 ```
 
 ## weak_ptrオブジェクトの破棄
@@ -22,3 +23,7 @@
 - [Clang](/implementation.md#clang): 3.0 [mark verified]
 - [ICC](/implementation.md#icc): ?
 - [Visual C++](/implementation.md#visual_cpp): ?
+
+
+## 参照
+- [P3037R6 `constexpr std::shared_ptr` and friends](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3037r6.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>owner_before -- C++26対応としてshared_ptr関連をconstexpr対応 #1500</title>
      <link href="https://cpprefjp.github.io/reference/memory/weak_ptr/owner_before.html"/>
      <id>97c5f4bd841835d9f91a9fc657881c9f3230cbca:reference/memory/weak_ptr/owner_before.md</id>
      <updated>2025-10-14T14:41:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/weak_ptr/owner_before.md b/reference/memory/weak_ptr/owner_before.md
index 61798d25a..e74e819bf 100644
--- a/reference/memory/weak_ptr/owner_before.md
+++ b/reference/memory/weak_ptr/owner_before.md
@@ -7,16 +7,24 @@
 
 ```cpp
 template &amp;lt;class U&amp;gt;
-bool owner_before(const shared_ptr&amp;lt;U&amp;gt;&amp;amp; b) const;          // (1) C++11
-
+bool
+  owner_before(const shared_ptr&amp;lt;U&amp;gt;&amp;amp; b) const;          // (1) C++11
 template &amp;lt;class U&amp;gt;
-bool owner_before(const shared_ptr&amp;lt;U&amp;gt;&amp;amp; b) const noexcept; // (1) C++17
-
+bool
+  owner_before(const shared_ptr&amp;lt;U&amp;gt;&amp;amp; b) const noexcept; // (1) C++17
 template &amp;lt;class U&amp;gt;
-bool owner_before(const weak_ptr&amp;lt;U&amp;gt;&amp;amp; b) const;            // (2) C++11
+constexpr bool
+  owner_before(const shared_ptr&amp;lt;U&amp;gt;&amp;amp; b) const noexcept; // (1) C++17
 
 template &amp;lt;class U&amp;gt;
-bool owner_before(const weak_ptr&amp;lt;U&amp;gt;&amp;amp; b) const noexcept;   // (2) C++17
+bool
+  owner_before(const weak_ptr&amp;lt;U&amp;gt;&amp;amp; b) const;            // (2) C++11
+template &amp;lt;class U&amp;gt;
+bool
+  owner_before(const weak_ptr&amp;lt;U&amp;gt;&amp;amp; b) const noexcept;   // (2) C++17
+template &amp;lt;class U&amp;gt;
+constexpr bool
+  owner_before(const weak_ptr&amp;lt;U&amp;gt;&amp;amp; b) const noexcept;   // (2) C++26
 ```
 * shared_ptr[link /reference/memory/shared_ptr.md]
 
@@ -82,3 +90,4 @@ false
 - [N2637 Revisiting std::shared_ptr comparison](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2637.pdf)
 - [LWG Issue 1406. Support hashing smart-pointers based on owner](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#1406)
 - [LWG Issue 2873. Add `noexcept` to several `shared_ptr` related functions](https://wg21.cmeerw.net/lwg/issue2873)
+- [P3037R6 `constexpr std::shared_ptr` and friends](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3037r6.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>reset -- C++26対応としてshared_ptr関連をconstexpr対応 #1500</title>
      <link href="https://cpprefjp.github.io/reference/memory/weak_ptr/reset.html"/>
      <id>97c5f4bd841835d9f91a9fc657881c9f3230cbca:reference/memory/weak_ptr/reset.md</id>
      <updated>2025-10-14T14:41:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/weak_ptr/reset.md b/reference/memory/weak_ptr/reset.md
index 7bd064551..a786bb9b2 100644
--- a/reference/memory/weak_ptr/reset.md
+++ b/reference/memory/weak_ptr/reset.md
@@ -6,7 +6,10 @@
 * cpp11[meta cpp]
 
 ```cpp
-void reset() noexcept;
+void
+  reset() noexcept; // (1) C++11
+constexpr void
+  reset() noexcept; // (1) C++26
 ```
 
 ## 概要
@@ -54,3 +57,7 @@ int main()
 - [Clang](/implementation.md#clang): 3.0 [mark verified]
 - [ICC](/implementation.md#icc): ?
 - [Visual C++](/implementation.md#visual_cpp): ?
+
+
+## 参照
+- [P3037R6 `constexpr std::shared_ptr` and friends](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3037r6.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap -- C++26対応としてshared_ptr関連をconstexpr対応 #1500</title>
      <link href="https://cpprefjp.github.io/reference/memory/weak_ptr/swap.html"/>
      <id>97c5f4bd841835d9f91a9fc657881c9f3230cbca:reference/memory/weak_ptr/swap.md</id>
      <updated>2025-10-14T14:41:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/weak_ptr/swap.md b/reference/memory/weak_ptr/swap.md
index 8f21fbb4d..2d49aafee 100644
--- a/reference/memory/weak_ptr/swap.md
+++ b/reference/memory/weak_ptr/swap.md
@@ -6,7 +6,10 @@
 * cpp11[meta cpp]
 
 ```cpp
-void swap(weak_ptr&amp;amp; r) noexcept;
+void
+  swap(weak_ptr&amp;amp; r) noexcept; // (1) C++11
+constexpr void
+  swap(weak_ptr&amp;amp; r) noexcept; // (1) C++26
 ```
 
 ## 概要
@@ -78,3 +81,7 @@ int main()
 - [Clang](/implementation.md#clang): 3.0 [mark verified]
 - [ICC](/implementation.md#icc): ?
 - [Visual C++](/implementation.md#visual_cpp): ?
+
+
+## 参照
+- [P3037R6 `constexpr std::shared_ptr` and friends](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3037r6.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap (非メンバ関数) -- C++26対応としてshared_ptr関連をconstexpr対応 #1500</title>
      <link href="https://cpprefjp.github.io/reference/memory/weak_ptr/swap_free.html"/>
      <id>97c5f4bd841835d9f91a9fc657881c9f3230cbca:reference/memory/weak_ptr/swap_free.md</id>
      <updated>2025-10-14T14:41:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/weak_ptr/swap_free.md b/reference/memory/weak_ptr/swap_free.md
index f6e88b823..55296eed8 100644
--- a/reference/memory/weak_ptr/swap_free.md
+++ b/reference/memory/weak_ptr/swap_free.md
@@ -7,7 +7,11 @@
 ```cpp
 namespace std {
   template &amp;lt;class T&amp;gt;
-  void swap(weak_ptr&amp;lt;T&amp;gt;&amp;amp; a, weak_ptr&amp;lt;T&amp;gt;&amp;amp; b) noexcept;
+  void
+    swap(weak_ptr&amp;lt;T&amp;gt;&amp;amp; a, weak_ptr&amp;lt;T&amp;gt;&amp;amp; b) noexcept; // (1) C++11
+  template &amp;lt;class T&amp;gt;
+  constexpr void
+    swap(weak_ptr&amp;lt;T&amp;gt;&amp;amp; a, weak_ptr&amp;lt;T&amp;gt;&amp;amp; b) noexcept; // (1) C++26
 }
 ```
 
@@ -80,3 +84,7 @@ int main()
 - [Clang](/implementation.md#clang): 3.0 [mark verified]
 - [ICC](/implementation.md#icc): ?
 - [Visual C++](/implementation.md#visual_cpp): ?
+
+
+## 参照
+- [P3037R6 `constexpr std::shared_ptr` and friends](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3037r6.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>use_count -- C++26対応としてshared_ptr関連をconstexpr対応 #1500</title>
      <link href="https://cpprefjp.github.io/reference/memory/weak_ptr/use_count.html"/>
      <id>97c5f4bd841835d9f91a9fc657881c9f3230cbca:reference/memory/weak_ptr/use_count.md</id>
      <updated>2025-10-14T14:41:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/weak_ptr/use_count.md b/reference/memory/weak_ptr/use_count.md
index d784d70ac..c15a2b9f2 100644
--- a/reference/memory/weak_ptr/use_count.md
+++ b/reference/memory/weak_ptr/use_count.md
@@ -6,7 +6,10 @@
 * cpp11[meta cpp]
 
 ```cpp
-long use_count() const noexcept;
+long
+  use_count() const noexcept; // (1) C++11
+constexpr long
+  use_count() const noexcept; // (1) C++26
 ```
 
 ## 概要
@@ -56,3 +59,7 @@ int main()
 - [Clang](/implementation.md#clang): 3.0 [mark verified]
 - [ICC](/implementation.md#icc): ?
 - [Visual C++](/implementation.md#visual_cpp): ?
+
+
+## 参照
+- [P3037R6 `constexpr std::shared_ptr` and friends](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3037r6.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>flat_map -- flat_map : 速度比較として検索がmapより遅いと書かれていたのを修正 (#1533) #1531</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_map.html"/>
      <id>751dd51cb8503e637c183452fe78c711441de3a4:reference/flat_map/flat_map.md</id>
      <updated>2025-10-14T11:34:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_map.md b/reference/flat_map/flat_map.md
index 287f7b9bb..b63924ae8 100644
--- a/reference/flat_map/flat_map.md
+++ b/reference/flat_map/flat_map.md
@@ -20,7 +20,13 @@ namespace std {
 ## 概要
 `std::flat_map`は、重複しない要素を格納する連想コンテナの一種であり、キーとそれに対応する値を格納する。
 
-`std::flat_map`は、ノードベースで実装される[`std::map`](/reference/map/map.md)、ハッシュテーブルで実装される[`std::unordered_map`](/reference/unordered_map/unordered_map.md)とは異なり、ソート済み配列と二分探索の組み合わせで実装される。これはほかの実装と比較して、メモリ使用量と列挙速度において優位であり、一方で挿入速度と検索速度はほかの実装に劣る。
+`std::flat_map`は、ノードベースで実装される[`std::map`](/reference/map/map.md)、ハッシュテーブルで実装される[`std::unordered_map`](/reference/unordered_map/unordered_map.md)とは異なり、ソート済み配列と二分探索の組み合わせで実装される。
+
+ほかの連想コンテナとの比較としては、
+
+- メモリ使用量と列挙速度において優位
+- 挿入速度と削除速度はほかの実装に劣る
+- 検索速度は、[`std::map`](/reference/map/map.md)より高速であることが期待できるが (計算量としては同じ対数時間だが、メモリアクセスが高速)、サイズが大きいときは[`std::unordered_map`](/reference/unordered_map/unordered_map.md)に劣る
 
 また、このクラスは分類としては[`std::queue`](/reference/queue/queue.md)や[`std::stack`](/reference/stack/stack.md)と同様のコンテナアダプタに分類され、キーの配列と値の配列の2つを内部で持ち、それを[`std::ranges::zip_view`](/reference/ranges/zip_view.md)で綴じあわせて扱う実装となっている。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>flat_multimap -- flat_map : 速度比較として検索がmapより遅いと書かれていたのを修正 (#1533) #1531</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_multimap.html"/>
      <id>751dd51cb8503e637c183452fe78c711441de3a4:reference/flat_map/flat_multimap.md</id>
      <updated>2025-10-14T11:34:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_multimap.md b/reference/flat_map/flat_multimap.md
index d3f017722..f857ebef2 100644
--- a/reference/flat_map/flat_multimap.md
+++ b/reference/flat_map/flat_multimap.md
@@ -20,7 +20,13 @@ namespace std {
 ## 概要
 `flat_multimap` は同一キーの要素を複数格納できる連想コンテナの一種であり、キーとそれに対応する値を格納する。
 
-`std::flat_multimap`は、ノードベースで実装される[`std::multimap`](/reference/map/multimap.md)、ハッシュテーブルで実装される[`std::unordered_multimap`](/reference/unordered_map/unordered_multimap.md)とは異なり、ソート済み配列と二分探索の組み合わせで実装される。これはほかの実装と比較して、メモリ使用量と列挙速度において優位であり、一方で挿入速度と検索速度はほかの実装に劣る。
+`std::flat_multimap`は、ノードベースで実装される[`std::multimap`](/reference/map/multimap.md)、ハッシュテーブルで実装される[`std::unordered_multimap`](/reference/unordered_map/unordered_multimap.md)とは異なり、ソート済み配列と二分探索の組み合わせで実装される。
+
+ほかの連想コンテナとの比較としては、
+
+- メモリ使用量と列挙速度において優位
+- 挿入速度と削除速度はほかの実装に劣る
+- 検索速度は、[`std::multimap`](/reference/map/multimap.md)より高速であることが期待できるが (計算量としては同じ対数時間だが、メモリアクセスが高速)、サイズが大きいときは[`std::unordered_multimap`](/reference/unordered_map/unordered_multimap.md)に劣る
 
 また、このクラスは分類としては[`std::queue`](/reference/queue/queue.md)や[`std::stack`](/reference/stack/stack.md)と同様のコンテナアダプタに分類され、キーの配列と値の配列の2つを内部で持ち、それを[`std::ranges::zip_view`](/reference/ranges/zip_view.md)で綴じあわせて扱う実装となっている。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>flat_multiset -- flat_map : 速度比較として検索がmapより遅いと書かれていたのを修正 (#1533) #1531</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_multiset.html"/>
      <id>751dd51cb8503e637c183452fe78c711441de3a4:reference/flat_set/flat_multiset.md</id>
      <updated>2025-10-14T11:34:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_multiset.md b/reference/flat_set/flat_multiset.md
index 7772514bb..3c6c273be 100644
--- a/reference/flat_set/flat_multiset.md
+++ b/reference/flat_set/flat_multiset.md
@@ -18,7 +18,13 @@ namespace std {
 ## 概要
 `std::flat_multiset`は、重複する要素を許可する連想コンテナの一種であり、要素自身がキーとなる、集合を表すクラスである。
 
-`std::flat_multiset`は、ノードベースで実装される[`std::multiset`](/reference/set/multiset.md)、ハッシュテーブルで実装される[`std::unordered_multiset`](/reference/unordered_set/unordered_multiset.md)とは異なり、ソート済み配列と二分探索の組み合わせで実装される。これはほかの実装と比較して、メモリ使用量と列挙速度において優位であり、一方で挿入速度と検索速度はほかの実装に劣る。
+`std::flat_multiset`は、ノードベースで実装される[`std::multiset`](/reference/set/multiset.md)、ハッシュテーブルで実装される[`std::unordered_multiset`](/reference/unordered_set/unordered_multiset.md)とは異なり、ソート済み配列と二分探索の組み合わせで実装される。
+
+ほかの連想コンテナとの比較としては、
+
+- メモリ使用量と列挙速度において優位
+- 挿入速度と削除速度はほかの実装に劣る
+- 検索速度は、[`std::multiset`](/reference/set/multiset.md)より高速であることが期待できるが (計算量としては同じ対数時間だが、メモリアクセスが高速)、サイズが大きいときは[`std::unordered_multiset`](/reference/unordered_set/unordered_multiset.md)に劣る
 
 また、このクラスは分類としては[`std::queue`](/reference/queue/queue.md)や[`std::stack`](/reference/stack/stack.md)と同様のコンテナアダプタに分類され、キーの配列をラップして扱う実装となっている。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>flat_set -- flat_map : 速度比較として検索がmapより遅いと書かれていたのを修正 (#1533) #1531</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_set.html"/>
      <id>751dd51cb8503e637c183452fe78c711441de3a4:reference/flat_set/flat_set.md</id>
      <updated>2025-10-14T11:34:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_set.md b/reference/flat_set/flat_set.md
index 70debad4d..13d6dd089 100644
--- a/reference/flat_set/flat_set.md
+++ b/reference/flat_set/flat_set.md
@@ -18,7 +18,13 @@ namespace std {
 ## 概要
 `std::flat_set`は、重複しない要素を格納する連想コンテナの一種であり、要素自身がキーとなる、集合を表すクラスである。
 
-`std::flat_set`は、ノードベースで実装される[`std::set`](/reference/set/set.md)、ハッシュテーブルで実装される[`std::unordered_set`](/reference/unordered_set/unordered_set.md)とは異なり、ソート済み配列と二分探索の組み合わせで実装される。これはほかの実装と比較して、メモリ使用量と列挙速度において優位であり、一方で挿入速度と検索速度はほかの実装に劣る。
+`std::flat_set`は、ノードベースで実装される[`std::set`](/reference/set/set.md)、ハッシュテーブルで実装される[`std::unordered_set`](/reference/unordered_set/unordered_set.md)とは異なり、ソート済み配列と二分探索の組み合わせで実装される。
+
+ほかの連想コンテナとの比較としては、
+
+- メモリ使用量と列挙速度において優位
+- 挿入速度と削除速度はほかの実装に劣る
+- 検索速度は、[`std::set`](/reference/set/set.md)より高速であることが期待できるが (計算量としては同じ対数時間だが、メモリアクセスが高速)、サイズが大きいときは[`std::unordered_set`](/reference/unordered_set/unordered_set.md)に劣る
 
 また、このクラスは分類としては[`std::queue`](/reference/queue/queue.md)や[`std::stack`](/reference/stack/stack.md)と同様のコンテナアダプタに分類され、キーの配列をラップして扱う実装となっている。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
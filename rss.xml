<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2024-02-06T16:13:45.759125</updated>
  <id>12056c14-2896-4e23-860e-79dffeab35ff</id>

  
    <entry>
      <title>mdspan -- mdspan: submdspan_extents(#1201)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan.html"/>
      <id>979afd4bdb032f5d70b4660f127510ebdad01e2e:reference/mdspan.md</id>
      <updated>2024-02-07T01:09:31+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;mdspan&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;mdspan&lt;/span&gt;&lt;span class=&#34;cpp cpp23&#34; title=&#34;C++23で追加&#34;&gt;(C++23)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;mdspan&amp;gt;&lt;/code&gt;ヘッダでは、任意のメモリブロックに対して多次元配列のようにアクセスする機能を定義する。&lt;/p&gt;
&lt;h2&gt;多次元配列サイズ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/extents.html&#34;&gt;extents&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;多次元配列のサイズを表す値 (class template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/extents.html&#34;&gt;dextents&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;全次元が動的な多次元配列のサイズを表す値 (alias template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;レイアウトマッピング&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/layout_left.html&#34;&gt;layout_left&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;列優先(Fortran/Matlabスタイル)レイアウトマッピングポリシー (class)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/layout_right.html&#34;&gt;layout_right&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;行優先(C/C++スタイル)レイアウトマッピングポリシー (class)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/layout_stride.html&#34;&gt;layout_stride&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ストライド幅指定レイアウトマッピングポリシー (class)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;要素アクセサ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/default_accessor.html&#34;&gt;default_accessor&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;デフォルト要素アクセサ (class template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;多次元配列ビュー&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/mdspan.html&#34;&gt;mdspan&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;多次元配列ビュー (class template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;多次元配列部分ビュー&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/strided_slice.html&#34;&gt;strided_slice&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定次元のストライド指定要素取り出しを指示する集成体クラステンプレート (class template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/full_extent_t.html&#34;&gt;full_extent_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定次元の全要素取り出しを指示するタグ型 (class)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/full_extent_t.html&#34;&gt;full_extent&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定次元の全要素取り出しを指示するタグ値 (variable)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/submdspan_mapping_result.html&#34;&gt;submdspan_mapping_result&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;多次元配列部分ビューのレイアウトマッピング情報 (class template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/submdspan_extents.html&#34;&gt;submdspan_extents&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;多次元配列部分ビューの多次元配列サイズを計算する (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/submdspan.html&#34;&gt;submdspan&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;多次元配列部分ビューを取得する (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++23&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++20 &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/span.html&#34;&gt;&amp;lt;span&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html&#34; target=&#34;_blank&#34;&gt;P0009R18 MDSPAN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2630r4.html&#34; target=&#34;_blank&#34;&gt;P2630R4 Submdspan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>first_ -- mdspan: submdspan_extents(#1201)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/first_.html"/>
      <id>979afd4bdb032f5d70b4660f127510ebdad01e2e:reference/mdspan/first_.md</id>
      <updated>2024-02-07T01:09:31+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/first_.md b/reference/mdspan/first_.md
index 0a5dc8dd1..7bc26f57d 100644
--- a/reference/mdspan/first_.md
+++ b/reference/mdspan/first_.md
@@ -13,8 +13,8 @@ constexpr IndexType first_(SliceSpecifiers... slices);
 
 `S_k`を`SliceSpecifiers`の`k`番目の型、`s_k`を`slices`の`k`番目の値としたとき、説明用の`P_k`の値を次のように定義する。
 
-- 型`S_k`が[`convertible_to`](/reference/concepts/convertible_to.md)`&amp;lt;index_type&amp;gt;`のモデルのとき`s_k`、そうでなければ
-- 型`S_k`が[`index-pair-like`](index-pair-like.md)`&amp;lt;index_type&amp;gt;`のモデルのとき`get&amp;lt;0&amp;gt;(s_k)`、そうでなければ
+- 型`S_k`が[`convertible_to`](/reference/concepts/convertible_to.md)`&amp;lt;IndexType&amp;gt;`のモデルのとき`s_k`、そうでなければ
+- 型`S_k`が[`index-pair-like`](index-pair-like.md)`&amp;lt;IndexType&amp;gt;`のモデルのとき`get&amp;lt;0&amp;gt;(s_k)`、そうでなければ
 - 型`S_k`が[`strided_slice`](strided_slice.md)の特殊化のとき[`de-ice`](de-ice.md)`(s_k.offset)`、そうでなければ
 - 値`0`
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>src-indices -- mdspan: submdspan_extents(#1201)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/src-indices.html"/>
      <id>979afd4bdb032f5d70b4660f127510ebdad01e2e:reference/mdspan/src-indices.md</id>
      <updated>2024-02-07T01:09:31+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/src-indices.md b/reference/mdspan/src-indices.md
index f93730159..55ace153e 100644
--- a/reference/mdspan/src-indices.md
+++ b/reference/mdspan/src-indices.md
@@ -13,22 +13,16 @@ constexpr array&amp;lt;IndexType, sizeof...(SliceSpecifiers)&amp;gt;
 ## 概要
 `src-indices`は[`submdspan`](submdspan.md)動作説明用の関数テンプレートである。
 
-説明のため`rank`を`slices`の要素数、`S_k`を`SliceSpecifiers`の`k`番目の型とする
-[`array`](/reference/array/array.md)`&amp;lt;size_t, rank&amp;gt;`型の配列`map-rank`を導入し、その要素`map-rank[k]`を下記の通り定義する。
-
-- 型`S_k`が[`convertible_to`](/reference/concepts/convertible_to.md)`&amp;lt;IndexType&amp;gt;`のモデルのとき[`dynamic_extent`](/reference/span/dynamic_extent.md)、そうでなければ
-- `j &amp;lt; k`において型`S_j`が[`convertible_to`](/reference/concepts/convertible_to.md)`&amp;lt;IndexType&amp;gt;`のモデルではない個数
-
 
 ## 適格要件
 `IndexType`は符号付き整数型または符号無し整数型であること。
 
 
 ## 戻り値
-半開区間`[0, rank)`の`k`に対して、`k`番目の要素が下記の値を持つ配列を返す。
+半開区間`[0, sizeof...(SliceSpecifiers))`の`k`に対して、`k`番目の要素が下記の値を持つ配列を返す。
 
-- `map-rank[k]`が[`dynamic_extent`](/reference/span/dynamic_extent.md)に等しいとき、[`first_`](first_.md)`&amp;lt;IndexType, k&amp;gt;(slices...)`
-- そうでなければ、[`first_`](first_.md)`&amp;lt;IndexType, k&amp;gt;(slices...) + indices[map-rank[k]]`
+- [`map-rank[k]`](submdspan_extents.md)が[`dynamic_extent`](/reference/span/dynamic_extent.md)に等しいとき、[`first_`](first_.md)`&amp;lt;IndexType, k&amp;gt;(slices...)`
+- そうでなければ、[`first_`](first_.md)`&amp;lt;IndexType, k&amp;gt;(slices...) + indices[`[`map-rank[k]`](submdspan_extents.md)`]`
 
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>submdspan -- mdspan: submdspan_extents(#1201)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/submdspan.html"/>
      <id>979afd4bdb032f5d70b4660f127510ebdad01e2e:reference/mdspan/submdspan.md</id>
      <updated>2024-02-07T01:09:31+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/submdspan.md b/reference/mdspan/submdspan.md
index 6ca3ad68f..f888eace8 100644
--- a/reference/mdspan/submdspan.md
+++ b/reference/mdspan/submdspan.md
@@ -45,8 +45,8 @@ namespace std {
 説明用の型`index_type`を[`Extents::index_type`](extents.md)、変数`sub_map_offset`を`submdspan_mapping(`[`src.mapping()`](mdspan/mapping.md)`, slices...)`の結果としたとき、
 
 - 型`decltype(submdspan_mapping(`[`src.mapping()`](mdspan/mapping.md)`, slices...))`が[`submdspan_mapping_result`](submdspan_mapping_result.md)の特殊化であり、
-- [`is_same_v`](/reference/type_traits/is_same.md)`&amp;lt;`[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;decltype(`[`sub_map_offset.mapping`](submdspan_mapping_result.md)`.extents())&amp;gt;, decltype(`[`submdspan_extents`](submdspan_extents.md.nolink)`(`[`src.mapping()`](mdspan/mapping.md)`, slices...))&amp;gt;`が`true`、かつ
-- [`src.extents()`](mdspan/extents.md)の各次元インデクス`k`において、`S_k`を`SliceSpecifiers`の`k`番目の型としたき、下記いずれかの1つのみを満たすこと。
+- [`is_same_v`](/reference/type_traits/is_same.md)`&amp;lt;`[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;decltype(`[`sub_map_offset.mapping`](submdspan_mapping_result.md)`.extents())&amp;gt;, decltype(`[`submdspan_extents`](submdspan_extents.md)`(`[`src.mapping()`](mdspan/mapping.md)`, slices...))&amp;gt;`が`true`、かつ
+- [`src.extents()`](mdspan/extents.md)の各次元インデクス`k`において、`S_k`を`SliceSpecifiers`の`k`番目の型としたき、下記いずれかのうち1つだけを満たすこと。
     - 型`S_k`が[`convertible_to`](/reference/concepts/convertible_to.md)`&amp;lt;index_type&amp;gt;`のモデル
     - 型`S_k`が[`index-pair-like`](index-pair-like.md)`&amp;lt;index_type&amp;gt;`のモデル
     - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;S_k,` [`full_extent_t`](full_extent_t.md)`&amp;gt;`が`true`
@@ -58,8 +58,8 @@ namespace std {
     - 型`S_k`が[`strided_slice`](strided_slice.md)の特殊化のとき
         - `s_k.extent == 0`、または
         - `s_k.stride &amp;gt; 0`
-    - `0` ≤ [`first_&amp;lt;index_type, k&amp;gt;`](first_.md)`(slices...)` ≤ [`last_&amp;lt;k&amp;gt;`](last_.md)`(`[`src.extents()`](mdspan/extents.md)`, slices...)` ≤ [`src.extent(k)`](mdspan/extent.md)
-- [`sub_map_offset.mapping`](submdspan_mapping_result.md)`.extents() ==` [`submdspan_extents`](submdspan_extents.md.nolink)`(`[`src.mapping()`](mdspan/mapping.md)`, slices...)`が`true`、かつ
+    - `0` ≤ [`first_`](first_.md)`&amp;lt;index_type, k&amp;gt;(slices...)` ≤ [`last_`](last_.md)`&amp;lt;k&amp;gt;(`[`src.extents()`](mdspan/extents.md)`, slices...)` ≤ [`src.extent(k)`](mdspan/extent.md)
+- [`sub_map_offset.mapping`](submdspan_mapping_result.md)`.extents() ==` [`submdspan_extents`](submdspan_extents.md)`(`[`src.mapping()`](mdspan/mapping.md)`, slices...)`が`true`、かつ
 - [`sub_map_offset.mapping`](submdspan_mapping_result.md)`.extents()`の多次元インデクス値を表す任意の整数パック`I`に対して、`sub_map_offset.mapping(I...) +` [`sub_map_offset.offset`](submdspan_mapping_result.md) `==` [`src.mapping()`](mdspan/mapping.md)`(`[`src-indices`](src-indices.md)`(`[`array`](/reference/array/array.md)`{I...}, slices...))`が`true`であること。
 
 
@@ -68,13 +68,14 @@ namespace std {
 
 ```cpp
 auto sub_map_offset = submdspan_mapping(src.mapping(), slices...);
-return mdspan(src.accessor().offset(src.data(), sub_map_offset.offset),
+return mdspan(src.accessor().offset(src.data_handle(), sub_map_offset.offset),
               sub_map_offset.mapping,
               AccessorPolicy::offset_policy(src.accessor()));
 ```
 * mdspan[link mdspan.md]
 * sub_map_offset[link submdspan_mapping_result.md]
 * src.mapping()[link mdspan/mapping.md]
+* src.data_handle()[link mdspan/mapping.md]
 * src.accessor()[link mdspan/accessor.md]
 * AccessorPolicy::offset_policy[link AccessorPolicy.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>submdspan_extents -- mdspan: submdspan_extents(#1201)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/submdspan_extents.html"/>
      <id>979afd4bdb032f5d70b4660f127510ebdad01e2e:reference/mdspan/submdspan_extents.md</id>
      <updated>2024-02-07T01:09:31+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/submdspan_extents.md b/reference/mdspan/submdspan_extents.md
new file mode 100644
index 000000000..bcdf8b9db
--- /dev/null
+++ b/reference/mdspan/submdspan_extents.md
@@ -0,0 +1,131 @@
+# submdspan_extents
+* mdspan[meta header]
+* function template[meta id-type]
+* std[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;class IndexType, class ... Extents, class ... SliceSpecifiers&amp;gt;
+  constexpr auto submdspan_extents(const extents&amp;lt;IndexType, Extents...&amp;gt;&amp;amp; src, SliceSpecifiers ... slices);
+}
+```
+* extents[link extents.md]
+
+## 概要
+多次元配列サイズ[`extents`](extents.md)と各次元からの要素取り出し（スライス）方式を指定して、新しい多次元配列サイズ[`extents`](extents.md)を取得する。
+
+### 動作説明用
+- 型`S_k` : `SliceSpecifiers`の`k`番目の型
+- 値`s_k` : `slices`の`k`番目の値
+- 値`map-rank` : `k`番目の要素`map-rank[k]`が下記を満たす、[`array`](/reference/array/array.md)`&amp;lt;size_t, sizeof...(SliceSpecifiers)&amp;gt;`型の配列値
+    - 型`S_k`が[`convertible_to`](/reference/concepts/convertible_to.md)`&amp;lt;IndexType&amp;gt;`のモデルのとき[`dynamic_extent`](/reference/span/dynamic_extent.md)、そうでなければ
+    - `j &amp;lt; k`において型`S_j`が[`convertible_to`](/reference/concepts/convertible_to.md)`&amp;lt;IndexType&amp;gt;`のモデルではない個数
+
+動作説明用の配列`map-rank[]`は、変換元の次元インデクス`k`から変換先の次元インデクスへの対応関係を表現している。要素値`dynamic_extent`は変換により削減される次元を表す。
+
+
+## テンプレートパラメータ制約
+`sizeof...(slices)`が`Extents::rank()`と等しいこと。
+
+
+## 適格要件
+`src`の各次元インデクス`k`に対して、下記いずれかのうち1つだけを満たすこと。
+ 
+- 型`S_k`が[`convertible_to`](/reference/concepts/convertible_to.md)`&amp;lt;IndexType&amp;gt;`のモデル
+- 型`S_k`が[`index-pair-like`](index-pair-like.md)`&amp;lt;IndexType&amp;gt;`のモデル
+- [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;S_k,` [`full_extent_t`](full_extent_t.md)`&amp;gt;`が`true`
+- 型`S_k`が[`strided_slice`](strided_slice.md)の特殊化
+
+
+## 事前条件
+`src`の各次元インデクス`k`に対して、下記を全て満たすこと。
+
+- 型`S_k`が[`strided_slice`](strided_slice.md)の特殊化のとき
+    - `s_k.extent == 0`、または
+    - `s_k.stride &amp;gt; 0`
+- `0` ≤ [`first_`](first_.md)`&amp;lt;IndexType, k&amp;gt;(slices...)` ≤ [`last_`](last_.md)`&amp;lt;k&amp;gt;(src, slices...)` ≤ [`src.extent(k)`](extents/extent.md)
+
+
+## 戻り値
+説明用の型`SubExtents`を、下記を満たす[`extents`](extents.md)の特殊化とする。
+
+- [`SubExtents::rank()`](extents/rank.md)は、型`S_k`が[`convertible_to`](/reference/concepts/convertible_to.md)`&amp;lt;IndexType&amp;gt;`のモデルではない`k`の個数に等しく、かつ
+- `map-rank[k] !=` [`dynamic_extent`](/reference/span/dynamic_extent.md)を満たす`Extents`の次元インデクス`k`について、[`SubExtents::static_extent`](extents/static_extent.md)`(map-rank[k])`が下記と等しいこと
+    - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;S_k,` [`full_extent_t`](full_extent_t.md)`&amp;gt;`が`true`のとき、[`SubExtents::static_extent`](extents/static_extent.md)`(k)`、そうでなければ、
+    - 型`S_k`が[`index-pair-like`](index-pair-like.md)のモデルかつ`tuple_element_t&amp;lt;0, S_k&amp;gt;`および`tuple_element_t&amp;lt;1, S_k&amp;gt;`がいずれも[`integral-constant-like`](integral-constant-like.md)のモデルであるとき、[`de-ice`](de-ice.md)`(tuple_element_t&amp;lt;1, S_k&amp;gt;) -` [`de-ice`](de-ice.md)`(tuple_element_t&amp;lt;0, S_k&amp;gt;)`、そうでなければ
+    - 型`S_k`が[`strided_slice`](strided_slice.md)の特殊化かつメンバ型`extent_type`が`S_k::extent_type() == 0`かつ[`integral-constant-like`](integral-constant-like.md)のモデルであるとき、値`0`、そうでなければ
+    - 型`S_k`が[`strided_slice`](strided_slice.md)の特殊化かつメンバ型`extent_type`および`stride_type`がいずれも[`integral-constant-like`](integral-constant-like.md)のモデルであるとき、`1 + (`[`de-ice`](de-ice.md)`(S_k::extent_type()) - 1) /` [`de-ice`](de-ice.md)`(S_k::stride_type())`、そうでなければ
+    - [`dynamic_extent`](/reference/span/dynamic_extent.md)
+
+以下を満たす`SubExtents`型の値`ext`を返す。
+
+- `map-rank[k] !=` [`dynamic_extent`](/reference/span/dynamic_extent.md)を満たす次元インデクス`k`について、[`ext.extent`](extents/extent.md)`(map-rank[k])`が下記に等しいこと
+    - 型`S_k`が[`strided_slice`](strided_slice.md)の特殊化であるとき、`s_k.extent == 0 ? 0 : 1 + (`[`de-ice`](de-ice.md)`(s_k.extent) - 1) /` [`de-ice`](de-ice.md)`(s_k.stride)`
+    - そうでなければ、[`last_`](last_.md)`&amp;lt;k&amp;gt;(src, slices...) -` [`first_`](first_.md)`&amp;lt;IndexType, k&amp;gt;(slices...)`
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;concepts&amp;gt;
+#include &amp;lt;mdspan&amp;gt;
+#include &amp;lt;type_traits&amp;gt;
+
+template &amp;lt;int N&amp;gt;
+constexpr auto Int = std::integral_constant&amp;lt;int, N&amp;gt;{};
+
+int main()
+{
+  std::extents&amp;lt;size_t, 10&amp;gt; exts{};
+
+  auto ext0 = std::submdspan_extents(exts, 0);
+  static_assert(std::same_as&amp;lt;decltype(ext0), std::extents&amp;lt;size_t&amp;gt;&amp;gt;);
+
+  auto ext1 = std::submdspan_extents(exts, std::full_extent);
+  static_assert(std::same_as&amp;lt;decltype(ext1), std::extents&amp;lt;size_t, 10&amp;gt;&amp;gt;);
+
+  auto ext2 = std::submdspan_extents(exts, std::pair{Int&amp;lt;2&amp;gt;, Int&amp;lt;8&amp;gt;});
+  static_assert(std::same_as&amp;lt;decltype(ext2), std::extents&amp;lt;size_t, 6&amp;gt;&amp;gt;);
+
+  auto ext3 = std::submdspan_extents(exts, std::strided_slice{0, Int&amp;lt;0&amp;gt;, 1});
+  static_assert(std::same_as&amp;lt;decltype(ext3), std::dextents&amp;lt;size_t, 1&amp;gt;&amp;gt;);
+  assert(ext3.extent(0) == 0);
+
+  auto ext4 = std::submdspan_extents(exts, std::strided_slice{0, Int&amp;lt;10&amp;gt;, Int&amp;lt;3&amp;gt;});
+  static_assert(std::same_as&amp;lt;decltype(ext4), std::extents&amp;lt;size_t, 4&amp;gt;&amp;gt;);
+
+  auto ext5 = std::submdspan_extents(exts, std::pair{2, 8});
+  static_assert(std::same_as&amp;lt;decltype(ext5), std::dextents&amp;lt;size_t, 1&amp;gt;&amp;gt;);
+  assert(ext5.extent(0) == 6);
+}
+```
+* std::submdspan_extents[color ff0000]
+* std::full_extent[link full_extent_t.md]
+* std::strided_slice[link strided_slice.md]
+* std::integral_constant[link /reference/type_traits/integral_constant.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`submdspan`](submdspan.md)
+- [`full_extent`](full_extent_t.md)
+- [`strided_slice`](strided_slice.md)
+
+
+## 参照
+- [P2630R4 Submdspan](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2630r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>fold_left_with_iter -- タイトル修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_fold_left_with_iter.html"/>
      <id>e49fbcde3004f58406691422d24faca22abad380:reference/algorithm/ranges_fold_left_with_iter.md</id>
      <updated>2024-02-06T16:23:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_fold_left_with_iter.md b/reference/algorithm/ranges_fold_left_with_iter.md
index f12e692ac..8ad351294 100644
--- a/reference/algorithm/ranges_fold_left_with_iter.md
+++ b/reference/algorithm/ranges_fold_left_with_iter.md
@@ -1,4 +1,4 @@
-# fold_left_first
+# fold_left_with_iter
 * algorithm[meta header]
 * function template[meta id-type]
 * std::ranges[meta namespace]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>fold_left_first -- コード修飾の修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_fold_left_with_iter.html"/>
      <id>379e1b05ec7f555ea67fc7e36918b526f295f11f:reference/algorithm/ranges_fold_left_with_iter.md</id>
      <updated>2024-02-06T16:18:31+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_fold_left_with_iter.md b/reference/algorithm/ranges_fold_left_with_iter.md
index f582a3bf1..f12e692ac 100644
--- a/reference/algorithm/ranges_fold_left_with_iter.md
+++ b/reference/algorithm/ranges_fold_left_with_iter.md
@@ -63,10 +63,6 @@ for (++first; first != last; ++first)
   accum = invoke(f, std::move(accum), *first);
 return {std::move(first), std::move(accum)};
 ```
-* decay_t[link /reference/type_traits/decay.md]
-* invoke_result_t[link /reference/type_traits/invoke_result.md]
-* iter_reference_t[link /reference/iterator/iter_reference_t.md]
-* next[link /reference/iterator/ranges_next.md]
 * invoke[link /reference/functional/invoke.md]
 
 空の入力範囲に対しては初期値`init`を返す。入力範囲によらず、戻り値の1つ目の値（イテレータ値）は渡した範囲の終端イテレータ（`last`/`ranges::end(r)`）と同じ位置を指すイテレータとなる（必ずしも同じ型もしくは同じイテレータにならない）。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>C++23 -- fold_left_with_iter追加 #1088</title>
      <link href="https://cpprefjp.github.io/lang/cpp23.html"/>
      <id>f222955da68c8794948d82cf78c3e78d006359f2:lang/cpp23.md</id>
      <updated>2024-02-06T16:15:39+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;C++23&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;C++23とは、2023年中に改訂される予定の、C++バージョンの通称である。&lt;/p&gt;
&lt;p&gt;このバージョンは、策定中のためC++2bと呼ばれることがある。「(C++20である2020年の次の) 202b年にリリースされる」という伏せ字として「b」が使われているが、3年周期に次のバージョンが策定されることが決まっているため、伏せ字になっている年数がずれることはない。&lt;/p&gt;
&lt;h2&gt;言語機能&lt;/h2&gt;
&lt;h3&gt;変数&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/literal_suffix_for_signed_size_t.html&#34;&gt;(符号付き)&lt;code&gt;size_t&lt;/code&gt;リテラルのためのサフィックス&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;42z&lt;/code&gt;/&lt;code&gt;42Z&lt;/code&gt;とすることで&lt;code&gt;size_t&lt;/code&gt;に対応する符号付き整数型のリテラルとする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/simpler_implicit_move.md.nolink&#34;&gt;暗黙的なムーブを簡略化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;参照を返す関数の&lt;code&gt;return&lt;/code&gt;文で暗黙的にムーブされない問題を修正&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;これらに加えて、ライブラリ機能として拡張浮動小数点数型が定義された。&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/stdfloat.html&#34;&gt;&amp;lt;stdfloat&amp;gt;&lt;/a&gt;&lt;/code&gt;を参照。&lt;/p&gt;
&lt;h3&gt;関数&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/declarations_and_where_to_find_them.md.nolink&#34;&gt;スコープと名前ルックアップの仕様整理&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;複雑で不完全になっているスコープと名前ルックアップの仕様を整理し、一部の問題を解決する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/meaningful_exports.md.nolink&#34;&gt;無意味なexport宣言を禁止する&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;制御構文&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/extend_init_statement_to_allow_alias_declaration.html&#34;&gt;初期化文での型の別名宣言を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;for (using T = int; T e : v) {}&lt;/code&gt;を許可&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/lifetime_extension_in_range_based_for_loop.html&#34;&gt;範囲for文が範囲初期化子内で生じた一時オブジェクトを延命することを規定&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;範囲初期化子内で生じた一時オブジェクトは範囲for文の終わりまで延命される&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/labels_at_the_end_of_compound_statements.html&#34;&gt;複合文の末尾へのラベルを許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;C互換のため、複合文の末尾でのgoto文のラベルを許可する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;クラス&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/deducing_this.md.nolink&#34;&gt;自身のオブジェクトを明示的にパラメータとして指定する&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;メンバ関数が&lt;code&gt;*this&lt;/code&gt;の型・オブジェクトをパラメータとしてとり、&lt;code&gt;*this&lt;/code&gt;オブジェクトがconst/非const、左辺値/右辺値であるかをメンバ関数内で識別できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/make_declaration_order_layout_mandated.html&#34;&gt;アクセス制御の異なるメンバ変数のレイアウトを宣言順に規定&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;アクセス制御の異なるメンバ変数のレイアウトは並び替えを許可されていたが宣言順に規定する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/multidimensional_subscript_operator.nd.nolink&#34;&gt;添字演算子の多次元サポート&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;operator[](int x, int y, int z)&lt;/code&gt;のように添字演算子のオーバーロードで複数のパラメータをとることを許可&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/static_operator.html&#34;&gt;&lt;code&gt;this&lt;/code&gt;ポインタをもつ必要のない演算子を&lt;code&gt;static&lt;/code&gt;として宣言できるようにする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;状態をもたないいくつかの演算子を&lt;code&gt;static&lt;/code&gt;として宣言できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;文字列&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/mixed_string_literal_concatenation.html&#34;&gt;異なる文字エンコーディングをもつ文字列リテラルの連結を不適格とする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;auto a = u8&#34;&#34; L&#34;&#34;;&lt;/code&gt;のような異なる文字エンコーディング同士での文字列リテラルを連結を禁止する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/delimited_escape_sequences.html&#34;&gt;エスケープシーケンスの区切り&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;エスケープシーケンスの範囲を明確にする構文を追加する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/numeric_and_universal_character_escapes_in_character_and_string_literals.md.nolink&#34;&gt;文字・文字列リテラル中の数値・ユニバーサルキャラクタのエスケープに関する問題解決&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/remove_non_encodable_wide_character_literals_and_multicharacter_wide_character_literals.html&#34;&gt;1ワイド文字に収まらないワイド文字リテラルを禁止する&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;エンコード結果として&lt;code&gt;wchar_t&lt;/code&gt;の大きさに収まらないワイド文字リテラルを禁止する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/named_universal_character_escapes.html&#34;&gt;名前付きユニバーサルキャラクタ名&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;16進数のユニバーサルキャラクタだけでなく、その文字の名前を入力できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;テンプレート&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/generalized_wording_for_partial_specializations.md.nolink&#34;&gt;部分特殊化の汎用化仕様&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;変数テンプレートの部分特殊化を許可するために部分特殊化の仕様を汎用化&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/class_template_argument_deduction_from_inherited.md.nolink&#34;&gt;継承コンストラクタからのクラステンプレート引数の推論&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;定数式&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/if_consteval.md.nolink&#34;&gt;if consteval&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コンパイル時の文脈かどうかで分岐させる&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/narrowing_contextual_conversions_to_bool.md.nolink&#34;&gt;定数式の文脈での&lt;code&gt;bool&lt;/code&gt;への縮小変換を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;if constexpr(flags &amp;amp; Flags::Exec)&lt;/code&gt;や&lt;code&gt;static_assert(N);&lt;/code&gt;を許可&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/non_literal_variables_in_constexpr_functions.html&#34;&gt;定数式内での非リテラル変数、静的変数・スレッドローカル変数およびgotoとラベルの存在を許可する&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンパイル時に評価されない限り、定数式内に静的変数・スレッドローカル変数およびgoto文とラベルを含むことを許可する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/character_encoding_of_diagnostic_text.html&#34;&gt;静的な診断メッセージの文字エンコーディング&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;static_assert&lt;/code&gt;や&lt;code&gt;[[deprecated]]&lt;/code&gt;などの診断メッセージの文字集合に関する要件をなくす&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/relaxing_some_constexpr_restrictions.html&#34;&gt;&lt;code&gt;constexpr&lt;/code&gt;関数が定数実行できない場合でも適格とする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;定数式実行できない関数であっても、実際にコンパイル時に評価されない限り&lt;code&gt;constexpr&lt;/code&gt;指定することを許可する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/permitting_static_constexpr_variables_in_constexpr_functions.md.nolink&#34;&gt;&lt;code&gt;constexpr&lt;/code&gt;関数内での&lt;code&gt;static constexpr&lt;/code&gt;変数を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/consteval_needs_to_propagate_up.md.nolink&#34;&gt;&lt;code&gt;constexpr&lt;/code&gt;関数内で&lt;code&gt;consteval&lt;/code&gt;関数を呼び出せない問題を緩和&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;ラムダ式&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/down_with_lambda_parens.html&#34;&gt;ラムダ式で&lt;code&gt;()&lt;/code&gt;を省略できる条件を緩和&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;修飾や戻り値型をともなってもパラメータリストが空であれば&lt;code&gt;()&lt;/code&gt;を省略できる&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/attributes_on_lambda_expressions.html&#34;&gt;ラムダ式に対する属性&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ラムダ式のいくつかの箇所に属性を記述できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;属性&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/portable_assumptions.html&#34;&gt;コード内容の仮定をコンパイラに伝えるassume属性&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最適化のために、コードの仮定をコンパイラに伝える属性を標準化する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;プリプロセッサ&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/consistent_character_literal_encoding.html&#34;&gt;文字リテラルエンコーディングを一貫させる&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;プリプロセッサの条件式での文字リテラルの扱いをC++式と同様にする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/add_support_for_preprocessing_directives_elifdef_and_elifndef.md.nolink&#34;&gt;&lt;code&gt;elif&lt;/code&gt;/&lt;code&gt;elifdef&lt;/code&gt;/&lt;code&gt;elifndef&lt;/code&gt;のサポートを追加&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;#if&lt;/code&gt;/&lt;code&gt;#ifdef&lt;/code&gt;/&lt;code&gt;#ifndef&lt;/code&gt;に対応する複数条件命令のサポートを追加する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/warning.html&#34;&gt;&lt;code&gt;#warning&lt;/code&gt;のサポートを追加&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;多くのC++コンパイラが実装していたプリプロセス時の警告&lt;code&gt;#warning message&lt;/code&gt;を正式サポート&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/support_for_utf8_as_a_portable_source_file_encoding.md.nolink&#34;&gt;汎用的なソースコードのエンコーディングとしてUTF-8をサポート&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;小さな変更&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/update_normative_reference_to_posix.html&#34;&gt;参照するPOSIX規格を更新&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;新しいPOSIX規格の機能を標準C++が参照していたため、参照するPOSIX規格のバージョンを更新&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/trimming_whitespaces_before_line_splicing.md.nolink&#34;&gt;行末スペースを無視するよう規定&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;行末が「&lt;code&gt;\ &lt;/code&gt;」でおわっていた場合にMSVCは行の継続をしない実装になっていたため動作を共通化するため仕様を規定&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;ライブラリ更新の概要&lt;/h2&gt;
&lt;h3&gt;新ライブラリ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++標準ライブラリ全体のモジュールとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/module/std.html&#34;&gt;std&lt;/a&gt;&lt;/code&gt;、C互換ライブラリ全体のモジュールとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/module/std.compat.html&#34;&gt;std.compat&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;スタックトレースを取得するためのライブラリとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/stacktrace.html&#34;&gt;&amp;lt;stacktrace&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;CとC++の間でのアトミック操作の相互運用のため、C互換ライブラリとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/stdatomic.h.html&#34;&gt;&amp;lt;stdatomic.h&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;外部から提供されるメモリバッファでストリーム処理を行うライブラリとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/spanstream.md.nolink&#34;&gt;&amp;lt;spanstream&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;正常値とエラー値のどちらかを持つクラスおよびライブラリとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/expected.html&#34;&gt;&amp;lt;expected&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;多次元配列ビューのライブラリとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan.html&#34;&gt;&amp;lt;mdspan&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;ノードベースではないソート済みキーによる順序付き連想コンテナのライブラリとして、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/flat_map.html&#34;&gt;&amp;lt;flat_map&amp;gt;&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/flat_set.md.nolink&#34;&gt;&amp;lt;flat_set&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;書式指定で出力するライブラリとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/print.html&#34;&gt;&amp;lt;print&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;コルーチンによるRangeの生成をサポートする&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/generator.html&#34;&gt;&amp;lt;generator&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;拡張浮動小数点数のライブラリとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/stdfloat.html&#34;&gt;&amp;lt;stdfloat&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;コンテナ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/stack/stack.html&#34;&gt;std::stack&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/queue/queue.html&#34;&gt;std::queue&lt;/a&gt;&lt;/code&gt;に、イテレータのペアをとるコンストラクタを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;auto v = std::vector(v, alloc);&lt;/code&gt;のようなアロケータ引数をともなう場合のクラステンプレートのテンプレート引数推論が動作しなかったため、各コンテナクラスのコンストラクタにおけるアロケータパラメータの型を&lt;code&gt;const Allocator&amp;amp;&lt;/code&gt;から&lt;code&gt;const &lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/type_identity.html&#34;&gt;std::type_identity_t&lt;/a&gt;&amp;lt;Allocator&amp;gt;&amp;amp;&lt;/code&gt;に修正&lt;/li&gt;
&lt;li&gt;N要素のメモリアロケート時にアロケータが実際にどれくらいのメモリを確保したかを得られるインタフェースとして、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocator.html&#34;&gt;std::allocator&lt;/a&gt;&lt;/code&gt;クラスに、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocator/allocate_at_least.md.nolink&#34;&gt;allocate_at_least()&lt;/a&gt;&lt;/code&gt;メンバ関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;std::pair&lt;/a&gt;&lt;/code&gt;の転送コンストラクタにデフォルトテンプレート引数を追加することで、&lt;code&gt;{}&lt;/code&gt;のような型推論ができない引数を渡した場合でも完全転送が行われるよう修正&lt;/li&gt;
&lt;li&gt;順序付き連想コンテナの要素削除の処理について、一時オブジェクトのコストを抑える拡張が行われた&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/map/map/erase.html&#34;&gt;std::map::erase()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/map/map/extract.html&#34;&gt;std::map::extract()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;に、複数の範囲を綴じ合わせる&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/zip_view.md.nolink&#34;&gt;std::views::zip&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;に、複数の範囲の直積をとる&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/cartesian_product_view.md.nolink&#34;&gt;std::views::cartesian_product&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;Rangeから任意のコンテナに変換するRangeアダプタ&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/to.md.nolink&#34;&gt;std::ranges::to()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;Rangeから任意のコンテナに変換するために、可変長のコンテナ (&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/array/array.html&#34;&gt;std::array&lt;/a&gt;&lt;/code&gt;以外) に、以下の機能を追加：&lt;ul&gt;
&lt;li&gt;Rangeから変換するコンストラクタ&lt;/li&gt;
&lt;li&gt;Rangeを挿入する&lt;code&gt;insert_range()&lt;/code&gt;メンバ関数&lt;/li&gt;
&lt;li&gt;Rangeを先頭に追加する&lt;code&gt;prepend_range()&lt;/code&gt;メンバ関数&lt;/li&gt;
&lt;li&gt;Rangeを末尾に追加する&lt;code&gt;append_range()&lt;/code&gt;メンバ関数&lt;/li&gt;
&lt;li&gt;Rangeを代入する&lt;code&gt;assign_range()&lt;/code&gt;メンバ関数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ユーザー定義のRangeアダプタがパイプライン演算子 &lt;code&gt;|&lt;/code&gt; をサポートしやすくするために、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;に&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/range_adaptor_closure.md.nolink&#34;&gt;std::ranges::range_adaptor_closure&lt;/a&gt;&lt;/code&gt;クラスを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;に、Rangeを連結させる&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/join_with.md.nolink&#34;&gt;join_with&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;Rangeを指定の大きさで分割する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/chunk_view.md.nolink&#34;&gt;std::views::chunk&lt;/a&gt;&lt;/code&gt;と、Rangeを指定の大きさの隣接要素で分割する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/slide_view.md.nolink&#34;&gt;std::views::slide&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;Rangeを条件一致する間の要素で分割する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/chunk_by_view.md.nolink&#34;&gt;std::views::chunk_by&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;に、Rangeを等間隔からなるRangeに変換する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/stride_view.md.nolink&#34;&gt;std::views::stride&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;に、Rangeをムーブするための&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/as_rvalue.md.nolink&#34;&gt;std::views::as_rvalue&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;に、指定した値をN回繰り返すRangeを生成する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/repeat.md.nolink&#34;&gt;std::views::repeat&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;に、Rangeをインデックス付きでループさせる&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/enumerate.md.nolink&#34;&gt;std::views::enumerate&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;アルゴリズム&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;に、範囲の先頭が指定した範囲と合致するかを判定する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/starts_with.md.nolink&#34;&gt;std::starts_with()&lt;/a&gt;&lt;/code&gt;、範囲の末尾が指定した範囲と合致するかを判定する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/ends_with.md.nolink&#34;&gt;std::ends_with()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;に、要素を左シフトさせるRangeアルゴリズム&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/ranges_shift_left.html&#34;&gt;std::ranges::shift_left()&lt;/a&gt;&lt;/code&gt;、要素を右シフトさせるRangeアルゴリズム&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/ranges_shift_right.html&#34;&gt;std::ranges::shift_right()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;に、範囲の末尾から要素を検索する以下のアルゴリズムを追加：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/ranges_find_last.md.nolink&#34;&gt;std::ranges::find_last()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/find_last_if.md.nolink&#34;&gt;std::ranges::find_last_if()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/find_last_if_not.md.nolink&#34;&gt;std::ranges::find_last_if_not()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;に、範囲に特定の値が含まれているかを判定する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/ranges_contains.md.nolink&#34;&gt;std::ranges::contains()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/ranges_contains_subrange.md.nolink&#34;&gt;std::ranges::contains_subrange&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;に、数値に限定しない汎用的な畳み込みアルゴリズムとして、以下を追加：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/ranges_fold_left.html&#34;&gt;std::ranges::fold_left()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/ranges_fold_left_first.html&#34;&gt;std::ranges::fold_left_first()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/ranges_fold_right.html&#34;&gt;std::ranges::fold_right()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/ranges_fold_right_last.html&#34;&gt;std::ranges::fold_right_last()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/ranges_fold_left_with_iter.html&#34;&gt;std::ranges::fold_left_with_iter()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/ranges_fold_left_first_with_iter.md.nolink&#34;&gt;std::ranges::fold_left_first_with_iter()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/numeric.html&#34;&gt;&amp;lt;numeric&amp;gt;&lt;/a&gt;&lt;/code&gt;に、連番を生成するRangeアルゴリズム&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/numeric/ranges_iota.html&#34;&gt;std::ranges::iota()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;文字列&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std::basic_string&lt;/a&gt;&lt;/code&gt;クラスと&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string_view/basic_string_view.html&#34;&gt;std::basic_string_view&lt;/a&gt;&lt;/code&gt;クラスに、文字列内に指定した文字・文字列が含まれているかを判定するメンバ関数&lt;code&gt;contains()&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string_view/basic_string_view.html&#34;&gt;std::basic_string_view&lt;/a&gt;&lt;/code&gt;のコンストラクタに、範囲をとるオーバーロードを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::string s = nullptr;&lt;/code&gt;のような文字列オブジェクトに&lt;code&gt;nullptr&lt;/code&gt;を代入するようなコードはバグの元であるため、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std::basic_string&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string_view/basic_string_view.html&#34;&gt;std::basic_string_view&lt;/a&gt;&lt;/code&gt;に、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstddef/nullptr_t.html&#34;&gt;nullptr_t&lt;/a&gt;&lt;/code&gt;をとるコンストラクタをdelete定義として追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std::basic_string&lt;/a&gt;&lt;/code&gt;クラスに、resize時に任意の初期化を行う&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string/basic_string/resize_and_overwrite.md.nolink&#34;&gt;resize_and_overwrite()&lt;/a&gt;&lt;/code&gt;メンバ関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std::basic_string&lt;/a&gt;&lt;/code&gt;クラスのコンストラクタと&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string/basic_string/substr.html&#34;&gt;substr()&lt;/a&gt;&lt;/code&gt;メンバ関数に一時オブジェクトのオーバーロードを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/format.html&#34;&gt;std::format()&lt;/a&gt;&lt;/code&gt;関数でRange・コンテナ、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/tuple/tuple.html&#34;&gt;std::tuple&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;std::pair&lt;/a&gt;&lt;/code&gt;を出力できるよう、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/formatter.html&#34;&gt;std::formatter&lt;/a&gt;&lt;/code&gt;に特殊化を追加&lt;ul&gt;
&lt;li&gt;Range・シーケンスコンテナは&lt;code&gt;[1, 2, 3]&lt;/code&gt;、&lt;code&gt;[&#34;hello&#34;, &#34;world&#34;]&lt;/code&gt;、&lt;code&gt;[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]&lt;/code&gt;のように出力される&lt;/li&gt;
&lt;li&gt;連想コンテナの場合、&lt;code&gt;std::map&amp;lt;int, int&amp;gt;{{1, 2}, {3, 4}}&lt;/code&gt;は&lt;code&gt;{1: 2, 3: 4}&lt;/code&gt;のように出力され、&lt;code&gt;std::set&amp;lt;int&amp;gt;{1, 2, 3}&lt;/code&gt;は&lt;code&gt;{1, 2, 3}&lt;/code&gt;のように出力される&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/tuple/tuple.html&#34;&gt;std::tuple&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;std::pair&lt;/a&gt;&lt;/code&gt;は&lt;code&gt;(1, 2)&lt;/code&gt;のように出力される&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/format.html&#34;&gt;std::format()&lt;/a&gt;&lt;/code&gt;関数のフォーマット指定子としてデバッグ指定「&lt;code&gt;&#34;?&#34;&lt;/code&gt;」を追加。これは文字・文字列を引用符で囲み、エスケープシーケンスをエスケープする&lt;ul&gt;
&lt;li&gt;ただし、Range・コンテナ中の文字・文字列はデフォルトでエスケープされる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;format(&#34;{:?}&#34;, &#34;h\tello&#34;)&lt;/code&gt;は&lt;code&gt;&#34;h\tello&#34;&lt;/code&gt;のように出力される&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;入出力&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ostream/basic_ostream.html&#34;&gt;std::basic_ostream&lt;/a&gt;&lt;/code&gt;クラスの&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ostream/basic_ostream/op_ostream.html&#34;&gt;operator&amp;lt;&amp;lt;&lt;/a&gt;&lt;/code&gt;に、&lt;code&gt;const volatile void*&lt;/code&gt;をとるオーバーロードを追加&lt;/li&gt;
&lt;li&gt;ファイルを開く際のオプションとして、排他モードを表す&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ios/ios_base/type-openmode.html&#34;&gt;noreplace&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;関数オブジェクト&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/invoke.html&#34;&gt;std::invoke()&lt;/a&gt;&lt;/code&gt;の戻り値型を指定するバージョンである&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/invoke_r.html&#34;&gt;std::invoke_r()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/function.html&#34;&gt;std::function&lt;/a&gt;&lt;/code&gt;クラスと等価な機能をもつ、ムーブのみ可能な&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/move_only_function.html&#34;&gt;std::move_only_function&lt;/a&gt;&lt;/code&gt;クラスを追加&lt;/li&gt;
&lt;li&gt;ユーザー定義のRangeアダプタがパイプライン演算子 &lt;code&gt;|&lt;/code&gt; をサポートしやすくするために、末尾から引数を束縛する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/bind_back.md.nolink&#34;&gt;std::bind_back()&lt;/a&gt;&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;メモリ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;に、レガシーC関数からスマートポインタへの直接出力をサポートする、スマートポインタアダプタ&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/out_ptr.html&#34;&gt;std::out_ptr&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/inout_ptr.html&#34;&gt;std::inout_ptr&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/unique_ptr.html&#34;&gt;std::unique_ptr&lt;/a&gt;&lt;/code&gt;クラスを&lt;code&gt;constexpr&lt;/code&gt;に対応&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;に、オブジェクトの生存期間を開始することを明示する関数として、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/start_lifetime_as.md.nolink&#34;&gt;std::start_lifetime_as()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/start_lifetime_as_array.md.nolink&#34;&gt;std::start_lifetime_as_array()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit.html&#34;&gt;&amp;lt;bit&amp;gt;&lt;/a&gt;&lt;/code&gt;に、値のバイト入れ替え (エンディアン変換) を行う&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit/byteswap.html&#34;&gt;std::byteswap()&lt;/a&gt;&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ユーティリティ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/variant/visit.html&#34;&gt;std::visit()&lt;/a&gt;&lt;/code&gt;に指定できるバリアントオブジェクトを、直接的な「&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/variant/variant.html&#34;&gt;std::variant&lt;/a&gt;&lt;/code&gt;型の特殊化であること」という制約を緩和し、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/variant/variant.html&#34;&gt;std::variant&lt;/a&gt;&lt;/code&gt;から派生した型も許可&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;に、列挙値を基底型に変換する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/utility/to_underlying.html&#34;&gt;std::to_underlying()&lt;/a&gt;&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;に、 (主に) メンバ変数を転送するため、指定された型の&lt;code&gt;const&lt;/code&gt;性と参照修飾で引数を転送する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/utility/forward_like.html&#34;&gt;std::forward_like()&lt;/a&gt;&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/optional/optional.html&#34;&gt;std::optional&lt;/a&gt;&lt;/code&gt;クラスにモナド操作としてメンバ関数&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/optional/optional/and_then.html&#34;&gt;and_then()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/optional/optional/transform.html&#34;&gt;transform()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/optional/optional/or_else.html&#34;&gt;or_else()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;到達しないパスであることを表明する関数&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/utility/unreachable.html&#34;&gt;std::unreachable()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bitset/bitset.html&#34;&gt;std::bitset&lt;/a&gt;&lt;/code&gt;クラスをさらに&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;型情報&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/typeinfo/type_info.html&#34;&gt;std::type_info&lt;/a&gt;&lt;/code&gt;クラスの&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/typeinfo/type_info/op_equal.html&#34;&gt;operator==&lt;/a&gt;&lt;/code&gt;を&lt;code&gt;constexpr&lt;/code&gt;に対応&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;型特性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;に、スコープ付き列挙型かを判定する型特性&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_scoped_enum.html&#34;&gt;std::is_scoped_enum&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;に、第1テンプレート引数についている型修飾を外す型特性として、以下を追加：&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;に、一時オブジェクトの参照への束縛を検出するための型特性として、以下を追加：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/reference_constructs_from_temporary.html&#34;&gt;std::reference_constructs_from_temporary&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/reference_converts_from_temporary.html&#34;&gt;std::reference_converts_from_temporary&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C互換ライブラリ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib.html&#34;&gt;&amp;lt;cstdlib&amp;gt;&lt;/a&gt;&lt;/code&gt;ヘッダと&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath.html&#34;&gt;&amp;lt;cmath&amp;gt;&lt;/a&gt;&lt;/code&gt;ヘッダの多くの関数を&lt;code&gt;constexpr&lt;/code&gt;に対応&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;機能の非推奨化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/aligned_storage.html&#34;&gt;std::aligned_storage&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/aligned_union.html&#34;&gt;std::aligned_union&lt;/a&gt;&lt;/code&gt;を非推奨化。これらの機能は未定義動作を引き起こし、間違った保証が行われ、よくないAPI設計が行われていたため、非推奨とする&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/aligned_storage.html&#34;&gt;std::aligned_storage&lt;/a&gt;&lt;/code&gt;の代わりに&lt;code&gt;alignas(T) &lt;a href=&#34;https://cpprefjp.github.io/reference/cstddef/byte.html&#34;&gt;std::byte&lt;/a&gt;[sizeof(T)];&lt;/code&gt;を使用することを推奨する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/aligned_union.html&#34;&gt;std::aligned_union&lt;/a&gt;&lt;/code&gt;の代わりに&lt;code&gt;alignas(Ts...) &lt;a href=&#34;https://cpprefjp.github.io/reference/cstddef/byte.html&#34;&gt;std::byte&lt;/a&gt;[&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/max.html&#34;&gt;std::max&lt;/a&gt;({sizeof(Ts)...})];&lt;/code&gt;を使用することを推奨する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocator.html&#34;&gt;std::allocator&lt;/a&gt;&lt;/code&gt;のメンバ型&lt;code&gt;is_always_equal&lt;/code&gt;を非推奨化。これはアロケータが状態をもたないことを表す型でありデフォルトでは&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/true_type.html&#34;&gt;true_type&lt;/a&gt;&lt;/code&gt;となっている。状態をもつユーザー定義のアロケータ型でこのメンバ型の上書きを忘れることでバグが埋め込まれてしまっていたため誤用防止のために非推奨とする&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/limits.html&#34;&gt;&amp;lt;limits&amp;gt;&lt;/a&gt;&lt;/code&gt;の以下の非正規化数に関する機能を非推奨化。これらの機能は必ずしもコンパイル時に決まらない可能性のある値であり有用でないため、非推奨とする&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/limits/numeric_limits.html&#34;&gt;std::numeric_limits&lt;/a&gt;::&lt;a href=&#34;https://cpprefjp.github.io/reference/limits/numeric_limits/has_denorm.html&#34;&gt;has_denorm&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/limits/numeric_limits.html&#34;&gt;std::numeric_limits&lt;/a&gt;::&lt;a href=&#34;https://cpprefjp.github.io/reference/limits/numeric_limits/has_denorm_loss.html&#34;&gt;has_denorm_loss&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/limits/float_denorm_style.html&#34;&gt;std::float_denorm_style&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;機能の削除&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ガベージコレクションの実装にうまく役立てられなかった、ガベージコレクション実装のサポートをする以下の機能を削除する：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/declare_reachable.html&#34;&gt;std::declare_reachable()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/undeclare_reachable.html&#34;&gt;std::undeclare_reachable()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/declare_no_pointers.html&#34;&gt;std::declare_no_pointers()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/undeclare_no_pointers.html&#34;&gt;std::undeclare_no_pointers()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/get_pointer_safety.html&#34;&gt;std::get_pointer_safety()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/pointer_safety.html&#34;&gt;std::pointer_safety&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/predefined_macros.html&#34;&gt;&lt;code&gt;__STDCPP_STRICT_POINTER_SAFETY__&lt;/code&gt;マクロ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;取り決め&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;以下のヘッダの一部機能をフリースタンディングライブラリとして追加：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/tuple.html&#34;&gt;&amp;lt;tuple&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ratio.html&#34;&gt;&amp;lt;ratio&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator.html&#34;&gt;&amp;lt;iterator&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>algorithm -- fold_left_with_iter追加 #1088</title>
      <link href="https://cpprefjp.github.io/reference/algorithm.html"/>
      <id>f222955da68c8794948d82cf78c3e78d006359f2:reference/algorithm.md</id>
      <updated>2024-02-06T16:15:39+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm.md b/reference/algorithm.md
index 5b6e8b5b7..0f7085280 100644
--- a/reference/algorithm.md
+++ b/reference/algorithm.md
@@ -430,7 +430,7 @@ ranges::sort(pv, {}, &amp;amp;Parson::name);
 | [`ranges::fold_right`](algorithm/ranges_fold_right.md)| 範囲の右（終端）からの`fold` | C++23 |
 | [`ranges::fold_left_first`](algorithm/ranges_fold_left_first.md)| 範囲の左（先頭）からの`fold`、初期値を省略する | C++23 |
 | [`ranges::fold_right_last`](algorithm/ranges_fold_right_last.md)| 範囲の右（終端）からの`fold`、初期値を省略する | C++23 |
-| [`ranges::fold_left_with_iter`](algorithm/ranges_fold_left_with_iter.md.nolink)  | 範囲の左（先頭）からの`fold`、終端イテレータを返す      | C++23 |
+| [`ranges::fold_left_with_iter`](algorithm/ranges_fold_left_with_iter.md)  | 範囲の左（先頭）からの`fold`、終端イテレータを返す      | C++23 |
 | [`ranges::fold_left_first_with_iter`](algorithm/ranges_fold_left_first_with_iter.md.nolink)  | 範囲の左（先頭）からの`fold`、初期値を省略し終端イテレータを返す      | C++23 |
 
 ### 戻り値
@@ -446,6 +446,7 @@ ranges::sort(pv, {}, &amp;amp;Parson::name);
 | [`ranges::in_out_out_result`](algorithm/ranges_in_out_out_result.md) | 3つのイテレータを格納する型              | C++20          |
 | [`ranges::min_max_result`](algorithm/ranges_min_max_result.md)       | 2つの値または参照を格納する型            | C++20          |
 | [`ranges::in_found_result`](algorithm/ranges_in_found_result.md)     | イテレータとbool値を格納する型           | C++20          |
+| [`ranges::in_value_result`](algorithm/ranges_in_value_result.md)     | イテレータと値を格納する型               | C++23          |
 | [`ranges::out_value_result`](algorithm/ranges_out_value_result.md)   | イテレータと値を格納する型               | C++23          |
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>fold_left -- fold_left_with_iter追加 #1088</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_fold_left.html"/>
      <id>f222955da68c8794948d82cf78c3e78d006359f2:reference/algorithm/ranges_fold_left.md</id>
      <updated>2024-02-06T16:15:39+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_fold_left.md b/reference/algorithm/ranges_fold_left.md
index 9a540b2b8..f5b4fcee4 100644
--- a/reference/algorithm/ranges_fold_left.md
+++ b/reference/algorithm/ranges_fold_left.md
@@ -100,7 +100,7 @@ concept indirectly-binary-left-foldable =
     ```cpp
     return ranges::fold_left_with_iter(std::move(first), last, std::move(init), f).value;
     ```
-    * fold_left_with_iter[link /reference/algorithm/ranges_fold_left_with_iter.md.nolink]
+    * fold_left_with_iter[link /reference/algorithm/ranges_fold_left_with_iter.md]
 
 - (2) : `r`からイテレータを取得して(1)に委譲
     ```cpp
@@ -264,7 +264,7 @@ constexpr auto fold_left(I first, S last, T init, F f) {
     - 範囲の最初の要素を初期値として`fold_left`
 - [`ranges::fold_right_last`](ranges_fold_right_last.md)
     - 範囲の最後の要素を初期値として`fold_right`
-- [`ranges::fold_left_with_iter`](ranges_fold_left_with_iter.md.nolink)
+- [`ranges::fold_left_with_iter`](ranges_fold_left_with_iter.md)
     - `fold_left`の結果と共に、計算した終端イテレータも返す
 - [`ranges::fold_left_first_with_iter`](ranges_fold_left_first_with_iter.md.nolink)
     - `fold_left_first`の結果と共に、計算した終端イテレータも返す
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>fold_left_first -- fold_left_with_iter追加 #1088</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_fold_left_first.html"/>
      <id>f222955da68c8794948d82cf78c3e78d006359f2:reference/algorithm/ranges_fold_left_first.md</id>
      <updated>2024-02-06T16:15:39+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_fold_left_first.md b/reference/algorithm/ranges_fold_left_first.md
index 9bac033d2..71307ad82 100644
--- a/reference/algorithm/ranges_fold_left_first.md
+++ b/reference/algorithm/ranges_fold_left_first.md
@@ -150,7 +150,7 @@ int main() {
 }
 ```
 * fold_left_first[color ff0000]
-* fold_left[link ranges_fold_right.md]
+* fold_left[link ranges_fold_left.md]
 * println[link /reference/print/println.md]
 * value_or[link /reference/optional/optional/value_or.md]
 
@@ -202,7 +202,7 @@ constexpr auto fold_left_first(I first, S last, F f) {
     - 範囲の右からの`fold`
 - [`ranges::fold_right_last`](ranges_fold_right_last.md)
     - 範囲の最後の要素を初期値として`fold_right`
-- [`ranges::fold_left_with_iter`](ranges_fold_left_with_iter.md.nolink)
+- [`ranges::fold_left_with_iter`](ranges_fold_left_with_iter.md)
     - `fold_left`の結果と共に、計算した終端イテレータも返す
 - [`ranges::fold_left_first_with_iter`](ranges_fold_left_first_with_iter.md.nolink)
     - `fold_left_first`の結果と共に、計算した終端イテレータも返す
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>fold_left_first -- fold_left_with_iter追加 #1088</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_fold_left_with_iter.html"/>
      <id>f222955da68c8794948d82cf78c3e78d006359f2:reference/algorithm/ranges_fold_left_with_iter.md</id>
      <updated>2024-02-06T16:15:39+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_fold_left_with_iter.md b/reference/algorithm/ranges_fold_left_with_iter.md
new file mode 100644
index 000000000..f582a3bf1
--- /dev/null
+++ b/reference/algorithm/ranges_fold_left_with_iter.md
@@ -0,0 +1,234 @@
+# fold_left_first
+* algorithm[meta header]
+* function template[meta id-type]
+* std::ranges[meta namespace]
+* cpp23[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;input_iterator I, sentinel_for&amp;lt;I&amp;gt; S, class T,
+           indirectly-binary-left-foldable&amp;lt;T, I&amp;gt; F&amp;gt;
+  constexpr auto fold_left_with_iter(I first, S last, T init, F f); // (1)
+
+  template&amp;lt;input_range R, class T,
+           indirectly-binary-left-foldable&amp;lt;T, iterator_t&amp;lt;R&amp;gt;&amp;gt; F&amp;gt;
+  constexpr auto fold_left_with_iter(R&amp;amp;&amp;amp; r, T init, F f);           // (2)
+}
+```
+* input_iterator[link /reference/iterator/input_iterator.md]
+* sentinel_for[link /reference/iterator/sentinel_for.md]
+* indirectly-binary-left-foldable[link ./ranges_fold_left.md]
+* input_range[link /reference/ranges/input_range.md]
+* iterator_t[link /reference/ranges/iterator_t.md]
+
+## 概要
+
+処理の過程で得られた終端位置を指すイテレータを同時に返す[`fold_left`](./ranges_fold_left.md)。戻り値はイテレータと処理結果のペアとなる。
+
+- (1) : 入力としてイテレータ範囲をとるオーバーロード
+- (2) : 入力として範囲を直接とるオーバーロード
+
+## 引数
+
+- `first` -- 入力範囲の先頭イテレータ
+- `last` -- 入力範囲の番兵（終端イテレータ）
+- `r` -- 入力範囲のオブジェクト
+- `init` -- 初期値
+- `f` -- 適用する二項演算
+    - `f(std::move(init), *first)`のような呼び出しが可能であり、その戻り値型のオブジェクトを`acc`とすると
+    - `acc = f(std::move(acc), *first)`のような呼び出しも可能である必要がある
+
+## テンプレートパラメータ制約
+
+二項演算（`F`）は初期値・積算値と入力範囲の参照型に対して[`invocable`](/reference/concepts/invocable.md)であることしか求められていない（`regular_invocable`ではない）ため、適用する二項演算は任意の副作用を伴っていても良い。
+
+## 戻り値
+
+型`U`を次のように取得して
+
+```cpp
+using U = decay_t&amp;lt;invoke_result_t&amp;lt;F&amp;amp;, T, iter_reference_t&amp;lt;I&amp;gt;&amp;gt;&amp;gt;;
+```
+* decay_t[link /reference/type_traits/decay.md]
+* invoke_result_t[link /reference/type_traits/invoke_result.md]
+* iter_reference_t[link /reference/iterator/iter_reference_t.md]
+
+(1)(2)ともに、以下と等価
+
+```cpp
+if (first == last)
+  return {std::move(first), U(std::move(init))};
+U accum = invoke(f, std::move(init), *first);
+for (++first; first != last; ++first)
+  accum = invoke(f, std::move(accum), *first);
+return {std::move(first), std::move(accum)};
+```
+* decay_t[link /reference/type_traits/decay.md]
+* invoke_result_t[link /reference/type_traits/invoke_result.md]
+* iter_reference_t[link /reference/iterator/iter_reference_t.md]
+* next[link /reference/iterator/ranges_next.md]
+* invoke[link /reference/functional/invoke.md]
+
+空の入力範囲に対しては初期値`init`を返す。入力範囲によらず、戻り値の1つ目の値（イテレータ値）は渡した範囲の終端イテレータ（`last`/`ranges::end(r)`）と同じ位置を指すイテレータとなる（必ずしも同じ型もしくは同じイテレータにならない）。
+
+戻り値型はそれぞれ、`U`を次の様に[`fold_left_with_iter_result`](/reference/algorithm/ranges_in_value_result.md)の2つ目の引数に当てはめた型となる
+
+```cpp
+template&amp;lt;input_iterator I, sentinel_for&amp;lt;I&amp;gt; S, class T,
+         indirectly-binary-left-foldable&amp;lt;T, I&amp;gt; F&amp;gt;
+constexpr fold_left_with_iter_result&amp;lt;I, U&amp;gt;
+  fold_left_with_iter(I first, S last, T init, F f); 
+
+template&amp;lt;input_range R, class T,
+         indirectly-binary-left-foldable&amp;lt;T, iterator_t&amp;lt;R&amp;gt;&amp;gt; F&amp;gt;
+constexpr fold_left_with_iter_result&amp;lt;borrowed_iterator_t&amp;lt;R&amp;gt;, U&amp;gt;
+  fold_left_with_iter(R&amp;amp;&amp;amp; r, T init, F f);
+```
+* fold_left_with_iter_result[link /reference/algorithm/ranges_in_value_result.md]
+* borrowed_iterator_t[link /reference/ranges/borrowed_iterator_t.md]
+
+1つ目の引数には入力のイテレータ型が当てられる。
+
+## 計算量
+
+入力範囲`r`（`[first, last)`）の要素数を`N`とすると、正確に`N`回の`f`の適用が行われる。
+
+## 備考
+
+戻り値の項で使用している`U`は、指定した二項演算を初期値とイテレータによって`f(std::move(init), *first)`のように呼び出した時の戻り値型であり、`fold_left_with_iter()`の処理内部で積算値の型として使用されるものでもある。
+
+`fold_left`同様に、`f`は`init`の代わりに`U`の右辺値も受け取れる必要がある。二項演算の呼び出しにおいては、第一引数に初期値もしくは積算値が渡され、第二引数にイテレータの間接参照結果が直接渡される。そして、二項演算の適用結果は積算値を保存する変数に直接代入される（つまり、結果を次のステップに引き継ぎたい場合は積算処理も二項演算内で行う必要がある）。詳細は下の実装例を参照。
+
+## 例
+
+### 基本的な数値集計処理の例
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;algorithm&amp;gt;
+#include &amp;lt;functional&amp;gt;
+#include &amp;lt;print&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+using namespace std::ranges;
+
+int main() {
+  // 入力
+  range auto rng = views::iota(1, 11);
+  // 初期値
+  const int init = 0;
+  // 二項演算
+  auto op = std::plus&amp;lt;&amp;gt;{};
+  
+  auto [end1, resl] = fold_left_with_iter(rng, init, op);
+
+  std::println(&amp;#34;{{ {:s}, {:d} }}&amp;#34;, end1 == end(rng), resl);
+
+
+  // 入力範囲はfloatのvector
+  std::vector&amp;lt;float&amp;gt; rngf = { 0.125f, 0.25f, 0.75f };
+  
+  // 計算結果はfloat
+  auto [end2, reslf] = fold_left_with_iter(rngf, init, op);
+
+  std::println(&amp;#34;{{ {:s}, {:g} }}&amp;#34;, end2 == end(rngf), reslf);
+}
+```
+* fold_left_with_iter[color ff0000]
+* iota[link /reference/ranges/iota_view.md]
+* plus[link /reference/functional/plus.md]
+* println[link /reference/print/println.md]
+
+### 出力
+```
+{ true, 55 }
+{ true, 1.125 }
+```
+
+### 空の入力範囲に対する動作の例
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;algorithm&amp;gt;
+#include &amp;lt;functional&amp;gt;
+#include &amp;lt;print&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+using namespace std::ranges;
+
+int main() {
+  range auto rng = views::empty&amp;lt;int&amp;gt;;
+  const int init = -1;
+  auto op = std::plus&amp;lt;&amp;gt;{};
+
+  auto res1 = fold_left(rng, init, op);
+  auto res2 = fold_left_first(rng, op);
+  auto [_, res3] = fold_left_with_iter(rng, init, op);
+
+  std::println(&amp;#34;{:d}&amp;#34;, res1);
+  std::println(&amp;#34;{:d}&amp;#34;, res2.value_or(-1));
+  std::println(&amp;#34;{:d}&amp;#34;, res3);
+}
+```
+* fold_left_with_iter[color ff0000]
+* fold_left[link ranges_fold_left.md]
+* fold_left_first[link ranges_fold_left_first.md]
+* println[link /reference/print/println.md]
+* value_or[link /reference/optional/optional/value_or.md]
+
+### 出力
+```
+-1
+-1
+-1
+```
+
+## 実装例
+
+```cpp
+template&amp;lt;input_iterator I, sentinel_for&amp;lt;I&amp;gt; S, class T,
+         indirectly-binary-left-foldable&amp;lt;T, I&amp;gt; F&amp;gt;
+constexpr auto fold_left_with_iter(I first, S last, F f) -&amp;gt; fold_left_with_iter_result&amp;lt;I, U&amp;gt; {
+  using U = decay_t&amp;lt;invoke_result_t&amp;lt;F&amp;amp;, T, iter_reference_t&amp;lt;I&amp;gt;&amp;gt;&amp;gt;;
+
+  if (first == last) {
+    return {std::move(first), U(std::move(init))};
+  }
+
+  U accum = invoke(f, std::move(init), *first);
+
+  ++first;
+
+  for (; first != last; ++first) {
+    accum = invoke(f, std::move(accum), *first);
+  }
+
+  return {std::move(first), std::move(accum)};
+}
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13.1
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 5
+
+## 関連項目
+
+- [`ranges::fold_left`](ranges_fold_left.md)
+    - 範囲の左からの`fold`
+- [`ranges::fold_right`](ranges_fold_right.md)
+    - 範囲の右からの`fold`
+- [`ranges::fold_left_first`](ranges_fold_left_first.md)
+    - 範囲の最初の要素を初期値として`fold_left`
+- [`ranges::fold_right_last`](ranges_fold_right_last.md)
+    - 範囲の最後の要素を初期値として`fold_right`
+- [`ranges::fold_left_first_with_iter`](ranges_fold_left_first_with_iter.md.nolink)
+    - `fold_left_first`の結果と共に、計算した終端イテレータも返す
+
+## 参照
+
+- [P2322R6 `ranges::fold`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2322r6.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>fold_right -- fold_left_with_iter追加 #1088</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_fold_right.html"/>
      <id>f222955da68c8794948d82cf78c3e78d006359f2:reference/algorithm/ranges_fold_right.md</id>
      <updated>2024-02-06T16:15:39+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_fold_right.md b/reference/algorithm/ranges_fold_right.md
index b6bd5625e..933c27286 100644
--- a/reference/algorithm/ranges_fold_right.md
+++ b/reference/algorithm/ranges_fold_right.md
@@ -300,7 +300,7 @@ constexpr auto fold_right(I first, S last, T init, F f) {
     - 範囲の最初の要素を初期値として`fold_left`
 - [`ranges::fold_right_last`](ranges_fold_right_last.md)
     - 範囲の最後の要素を初期値として`fold_right`
-- [`ranges::fold_left_with_iter`](ranges_fold_left_with_iter.md.nolink)
+- [`ranges::fold_left_with_iter`](ranges_fold_left_with_iter.md)
     - `fold_left`の結果と共に、計算した終端イテレータも返す
 - [`ranges::fold_left_first_with_iter`](ranges_fold_left_first_with_iter.md.nolink)
     - `fold_left_first`の結果と共に、計算した終端イテレータも返す
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>fold_right_last -- fold_left_with_iter追加 #1088</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_fold_right_last.html"/>
      <id>f222955da68c8794948d82cf78c3e78d006359f2:reference/algorithm/ranges_fold_right_last.md</id>
      <updated>2024-02-06T16:15:39+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_fold_right_last.md b/reference/algorithm/ranges_fold_right_last.md
index 6491ba9fc..30d0b7f6d 100644
--- a/reference/algorithm/ranges_fold_right_last.md
+++ b/reference/algorithm/ranges_fold_right_last.md
@@ -215,7 +215,7 @@ constexpr auto fold_right_last(I first, S last, F f) {
     - 範囲の右からの`fold`
 - [`ranges::fold_left_first`](ranges_fold_left_first.md)
     - 範囲の最初の要素を初期値として`fold_left`
-- [`ranges::fold_left_with_iter`](ranges_fold_left_with_iter.md.nolink)
+- [`ranges::fold_left_with_iter`](ranges_fold_left_with_iter.md)
     - `fold_left`の結果と共に、計算した終端イテレータも返す
 - [`ranges::fold_left_first_with_iter`](ranges_fold_left_first_with_iter.md.nolink)
     - `fold_left_first`の結果と共に、計算した終端イテレータも返す
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>in_value_result -- fold_left_with_iter追加 #1088</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_in_value_result.html"/>
      <id>f222955da68c8794948d82cf78c3e78d006359f2:reference/algorithm/ranges_in_value_result.md</id>
      <updated>2024-02-06T16:15:39+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_in_value_result.md b/reference/algorithm/ranges_in_value_result.md
new file mode 100644
index 000000000..1cc5d9677
--- /dev/null
+++ b/reference/algorithm/ranges_in_value_result.md
@@ -0,0 +1,87 @@
+# in_value_result
+* algorithm[meta header]
+* std::ranges[meta namespace]
+* class[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+namespace std::ranges {
+  // (1)
+  template&amp;lt;class I, class T&amp;gt;
+  struct in_value_result {
+    [[no_unique_address]] I in;
+    [[no_unique_address]] T value;
+
+    template&amp;lt;class I2, class T2&amp;gt;
+      requires convertible_to&amp;lt;const I&amp;amp;, I2&amp;gt; &amp;amp;&amp;amp;
+               convertible_to&amp;lt;const T&amp;amp;, T2&amp;gt;
+    constexpr operator in_value_result&amp;lt;I2, T2&amp;gt;() const &amp;amp; {
+      return {in, value};
+    }
+
+    template&amp;lt;class I2, class T2&amp;gt;
+      requires convertible_to&amp;lt;I, I2&amp;gt; &amp;amp;&amp;amp;
+               convertible_to&amp;lt;T, T2&amp;gt;
+    constexpr operator in_value_result&amp;lt;I2, T2&amp;gt;() &amp;amp;&amp;amp; {
+      return {std::move(in), std::move(value)};
+    }
+  };
+
+  // (2)
+  template&amp;lt;class I, class T&amp;gt;
+  using fold_left_with_iter_result = in_value_result&amp;lt;I, T&amp;gt;;
+
+  // (3)
+  template&amp;lt;class I, class T&amp;gt;
+  using fold_left_first_with_iter_result = in_value_result&amp;lt;I, T&amp;gt;;   
+}
+```
+* no_unique_address[link /lang/cpp20/language_support_for_empty_objects.md]
+* convertible_to[link /reference/concepts/convertible_to.md]
+* std::move[link /reference/utility/move.md]
+
+## 概要
+
+* (1): イテレータと値を格納する型
+* (2): [`ranges::fold_left_with_iter`](/reference/algorithm/ranges_fold_left_with_iter.md)で使用するエイリアス
+* (3): [`ranges::fold_left_first_with_iter`](/reference/algorithm/ranges_fold_left_first_with_iter.md.nolink)で使用するエイリアス
+
+この型は、関数が入力用に範囲を受け取る場合に、処理した範囲の末尾と、それとは別の出力を返すために使用される。
+
+標準アルゴリズム関数ではこの型を直接返す代わりに、関数毎にエイリアスを定義している。
+
+
+## メンバ変数
+
+| 名前                             | 説明                 | 対応バージョン |
+| ------------------------------- | -------------------- | -------------- |
+| `[[no_unique_address]] I in`    | 読み込んだ範囲の終端位置   | C++23          |
+| `[[no_unique_address]] T value` | イテレータとは別の値 | C++23          |
+
+
+## メンバ関数
+
+| 名前                                | 説明       | 対応バージョン |
+| ----------------------------------- | ---------- | -------------- |
+| `operator in_value_result&amp;lt;I2, T2&amp;gt;` | 変換演算子 | C++23          |
+
+変換演算子は、各テンプレートパラメーターが変換できる場合のみオーバーロード解決に参加する。
+
+## 例
+(執筆中)
+
+### 出力
+(執筆中)
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13.1
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 5
+
+## 参照
+
+- [P2322R6 `ranges::fold`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2322r6.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>de-ice -- mdspan: submdspan説明用エンティティ(#1201)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/de-ice.html"/>
      <id>7c5eb19185319d7cb2dbdee3058460d954e0d2ae:reference/mdspan/de-ice.md</id>
      <updated>2024-02-04T21:44:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/de-ice.md b/reference/mdspan/de-ice.md
new file mode 100644
index 000000000..b2f611d27
--- /dev/null
+++ b/reference/mdspan/de-ice.md
@@ -0,0 +1,25 @@
+# de-ice
+* mdspan[meta header]
+* function template[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+template&amp;lt;class T&amp;gt;
+constexpr T de-ice(T val) { return val; }
+
+template&amp;lt;integral-constant-like T&amp;gt;
+constexpr auto de-ice(T) { return T::value; }
+```
+* integral-constant-like[link integral-constant-like.md]
+
+## 概要
+`de-ice`は[`submdspan`](submdspan.md)動作説明用の関数テンプレートである。
+
+
+## バージョン
+### 言語
+- C++26
+
+
+## 参照
+- [P2630R4 Submdspan](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2630r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>first_ -- mdspan: submdspan説明用エンティティ(#1201)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/first_.html"/>
      <id>7c5eb19185319d7cb2dbdee3058460d954e0d2ae:reference/mdspan/first_.md</id>
      <updated>2024-02-04T21:44:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/first_.md b/reference/mdspan/first_.md
new file mode 100644
index 000000000..0a5dc8dd1
--- /dev/null
+++ b/reference/mdspan/first_.md
@@ -0,0 +1,40 @@
+# first_
+* mdspan[meta header]
+* function template[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+template&amp;lt;class IndexType, size_t k, class ... SliceSpecifiers&amp;gt;
+constexpr IndexType first_(SliceSpecifiers... slices);
+```
+
+## 概要
+`first_`は[`submdspan`](submdspan.md)動作説明用の関数テンプレートである。
+
+`S_k`を`SliceSpecifiers`の`k`番目の型、`s_k`を`slices`の`k`番目の値としたとき、説明用の`P_k`の値を次のように定義する。
+
+- 型`S_k`が[`convertible_to`](/reference/concepts/convertible_to.md)`&amp;lt;index_type&amp;gt;`のモデルのとき`s_k`、そうでなければ
+- 型`S_k`が[`index-pair-like`](index-pair-like.md)`&amp;lt;index_type&amp;gt;`のモデルのとき`get&amp;lt;0&amp;gt;(s_k)`、そうでなければ
+- 型`S_k`が[`strided_slice`](strided_slice.md)の特殊化のとき[`de-ice`](de-ice.md)`(s_k.offset)`、そうでなければ
+- 値`0`
+
+
+## 適格要件
+`IndexType`は符号付き整数型または符号無し整数型であること。
+
+
+## 事前条件
+`P_k`が`IndexType`型で表現可能な値であること。
+
+
+## 戻り値
+[`extents`](extents.md)`&amp;lt;IndexType&amp;gt;::`[`index-cast`](extents/index-cast.md)`(P_k)`
+
+
+## バージョン
+### 言語
+- C++26
+
+
+## 参照
+- [P2630R4 Submdspan](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2630r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>full_extent_t -- mdspan: submdspan説明用エンティティ(#1201)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/full_extent_t.html"/>
      <id>7c5eb19185319d7cb2dbdee3058460d954e0d2ae:reference/mdspan/full_extent_t.md</id>
      <updated>2024-02-04T21:44:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/full_extent_t.md b/reference/mdspan/full_extent_t.md
index 49c7336d4..78bf97479 100644
--- a/reference/mdspan/full_extent_t.md
+++ b/reference/mdspan/full_extent_t.md
@@ -26,9 +26,10 @@ namespace std {
 int main()
 {
   int arr[] = {1, 2, 3, 4, 5, 6};
+
+  // 2x3要素の2次元配列ビュー
   using Ext2x3 = std::extents&amp;lt;size_t, 2, 3&amp;gt;;
   std::mdspan&amp;lt;int, Ext2x3&amp;gt; mat{arr};
-  // 2x3要素の2次元配列ビュー
   // i/j -&amp;gt;
   // |  1 2 3
   // V  4 5 6
@@ -51,6 +52,8 @@ int main()
 * std::full_extent[color ff0000]
 * std::submdspan[link submdspan.md]
 * extent[link mdspan/extent.md]
+* std::print[link /reference/print/print.md]
+* std::println[link /reference/print/println.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>index-pair-like -- mdspan: submdspan説明用エンティティ(#1201)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/index-pair-like.html"/>
      <id>7c5eb19185319d7cb2dbdee3058460d954e0d2ae:reference/mdspan/index-pair-like.md</id>
      <updated>2024-02-04T21:44:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/index-pair-like.md b/reference/mdspan/index-pair-like.md
new file mode 100644
index 000000000..e4a34b71a
--- /dev/null
+++ b/reference/mdspan/index-pair-like.md
@@ -0,0 +1,26 @@
+# index-pair-like
+* mdspan[meta header]
+* concept[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+template&amp;lt;class T, class IndexType&amp;gt;
+concept index-pair-like =                        // exposition only
+  pair-like&amp;lt;T&amp;gt; &amp;amp;&amp;amp;
+  convertible_to&amp;lt;tuple_element_t&amp;lt;0,T&amp;gt;, IndexType&amp;gt; &amp;amp;&amp;amp;
+  convertible_to&amp;lt;tuple_element_t&amp;lt;1,T&amp;gt;, IndexType&amp;gt;;
+```
+* pair-like[link /reference/tuple/pair-like.md]
+* convertible_to[link /reference/concepts/convertible_to.md]
+
+## 概要
+`index-pair-like`は、インデクス値ペアと互換があることを表す説明専用コンセプトである。
+
+
+## バージョン
+### 言語
+- C++26
+
+
+## 参照
+- [P2630R4 Submdspan](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2630r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>integral-constant-like -- mdspan: submdspan説明用エンティティ(#1201)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/integral-constant-like.html"/>
      <id>7c5eb19185319d7cb2dbdee3058460d954e0d2ae:reference/mdspan/integral-constant-like.md</id>
      <updated>2024-02-04T21:44:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/integral-constant-like.md b/reference/mdspan/integral-constant-like.md
new file mode 100644
index 000000000..d45e5abaf
--- /dev/null
+++ b/reference/mdspan/integral-constant-like.md
@@ -0,0 +1,33 @@
+# integral-constant-like
+* mdspan[meta header]
+* concept[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+template&amp;lt;class T&amp;gt;
+concept integral-constant-like =  // exposition only
+  is_integral_v&amp;lt;decltype(T::value)&amp;gt; &amp;amp;&amp;amp;
+  !is_same_v&amp;lt;bool, remove_const_t&amp;lt;decltype(T::value)&amp;gt;&amp;gt; &amp;amp;&amp;amp;
+  convertible_to&amp;lt;T, decltype(T::value)&amp;gt; &amp;amp;&amp;amp;
+  equality_comparable_with&amp;lt;T, decltype(T::value)&amp;gt; &amp;amp;&amp;amp;
+  bool_constant&amp;lt;T() == T::value&amp;gt;::value &amp;amp;&amp;amp;
+  bool_constant&amp;lt;static_cast&amp;lt;decltype(T::value)&amp;gt;(T()) == T::value&amp;gt;::value;
+```
+* is_integral_v[link /reference/type_traits/is_integral.md]
+* is_same_v[link /reference/type_traits/is_same.md]
+* remove_const_t[link /reference/type_traits/remove_const.md]
+* bool_constant[link /reference/type_traits/bool_constant.md]
+* convertible_to[link /reference/concepts/convertible_to.md]
+* equality_comparable_with[link /reference/concepts/equality_comparable.md]
+
+## 概要
+`integral-constant-like`は、型`T`が整数定数と互換があることを表す説明専用コンセプトである。
+
+
+## バージョン
+### 言語
+- C++26
+
+
+## 参照
+- [P2630R4 Submdspan](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2630r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>last_ -- mdspan: submdspan説明用エンティティ(#1201)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/last_.html"/>
      <id>7c5eb19185319d7cb2dbdee3058460d954e0d2ae:reference/mdspan/last_.md</id>
      <updated>2024-02-04T21:44:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/last_.md b/reference/mdspan/last_.md
new file mode 100644
index 000000000..f552e9b46
--- /dev/null
+++ b/reference/mdspan/last_.md
@@ -0,0 +1,41 @@
+# last_
+* mdspan[meta header]
+* function template[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+template&amp;lt;size_t k, class Extents, class ... SliceSpecifiers&amp;gt;
+constexpr auto last_(const Extents&amp;amp; src, SliceSpecifiers... slices);
+```
+* Extents[link extents.md]
+
+## 概要
+`last_`は[`submdspan`](submdspan.md)動作説明用の関数テンプレートである。
+
+`index_type`を`Extents::index_type`型、`S_k`を`SliceSpecifiers`の`k`番目の型、`s_k`を`slices`の`k`番目の値としたとき、説明用の`L_k`の値を次のように定義する。
+
+- 型`S_k`が[`convertible_to`](/reference/concepts/convertible_to.md)`&amp;lt;index_type&amp;gt;`のモデルのとき[`de-ice`](de-ice.md)`(s_k) + 1`、そうでなければ
+- 型`S_k`が[`index-pair-like`](index-pair-like.md)`&amp;lt;index_type&amp;gt;`のモデルのとき`get&amp;lt;1&amp;gt;(s_k)`、そうでなければ
+- 型`S_k`が[`strided_slice`](strided_slice.md)の特殊化のとき[`de-ice`](de-ice.md)`(s_k.offset) +` [`de-ice`](de-ice.md)`(s_k.extent)`、そうでなければ
+- `src.`[`extent`](extents/extent.md)`(k)`
+
+
+## 適格要件
+`Extents`が[`extents`](extents.md)の特殊化であること。
+
+
+## 事前条件
+`L_k`が`index_type`型で表現可能な値であること。
+
+
+## 戻り値
+[`extents`](extents.md)`&amp;lt;IndexType&amp;gt;::`[`index-cast`](extents/index-cast.md)`(L_k)`
+
+
+## バージョン
+### 言語
+- C++26
+
+
+## 参照
+- [P2630R4 Submdspan](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2630r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>src-indices -- mdspan: submdspan説明用エンティティ(#1201)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/src-indices.html"/>
      <id>7c5eb19185319d7cb2dbdee3058460d954e0d2ae:reference/mdspan/src-indices.md</id>
      <updated>2024-02-04T21:44:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/src-indices.md b/reference/mdspan/src-indices.md
new file mode 100644
index 000000000..f93730159
--- /dev/null
+++ b/reference/mdspan/src-indices.md
@@ -0,0 +1,40 @@
+# src-indices
+* mdspan[meta header]
+* function template[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+template&amp;lt;class IndexType, size_t N, class ... SliceSpecifiers&amp;gt;
+constexpr array&amp;lt;IndexType, sizeof...(SliceSpecifiers)&amp;gt;
+  src-indices(const array&amp;lt;IndexType, N&amp;gt;&amp;amp; indices, SliceSpecifiers ... slices);
+```
+* array[link /reference/array/array.md]
+
+## 概要
+`src-indices`は[`submdspan`](submdspan.md)動作説明用の関数テンプレートである。
+
+説明のため`rank`を`slices`の要素数、`S_k`を`SliceSpecifiers`の`k`番目の型とする
+[`array`](/reference/array/array.md)`&amp;lt;size_t, rank&amp;gt;`型の配列`map-rank`を導入し、その要素`map-rank[k]`を下記の通り定義する。
+
+- 型`S_k`が[`convertible_to`](/reference/concepts/convertible_to.md)`&amp;lt;IndexType&amp;gt;`のモデルのとき[`dynamic_extent`](/reference/span/dynamic_extent.md)、そうでなければ
+- `j &amp;lt; k`において型`S_j`が[`convertible_to`](/reference/concepts/convertible_to.md)`&amp;lt;IndexType&amp;gt;`のモデルではない個数
+
+
+## 適格要件
+`IndexType`は符号付き整数型または符号無し整数型であること。
+
+
+## 戻り値
+半開区間`[0, rank)`の`k`に対して、`k`番目の要素が下記の値を持つ配列を返す。
+
+- `map-rank[k]`が[`dynamic_extent`](/reference/span/dynamic_extent.md)に等しいとき、[`first_`](first_.md)`&amp;lt;IndexType, k&amp;gt;(slices...)`
+- そうでなければ、[`first_`](first_.md)`&amp;lt;IndexType, k&amp;gt;(slices...) + indices[map-rank[k]]`
+
+
+## バージョン
+### 言語
+- C++26
+
+
+## 参照
+- [P2630R4 Submdspan](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2630r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>strided_slice -- mdspan: submdspan説明用エンティティ(#1201)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/strided_slice.html"/>
      <id>7c5eb19185319d7cb2dbdee3058460d954e0d2ae:reference/mdspan/strided_slice.md</id>
      <updated>2024-02-04T21:44:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/strided_slice.md b/reference/mdspan/strided_slice.md
index 6ab21722b..b7003c043 100644
--- a/reference/mdspan/strided_slice.md
+++ b/reference/mdspan/strided_slice.md
@@ -18,6 +18,7 @@ namespace std {
   };
 }
 ```
+* no_unique_address[link /lang/cpp20/language_support_for_empty_objects.md]
 
 ## 概要
 `strided_slice`は、多次元配列の特定次元に対してストライド幅を指定した要素取り出しを指示する集成体クラステンプレートである。
@@ -35,7 +36,7 @@ std::strided_slice{.offset=1, .extent=10, .stride=3}
 
 
 ## 適格要件
-`OffsetType`, `ExtentType`, `StrideType`は符号付き整数型または符号無し整数型、もしくは[`integral-constant-like`](integral-constant-like.md.nolink)のモデルであること。
+`OffsetType`, `ExtentType`, `StrideType`は符号付き整数型または符号無し整数型、もしくは[`integral-constant-like`](integral-constant-like.md)のモデルであること。
 
 
 ## メンバ型
@@ -63,7 +64,7 @@ int main()
   // オフセット位置1から10要素の範囲よりストライド幅3で要素抽出
   auto vec1 = std::submdspan(vec0, std::strided_slice{1, 10, 3});
   // 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11
-  //    ^  .  .  ^  .  .  ^   .  .  ^
+  //    ^  .  .  ^  .  .  ^  .  .   ^
   std::println(&amp;#34;vec1:&amp;#34;);
   for (size_t i = 0; i &amp;lt; vec1.extent(0); i++) {
     std::print(&amp;#34; {}&amp;#34;, vec1[i]);
@@ -81,9 +82,10 @@ int main()
 }
 ```
 * std::strided_slice[color ff0000]
-* std::ranges::iota[link /reference/numeric/ranges_iota.md]
 * std::submdspan[link submdspan.md]
-* extent[link mdspan/extent.md]
+* std::print[link /reference/print/print.md]
+* std::println[link /reference/print/println.md]
+* std::ranges::iota[link /reference/numeric/ranges_iota.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>submdspan -- mdspan: submdspan説明用エンティティ(#1201)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/submdspan.html"/>
      <id>7c5eb19185319d7cb2dbdee3058460d954e0d2ae:reference/mdspan/submdspan.md</id>
      <updated>2024-02-04T21:44:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/submdspan.md b/reference/mdspan/submdspan.md
index db055f288..6ca3ad68f 100644
--- a/reference/mdspan/submdspan.md
+++ b/reference/mdspan/submdspan.md
@@ -31,7 +31,7 @@ namespace std {
 スライス指定子リスト`slices...`にインデクス値指定が含まれる場合、戻り値の次元数(rank)は元の多次元配列ビューに対してインデクス値指定した次元数だけ削減される。
 
 - インデクス値指定 : 整数値。指定次元に対する多次元インデクス値を固定する。
-- インデクス範囲指定 : [インデクス・ペア互換型](index-pair-like.md.nolink)の値。開始位置(begin)と終了位置(end)で表現される半開区間から要素群を取り出す。
+- インデクス範囲指定 : [インデクス・ペア互換型](index-pair-like.md)の値。開始位置(begin)と終了位置(end)で表現される半開区間から要素群を取り出す。
 - ストライド・スライス指定 : [`std::strided_slice`](strided_slice.md)の値。オフセット(offset)と要素数(extent)とストライド幅(stride)で指定される要素群を取り出す。
 - 全要素指定 : [`std::full_extent`](full_extent_t.md)。指定次元の全要素を取り出す。
 
@@ -48,7 +48,7 @@ namespace std {
 - [`is_same_v`](/reference/type_traits/is_same.md)`&amp;lt;`[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;decltype(`[`sub_map_offset.mapping`](submdspan_mapping_result.md)`.extents())&amp;gt;, decltype(`[`submdspan_extents`](submdspan_extents.md.nolink)`(`[`src.mapping()`](mdspan/mapping.md)`, slices...))&amp;gt;`が`true`、かつ
 - [`src.extents()`](mdspan/extents.md)の各次元インデクス`k`において、`S_k`を`SliceSpecifiers`の`k`番目の型としたき、下記いずれかの1つのみを満たすこと。
     - 型`S_k`が[`convertible_to`](/reference/concepts/convertible_to.md)`&amp;lt;index_type&amp;gt;`のモデル
-    - 型`S_k`が[`index-pair-like`](index-pair-like.md.nolink)`&amp;lt;index_type&amp;gt;`のモデル
+    - 型`S_k`が[`index-pair-like`](index-pair-like.md)`&amp;lt;index_type&amp;gt;`のモデル
     - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;S_k,` [`full_extent_t`](full_extent_t.md)`&amp;gt;`が`true`
     - 型`S_k`が[`strided_slice`](strided_slice.md)の特殊化
 
@@ -58,9 +58,9 @@ namespace std {
     - 型`S_k`が[`strided_slice`](strided_slice.md)の特殊化のとき
         - `s_k.extent == 0`、または
         - `s_k.stride &amp;gt; 0`
-    - `0` ≤ [`first_&amp;lt;index_type, k&amp;gt;`](first_.md.nolink)`(slices...)` ≤ [`last_&amp;lt;k&amp;gt;`](last_.md.nolink)`(`[`src.extents()`](mdspan/extents.md)`, slices...)` ≤ [`src.extent(k)`](mdspan/extent.md)
+    - `0` ≤ [`first_&amp;lt;index_type, k&amp;gt;`](first_.md)`(slices...)` ≤ [`last_&amp;lt;k&amp;gt;`](last_.md)`(`[`src.extents()`](mdspan/extents.md)`, slices...)` ≤ [`src.extent(k)`](mdspan/extent.md)
 - [`sub_map_offset.mapping`](submdspan_mapping_result.md)`.extents() ==` [`submdspan_extents`](submdspan_extents.md.nolink)`(`[`src.mapping()`](mdspan/mapping.md)`, slices...)`が`true`、かつ
-- [`sub_map_offset.mapping`](submdspan_mapping_result.md)`.extents()`の多次元インデクス値を表す任意の整数パック`I`に対して、`sub_map_offset.mapping(I...) +` [`sub_map_offset.offset`](submdspan_mapping_result.md) `==` [`src.mapping()`](mdspan/mapping.md)`(`[`src-indices`](src-indices.md.nolink)`(`[`array`](/reference/array/array.md)`{I...}, slices...))`が`true`であること。
+- [`sub_map_offset.mapping`](submdspan_mapping_result.md)`.extents()`の多次元インデクス値を表す任意の整数パック`I`に対して、`sub_map_offset.mapping(I...) +` [`sub_map_offset.offset`](submdspan_mapping_result.md) `==` [`src.mapping()`](mdspan/mapping.md)`(`[`src-indices`](src-indices.md)`(`[`array`](/reference/array/array.md)`{I...}, slices...))`が`true`であること。
 
 
 ## 効果
@@ -145,9 +145,11 @@ int main()
 }
 ```
 * std::submdspan[color ff0000]
-* std::ranges::iota[link /reference/numeric/ranges_iota.md]
 * std::full_extent[link full_extent_t.md]
 * std::strided_slice[link strided_slice.md]
+* std::print[link /reference/print/print.md]
+* std::println[link /reference/print/println.md]
+* std::ranges::iota[link /reference/numeric/ranges_iota.md]
 
 #### 出力
 ```
@@ -202,13 +204,14 @@ int main()
     std::strided_slice{.offset=0, .extent=Int&amp;lt;5&amp;gt;, .stride=Int&amp;lt;2&amp;gt;});
   // (strided_slice::offset は戻り値型に影響を与えない)
   static_assert(std::same_as&amp;lt;decltype(submat_2x3)::extents_type, std::extents&amp;lt;size_t, 2, 3&amp;gt;&amp;gt;);
-  std::println(&amp;#34;submat_2x3 {}x{}&amp;#34;, submat_dyn.extent(0), submat_dyn.extent(1));
+  std::println(&amp;#34;submat_2x3 {}x{}&amp;#34;, submat_2x3.extent(0), submat_2x3.extent(1));
 }
 ```
 * std::submdspan[color ff0000]
+* std::strided_slice[link strided_slice.md]
 * std::integral_constant[link /reference/type_traits/integral_constant.md]
 * std::ranges::iota[link /reference/numeric/ranges_iota.md]
-* std::strided_slice[link strided_slice.md]
+* std::println[link /reference/print/println.md]
 
 #### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>submdspan_mapping_result -- mdspan: submdspan説明用エンティティ(#1201)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/submdspan_mapping_result.html"/>
      <id>7c5eb19185319d7cb2dbdee3058460d954e0d2ae:reference/mdspan/submdspan_mapping_result.md</id>
      <updated>2024-02-04T21:44:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/submdspan_mapping_result.md b/reference/mdspan/submdspan_mapping_result.md
index 667a180e8..78ec62a1c 100644
--- a/reference/mdspan/submdspan_mapping_result.md
+++ b/reference/mdspan/submdspan_mapping_result.md
@@ -14,6 +14,7 @@ namespace std {
 }
 ```
 * LayoutMapping[link LayoutMapping.md]
+* no_unique_address[link /lang/cpp20/language_support_for_empty_objects.md]
 
 ## 概要
 `submdspan_mapping_result`は、多次元配列ビュー[mdspan](mdspan.md)からの部分ビュー[`submdspan`](submdspan.md)取り出しサポートのために定義するカスタマイズポイント`submdspan_mapping`の戻り値型である。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
</feed>
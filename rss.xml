<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2020-06-11T07:00:26.616524</updated>
  <id>4e900a03-6385-4a3a-81b5-250ff4c4b78e</id>

  
    <entry>
      <title>状態を持たないラムダ式を、デフォルト構築可能、代入可能とする -- 状態を持たないラムダ式を、デフォルト構築可能、代入可能とする : サンプルコードを修正</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/default_constructible_and_assignable_stateless_lambdas.html"/>
      <id>b19e4343d6ae014f96b138d81526ad08468e011f:lang/cpp20/default_constructible_and_assignable_stateless_lambdas.md</id>
      <updated>2020-06-11T15:56:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/default_constructible_and_assignable_stateless_lambdas.md b/lang/cpp20/default_constructible_and_assignable_stateless_lambdas.md
index 402a55087..54c60d3ce 100644
--- a/lang/cpp20/default_constructible_and_assignable_stateless_lambdas.md
+++ b/lang/cpp20/default_constructible_and_assignable_stateless_lambdas.md
@@ -110,11 +110,14 @@ void close_handle(handle_t*) {
   std::cout &amp;lt;&amp;lt; &amp;#34;The handle was closed&amp;#34; &amp;lt;&amp;lt; std::endl;
 }
 
-int n{};
+handle_t get_handle() {
+  static int n{};
+  return &amp;amp;n;
+}
 
 int main()
 {
-  handle_t h = &amp;amp;n;
+  handle_t h = get_handle();
   std::unique_ptr&amp;lt;handle_t, decltype([](auto h) {close_handle(h);})&amp;gt; handle{&amp;amp;h};
 }
 ```
@@ -151,7 +154,7 @@ set1 = set2;  // C++17まではコンパイルエラー
 ラムダ式は関数オブジェクトを生成する糖衣構文であるが、これらのことは対応する関数オブジェクトを直接書いた場合と一貫しておらず不便であるため、状態を持たないラムダ式に限ってデフォルト構築と代入が可能になるように変更された。
 
 C++20では同時に[評価されない文脈にラムダ式を書くことができるようになった](./wording_for_lambdas_in_unevaluated_contexts.md)ため、この様な場合にラムダ式のクロージャ型を直接取得し渡すことができ、余計なコードをほとんど削減することができるようになる。
-。
+
 ## 関連項目
 - [評価されない文脈でのラムダ式](./wording_for_lambdas_in_unevaluated_contexts.md)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>weekday_indexed -- weekday_indexed : 出力関係を追加</title>
      <link href="https://cpprefjp.github.io/reference/chrono/weekday_indexed.html"/>
      <id>dcf96158616c9d5a8f06fd3aa4671c1d91fe957c:reference/chrono/weekday_indexed.md</id>
      <updated>2020-06-10T17:10:30+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/weekday_indexed.md b/reference/chrono/weekday_indexed.md
index f6edad3d9..ae9f591c3 100644
--- a/reference/chrono/weekday_indexed.md
+++ b/reference/chrono/weekday_indexed.md
@@ -51,15 +51,14 @@ Nの妥当な範囲は`[1, 5]`である。0ベースではないことに注意
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`operator&amp;lt;&amp;lt;`](weekday_indexed/op_ostream.md.nolink)   | 出力ストリームに出力する | C++20 |
-| [`from_stream`](weekday_indexed/from_stream.md.nolink) | フォーマット指定して入力ストリームから入力する | C++20 |
+| [`operator&amp;lt;&amp;lt;`](weekday_indexed/op_ostream.md) | 出力ストリームに出力する | C++20 |
 
 
 ## 文字列フォーマット
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`formatter`](weekday_indexed/formatter.md.nolink) | [`std::formatter`](/reference/format/formatter.md)クラスの特殊化 | C++20 |
+| [`formatter`](weekday_indexed/formatter.md) | [`std::formatter`](/reference/format/formatter.md)クラスの特殊化 | C++20 |
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>formatter -- weekday_indexed : 出力関係を追加</title>
      <link href="https://cpprefjp.github.io/reference/chrono/weekday_indexed/formatter.html"/>
      <id>dcf96158616c9d5a8f06fd3aa4671c1d91fe957c:reference/chrono/weekday_indexed/formatter.md</id>
      <updated>2020-06-10T17:10:30+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/weekday_indexed/formatter.md b/reference/chrono/weekday_indexed/formatter.md
new file mode 100644
index 000000000..ebf23af1a
--- /dev/null
+++ b/reference/chrono/weekday_indexed/formatter.md
@@ -0,0 +1,75 @@
+# formatter
+* chrono[meta header]
+* std[meta namespace]
+* class[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;class charT&amp;gt;
+  struct formatter&amp;lt;chrono::weekday_indexed, charT&amp;gt;;
+}
+```
+
+## 概要
+`weekday_indexed`クラスに対する[`std::formatter`](/reference/format/formatter.md)クラステンプレートの特殊化。
+
+フォーマットフラグとしては、以下を使用できる：
+
+| フォーマットフラグ | 説明 |
+|--------------------|------|
+| `%a` | ロケール依存の曜日の略称 |
+| `%A` | ロケール依存の曜日の完全名 |
+| `%u` | 10進数での月曜を1とするISO曜日番号 (1-7) |
+| `%Ou` | ロケール依存の`%u`の異なる表現 |
+| `%w` | 10進数での日曜を0とするISO曜日番号 (0-6) |
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+#include &amp;lt;format&amp;gt;
+
+namespace chrono = std::chrono;
+
+int main()
+{
+  // デフォルトフォーマットはoperator&amp;lt;&amp;lt;と同じ
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{}&amp;#34;, chrono::Sunday[1]) &amp;lt;&amp;lt; std::endl;
+
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{:%a}&amp;#34;, chrono::Sunday[1]) &amp;lt;&amp;lt; std::endl; // 曜日の略称
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{:%A}&amp;#34;, chrono::Sunday[1]) &amp;lt;&amp;lt; std::endl; // 曜日の完全名
+
+  // ロケール依存の出力
+  std::cout &amp;lt;&amp;lt; std::format(std::locale(&amp;#34;ja_JP.UTF-8&amp;#34;), &amp;#34;{}&amp;#34;, chrono::Sunday[1]) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::format(std::locale(&amp;#34;ja_JP.UTF-8&amp;#34;), &amp;#34;{:%a}&amp;#34;, chrono::Sunday[1]) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::format(std::locale(&amp;#34;ja_JP.UTF-8&amp;#34;), &amp;#34;{:%A}&amp;#34;, chrono::Sunday[1]) &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::format[link /reference/chrono/format.md]
+* chrono::Sunday[link /reference/chrono/weekday_constants.md]
+* std::locale[link /reference/locale/locale.md]
+
+### 出力
+```
+Sun[1]
+Sun
+Sunday
+日[1]
+日
+日曜日
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): (9.0時点で実装なし)
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
+
+
+## 関連項目
+- [chronoの`std::format()`](/reference/chrono/format.md) (フォーマットの詳細)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;&lt; -- weekday_indexed : 出力関係を追加</title>
      <link href="https://cpprefjp.github.io/reference/chrono/weekday_indexed/op_ostream.html"/>
      <id>dcf96158616c9d5a8f06fd3aa4671c1d91fe957c:reference/chrono/weekday_indexed/op_ostream.md</id>
      <updated>2020-06-10T17:10:30+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/weekday_indexed/op_ostream.md b/reference/chrono/weekday_indexed/op_ostream.md
new file mode 100644
index 000000000..734ef2c0b
--- /dev/null
+++ b/reference/chrono/weekday_indexed/op_ostream.md
@@ -0,0 +1,66 @@
+# operator&amp;lt;&amp;lt;
+* chrono[meta header]
+* std::chrono[meta namespace]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::chrono {
+  template &amp;lt;class charT, class traits&amp;gt;
+  std::basic_ostream&amp;lt;charT, traits&amp;gt;&amp;amp;
+    operator&amp;lt;&amp;lt;(std::basic_ostream&amp;lt;charT, traits&amp;gt;&amp;amp; os, const weekday_indexed&amp;amp; wdi); // (1) C++20
+}
+```
+
+## 概要
+`weekday_indexed`オブジェクトを出力ストリームに出力する。
+
+
+## 戻り値
+便宜上のリテラルキャスト`STATICALLY-WIDEN`を導入する。`STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;...&amp;#34;)`は、`charT`が`char`である場合は`&amp;#34;...&amp;#34;`、`charT`が`wchar_t`である場合は`L&amp;#34;...&amp;#34;`を意味する。
+
+- (1) : 以下と等価：
+    ```cpp
+    auto i = wdi.index();
+    return os &amp;lt;&amp;lt; (i &amp;gt;= 1 &amp;amp;&amp;amp; i &amp;lt;= 5 ?
+      format(os.getloc(), STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;{}[{}]&amp;#34;), wdi.weekday(), i) :
+      format(os.getloc(), STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;{}[{} is not a valid index]&amp;#34;),
+             wdi.weekday(), i));
+    ```
+    * wdi.index()[link index.md]
+    * format[link /reference/chrono/format.md]
+    * wdi.weekday()[link weekday.md]
+    * os.getloc()[link /reference/ios/ios_base/getloc.md]
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+
+namespace chrono = std::chrono;
+
+int main()
+{
+  std::cout &amp;lt;&amp;lt; chrono::Sunday[1] &amp;lt;&amp;lt; std::endl;
+}
+```
+* chrono::Sunday[link /reference/chrono/weekday_constants.md]
+
+### 出力
+```
+Sun[1]
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): (9.0時点で実装なし)
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
+
+
+## 関連項目
+- [chronoの`std::format()`](/reference/chrono/format.md) (フォーマットの詳細)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>weekday_indexed -- weekday_indexed : operator==を追加</title>
      <link href="https://cpprefjp.github.io/reference/chrono/weekday_indexed.html"/>
      <id>f7ea4112a2582ff7de8831b50d0c3aaf9061dc47:reference/chrono/weekday_indexed.md</id>
      <updated>2020-06-10T16:58:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/weekday_indexed.md b/reference/chrono/weekday_indexed.md
index 2f17d01d0..f6edad3d9 100644
--- a/reference/chrono/weekday_indexed.md
+++ b/reference/chrono/weekday_indexed.md
@@ -43,7 +43,7 @@ Nの妥当な範囲は`[1, 5]`である。0ベースではないことに注意
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`operator==`](weekday_indexed/op_equal.md.nolink) | 等値比較を行う | C++20 |
+| [`operator==`](weekday_indexed/op_equal.md) | 等値比較を行う | C++20 |
 | `bool operator!=(const weekday_indexed&amp;amp;, const weekday_indexed&amp;amp;) noexcept;` | 非等値比較を行う (`==`により使用可能) | C++20 |
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- weekday_indexed : operator==を追加</title>
      <link href="https://cpprefjp.github.io/reference/chrono/weekday_indexed/op_equal.html"/>
      <id>f7ea4112a2582ff7de8831b50d0c3aaf9061dc47:reference/chrono/weekday_indexed/op_equal.md</id>
      <updated>2020-06-10T16:58:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/weekday_indexed/op_equal.md b/reference/chrono/weekday_indexed/op_equal.md
new file mode 100644
index 000000000..168cc8c15
--- /dev/null
+++ b/reference/chrono/weekday_indexed/op_equal.md
@@ -0,0 +1,63 @@
+# operator==
+* chrono[meta header]
+* std::chrono[meta namespace]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::chrono {
+  constexpr bool operator==(const weekday_indexed&amp;amp; x, const weekday_indexed&amp;amp; y) noexcept; // (1) C++20
+}
+```
+
+## 概要
+`weekday_indexed`同士の等値比較を行う。
+
+
+## 戻り値
+- (1) :
+
+```cpp
+return x.weekday() == y.weekday() &amp;amp;&amp;amp; x.index() == y.index();
+```
+* weekday()[link weekday.md]
+* index()[link index.md]
+
+
+## 例外
+投げない
+
+
+## 備考
+- この演算子により、`operator!=`が使用可能になる
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+
+namespace chrono = std::chrono;
+
+int main()
+{
+  assert(chrono::Sunday[1] == chrono::Sunday[1]);
+  assert(chrono::Sunday[1] != chrono::Sunday[2]);
+  assert(chrono::Sunday[1] != chrono::Monday[1]);
+}
+```
+* chrono::Sunday[link /reference/chrono/weekday_constants.md]
+* chrono::Monday[link /reference/chrono/weekday_constants.md]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 8.0
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>weekday -- weekday_indexed::weekday() : コード修飾を追加</title>
      <link href="https://cpprefjp.github.io/reference/chrono/weekday_indexed/weekday.html"/>
      <id>88234747049f4134d8dedf666001b044da463ee7:reference/chrono/weekday_indexed/weekday.md</id>
      <updated>2020-06-10T16:45:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/weekday_indexed/weekday.md b/reference/chrono/weekday_indexed/weekday.md
index 67fff4182..6c27d639a 100644
--- a/reference/chrono/weekday_indexed/weekday.md
+++ b/reference/chrono/weekday_indexed/weekday.md
@@ -34,6 +34,7 @@ int main()
 }
 ```
 * weekday()[color ff0000]
+* chrono::weekday[link /reference/chrono/weekday.md]
 * chrono::Sunday[link /reference/chrono/weekday_constants.md]
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>weekday_indexed -- weekday_indexed : コンストラクタを追加</title>
      <link href="https://cpprefjp.github.io/reference/chrono/weekday_indexed.html"/>
      <id>b2c37b96ef1501f796457ae3df13ebb4c3c36805:reference/chrono/weekday_indexed.md</id>
      <updated>2020-06-10T16:33:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/weekday_indexed.md b/reference/chrono/weekday_indexed.md
index efd8f8c26..2f17d01d0 100644
--- a/reference/chrono/weekday_indexed.md
+++ b/reference/chrono/weekday_indexed.md
@@ -13,7 +13,7 @@ namespace std::chrono {
 ## 概要
 `weekday_indexed`は、月内でのN回目の指定した曜日を表すクラスである。
 
-Nの範囲は`[1, 5]`である。0ベースではないことに注意。
+Nの妥当な範囲は`[1, 5]`である。0ベースではないことに注意。
 
 このクラスは等値比較ができ、[EqualityComparable](/reference/concepts/equality_comparable.md)の要件を満たす。しかし大小比較はできず、LessThanComparable要件は満たさない。
 
@@ -25,7 +25,7 @@ Nの範囲は`[1, 5]`である。0ベースではないことに注意。
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`(constructor)`](weekday_indexed/op_constructor.md.nolink) | コンストラクタ | C++20 |
+| [`(constructor)`](weekday_indexed/op_constructor.md) | コンストラクタ | C++20 |
 | `weekday_indexed&amp;amp; operator=(const weekday_indexed&amp;amp;) = default;`&amp;lt;br/&amp;gt; `weekday_indexed&amp;amp; operator=(weekday_indexed&amp;amp;&amp;amp;) = default;` | 代入演算子 | C++20 |
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- weekday_indexed : コンストラクタを追加</title>
      <link href="https://cpprefjp.github.io/reference/chrono/weekday_indexed/op_constructor.html"/>
      <id>b2c37b96ef1501f796457ae3df13ebb4c3c36805:reference/chrono/weekday_indexed/op_constructor.md</id>
      <updated>2020-06-10T16:33:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/weekday_indexed/op_constructor.md b/reference/chrono/weekday_indexed/op_constructor.md
new file mode 100644
index 000000000..95472dda1
--- /dev/null
+++ b/reference/chrono/weekday_indexed/op_constructor.md
@@ -0,0 +1,65 @@
+# コンストラクタ
+* chrono[meta header]
+* std::chrono[meta namespace]
+* weekday_indexed[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+weekday_indexed() = default;                            // (1) C++20
+constexpr weekday_indexed(const chrono::weekday&amp;amp; wd,
+                          unsigned int index) noexcept; // (2) C++20
+
+weekday_indexed(const weekday_indexed&amp;amp;) = default;      // (3) C++20
+weekday_indexed(weekday_indexed&amp;amp;&amp;amp;) = default;           // (4) C++20
+```
+* weekday[link /reference/chrono/weekday.md]
+
+## 概要
+- (1) : デフォルトコンストラクタ
+- (2) : 曜日とインデックスを指定して`weekday_indexed`オブジェクトを構築する
+- (3) : コピーコンストラクタ
+- (4) : ムーブコンストラクタ
+
+
+## 効果
+- (1) :
+    - デフォルト初期化では曜日とインデックスは符号なし整数の未初期化値となり、値初期化では値0となる
+- (2) :
+    - `wd`と`index`をメンバ変数として保持する
+    - `!wd.`[`ok()`](/reference/chrono/weekday/ok.md)もしくは`index`の値範囲が`[0, 7]`に含まれなければ、それぞれの保持される値は未規定
+
+
+## 例外
+投げない
+
+
+### 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+
+namespace chrono = std::chrono;
+
+int main() {
+  chrono::weekday_indexed wi{chrono::Sunday, 1};
+  assert(wi.weekday() == chrono::Sunday);
+  assert(wi.index() == 1);
+}
+```
+* chrono::Sunday[link /reference/chrono/weekday_constants.md]
+* wi.weekday()[link weekday.md]
+* wi.index()[link index.md]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 8.0
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
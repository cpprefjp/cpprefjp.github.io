<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2021-05-30T14:53:52.207418</updated>
  <id>6c2350f7-5a4c-46a2-9e8c-a63cc8607605</id>

  
    <entry>
      <title>モジュール -- Update modules.md</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/modules.html"/>
      <id>db24ffc4e7f08f45499622556f0d15b8094e6e78:lang/cpp20/modules.md</id>
      <updated>2021-05-30T07:35:11+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/modules.md b/lang/cpp20/modules.md
index d8ef88ab0..31e2f140a 100644
--- a/lang/cpp20/modules.md
+++ b/lang/cpp20/modules.md
@@ -122,7 +122,7 @@ int baz() { return 30; }
 ```
 * P1103R3[link http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1103r3.pdf]
 
-モジュール宣言はプリプロセッサで生成してはならない。これは、`#if`などによる切り替え、`#include`、`#define`による置換などによるものを含む。
+モジュール宣言は1行で書く必要があり、プリプロセッサで生成してはならない。これは、`#if`などによる切り替え、`#include`、`#define`による置換などによるものを含む。後述のグローバルモジュールフラグメントを記述する場合を除き、モジュール宣言の前にトークンがあってはならない。
 
 #### モジュール名の詳細
 
@@ -185,7 +185,7 @@ export module foo;  // モジュールの宣言(この上の行までがグロ
 * グローバルモジュールフラグメント内の宣言や定義は、後続のモジュールではなくグローバルモジュールに属する。
 * グローバルモジュールフラグメントにはプリプロセッサディレクティブ以外を書くことはできない。
 * グローバルモジュールフラグメント内の宣言は、後続のモジュールに属する宣言から参照されていない場合は、**破棄**(discard)される。
-* グローバルモジュールフラグメントの宣言はプリプロセッサで生成してはならない。
+* グローバルモジュールフラグメントの宣言は1行で書く必要があり、プリプロセッサで生成してはならない。これは、`#if`などによる切り替え、`#include`、`#define`による置換などによるものを含む。グローバルモジュールフラグメントの前にトークンがあってはならない。
 
 ### エクスポート
 
@@ -263,13 +263,13 @@ C++20では、新たにモジュールリンケージが追加された。
 
 ### インポート
 
-モジュールインポート宣言は次のようになる：
+インポート宣言は次のようになる：
 
 ```cpp
-import lib; // libのインポート
+export(opt) import lib; // libのインポート
 ```
 
-モジュールインポート宣言は、モジュールのインターフェースユニットをインポートする。
+インポート宣言は、モジュールのインターフェースユニットをインポートする。
 
 - モジュール本体の実装ユニットはプライマリーモジュールインターフェースユニットを暗黙的にインポートする。ソースファイルと同名のヘッダーファイルをインクルードすることは多いが、これを自動化したものである。
 
@@ -281,15 +281,13 @@ import lib; // libのインポート
 
 モジュールユニットの中では、インポート宣言はモジュールユニットの本体(グローバルモジュールフラグメントではない部分)の先頭で行わなければならない。
 
-#### 再エクスポート
+インポート宣言は1行で書く必要があり、`import`キーワードや`export`キーワードをプリプロセッサで生成してはならない。また、モジュールユニット内では`#include`の結果としてインポート宣言を生成してはならない。
 
-インポート宣言もエクスポートできる。これを再エクスポートという。
+#### 再エクスポート
 
-```cpp
-export import lib; // libの再エクスポート
-```
+インポート宣言に`export`キーワードを付けることで、モジュールを再エクスポートできる。
 
-モジュールをインポートすると、そのモジュールが再エクスポートしているモジュールも同時にインポートする。
+モジュールをインポートすると、そのモジュールが再エクスポートしているモジュールも同時にインポートする。再エクスポートは、モジュールインターフェースでしかできない。
 
 #### パーティションのインポート
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>モジュール -- Update modules.md</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/modules.html"/>
      <id>bccc742918af99585238af4e0acbf5fc2ec376df:lang/cpp20/modules.md</id>
      <updated>2021-05-30T06:58:50+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/modules.md b/lang/cpp20/modules.md
index 89363b35c..d8ef88ab0 100644
--- a/lang/cpp20/modules.md
+++ b/lang/cpp20/modules.md
@@ -377,9 +377,9 @@ import &amp;lt;foo.h&amp;gt;; // foo.hをヘッダーユニットとしてインポート
 * C++ライブラリヘッダー([C++標準ライブラリヘッダー](/reference.md)のうち、[C言語標準ライブラリヘッダーに由来するもの](/reference.md#clib-facilities)(`&amp;lt;cstdio&amp;gt;`など)以外)
 * その他、処理系定義のヘッダー
 
-ヘッダーユニットをインポートしてもその内容が展開されることはないが、`#include`とほぼ同じ効果が得られる(そのようなヘッダーファイルだけがインポータブルヘッダーに指定されるともいえる)。
+ヘッダーユニットをインポートしてもその内容が展開されることはないが、マクロを取り込めるなど、`#include`とほぼ同じ効果が得られる。
 
-プリプロセッサは、インポータブルヘッダーに対する`#include`ディレクティブを`import`宣言に置換できる。ただし、実際に行われるかは処理系定義である。
+プリプロセッサは、非モジュールユニットに現れるインポータブルヘッダーに対する`#include`ディレクティブを`import`宣言に置換してもよいことになっている。モジュールユニットにおいては、明示的に`import`宣言をするほうがよい。
 
 #### モジュールとの違い
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>モジュール -- Update modules.md</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/modules.html"/>
      <id>7a8d058d2c8049bf91c0840ce6fc18148df78e21:lang/cpp20/modules.md</id>
      <updated>2021-05-29T01:59:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/modules.md b/lang/cpp20/modules.md
index bbb8725e1..89363b35c 100644
--- a/lang/cpp20/modules.md
+++ b/lang/cpp20/modules.md
@@ -483,6 +483,7 @@ int main() {
 モジュールは、以上のような問題のないプログラム分割の仕組みとして導入された。
 
 ## 参照
+- [［C++］C++20モジュールの変遷 - Module TSからC++20DISまで - 地面を見下ろす少年の足蹴にされる私](https://onihusube.hatenablog.com/entry/2021/05/28/214612)
 - [P1103R3 Merging Modules](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1103r3.pdf)
 - [P1502R1
 Standard library header units for C++20](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1502r1.html)  
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>動的メモリ確保の省略の許可 -- サンプルコード修正</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/clarifying_memory_allocation.html"/>
      <id>4d9cf95fbd80dd2064b3b3681edae0cf89fbb4c1:lang/cpp14/clarifying_memory_allocation.md</id>
      <updated>2021-05-28T16:24:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/clarifying_memory_allocation.md b/lang/cpp14/clarifying_memory_allocation.md
index 5310dd463..80c321ce0 100644
--- a/lang/cpp14/clarifying_memory_allocation.md
+++ b/lang/cpp14/clarifying_memory_allocation.md
@@ -21,7 +21,7 @@ void lump() {
   // このようにまとめることが許可される
   int* p = new int[3]{1, 2, 3};
 
-  delete p;
+  delete[] p;
 }
 
 void emit() {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>動的メモリ確保の省略の許可 -- サンプルコード修正</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/clarifying_memory_allocation.html"/>
      <id>0e5e187751b0a844d72137fb2c78b0cfda508f0d:lang/cpp14/clarifying_memory_allocation.md</id>
      <updated>2021-05-28T14:36:07+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/clarifying_memory_allocation.md b/lang/cpp14/clarifying_memory_allocation.md
index e0ccec855..5310dd463 100644
--- a/lang/cpp14/clarifying_memory_allocation.md
+++ b/lang/cpp14/clarifying_memory_allocation.md
@@ -119,10 +119,10 @@ void ng5() {
 
 void ng6 () {
   int* e1 = new int{1};
-  int* e2 = new int{2};
-
-  // NG、e1 -&amp;gt; e2の順で解放されている
   delete e1;
+  
+  // NG、e2の前にe1が解放されている
+  int* e2 = new int{2};
   delete e2;
 }
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
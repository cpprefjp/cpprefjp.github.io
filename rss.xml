<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2020-09-03T14:34:53.814811</updated>
  <id>c79ed194-7a00-4d22-8568-92ecae8414b6</id>

  
    <entry>
      <title>属性構文 -- cpp11/attributes: C++17/20属性を関連項目に追記</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/attributes.html"/>
      <id>1ca61cd699478435d1e24bcbcbdf838b59cd0bea:lang/cpp11/attributes.md</id>
      <updated>2020-09-03T16:38:31+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/attributes.md b/lang/cpp11/attributes.md
index a268b81cb..6b63ef6cd 100644
--- a/lang/cpp11/attributes.md
+++ b/lang/cpp11/attributes.md
@@ -154,6 +154,11 @@ C++11で採用されたもの以外で検討された以下の機能は、属性
 
 ## 関連項目
 - [C++14 `[[deprecated]]`属性](/lang/cpp14/deprecated_attr.md)
+- [C++17 `[[maybe_unused]]`属性](/lang/cpp17/maybe_unused.md)
+- [C++17 `[[nodiscard]]`属性](/lang/cpp17/nodiscard.md)
+- [C++17 `[[fallthrough]]`属性](/lang/cpp17/fallthrough.md)
+- [C++20 `[[no_unique_address]]`属性](/lang/cpp20/language_support_for_empty_objects.md)
+- [C++20 `[[likely]]`, `[[unlikely]]`属性](/lang/cpp20/likely_and_unlikely_attributes.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>モジュール -- 箇条書きの前の空行を追加</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/modules.html"/>
      <id>e25da49c602ab94ccf89bf59e76b8d483ebd559b:lang/cpp20/modules.md</id>
      <updated>2020-09-03T08:13:53+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/modules.md b/lang/cpp20/modules.md
index 64240250e..81199e743 100644
--- a/lang/cpp20/modules.md
+++ b/lang/cpp20/modules.md
@@ -60,6 +60,7 @@ export module bar [[deprecated]]; // 属性
 #### モジュール名の詳細
 
 モジュール名は、識別子または識別子をドットで繋いだもの(例えば、`foo`や`std.core`)である。
+
 - `std`と`std`から始まるあらゆるモジュール名及び予約語を含むモジュール名は、今後の規格や処理系のために予約されているので、ユーザー定義のモジュール名として使うことはできない。
 - モジュールの名前は、モジュールに属する型、関数などの名前とは無関係である。
 - 処理系の中には、モジュールユニットのファイル名とモジュール名が揃っていることを期待するものがある(そうでない場合は追加のコマンドラインオプションが必要になる)。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>モジュール -- モジュール名の見出しを作成し内容を追加</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/modules.html"/>
      <id>871b046f0d1126d7a7fdf1975e6e8598734cd08a:lang/cpp20/modules.md</id>
      <updated>2020-09-03T06:47:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/modules.md b/lang/cpp20/modules.md
index 1523aa25e..64240250e 100644
--- a/lang/cpp20/modules.md
+++ b/lang/cpp20/modules.md
@@ -49,23 +49,32 @@ export(opt) module モジュール名 属性(opt);
     - `export`がある場合をモジュールインターフェースユニット、ない場合をモジュール実装ユニットと呼ぶ。
     - あるモジュールについて、モジュールインターフェースユニットがただ1つ存在しなければならない。モジュールの実装は好きなだけ存在できる。
     - モジュール実装ユニットはモジュールインターフェースユニットを暗黙的にインポートする。
-- モジュール名は、識別子または識別子をドットで繋いだもの(例えば、`foo`や`std.core`)である。
-    - `std`と`std`から始まるあらゆるモジュール名及び予約語を含むモジュール名は、今後の規格や処理系のために予約されているので、ユーザー定義のモジュール名として使うことはできない。
-    - モジュールの名前は、モジュールに属する型、関数などの名前とは無関係である。
-    - 処理系の中には、モジュールユニットのファイル名とモジュール名が揃っていることを期待するものがある(そうでない場合は追加のコマンドラインオプションが必要になる)。
 
 ```cpp
 export module foo;                // fooのモジュールインターフェースユニット
 module foo;                       // fooのモジュール実装ユニット
 module foo.bar;                   // foo.barのモジュール実装ユニット
 export module bar [[deprecated]]; // 属性
+```
+
+#### モジュール名の詳細
+
+モジュール名は、識別子または識別子をドットで繋いだもの(例えば、`foo`や`std.core`)である。
+- `std`と`std`から始まるあらゆるモジュール名及び予約語を含むモジュール名は、今後の規格や処理系のために予約されているので、ユーザー定義のモジュール名として使うことはできない。
+- モジュールの名前は、モジュールに属する型、関数などの名前とは無関係である。
+- 処理系の中には、モジュールユニットのファイル名とモジュール名が揃っていることを期待するものがある(そうでない場合は追加のコマンドラインオプションが必要になる)。
 
+モジュール名にはドットを使いたいが、一方で識別子にはドットが使えない。このような矛盾があるため、モジュール名にドットを使うとトークンが分割される。
+そのため、識別子の規則は分割されたそれぞれのトークンに適用される。
+
+```cpp
 module foo . bar;              // OK. &amp;#39;foo.bar&amp;#39;と等しい
 module foo . /*comment*/ bar;  // OK. &amp;#39;foo.bar&amp;#39;と等しい
 module foo . . bar;            // NG. ドットの間に識別子がない
 module _Foo.bar                // NG. 識別子&amp;#39;_Foo&amp;#39;は予約されている
 module foo__bar                // NG. 識別子&amp;#39;foo__bar&amp;#39;は予約されている
 module foo.__bar.baz           // NG. 識別子&amp;#39;__bar&amp;#39;は予約されている
+module foo.version.0           // NG. 識別子の1文字目は数字にできない
 ```
 
 #### プライベートモジュールフラグメント
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>丸カッコの値リストからの集成体初期化を許可 -- Fix typo</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/allow_initializing_aggregates_from_a_parenthesized_list_of_values.html"/>
      <id>575f23515bd7eb3e021942cbb3d49c465650c9cf:lang/cpp20/allow_initializing_aggregates_from_a_parenthesized_list_of_values.md</id>
      <updated>2020-09-01T23:43:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/allow_initializing_aggregates_from_a_parenthesized_list_of_values.md b/lang/cpp20/allow_initializing_aggregates_from_a_parenthesized_list_of_values.md
index eaac54322..e02fd183d 100644
--- a/lang/cpp20/allow_initializing_aggregates_from_a_parenthesized_list_of_values.md
+++ b/lang/cpp20/allow_initializing_aggregates_from_a_parenthesized_list_of_values.md
@@ -31,7 +31,7 @@ A aa[]((1, 2), (3, 4), (5, 6));
 * 波カッコによる初期化では縮小変換ができないが、丸カッコによる初期化ではできる。
 * 参照型のメンバへ一時オブジェクトをバインドするとき、波カッコによる初期化では寿命が延長されるが、丸カッコによる初期化では延長されない。
 
-ただし、各要素の評価準は左から右に評価される。この点は波カッコと同じになっている。
+ただし、各要素は左から右に評価される。この点は波カッコと同じになっている。
 
 ```cpp
 // P0960R3より引用
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>契約に基づくプログラミング -- Update contract-based_programming.md</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/contract-based_programming.html"/>
      <id>ddbc8fae8edeabbd6d35c4be03d7cb6507d8ae80:lang/cpp23/contract-based_programming.md</id>
      <updated>2020-08-31T10:03:30+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/contract-based_programming.md b/lang/cpp23/contract-based_programming.md
index a976fd458..e9b84b75b 100644
--- a/lang/cpp23/contract-based_programming.md
+++ b/lang/cpp23/contract-based_programming.md
@@ -126,7 +126,7 @@ C++20では、プログラムのコンパイルは次の3つのうちどれか
 * `audit`: 契約レベルが`default`または`audit`の契約がチェックされる。
 
 ビルドレベルを指定する方法は処理系定義である。ただし、ソースコード上で指定する方法は提供されない。
-
+`constexpr`などの定数表現評価では、チェックされた契約のみが評価される。
 チェックされない契約が評価されるかは未規定である。`false`に評価される場合の動作は未定義である。
 
 ### 違反ハンドラーと違反継続モード
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>MITSUNARI Shigeo</name>
        <email>herumi@nifty.com</email>
      </author>
    </entry>
  
</feed>
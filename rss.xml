<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2021-01-27T00:00:09.574854</updated>
  <id>e46784f2-0e50-4dbd-80a4-fad4e2dbfbf8</id>

  
    <entry>
      <title>basic_stacktrace -- basic_stacktrace: コンストラクタと代入演算子を追加して完了</title>
      <link href="https://cpprefjp.github.io/reference/stacktrace/basic_stacktrace.html"/>
      <id>751f5e90bf9c712252720039c291c15093316db9:reference/stacktrace/basic_stacktrace.md</id>
      <updated>2021-01-27T08:55:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stacktrace/basic_stacktrace.md b/reference/stacktrace/basic_stacktrace.md
index 83c9768f5..962c9d25a 100644
--- a/reference/stacktrace/basic_stacktrace.md
+++ b/reference/stacktrace/basic_stacktrace.md
@@ -37,9 +37,9 @@ namespace std {
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`(constructor)`](basic_stacktrace/op_constructor.md.nolink) | コンストラクタ | C++23 |
-| [`(destructor)`](basic_stacktrace/op_destructor.md.nolink)   | デストラクタ | C++23 |
-| [`operator=`](basic_stacktrace/op_assign.md.nolink) | 代入演算子 | C++23 |
+| [`(constructor)`](basic_stacktrace/op_constructor.md) | コンストラクタ | C++23 |
+| `~basic_stacktrace();` | デストラクタ | C++23 |
+| [`operator=`](basic_stacktrace/op_assign.md) | 代入演算子 | C++23 |
 
 
 ### アロケータ
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- basic_stacktrace: コンストラクタと代入演算子を追加して完了</title>
      <link href="https://cpprefjp.github.io/reference/stacktrace/basic_stacktrace/op_assign.html"/>
      <id>751f5e90bf9c712252720039c291c15093316db9:reference/stacktrace/basic_stacktrace/op_assign.md</id>
      <updated>2021-01-27T08:55:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stacktrace/basic_stacktrace/op_assign.md b/reference/stacktrace/basic_stacktrace/op_assign.md
new file mode 100644
index 000000000..f88277d1d
--- /dev/null
+++ b/reference/stacktrace/basic_stacktrace/op_assign.md
@@ -0,0 +1,69 @@
+# operator=
+* stacktrace[meta header]
+* std[meta namespace]
+* basic_stacktrace[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+basic_stacktrace&amp;amp; operator=(const basic_stacktrace&amp;amp; other); // (1) C++23
+
+basic_stacktrace&amp;amp; operator=(basic_stacktrace&amp;amp;&amp;amp; other)
+  noexcept(
+    allocator_traits&amp;lt;Allocator&amp;gt;::propagate_on_container_move_assignment::value ||
+    allocator_traits&amp;lt;Allocator&amp;gt;::is_always_equal::value
+  );                                                        // (2) C++23
+```
+
+## 概要
+- (1) コピー代入
+- (2) ムーブ代入
+
+
+## 例外
+- (1), (2) : 実装は、メモリ確保に失敗した場合に[`empty()`](empty.md)を`true`にすることで例外仕様を強化できる
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;stacktrace&amp;gt;
+
+void g() {
+  std::stacktrace st = std::stacktrace::current();
+
+  // (1) コピー代入
+  std::stacktrace st2;
+  st2 = st;
+
+  // (2) ムーブ代入
+  std::stacktrace st3;
+  st3 = std::move(st2);
+
+  std::cout &amp;lt;&amp;lt; st3[0] &amp;lt;&amp;lt; std::endl;
+}
+
+void f() {
+  g();
+}
+
+int main() {
+  f();
+}
+```
+* current()[link current.md]
+
+### 出力例
+```
+g() at main.cpp:5
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- basic_stacktrace: コンストラクタと代入演算子を追加して完了</title>
      <link href="https://cpprefjp.github.io/reference/stacktrace/basic_stacktrace/op_constructor.html"/>
      <id>751f5e90bf9c712252720039c291c15093316db9:reference/stacktrace/basic_stacktrace/op_constructor.md</id>
      <updated>2021-01-27T08:55:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stacktrace/basic_stacktrace/op_constructor.md b/reference/stacktrace/basic_stacktrace/op_constructor.md
new file mode 100644
index 000000000..51db44501
--- /dev/null
+++ b/reference/stacktrace/basic_stacktrace/op_constructor.md
@@ -0,0 +1,106 @@
+# コンストラクタ
+* stacktrace[meta header]
+* std[meta namespace]
+* basic_stacktrace[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+basic_stacktrace()
+  noexcept(is_nothrow_default_constructible_v&amp;lt;allocator_type&amp;gt;);  // (1) C++23
+
+explicit basic_stacktrace(const allocator_type&amp;amp; alloc) noexcept; // (2) C++23
+
+basic_stacktrace(const basic_stacktrace&amp;amp; other);                 // (3) C++23
+basic_stacktrace(basic_stacktrace&amp;amp;&amp;amp; other) noexcept;             // (4) C++23
+
+basic_stacktrace(const basic_stacktrace&amp;amp; other,
+                 const allocator_type&amp;amp; alloc);                   // (5) C++23
+basic_stacktrace(basic_stacktrace&amp;amp;&amp;amp; other,
+                 const allocator_type&amp;amp; alloc);                   // (6) C++23
+```
+
+## 概要
+`basic_stacktrace`オブジェクトを構築する。
+
+- (1) : デフォルト構築
+- (2) : アロケータを指定して構築
+- (3) : コピー構築
+- (4) : ムーブ構築
+- (5) : アロケータを指定してコピー構築
+- (6) : アロケータを指定してムーブ構築
+
+
+## 効果
+- (2) : 保持する[`std::vector`](/reference/vector/vector.md)`&amp;lt;`[`std::stacktrace_entry`](/reference/stacktrace/stacktrace_entry.md.nolink)`&amp;gt;`型スタックトレースの履歴のオブジェクトに、コンストラクタ引数として`alloc`を渡す
+
+
+## 事後条件
+- (1), (2) : [`empty()`](empty.md)が`true`になること
+
+
+## 例外
+- (3), (4), (5), (6) : 実装は、メモリ確保に失敗した場合に[`empty()`](empty.md)を`true`にすることで例外仕様を強化できる
+
+
+## 備考
+- 実装は、これらのコンストラクタのほかに、[`current()`](current.md)関数によるスタックトレース履歴を保持するための追加のコンストラクタをもっている可能性がある
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;stacktrace&amp;gt;
+
+void g() {
+  // (1) デフォルト構築
+  std::stacktrace st1{};
+  assert(st1.empty());
+
+  // (2) アロケータを指定して構築
+  std::allocator&amp;lt;std::stacktrace_entry&amp;gt; alloc{};
+  std::stacktrace st2{alloc};
+  assert(st2.empty());
+
+  // (3) コピー構築
+  std::stacktrace st3 = st1;
+  assert(st3 == st1);
+
+  // (4) ムーブ構築
+  std::stacktrace st4 = std::move(st3);
+  assert(st4 == st1);
+
+  // (5) アロケータを指定してコピー構築
+  std::stacktrace st5{st1, alloc};
+  assert(st5 == st1); // アロケータは比較されない
+
+  // (6) アロケータを指定してムーブ構築
+  std::stacktrace st6{std::move(st5), alloc};
+  assert(st6 == st1);
+}
+
+void f() {
+  g();
+}
+
+int main() {
+  f();
+}
+```
+* std::stacktrace_entry[link /reference/stacktrace/stacktrace_entry.md.nolink]
+* empty()[link empty.md]
+* std::move[link /reference/utility/move.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_stacktrace -- basic_stacktrace : 比較関数を追加</title>
      <link href="https://cpprefjp.github.io/reference/stacktrace/basic_stacktrace.html"/>
      <id>ea80d38999603f3b112a04d5a34a08fa2d660b42:reference/stacktrace/basic_stacktrace.md</id>
      <updated>2021-01-27T08:31:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stacktrace/basic_stacktrace.md b/reference/stacktrace/basic_stacktrace.md
index 29f408936..83c9768f5 100644
--- a/reference/stacktrace/basic_stacktrace.md
+++ b/reference/stacktrace/basic_stacktrace.md
@@ -136,9 +136,9 @@ namespace std {
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`operator==`](basic_stacktrace/op_equal.md.nolink) | 等値比較を行う | C++23 |
+| [`operator==`](basic_stacktrace/op_equal.md) | 等値比較を行う | C++23 |
 | `template &amp;lt;class Allocator2&amp;gt;`&amp;lt;br/&amp;gt; `bool operator!=(const basic_stacktrace&amp;amp;, const basic_stacktrace&amp;lt;Allocator2&amp;gt;&amp;amp;) noexcept;` | 非等値比較を行う (`==`により使用可能) | C++23 |
-| [`operator&amp;lt;=&amp;gt;`](basic_stacktrace/op_compare_3way.md.nolink) | 三方比較を行う | C++23 |
+| [`operator&amp;lt;=&amp;gt;`](basic_stacktrace/op_compare_3way.md) | 三方比較を行う | C++23 |
 | `template &amp;lt;class Allocator2&amp;gt;`&amp;lt;br/&amp;gt; `strong_ordering operator&amp;lt;(const basic_stacktrace&amp;amp;, const basic_stacktrace&amp;lt;Allocator2&amp;gt;&amp;amp;) noexcept;` | 左辺が右辺より小さいかを判定する (`&amp;lt;=&amp;gt;`により使用可能) | C++23 |
 | `template &amp;lt;class Allocator2&amp;gt;`&amp;lt;br/&amp;gt; `strong_ordering operator&amp;lt;=(const basic_stacktrace&amp;amp;, const basic_stacktrace&amp;lt;Allocator2&amp;gt;&amp;amp;) noexcept;` | 左辺が右辺以下かを判定する (`&amp;lt;=&amp;gt;`により使用可能) | C++23 |
 | `template &amp;lt;class Allocator2&amp;gt;`&amp;lt;br/&amp;gt; `strong_ordering operator&amp;gt;(const basic_stacktrace&amp;amp;, const basic_stacktrace&amp;lt;Allocator2&amp;gt;&amp;amp;) noexcept;` | 左辺が右辺より大きいかを判定する (`&amp;lt;=&amp;gt;`により使用可能) | C++23 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;=&gt; -- basic_stacktrace : 比較関数を追加</title>
      <link href="https://cpprefjp.github.io/reference/stacktrace/basic_stacktrace/op_compare_3way.html"/>
      <id>ea80d38999603f3b112a04d5a34a08fa2d660b42:reference/stacktrace/basic_stacktrace/op_compare_3way.md</id>
      <updated>2021-01-27T08:31:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stacktrace/basic_stacktrace/op_compare_3way.md b/reference/stacktrace/basic_stacktrace/op_compare_3way.md
new file mode 100644
index 000000000..f99cede2e
--- /dev/null
+++ b/reference/stacktrace/basic_stacktrace/op_compare_3way.md
@@ -0,0 +1,75 @@
+# operator&amp;lt;=&amp;gt;
+* stacktrace[meta header]
+* std[meta namespace]
+* basic_stacktrace[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+template &amp;lt;class Allocator2&amp;gt;
+friend bool operator&amp;lt;=&amp;gt;(const basic_stacktrace&amp;amp; x,
+                        const basic_stacktrace&amp;lt;Allocator2&amp;gt;&amp;amp; y) noexcept;
+```
+
+## 概要
+`basic_stacktrace`同士の等値比較を行う。
+
+
+## 戻り値
+```cpp
+if (x.size() != y.size()) {
+  return x.size() &amp;lt;=&amp;gt; y.size();
+}
+else {
+  return lexicographical_compare_three_way(x.begin(), x.end(), y.begin(), y.end());
+}
+```
+* size()[link size.md]
+* lexicographical_compare_three_way[link /reference/algorithm/lexicographical_compare_three_way.md]
+* begin()[link begin.md]
+* end()[link end.md]
+
+
+## 備考
+- この演算子により、`operator&amp;lt;`、`operator&amp;lt;=`、`operator&amp;gt;`、`operator&amp;gt;=`が使用可能になる
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;stacktrace&amp;gt;
+
+void g() {
+  std::stacktrace a = std::stacktrace::current();
+  std::stacktrace c = a;
+
+  assert((a &amp;lt;=&amp;gt; c) == 0);
+}
+
+void f() {
+  g();
+}
+
+int main() {
+  f();
+}
+```
+* current()[link current.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [Hidden Friends](/article/lib/hidden_friends.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- basic_stacktrace : 比較関数を追加</title>
      <link href="https://cpprefjp.github.io/reference/stacktrace/basic_stacktrace/op_equal.html"/>
      <id>ea80d38999603f3b112a04d5a34a08fa2d660b42:reference/stacktrace/basic_stacktrace/op_equal.md</id>
      <updated>2021-01-27T08:31:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stacktrace/basic_stacktrace/op_equal.md b/reference/stacktrace/basic_stacktrace/op_equal.md
new file mode 100644
index 000000000..e4038633f
--- /dev/null
+++ b/reference/stacktrace/basic_stacktrace/op_equal.md
@@ -0,0 +1,71 @@
+# operator==
+* stacktrace[meta header]
+* std[meta namespace]
+* basic_stacktrace[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+template &amp;lt;class Allocator2&amp;gt;
+friend bool operator==(const basic_stacktrace&amp;amp; x,
+                       const basic_stacktrace&amp;lt;Allocator2&amp;gt;&amp;amp; y) noexcept;
+```
+
+## 概要
+`basic_stacktrace`同士の等値比較を行う。
+
+
+## 戻り値
+```cpp
+return equal(x.begin(), x.end(), y.begin(), y.end());
+```
+* equal[link /reference/algorithm/equal.md]
+* begin()[link begin.md]
+* end()[link end.md]
+
+
+## 備考
+- この演算子により、`operator!=`が使用可能になる
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;stacktrace&amp;gt;
+
+void g() {
+  std::stacktrace a = std::stacktrace::current();
+  std::stacktrace b = std::stacktrace::current();
+  std::stacktrace c = a;
+
+  assert(a == c);
+  assert(a != b);
+}
+
+void f() {
+  g();
+}
+
+int main() {
+  f();
+}
+```
+* current()[link current.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [Hidden Friends](/article/lib/hidden_friends.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap -- basic_stacktraceのswap : コピペミスを修正</title>
      <link href="https://cpprefjp.github.io/reference/stacktrace/basic_stacktrace/swap.html"/>
      <id>6cd7501dc6e893429dfd7bcaa55a9f54efea7850:reference/stacktrace/basic_stacktrace/swap.md</id>
      <updated>2021-01-27T08:24:23+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stacktrace/basic_stacktrace/swap.md b/reference/stacktrace/basic_stacktrace/swap.md
index 1fc1fbeea..46ff167d3 100644
--- a/reference/stacktrace/basic_stacktrace/swap.md
+++ b/reference/stacktrace/basic_stacktrace/swap.md
@@ -23,7 +23,6 @@ void swap(basic_stacktrace&amp;amp; other)
 
 
 ## 例
-### 全体のスタックトレースを取得する
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;stacktrace&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap (非メンバ関数) -- basic_stacktraceのswap : コピペミスを修正</title>
      <link href="https://cpprefjp.github.io/reference/stacktrace/basic_stacktrace/swap_free.html"/>
      <id>6cd7501dc6e893429dfd7bcaa55a9f54efea7850:reference/stacktrace/basic_stacktrace/swap_free.md</id>
      <updated>2021-01-27T08:24:23+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stacktrace/basic_stacktrace/swap_free.md b/reference/stacktrace/basic_stacktrace/swap_free.md
index 7b39d4a13..24797c8de 100644
--- a/reference/stacktrace/basic_stacktrace/swap_free.md
+++ b/reference/stacktrace/basic_stacktrace/swap_free.md
@@ -28,7 +28,6 @@ a.swap(b);
 
 
 ## 例
-### 全体のスタックトレースを取得する
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;stacktrace&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_stacktrace -- basic_stacktrace : swapを追加</title>
      <link href="https://cpprefjp.github.io/reference/stacktrace/basic_stacktrace.html"/>
      <id>2121646061974d94db3e055c9f50bb52290d9440:reference/stacktrace/basic_stacktrace.md</id>
      <updated>2021-01-27T08:15:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stacktrace/basic_stacktrace.md b/reference/stacktrace/basic_stacktrace.md
index 70eaa2fdf..29f408936 100644
--- a/reference/stacktrace/basic_stacktrace.md
+++ b/reference/stacktrace/basic_stacktrace.md
@@ -84,7 +84,7 @@ namespace std {
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`swap`](basic_stacktrace/swap.md.nolink) | 他の`basic_stacktrace`オブジェクトとデータを入れ替える | C++23 |
+| [`swap`](basic_stacktrace/swap.md) | 他の`basic_stacktrace`オブジェクトとデータを入れ替える | C++23 |
 
 
 ### 静的メンバ関数
@@ -115,7 +115,7 @@ namespace std {
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`swap`](basic_stacktrace/swap_free.md.nolink) | 2つの`basic_stacktrace`オブジェクトを入れ替える | C++23 |
+| [`swap`](basic_stacktrace/swap_free.md) | 2つの`basic_stacktrace`オブジェクトを入れ替える | C++23 |
 
 
 ### 入出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap -- basic_stacktrace : swapを追加</title>
      <link href="https://cpprefjp.github.io/reference/stacktrace/basic_stacktrace/swap.html"/>
      <id>2121646061974d94db3e055c9f50bb52290d9440:reference/stacktrace/basic_stacktrace/swap.md</id>
      <updated>2021-01-27T08:15:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stacktrace/basic_stacktrace/swap.md b/reference/stacktrace/basic_stacktrace/swap.md
new file mode 100644
index 000000000..1fc1fbeea
--- /dev/null
+++ b/reference/stacktrace/basic_stacktrace/swap.md
@@ -0,0 +1,65 @@
+# swap
+* stacktrace[meta header]
+* std[meta namespace]
+* basic_stacktrace[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+void swap(basic_stacktrace&amp;amp; other)
+        noexcept(
+          allocator_traits&amp;lt;Allocator&amp;gt;::propagate_on_container_swap::value ||
+          allocator_traits&amp;lt;Allocator&amp;gt;::is_always_equal::value
+        );                           // (1) C++23
+```
+* allocator_traits[link /reference/memory/allocator_traits.md]
+
+## 概要
+他の`basic_stacktrace`オブジェクトとデータを入れ替える。
+
+
+## 効果
+`*this`と`other`の内容を交換する。
+
+
+## 例
+### 全体のスタックトレースを取得する
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;stacktrace&amp;gt;
+
+void g() {
+  std::stacktrace a = std::stacktrace::current();
+  std::stacktrace b = std::stacktrace::current();
+  a.swap(b);
+
+  std::cout &amp;lt;&amp;lt; a &amp;lt;&amp;lt; std::endl; // bで取得したスタックトレースが出力される
+}
+
+void f() {
+  g();
+}
+
+int main() {
+  f();
+}
+```
+* a.swap[color ff0000]
+* current()[link current.md]
+
+### 出力例
+```
+ 0# g() at main.cpp:6
+ 1# f() at main.cpp:13
+ 2# main at main.cpp:17
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap (非メンバ関数) -- basic_stacktrace : swapを追加</title>
      <link href="https://cpprefjp.github.io/reference/stacktrace/basic_stacktrace/swap_free.html"/>
      <id>2121646061974d94db3e055c9f50bb52290d9440:reference/stacktrace/basic_stacktrace/swap_free.md</id>
      <updated>2021-01-27T08:15:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stacktrace/basic_stacktrace/swap_free.md b/reference/stacktrace/basic_stacktrace/swap_free.md
new file mode 100644
index 000000000..7b39d4a13
--- /dev/null
+++ b/reference/stacktrace/basic_stacktrace/swap_free.md
@@ -0,0 +1,70 @@
+# swap (非メンバ関数)
+* stacktrace[meta header]
+* std[meta namespace]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;class Allocator&amp;gt;
+  void swap(basic_stacktrace&amp;lt;Allocator&amp;gt;&amp;amp; a,
+            basic_stacktrace&amp;lt;Allocator&amp;gt;&amp;amp; b)
+        noexcept(noexcept(a.swap(b)));      // (1) C++23
+}
+```
+* a.swap[link swap.md]
+
+## 概要
+2つの`basic_stacktrace`オブジェクトを入れ替える。
+
+
+## 効果
+以下と等価：
+
+```cpp
+a.swap(b);
+```
+* a.swap[link swap.md]
+
+
+## 例
+### 全体のスタックトレースを取得する
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;stacktrace&amp;gt;
+
+void g() {
+  std::stacktrace a = std::stacktrace::current();
+  std::stacktrace b = std::stacktrace::current();
+  std::swap(a, b);
+
+  std::cout &amp;lt;&amp;lt; a &amp;lt;&amp;lt; std::endl; // bで取得したスタックトレースが出力される
+}
+
+void f() {
+  g();
+}
+
+int main() {
+  f();
+}
+```
+* std::swap[color ff0000]
+* current()[link current.md]
+
+### 出力例
+```
+ 0# g() at main.cpp:6
+ 1# f() at main.cpp:13
+ 2# main at main.cpp:17
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>current -- basic_stacktrace : 見出しミスを修正</title>
      <link href="https://cpprefjp.github.io/reference/stacktrace/basic_stacktrace/current.html"/>
      <id>a0e9b43161f92d438f86bfef2bbb0ea7e40aff4f:reference/stacktrace/basic_stacktrace/current.md</id>
      <updated>2021-01-27T08:10:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stacktrace/basic_stacktrace/current.md b/reference/stacktrace/basic_stacktrace/current.md
index ad992dc60..080415f51 100644
--- a/reference/stacktrace/basic_stacktrace/current.md
+++ b/reference/stacktrace/basic_stacktrace/current.md
@@ -67,7 +67,7 @@ int main() {
 ```
 * current()[color ff0000]
 
-### 出力例
+#### 出力例
 ```
  0# g() at main.cpp:5
  1# f() at main.cpp:9
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-06-13T03:15:45.029545</updated>
  <id>9ddcf11b-f942-46fd-9941-537baa6e1670</id>

  
    <entry>
      <title>contracts -- removed nolink</title>
      <link href="https://cpprefjp.github.io/reference/contracts.html"/>
      <id>3c65924b17eb8f2e7f19b5e937dcbcb82390179b:reference/contracts.md</id>
      <updated>2025-06-13T12:11:41+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;contracts&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;contracts&lt;/span&gt;&lt;span class=&#34;cpp cpp26&#34; title=&#34;C++26で追加&#34;&gt;(C++26)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;contracts&amp;gt;&lt;/code&gt;ヘッダでは、C++における契約プログラミングのサポートを提供する。&lt;/p&gt;
&lt;p&gt;契約プログラミングは、関数やクラスの前提条件、事後条件、およびアサーションを明示的に指定するプログラミング手法である。これらの条件が満たされない場合、プログラムは契約違反を報告する。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;contracts/assertion_kind.html&#34;&gt;assertion_kind&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アサーションの種類 (enum)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;contracts/evaluation_semantic.html&#34;&gt;evaluation_semantic&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アサーションの評価の種類(enum)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;contracts/detection_mode.html&#34;&gt;detection_mode&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;契約違反の検出モード(enum)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;contracts/contract_violation.html&#34;&gt;contract_violation&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;契約違反に関する情報 (class)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;contracts/invoke_default_contract_violation_handler.html&#34;&gt;invoke_default_contract_violation_handler&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;デフォルトcontract_violationハンドラー&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++26&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../lang/future/contract-based_programming.html&#34;&gt;契約に基づくプログラミング&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../lang/cpp26/contracts.html&#34;&gt;契約プログラミング&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0542r5.html&#34; target=&#34;_blank&#34;&gt;P0542R5 Support for contract based programming in C++&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>invoke_default_contract_violation_handler -- new page `invoke_default_contract_violation_handler.md` (#1419)</title>
      <link href="https://cpprefjp.github.io/reference/contracts/invoke_default_contract_violation_handler.html"/>
      <id>7491d107336f24890601534ce11122b7beae2f44:reference/contracts/invoke_default_contract_violation_handler.md</id>
      <updated>2025-06-13T12:06:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/contracts/invoke_default_contract_violation_handler.md b/reference/contracts/invoke_default_contract_violation_handler.md
new file mode 100644
index 000000000..844f31814
--- /dev/null
+++ b/reference/contracts/invoke_default_contract_violation_handler.md
@@ -0,0 +1,37 @@
+# invoke_default_contract_violation_handler
+* contracts[meta header]
+* std::contracts[meta namespace]
+* function[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::contracts {
+  void invoke_default_contract_violation_handler(const contract_violation&amp;amp; violation);
+}
+```
+
+## 概要
+契約違反が発生した際に呼び出されるデフォルトのハンドラー関数。
+
+この関数は、契約違反が発生した際に、[`contract_violation`](contract_violation.md)オブジェクトを受け取り、デフォルトの処理を実行する。
+
+## 効果
+契約違反の情報を標準エラー出力に出力し、[`std::terminate()`](/reference/exception/terminate.md)を呼び出す。
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ?
+- [GCC](/implementation.md#gcc): ?
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): ?
+
+## 関連項目
+- [契約に基づくプログラミング](/lang/future/contract-based_programming.md)
+- [契約プログラミング](/lang/cpp26/contracts.md)
+- [`contract_violation`](contract_violation.md)
+
+## 参照
+- [P2900R14 Contracts for C++](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p2900r14.pdf) 
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- [i|o]stringstream : C++26 string_viewの仕様に対応 #1186</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_istringstream/op_constructor.html"/>
      <id>64398ea9addcfc8a692a6c16b92fb57a6588e842:reference/sstream/basic_istringstream/op_constructor.md</id>
      <updated>2025-06-12T17:40:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_istringstream/op_constructor.md b/reference/sstream/basic_istringstream/op_constructor.md
index 906de25e7..f3910c37b 100644
--- a/reference/sstream/basic_istringstream/op_constructor.md
+++ b/reference/sstream/basic_istringstream/op_constructor.md
@@ -52,6 +52,22 @@ basic_istringstream(
   const Allocator&amp;amp; a);                               // (9) C++20
 
 basic_istringstream(basic_istringstream&amp;amp;&amp;amp; rhs);      // (10) C++11
+
+template&amp;lt;class T&amp;gt;
+explicit basic_istringstream(
+  const T&amp;amp; t,
+  ios_base::openmode which = ios_base::in);          // (11) C++26
+
+template&amp;lt;class T&amp;gt;
+basic_istringstream(
+  const T&amp;amp; t,
+  const Allocator&amp;amp; a);                               // (12) C++26
+
+template&amp;lt;class T&amp;gt;
+basic_istringstream(
+  const T&amp;amp; t,
+  ios_base::openmode which,
+  const Allocator&amp;amp; a);                               // (13) C++26
 ```
 * ios_base[link /reference/ios/ios_base.md]
 * basic_string[link /reference/string/basic_string.md]
@@ -59,17 +75,39 @@ basic_istringstream(basic_istringstream&amp;amp;&amp;amp; rhs);      // (10) C++11
 ## 概要
 `basic_istringstream`オブジェクトを構築する。
 
+- (1) : デフォルトコンストラクタ
+- (2) : 指定されたモードで構築する
+- (3) : 入力文字列として[`std::basic_string`](/reference/string/basic_string.md)オブジェクトのコピーを指定して構築する
+- (4) : 指定されたモードとアロケータで構築する
+- (5) : 入力文字列として[`std::basic_string`](/reference/string/basic_string.md)オブジェクトのコピーと、アロケータを指定して構築する
+- (6) : 入力文字列として[`std::basic_string`](/reference/string/basic_string.md)オブジェクトのコピー、モード、アロケータを指定して構築する
+- (7) : 入力文字列として`Allocator`に変換可能なアロケータをもつ[`std::basic_string`](/reference/string/basic_string.md)オブジェクトのコピーと、モードを指定して構築する
+- (8) : 入力文字列として`Allocator`に変換可能なアロケータをもつ[`std::basic_string`](/reference/string/basic_string.md)オブジェクトのコピーと、アロケータを指定して構築する
+- (9) : 入力文字列として`Allocator`に変換可能なアロケータをもつ[`std::basic_string`](/reference/string/basic_string.md)オブジェクトのコピー、モード、アロケータを指定して構築する
+- (10) : ムーブコンストラクタ
+- (11) : 入力文字列として[`std::basic_string_view`](/reference/string_view/basic_string_view.md)に変換可能な文字列と、モードを指定して構築する
+- (12) : 入力文字列として[`std::basic_string_view`](/reference/string_view/basic_string_view.md)に変換可能な文字列と、アロケータを指定して構築する
+- (13) : 入力文字列として[`std::basic_string_view`](/reference/string_view/basic_string_view.md)に変換可能な文字列、モード、アロケータを指定して構築する
+
+
+## テンプレートパラメータ制約
+- (11), (12), (13) : `is_convertible_v&amp;lt;const T&amp;amp;, basic_string_view&amp;lt;CharT, Traits&amp;gt;&amp;gt;`が`true`であること
+
 ## 効果
 - (1) : 内部の`basic_stringbuf`オブジェクトを`basic_stringbuf&amp;lt;CharT, Traits, Allocator&amp;gt;(ios_base::in)`で構築する
 - (2) : 内部の`basic_stringbuf`オブジェクトを`basic_stringbuf&amp;lt;CharT, Traits, Allocator&amp;gt;(which | ios_base::in)`で構築する
 - (3) : 内部の`basic_stringbuf`オブジェクトを`basic_stringbuf&amp;lt;CharT, Traits, Allocator&amp;gt;(s, which | ios_base::in)`で構築する
 - (4) : 内部の`basic_stringbuf`オブジェクトを`basic_stringbuf&amp;lt;CharT, Traits, Allocator&amp;gt;(std::move(s), which | ios_base::in)`で構築する
 - (5) : 内部の`basic_stringbuf`オブジェクトを`basic_stringbuf&amp;lt;CharT, Traits, Allocator&amp;gt;(which | ios_base::in, a)`で構築する
-- (6), (7), (8), (9), (10) : 各引数が対応する`basic_stringbuf`のコンストラクタに渡される
-- (11) : `rhs`から`basic_istringstream`オブジェクトをムーブ構築する
+- (6), (7), (8), (9) : 各引数が対応する`basic_stringbuf`のコンストラクタに渡される
+- (10) : `rhs`から`basic_istringstream`オブジェクトをムーブ構築する
+- (11) : `basic_string_view&amp;lt;CharT, Traits&amp;gt;(t)`で文字列を初期化し、モードは`which | ios_base::in`に設定する
+- (12) : `basic_string_view&amp;lt;CharT, Traits&amp;gt;(t)`で文字列を初期化し、モードは`ios_base::in`、アロケータは`a`に設定する
+- (13) : `basic_string_view&amp;lt;CharT, Traits&amp;gt;(t)`で文字列を初期化し、モードは`which | ios_base::in`、アロケータは`a`に設定する
 
 
 ## 例
+### 基本的な使い方
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;sstream&amp;gt;
@@ -82,16 +120,48 @@ int main()
   // (3) 文字列を指定して構築
   std::istringstream ss2(&amp;#34;initial text&amp;#34;);
   
-  int value;
+  std::string value;
   ss2 &amp;gt;&amp;gt; value;
   std::cout &amp;lt;&amp;lt; value &amp;lt;&amp;lt; std::endl;
 }
 ```
 
-### 出力
+#### 出力
 ```
 initial
 ```
 
+### string_viewからの構築 (C++26)
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;sstream&amp;gt;
+#include &amp;lt;string_view&amp;gt;
+
+int main()
+{
+  // 文字列リテラルから構築
+  std::istringstream ss1{&amp;#34;Hello World&amp;#34;};
+  std::string s1;
+  ss1 &amp;gt;&amp;gt; s1;
+  std::cout &amp;lt;&amp;lt; s1 &amp;lt;&amp;lt; std::endl;
+
+  // string_viewから構築
+  std::string_view sv = &amp;#34;Hello World&amp;#34;;
+  std::istringstream ss2{sv};
+  std::string s2;
+  ss2 &amp;gt;&amp;gt; s2;
+  std::cout &amp;lt;&amp;lt; s2 &amp;lt;&amp;lt; std::endl;
+}
+```
+
+#### 出力
+```
+Hello
+Hello
+```
+
+
 ## 参照
-- [P0408R7 Efficient Access to `basic_stringbuf`&amp;#39;s Buffer](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0408r7.pdf)
\ No newline at end of file
+- [P0408R7 Efficient Access to `basic_stringbuf`&amp;#39;s Buffer](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0408r7.pdf)
+- [P2495R3 Interfacing stringstreams with `string_view`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2495r3.pdf)
+    - C++26で[`std::string_view`](/reference/string_view/basic_string_view.md)に対応した
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>str -- [i|o]stringstream : C++26 string_viewの仕様に対応 #1186</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_istringstream/str.html"/>
      <id>64398ea9addcfc8a692a6c16b92fb57a6588e842:reference/sstream/basic_istringstream/str.md</id>
      <updated>2025-06-12T17:40:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_istringstream/str.md b/reference/sstream/basic_istringstream/str.md
index 090f76f19..8563b18e6 100644
--- a/reference/sstream/basic_istringstream/str.md
+++ b/reference/sstream/basic_istringstream/str.md
@@ -18,12 +18,27 @@ void str(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; s);  // (4) C++03
 template &amp;lt;class SAlloc&amp;gt;
 void str(const basic_string&amp;lt;CharT, Traits, SAlloc&amp;gt;&amp;amp; s);     // (5) C++20
 void str(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp;&amp;amp; s); // (6) C++20
+
+template&amp;lt;class T&amp;gt;
+void str(const T&amp;amp; t);                                   // (7) C++26
 ```
 * basic_string[link /reference/string/basic_string.md]
 
 ## 概要
 文字列オブジェクトを取得または設定する。
 
+- (1) : 文字列オブジェクトを取得する
+- (2) : 文字列オブジェクトを取得して、`SAlloc`型のアロケータ`sa`によって確保する
+- (3) : 保持する文字列オブジェクトをムーブして取得する
+- (4) : 文字列オブジェクト`s`を設定する
+- (5) : `Allocator`に変換可能な`SAlloc`型のアロケータによって確保されているデータをコピーして、文字列オブジェクト`s`を設定する
+- (6) : 与えられた文字列オブジェクト`s`をムーブして設定する
+- (7) : [`std::basic_string_view`](/reference/string_view/basic_string_view.md)に変換可能な文字列を設定する
+
+
+## テンプレートパラメータ制約
+- (7) : `is_convertible_v&amp;lt;const T&amp;amp;, basic_string_view&amp;lt;CharT, Traits&amp;gt;&amp;gt;`が`true`であること
+
 ## 効果
 - (1) : `return rdbuf()-&amp;gt;str()` と等価
 - (2) : `return rdbuf()-&amp;gt;str(sa)` と等価
@@ -31,8 +46,10 @@ void str(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp;&amp;amp; s); // (6) C++20
 - (4) : `rdbuf()-&amp;gt;str(s)` と等価
 - (5) : `rdbuf()-&amp;gt;str(s)` と等価
 - (6) : `rdbuf()-&amp;gt;str(std::move(s))` と等価
+- (7) : `rdbuf()-&amp;gt;str(t)` と等価
 
 ## 例
+### 基本的な使い方
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;sstream&amp;gt;
@@ -66,7 +83,7 @@ int main()
 }
 ```
 
-### 出力
+#### 出力
 ```
 Content: Hello World 123 45.67
 Read word: Hello
@@ -75,9 +92,64 @@ New read: New content 999
 Empty? yes
 ```
 
+#### ムーブを使用する例 (C++20)
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;sstream&amp;gt;
+
+int main() {
+  std::istringstream ss;
+
+  // ムーブして文字列を設定
+  std::string s = &amp;#34;Move string&amp;#34;;
+  ss.str(std::move(s));
+  std::cout &amp;lt;&amp;lt; ss.str() &amp;lt;&amp;lt; std::endl;
+
+  // ムーブで文字列を取得
+  std::string r = std::move(ss).str();
+  std::cout &amp;lt;&amp;lt; r &amp;lt;&amp;lt; std::endl;
+}
+```
+
+#### 出力
+```
+Move string
+Move string
+```
+
+
+### string_viewからの設定 (C++26)
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;sstream&amp;gt;
+#include &amp;lt;string_view&amp;gt;
+
+int main() {
+  std::istringstream ss;
+
+  // 文字列リテラルを設定
+  ss.str(&amp;#34;set from string literal&amp;#34;);
+  std::cout &amp;lt;&amp;lt; ss.str() &amp;lt;&amp;lt; std::endl;
+
+  // string_viewを設定
+  std::string_view sv = &amp;#34;set from string_view&amp;#34;;
+  ss.str(sv);
+  std::cout &amp;lt;&amp;lt; ss.str() &amp;lt;&amp;lt; std::endl;
+}
+```
+
+#### 出力
+```
+set from string literal
+set from string_view
+```
+
+
 ## 関連項目
 - [`basic_stringbuf::str`](../basic_stringbuf/str.md)
 
 
 ## 参照
 - [P0408R7 Efficient Access to `basic_stringbuf`&amp;#39;s Buffer](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0408r7.pdf)
+- [P2495R3 Interfacing stringstreams with `string_view`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2495r3.pdf)
+    - C++26で[`std::string_view`](/reference/string_view/basic_string_view.md)に対応した
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- [i|o]stringstream : C++26 string_viewの仕様に対応 #1186</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_ostringstream/op_constructor.html"/>
      <id>64398ea9addcfc8a692a6c16b92fb57a6588e842:reference/sstream/basic_ostringstream/op_constructor.md</id>
      <updated>2025-06-12T17:40:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_ostringstream/op_constructor.md b/reference/sstream/basic_ostringstream/op_constructor.md
index 075af3c23..63472388b 100644
--- a/reference/sstream/basic_ostringstream/op_constructor.md
+++ b/reference/sstream/basic_ostringstream/op_constructor.md
@@ -52,6 +52,22 @@ basic_ostringstream(
   const Allocator&amp;amp; a);                               // (9) C++20
 
 basic_ostringstream(basic_ostringstream&amp;amp;&amp;amp; rhs);      // (10) C++11
+
+template&amp;lt;class T&amp;gt;
+explicit basic_ostringstream(
+  const T&amp;amp; t,
+  ios_base::openmode which = ios_base::out);         // (11) C++26
+
+template&amp;lt;class T&amp;gt;
+basic_ostringstream(
+  const T&amp;amp; t,
+  const Allocator&amp;amp; a);                               // (12) C++26
+
+template&amp;lt;class T&amp;gt;
+basic_ostringstream(
+  const T&amp;amp; t,
+  ios_base::openmode which,
+  const Allocator&amp;amp; a);                               // (13) C++26
 ```
 * ios_base[link /reference/ios/ios_base.md]
 * basic_string[link /reference/string/basic_string.md]
@@ -59,17 +75,41 @@ basic_ostringstream(basic_ostringstream&amp;amp;&amp;amp; rhs);      // (10) C++11
 ## 概要
 `basic_ostringstream`オブジェクトを構築する。
 
+ここで、初期値として設定する文字列は、既存のファイルを上書きモードで開くことに似ており、ストリームの初期位置が先頭のまま、ストリーム内容の文字列を設定するものである。モードとして[`std::ios_base::ate`](/reference/ios/ios_base/type-openmode.md)を指定しすると、ストリームの初期位置が末尾に設定される。
+
+- (1) : デフォルトコンストラクタ
+- (2) : 指定されたモードで構築する
+- (3) : 初期文字列として[`std::basic_string`](/reference/string/basic_string.md)オブジェクトのコピーを指定して構築する
+- (4) : 指定されたモードとアロケータで構築する
+- (5) : 初期文字列として[`std::basic_string`](/reference/string/basic_string.md)オブジェクトのコピーと、アロケータを指定して構築する
+- (6) : 初期文字列として[`std::basic_string`](/reference/string/basic_string.md)オブジェクトのコピー、モード、アロケータを指定して構築する
+- (7) : 初期文字列として`Allocator`に変換可能なアロケータをもつ[`std::basic_string`](/reference/string/basic_string.md)オブジェクトのコピーと、モードを指定して構築する
+- (8) : 初期文字列として`Allocator`に変換可能なアロケータをもつ[`std::basic_string`](/reference/string/basic_string.md)オブジェクトのコピーと、アロケータを指定して構築する
+- (9) : 初期文字列として`Allocator`に変換可能なアロケータをもつ[`std::basic_string`](/reference/string/basic_string.md)オブジェクトのコピー、モード、アロケータを指定して構築する
+- (10) : ムーブコンストラクタ
+- (11) : 初期文字列として[`std::basic_string_view`](/reference/string_view/basic_string_view.md)に変換可能な文字列と、モードを指定して構築する
+- (12) : 初期文字列として[`std::basic_string_view`](/reference/string_view/basic_string_view.md)に変換可能な文字列と、アロケータを指定して構築する
+- (13) : 初期文字列として[`std::basic_string_view`](/reference/string_view/basic_string_view.md)に変換可能な文字列、モード、アロケータを指定して構築する
+
+
+## テンプレートパラメータ制約
+- (11), (12), (13) : `is_convertible_v&amp;lt;const T&amp;amp;, basic_string_view&amp;lt;CharT, Traits&amp;gt;&amp;gt;`が`true`であること
+
 ## 効果
 - (1) : 内部の`basic_stringbuf`オブジェクトを`basic_stringbuf&amp;lt;CharT, Traits, Allocator&amp;gt;(ios_base::out)`で構築する
 - (2) : 内部の`basic_stringbuf`オブジェクトを`basic_stringbuf&amp;lt;CharT, Traits, Allocator&amp;gt;(which | ios_base::out)`で構築する
 - (3) : 内部の`basic_stringbuf`オブジェクトを`basic_stringbuf&amp;lt;CharT, Traits, Allocator&amp;gt;(s, which | ios_base::out)`で構築する
 - (4) : 内部の`basic_stringbuf`オブジェクトを`basic_stringbuf&amp;lt;CharT, Traits, Allocator&amp;gt;(std::move(s), which | ios_base::out)`で構築する
 - (5) : 内部の`basic_stringbuf`オブジェクトを`basic_stringbuf&amp;lt;CharT, Traits, Allocator&amp;gt;(which | ios_base::out, a)`で構築する
-- (6), (7), (8), (9), (10) : 各引数が対応する`basic_stringbuf`のコンストラクタに渡される
-- (11) : `rhs`から`basic_ostringstream`オブジェクトをムーブ構築する
+- (6), (7), (8), (9) : 各引数が対応する`basic_stringbuf`のコンストラクタに渡される
+- (10) : `rhs`から`basic_ostringstream`オブジェクトをムーブ構築する
+- (11) : `basic_string_view&amp;lt;CharT, Traits&amp;gt;(t)`で文字列を初期化し、モードは`which | ios_base::out`に設定する
+- (12) : `basic_string_view&amp;lt;CharT, Traits&amp;gt;(t)`で文字列を初期化し、モードは`ios_base::out`、アロケータは`a`に設定する
+- (13) : `basic_string_view&amp;lt;CharT, Traits&amp;gt;(t)`で文字列を初期化し、モードは`which | ios_base::out`、アロケータは`a`に設定する
 
 
 ## 例
+### 基本的な使い方
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;sstream&amp;gt;
@@ -82,18 +122,47 @@ int main()
   std::cout &amp;lt;&amp;lt; ss1.str() &amp;lt;&amp;lt; std::endl;
   
   // (3) 文字列を指定して構築
-  std::ostringstream ss2(&amp;#34;initial &amp;#34;);
+  std::ostringstream ss2(&amp;#34;xxxx yyyy&amp;#34;);
   ss2 &amp;lt;&amp;lt; &amp;#34;text&amp;#34;;
   std::cout &amp;lt;&amp;lt; ss2.str() &amp;lt;&amp;lt; std::endl;
 }
 ```
 * str()[link str.md]
 
-### 出力
+#### 出力
 ```
 default
-initial text
+text yyyy
+```
+
+### string_viewからの構築 (C++26)
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;sstream&amp;gt;
+#include &amp;lt;string_view&amp;gt;
+
+int main()
+{
+  // 文字列リテラルから構築
+  std::ostringstream ss1{&amp;#34;Hello?&amp;#34;, std::ios_base::ate};
+  ss1 &amp;lt;&amp;lt; &amp;#34;World&amp;#34;;
+  std::cout &amp;lt;&amp;lt; ss1.str() &amp;lt;&amp;lt; std::endl;
+
+  // string_viewから構築
+  std::string_view sv = &amp;#34;Hello?&amp;#34;;
+  std::ostringstream ss2{sv};
+  ss2 &amp;lt;&amp;lt; &amp;#34;World&amp;#34;;
+  std::cout &amp;lt;&amp;lt; ss2.str() &amp;lt;&amp;lt; std::endl;
+}
+```
+
+#### 出力
+```
+Hello?World
+World?
 ```
 
 ## 参照
-- [P0408R7 Efficient Access to `basic_stringbuf`&amp;#39;s Buffer](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0408r7.pdf)
\ No newline at end of file
+- [P0408R7 Efficient Access to `basic_stringbuf`&amp;#39;s Buffer](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0408r7.pdf)
+- [P2495R3 Interfacing stringstreams with `string_view`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2495r3.pdf)
+    - C++26で[`std::string_view`](/reference/string_view/basic_string_view.md)に対応した
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>str -- [i|o]stringstream : C++26 string_viewの仕様に対応 #1186</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_ostringstream/str.html"/>
      <id>64398ea9addcfc8a692a6c16b92fb57a6588e842:reference/sstream/basic_ostringstream/str.md</id>
      <updated>2025-06-12T17:40:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_ostringstream/str.md b/reference/sstream/basic_ostringstream/str.md
index e8d2d3258..2becd6290 100644
--- a/reference/sstream/basic_ostringstream/str.md
+++ b/reference/sstream/basic_ostringstream/str.md
@@ -19,12 +19,28 @@ template &amp;lt;class SAlloc&amp;gt;
 void str(const basic_string&amp;lt;CharT, Traits, SAlloc&amp;gt;&amp;amp; s);     // (5) C++20
 
 void str(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp;&amp;amp; s); // (6) C++20
+
+template&amp;lt;class T&amp;gt;
+void str(const T&amp;amp; t);                                   // (7) C++26
 ```
 * basic_string[link /reference/string/basic_string.md]
 
 ## 概要
 文字列オブジェクトを取得または設定する。
 
+書き込み位置としては先頭にリセットされるため注意すること。
+
+- (1) : 文字列オブジェクトを取得する
+- (2) : 文字列オブジェクトを取得して、`SAlloc`型のアロケータ`sa`によって確保する
+- (3) : 保持する文字列オブジェクトをムーブして取得する
+- (4) : 文字列オブジェクト`s`を設定する
+- (5) : `Allocator`に変換可能な`SAlloc`型のアロケータによって確保されているデータをコピーして、文字列オブジェクト`s`を設定する
+- (6) : 与えられた文字列オブジェクト`s`をムーブして設定する
+- (7) : [`std::basic_string_view`](/reference/string_view/basic_string_view.md)に変換可能な文字列を設定する
+
+## テンプレートパラメータ制約
+- (7) : `is_convertible_v&amp;lt;const T&amp;amp;, basic_string_view&amp;lt;CharT, Traits&amp;gt;&amp;gt;`が`true`であること
+
 ## 効果
 - (1) : `return rdbuf()-&amp;gt;str()` と等価
 - (2) : `return rdbuf()-&amp;gt;str(sa)` と等価
@@ -32,8 +48,10 @@ void str(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp;&amp;amp; s); // (6) C++20
 - (4) : `rdbuf()-&amp;gt;str(s)` と等価
 - (5) : `rdbuf()-&amp;gt;str(s)` と等価
 - (6) : `rdbuf()-&amp;gt;str(std::move(s))` と等価
+- (7) : `rdbuf()-&amp;gt;str(t)` と等価
 
 ## 例
+### 基本的な使い方
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;sstream&amp;gt;
@@ -57,7 +75,7 @@ int main()
   // 書き込み位置は先頭にリセットされる
   oss &amp;lt;&amp;lt; &amp;#34;!!&amp;#34;;
   std::cout &amp;lt;&amp;lt; &amp;#34;After write: &amp;#34; &amp;lt;&amp;lt; oss.str() &amp;lt;&amp;lt; std::endl;
-  
+
   // 空文字列でクリア
   oss.str(&amp;#34;&amp;#34;);
   oss &amp;lt;&amp;lt; &amp;#34;Fresh start&amp;#34;;
@@ -65,7 +83,7 @@ int main()
 }
 ```
 
-### 出力
+#### 出力
 ```
 Content: Hello 123 World
 After append: Hello 123 World + more
@@ -74,5 +92,70 @@ After write: !!set content
 Final: Fresh start
 ```
 
+#### ムーブを使用する例 (C++20)
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;sstream&amp;gt;
+
+int main() {
+  std::ostringstream ss;
+
+  // ムーブして文字列を設定
+  std::string s = &amp;#34;Move string&amp;#34;;
+  ss.str(std::move(s));
+  ss.seekp(0, std::ios_base::end); // 書き込み位置を末尾に移動
+  ss &amp;lt;&amp;lt; &amp;#34; more&amp;#34;;
+  std::cout &amp;lt;&amp;lt; ss.str() &amp;lt;&amp;lt; std::endl;
+
+  // ムーブで文字列を取得
+  std::string r = std::move(ss).str();
+  std::cout &amp;lt;&amp;lt; r &amp;lt;&amp;lt; std::endl;
+}
+```
+
+#### 出力
+```
+Move string more
+Move string more
+```
+
+
+### string_viewからの設定 (C++26)
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;sstream&amp;gt;
+#include &amp;lt;string_view&amp;gt;
+
+int main() {
+  std::ostringstream ss;
+
+  // 文字列リテラルを設定
+  ss.str(&amp;#34;set from string literal&amp;#34;);
+  ss.seekp(0, std::ios_base::end); // 書き込み位置を末尾に移動
+  ss &amp;lt;&amp;lt; &amp;#34; test&amp;#34;;
+  std::cout &amp;lt;&amp;lt; ss.str() &amp;lt;&amp;lt; std::endl;
+
+  // string_viewを設定
+  std::string_view sv = &amp;#34;set from string_view&amp;#34;;
+  ss.str(sv);
+  ss.seekp(0, std::ios_base::end); // 書き込み位置を末尾に移動
+  ss &amp;lt;&amp;lt; &amp;#34; test&amp;#34;;
+  std::cout &amp;lt;&amp;lt; ss.str() &amp;lt;&amp;lt; std::endl;
+}
+```
+
+#### 出力
+```
+set from string literal test
+set from string_view test
+```
+
+
 ## 関連項目
 - [`basic_stringbuf::str`](../basic_stringbuf/str.md)
+
+
+## 参照
+- [P0408R7 Efficient Access to `basic_stringbuf`&amp;#39;s Buffer](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0408r7.pdf)
+- [P2495R3 Interfacing stringstreams with `string_view`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2495r3.pdf)
+    - C++26で[`std::string_view`](/reference/string_view/basic_string_view.md)に対応した
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- [i|o]stringstream : C++26 string_viewの仕様に対応 #1186</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_stringbuf/op_constructor.html"/>
      <id>64398ea9addcfc8a692a6c16b92fb57a6588e842:reference/sstream/basic_stringbuf/op_constructor.md</id>
      <updated>2025-06-12T17:40:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_stringbuf/op_constructor.md b/reference/sstream/basic_stringbuf/op_constructor.md
index 3e875f918..4936f70c8 100644
--- a/reference/sstream/basic_stringbuf/op_constructor.md
+++ b/reference/sstream/basic_stringbuf/op_constructor.md
@@ -82,19 +82,19 @@ basic_stringbuf(
 
 - (1) : デフォルトコンストラクタ
 - (2) : 指定されたモードで構築する
-- (3) : [`std::basic_string`](/reference/string/basic_string.md)オブジェクトのコピーと、指定されたモードで構築する
+- (3) : 入力文字列として[`std::basic_string`](/reference/string/basic_string.md)オブジェクトのコピーと、指定されたモードで構築する
 - (4) : モードとアロケータを指定して構築する
 - (5) : アロケータを指定して構築する
-- (6) : [`std::basic_string`](/reference/string/basic_string.md)オブジェクトのコピーと、アロケータを指定して構築する
-- (7) : [`std::basic_string`](/reference/string/basic_string.md)オブジェクトのコピー、モード、アロケータを指定して構築する
-- (8) : `Allocator`に変換可能なアロケータ型をもつ`std::basic_string`オブジェクトのコピーと、指定されたモードで構築する
-- (9) : `Allocator`に変換可能なアロケータ型をもつ`std::basic_string`オブジェクトのコピーと、アロケータを指定して構築する
-- (10) : `Allocator`に変換可能なアロケータ型をもつ`std::basic_string`オブジェクトのコピー、モード、アロケータを指定して構築する
+- (6) : 入力文字列として[`std::basic_string`](/reference/string/basic_string.md)オブジェクトのコピーと、アロケータを指定して構築する
+- (7) : 入力文字列として[`std::basic_string`](/reference/string/basic_string.md)オブジェクトのコピー、モード、アロケータを指定して構築する
+- (8) : 入力文字列として`Allocator`に変換可能なアロケータ型をもつ[`std::basic_string`](/reference/string/basic_string.md)オブジェクトのコピーと、指定されたモードで構築する
+- (9) : 入力文字列として`Allocator`に変換可能なアロケータ型をもつ[`std::basic_string`](/reference/string/basic_string.md)オブジェクトのコピーと、アロケータを指定して構築する
+- (10) : 入力文字列として`Allocator`に変換可能なアロケータ型をもつ[`std::basic_string`](/reference/string/basic_string.md)オブジェクトのコピー、モード、アロケータを指定して構築する
 - (11) : ムーブコンストラクタ
 - (12) : ムーブコンストラクタでアロケータを指定して構築する
-- (13) : [`basic_string_view`](/reference/string_view/basic_string_view.md)に変換可能な文字列を初期化し、モードを設定する
-- (14) : [`basic_string_view`](/reference/string_view/basic_string_view.md)に変換可能な文字列を初期化、アロケータを設定する
-- (15) : [`basic_string_view`](/reference/string_view/basic_string_view.md)に変換可能な文字列を初期化し、モードとアロケータを設定する
+- (13) : 入力文字列として[`basic_string_view`](/reference/string_view/basic_string_view.md)に変換可能な文字列と、モードを設定する
+- (14) : 入力文字列として[`basic_string_view`](/reference/string_view/basic_string_view.md)に変換可能な文字列と、アロケータを設定する
+- (15) : 入力文字列として[`basic_string_view`](/reference/string_view/basic_string_view.md)に変換可能な文字列と、モードとアロケータを設定する
 
 
 ## テンプレートパラメータ制約
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>str -- [i|o]stringstream : C++26 string_viewの仕様に対応 #1186</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_stringbuf/str.html"/>
      <id>64398ea9addcfc8a692a6c16b92fb57a6588e842:reference/sstream/basic_stringbuf/str.md</id>
      <updated>2025-06-12T17:40:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_stringbuf/str.md b/reference/sstream/basic_stringbuf/str.md
index f09ec1573..8ae0dade4 100644
--- a/reference/sstream/basic_stringbuf/str.md
+++ b/reference/sstream/basic_stringbuf/str.md
@@ -48,7 +48,7 @@ void str(const T&amp;amp; t);                                       // (7) C++26
 - (4) : 文字列オブジェクト`s`を設定する
 - (5) : `Allocator`に変換可能な`SAlloc`型のアロケータによって確保されているデータをコピーして、文字列オブジェクト`s`を設定する
 - (6) : 与えられた文字列オブジェクト`s`をムーブして設定する
-- (7) : [`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;CharT, Traits&amp;gt;(t)`から文字列を設定する
+- (7) : [`std::basic_string_view`](/reference/string_view/basic_string_view.md)に変換可能な文字列を設定する
 
 
 ## 例
@@ -83,14 +83,9 @@ int main()
   buf.sputc(&amp;#39;Y&amp;#39;);
   std::cout &amp;lt;&amp;lt; &amp;#34;4: After writing: &amp;#34; &amp;lt;&amp;lt; buf.str() &amp;lt;&amp;lt; std::endl;
   
-  // C++26: string_viewから設定
-  // std::string_view sv = &amp;#34;string_view test&amp;#34;;
-  // buf.str(sv);
-  // std::cout &amp;lt;&amp;lt; &amp;#34;6: &amp;#34; &amp;lt;&amp;lt; buf.str() &amp;lt;&amp;lt; std::endl;
-  
   // 空文字列でクリア
   buf.str(&amp;#34;&amp;#34;);
-  std::cout &amp;lt;&amp;lt; &amp;#34;7: Empty? &amp;#34; &amp;lt;&amp;lt; (buf.str().empty() ? &amp;#34;yes&amp;#34; : &amp;#34;no&amp;#34;) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; &amp;#34;5: Empty? &amp;#34; &amp;lt;&amp;lt; (buf.str().empty() ? &amp;#34;yes&amp;#34; : &amp;#34;no&amp;#34;) &amp;lt;&amp;lt; std::endl;
 }
 ```
 * sputn[link /reference/streambuf/basic_streambuf/sputn.md]
@@ -103,8 +98,7 @@ int main()
 2: New content
 3: After reading 2 chars: Read/Write test
 4: After writing: ReXY/Write test
-5: Move test
-7: Empty? yes
+5: Empty? yes
 ```
 
 #### ムーブを使用する例 (C++20)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- [i|o]stringstream : C++26 string_viewの仕様に対応 #1186</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_stringstream/op_constructor.html"/>
      <id>64398ea9addcfc8a692a6c16b92fb57a6588e842:reference/sstream/basic_stringstream/op_constructor.md</id>
      <updated>2025-06-12T17:40:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_stringstream/op_constructor.md b/reference/sstream/basic_stringstream/op_constructor.md
index 6bf358aca..06e23a9a9 100644
--- a/reference/sstream/basic_stringstream/op_constructor.md
+++ b/reference/sstream/basic_stringstream/op_constructor.md
@@ -50,6 +50,21 @@ basic_stringstream(
   const Allocator&amp;amp; a);                                            // (9) C++20
 
 basic_stringstream(basic_stringstream&amp;amp;&amp;amp; rhs);                     // (10) C++11
+
+template&amp;lt;class T&amp;gt;
+explicit basic_stringstream(
+  const T&amp;amp; t,
+  ios_base::openmode which = ios_base::in | ios_base::out);       // (11) C++26
+
+template&amp;lt;class T&amp;gt;
+basic_stringstream(
+  const T&amp;amp; t,
+  const Allocator&amp;amp; a);                                            // (12) C++26
+
+template&amp;lt;class T&amp;gt;
+basic_stringstream(const T&amp;amp; t,
+  ios_base::openmode which,
+  const Allocator&amp;amp; a);                                            // (13) C++26
 ```
 * ios_base[link /reference/ios/ios_base.md]
 * basic_string[link /reference/string/basic_string.md]
@@ -57,17 +72,40 @@ basic_stringstream(basic_stringstream&amp;amp;&amp;amp; rhs);                     // (10) C++11
 ## 概要
 `basic_stringstream`オブジェクトを構築する。
 
+ここで、初期値として設定する文字列は、既存のファイルを上書きモードで開くことに似ており、ストリームの初期位置が先頭のまま、ストリーム内容の文字列を設定するものである。
+
+- (1) : デフォルトコンストラクタ
+- (2) : 指定されたモードで構築する
+- (3) : 初期文字列として[`std::basic_string`](/reference/string/basic_string.md)オブジェクトのコピーを指定して構築する
+- (4) : 指定されたモードとアロケータで構築する
+- (5) : 初期文字列として[`std::basic_string`](/reference/string/basic_string.md)オブジェクトのコピーと、アロケータを指定して構築する
+- (6) : 初期文字列として[`std::basic_string`](/reference/string/basic_string.md)オブジェクトのコピー、モード、アロケータを指定して構築する
+- (7) : 初期文字列として`Allocator`に変換可能なアロケータをもつ[`std::basic_string`](/reference/string/basic_string.md)オブジェクトのコピーと、モードを指定して構築する
+- (8) : 初期文字列として`Allocator`に変換可能なアロケータをもつ[`std::basic_string`](/reference/string/basic_string.md)オブジェクトのコピーと、アロケータを指定して構築する
+- (9) : 初期文字列として`Allocator`に変換可能なアロケータをもつ[`std::basic_string`](/reference/string/basic_string.md)オブジェクトのコピー、モード、アロケータを指定して構築する
+- (10) : ムーブコンストラクタ
+- (11) : 初期文字列として[`std::basic_string_view`](/reference/string_view/basic_string_view.md)に変換可能な文字列と、モードを指定して構築する
+- (12) : 初期文字列として[`std::basic_string_view`](/reference/string_view/basic_string_view.md)に変換可能な文字列と、アロケータを指定して構築する
+- (13) : 初期文字列として[`std::basic_string_view`](/reference/string_view/basic_string_view.md)に変換可能な文字列、モード、アロケータを指定して構築する
+
+## テンプレートパラメータ制約
+- (11), (12), (13) : `is_convertible_v&amp;lt;const T&amp;amp;, basic_string_view&amp;lt;CharT, Traits&amp;gt;&amp;gt;`が`true`であること
+
 ## 効果
 - (1) : 内部の`basic_stringbuf`オブジェクトを`basic_stringbuf&amp;lt;CharT, Traits, Allocator&amp;gt;(ios_base::in | ios_base::out)`で構築する
 - (2) : 内部の`basic_stringbuf`オブジェクトを`basic_stringbuf&amp;lt;CharT, Traits, Allocator&amp;gt;(which)`で構築する
 - (3) : 内部の`basic_stringbuf`オブジェクトを`basic_stringbuf&amp;lt;CharT, Traits, Allocator&amp;gt;(s, which)`で構築する
 - (4) : 内部の`basic_stringbuf`オブジェクトを`basic_stringbuf&amp;lt;CharT, Traits, Allocator&amp;gt;(std::move(s), which)`で構築する
 - (5) : 内部の`basic_stringbuf`オブジェクトを`basic_stringbuf&amp;lt;CharT, Traits, Allocator&amp;gt;(which, a)`で構築する
-- (6), (7), (8), (9), (10) : 各引数は対応する`basic_stringbuf`のコンストラクタに渡される
-- (11) : `rhs`から`basic_stringstream`オブジェクトをムーブ構築する
+- (6), (7), (8), (9) : 各引数は対応する`basic_stringbuf`のコンストラクタに渡される
+- (10) : `rhs`から`basic_stringstream`オブジェクトをムーブ構築する
+- (11) : `basic_string_view&amp;lt;CharT, Traits&amp;gt;(t)`で文字列を初期化し、モードは`which`に設定する
+- (12) : `basic_string_view&amp;lt;CharT, Traits&amp;gt;(t)`で文字列を初期化し、モードは`ios_base::in | ios_base::out`、アロケータは`a`に設定する
+- (13) : `basic_string_view&amp;lt;CharT, Traits&amp;gt;(t)`で文字列を初期化し、モードは`which`、アロケータは`a`に設定する
 
 
 ## 例
+### 基本的な使い方
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;sstream&amp;gt;
@@ -89,11 +127,41 @@ int main()
 ```
 * str()[link str.md]
 
-### 出力
+#### 出力
 ```
 hello
 initial value added
 ```
 
+### string_viewからの構築 (C++26)
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;sstream&amp;gt;
+#include &amp;lt;string_view&amp;gt;
+
+int main()
+{
+  // 文字列リテラルから構築
+  std::stringstream ss1{&amp;#34;Hello?&amp;#34;};
+  ss1.seekp(0, std::ios_base::end); // 書き込み位置を末尾に設定
+  ss1 &amp;lt;&amp;lt; &amp;#34;World&amp;#34;;
+  std::cout &amp;lt;&amp;lt; ss1.str() &amp;lt;&amp;lt; std::endl;
+
+  // string_viewから構築
+  std::string_view sv = &amp;#34;Hello?&amp;#34;;
+  std::stringstream ss2{sv};
+  ss2 &amp;lt;&amp;lt; &amp;#34;World&amp;#34;;
+  std::cout &amp;lt;&amp;lt; ss2.str() &amp;lt;&amp;lt; std::endl;
+}
+```
+
+#### 出力
+```
+Hello?World
+World?
+```
+
 ## 参照
-- [P0408R7 Efficient Access to `basic_stringbuf`&amp;#39;s Buffer](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0408r7.pdf)
\ No newline at end of file
+- [P0408R7 Efficient Access to `basic_stringbuf`&amp;#39;s Buffer](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0408r7.pdf)
+- [P2495R3 Interfacing stringstreams with `string_view`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2495r3.pdf)
+    - C++26で[`std::string_view`](/reference/string_view/basic_string_view.md)に対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>str -- [i|o]stringstream : C++26 string_viewの仕様に対応 #1186</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_stringstream/str.html"/>
      <id>64398ea9addcfc8a692a6c16b92fb57a6588e842:reference/sstream/basic_stringstream/str.md</id>
      <updated>2025-06-12T17:40:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_stringstream/str.md b/reference/sstream/basic_stringstream/str.md
index 7c4b542b3..9e62e17ef 100644
--- a/reference/sstream/basic_stringstream/str.md
+++ b/reference/sstream/basic_stringstream/str.md
@@ -19,12 +19,29 @@ template &amp;lt;class SAlloc&amp;gt;
 void str(const basic_string&amp;lt;CharT, Traits, SAlloc&amp;gt;&amp;amp; s);     // (5) C++20
 
 void str(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp;&amp;amp; s); // (6) C++20
+
+template&amp;lt;class T&amp;gt;
+void str(const T&amp;amp; t);                                       // (7) C++26
 ```
 * basic_string[link /reference/string/basic_string.md]
 
 ## 概要
 文字列オブジェクトを取得または設定する。
 
+書き込み位置としては先頭にリセットされるため注意すること。
+
+- (1) : 文字列オブジェクトを取得する
+- (2) : 文字列オブジェクトを取得して、`SAlloc`型のアロケータ`sa`によって確保する
+- (3) : 保持する文字列オブジェクトをムーブして取得する
+- (4) : 文字列オブジェクト`s`を設定する
+- (5) : `Allocator`に変換可能な`SAlloc`型のアロケータによって確保されているデータをコピーして、文字列オブジェクト`s`を設定する
+- (6) : 与えられた文字列オブジェクト`s`をムーブして設定する
+- (7) : [`std::basic_string_view`](/reference/string_view/basic_string_view.md)に変換可能な文字列を設定する
+
+
+## テンプレートパラメータ制約
+- (7) : `is_convertible_v&amp;lt;const T&amp;amp;, basic_string_view&amp;lt;CharT, Traits&amp;gt;&amp;gt;`が`true`であること
+
 ## 効果
 - (1) : `return rdbuf()-&amp;gt;str()` と等価
 - (2) : `return rdbuf()-&amp;gt;str(sa)` と等価
@@ -32,8 +49,10 @@ void str(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp;&amp;amp; s); // (6) C++20
 - (4) : `rdbuf()-&amp;gt;str(s)` と等価
 - (5) : `rdbuf()-&amp;gt;str(s)` と等価
 - (6) : `rdbuf()-&amp;gt;str(std::move(s))` と等価
+- (7) : `rdbuf()-&amp;gt;str(t)` と等価
 
 ## 例
+### 基本的な使い方
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;sstream&amp;gt;
@@ -67,7 +86,7 @@ int main()
 }
 ```
 
-### 出力
+#### 出力
 ```
 1: initial content
 2: initial content + added
@@ -77,5 +96,68 @@ Read: new
 5: Empty? yes
 ```
 
+#### ムーブを使用する例 (C++20)
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;sstream&amp;gt;
+
+int main() {
+  std::stringstream ss;
+
+  // ムーブして文字列を設定
+  std::string s = &amp;#34;Move string&amp;#34;;
+  ss.str(std::move(s));
+  ss.seekp(0, std::ios_base::end); // 書き込み位置を末尾に移動
+  ss &amp;lt;&amp;lt; &amp;#34; more&amp;#34;;
+  std::cout &amp;lt;&amp;lt; ss.str() &amp;lt;&amp;lt; std::endl;
+
+  // ムーブで文字列を取得
+  std::string r = std::move(ss).str();
+  std::cout &amp;lt;&amp;lt; r &amp;lt;&amp;lt; std::endl;
+}
+```
+
+#### 出力
+```
+Move string more
+Move string more
+```
+
+
+### string_viewからの設定 (C++26)
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;sstream&amp;gt;
+#include &amp;lt;string_view&amp;gt;
+
+int main() {
+  std::stringstream ss;
+
+  // 文字列リテラルを設定
+  ss.str(&amp;#34;set from string literal&amp;#34;);
+  ss.seekp(0, std::ios_base::end); // 書き込み位置を末尾に移動
+  ss &amp;lt;&amp;lt; &amp;#34; test&amp;#34;;
+  std::cout &amp;lt;&amp;lt; ss.str() &amp;lt;&amp;lt; std::endl;
+
+  // string_viewを設定
+  std::string_view sv = &amp;#34;set from string_view&amp;#34;;
+  ss.str(sv);
+  ss.seekp(0, std::ios_base::end); // 書き込み位置を末尾に移動
+  ss &amp;lt;&amp;lt; &amp;#34; test&amp;#34;;
+  std::cout &amp;lt;&amp;lt; ss.str() &amp;lt;&amp;lt; std::endl;
+}
+```
+
+#### 出力
+```
+set from string literal test
+set from string_view test
+```
+
 ## 関連項目
 - [`basic_stringbuf::str`](../basic_stringbuf/str.md)
+
+## 参照
+- [P0408R7 Efficient Access to `basic_stringbuf`&amp;#39;s Buffer](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0408r7.pdf)
+- [P2495R3 Interfacing stringstreams with `string_view`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2495r3.pdf)
+    - C++26で[`std::string_view`](/reference/string_view/basic_string_view.md)に対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- basic_stringbuf : C++26 string_viewに対応 #1186</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_stringbuf/op_constructor.html"/>
      <id>9ff68ed23110ce265c33182f4f0e6cb074291660:reference/sstream/basic_stringbuf/op_constructor.md</id>
      <updated>2025-06-12T14:54:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_stringbuf/op_constructor.md b/reference/sstream/basic_stringbuf/op_constructor.md
index ed4659c25..3e875f918 100644
--- a/reference/sstream/basic_stringbuf/op_constructor.md
+++ b/reference/sstream/basic_stringbuf/op_constructor.md
@@ -56,6 +56,23 @@ basic_stringbuf(
 
 basic_stringbuf(basic_stringbuf&amp;amp;&amp;amp; rhs);                       // (11) C++11
 basic_stringbuf(basic_stringbuf&amp;amp;&amp;amp; rhs, const Allocator&amp;amp; a);   // (12) C++20
+
+template&amp;lt;class T&amp;gt;
+explicit
+basic_stringbuf(
+  const T&amp;amp; t,
+  ios_base::openmode which = ios_base::in | ios_base::out);   // (13) C++26
+
+template&amp;lt;class T&amp;gt;
+basic_stringbuf(
+  const T&amp;amp; t,
+  const Allocator&amp;amp; a);                                        // (14) C++26
+
+template&amp;lt;class T&amp;gt;
+basic_stringbuf(
+  const T&amp;amp; t,
+  ios_base::openmode which,
+  const Allocator&amp;amp; a);                                        // (15) C++26
 ```
 * ios_base[link /reference/ios/ios_base.md]
 * basic_string[link /reference/string/basic_string.md]
@@ -63,18 +80,43 @@ basic_stringbuf(basic_stringbuf&amp;amp;&amp;amp; rhs, const Allocator&amp;amp; a);   // (12) C++20
 ## 概要
 `basic_stringbuf`オブジェクトを構築する。
 
+- (1) : デフォルトコンストラクタ
+- (2) : 指定されたモードで構築する
+- (3) : [`std::basic_string`](/reference/string/basic_string.md)オブジェクトのコピーと、指定されたモードで構築する
+- (4) : モードとアロケータを指定して構築する
+- (5) : アロケータを指定して構築する
+- (6) : [`std::basic_string`](/reference/string/basic_string.md)オブジェクトのコピーと、アロケータを指定して構築する
+- (7) : [`std::basic_string`](/reference/string/basic_string.md)オブジェクトのコピー、モード、アロケータを指定して構築する
+- (8) : `Allocator`に変換可能なアロケータ型をもつ`std::basic_string`オブジェクトのコピーと、指定されたモードで構築する
+- (9) : `Allocator`に変換可能なアロケータ型をもつ`std::basic_string`オブジェクトのコピーと、アロケータを指定して構築する
+- (10) : `Allocator`に変換可能なアロケータ型をもつ`std::basic_string`オブジェクトのコピー、モード、アロケータを指定して構築する
+- (11) : ムーブコンストラクタ
+- (12) : ムーブコンストラクタでアロケータを指定して構築する
+- (13) : [`basic_string_view`](/reference/string_view/basic_string_view.md)に変換可能な文字列を初期化し、モードを設定する
+- (14) : [`basic_string_view`](/reference/string_view/basic_string_view.md)に変換可能な文字列を初期化、アロケータを設定する
+- (15) : [`basic_string_view`](/reference/string_view/basic_string_view.md)に変換可能な文字列を初期化し、モードとアロケータを設定する
+
+
+## テンプレートパラメータ制約
+- (13), (14), (15) : `is_convertible_v&amp;lt;const T&amp;amp;, basic_string_view&amp;lt;CharT, Traits&amp;gt;&amp;gt;`が`true`であること
+
+
 ## 効果
 - (1) : 内部の文字列バッファを空にし、モードは`ios_base::in | ios_base::out`に設定する
 - (2) : 内部の文字列バッファを空にし、モードは`which`に設定する
 - (3) : 内部の文字列バッファを`s`のコピー、モードは`which`に設定する
 - (4) : 内部の文字列バッファを`std::move(s)`で、モードは`which`に設定する
 - (5) : 内部の文字列バッファを空にし、モードは`which`、アロケータは`a`に設定する
-- (6), (7), (8), (9), (10), (11) : 各引数は内部状態の初期化に使用される
-- (12) : `rhs`から`basic_stringbuf`オブジェクトをムーブ構築する
-- (13) : `rhs`から`basic_stringbuf`オブジェクトをムーブ構築し、アロケータは`a`を使用する
+- (6), (7), (8), (9), (10) : 各引数は内部状態の初期化に使用される
+- (11) : `rhs`から`basic_stringbuf`オブジェクトをムーブ構築する
+- (12) : `rhs`から`basic_stringbuf`オブジェクトをムーブ構築し、アロケータは`a`を使用する
+- (13) : `basic_string_view&amp;lt;CharT, Traits&amp;gt;(t)`で文字列を初期化し、モードは`which`に設定する
+- (14) : `basic_string_view&amp;lt;CharT, Traits&amp;gt;(t)`で文字列を初期化し、モードは`ios_base::in | ios_base::out`、アロケータは`a`に設定する
+- (15) : `basic_string_view&amp;lt;CharT, Traits&amp;gt;(t)`で文字列を初期化し、モードは`which`、アロケータは`a`に設定する
 
 
 ## 例
+### 基本的な使い方
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;sstream&amp;gt;
@@ -95,11 +137,37 @@ int main()
 * sputc[link /reference/streambuf/basic_streambuf/sputc.md]
 * str()[link str.md]
 
-### 出力
+#### 出力
 ```
 a
 initial!
 ```
 
+#### string_viewからの構築 (C++26)
+```cpp example
+#include &amp;lt;print&amp;gt;
+#include &amp;lt;sstream&amp;gt;
+#include &amp;lt;string_view&amp;gt;
+
+int main()
+{
+  std::string_view sv = &amp;#34;from string literal&amp;#34;;
+  std::stringbuf buf1{sv};
+  std::println(&amp;#34;{}&amp;#34;, buf1.str());
+
+  std::string_view sv2 = &amp;#34;from string_view&amp;#34;;
+  std::stringbuf buf2{sv2};
+  std::println(&amp;#34;{}&amp;#34;, buf2.str());
+}
+```
+
+#### 出力
+```
+from string literal
+from string_view
+```
+
 ## 参照
-- [P0408R7 Efficient Access to `basic_stringbuf`&amp;#39;s Buffer](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0408r7.pdf)
\ No newline at end of file
+- [P0408R7 Efficient Access to `basic_stringbuf`&amp;#39;s Buffer](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0408r7.pdf)
+- [P2495R3 Interfacing stringstreams with `string_view`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2495r3.pdf)
+    - C++26で[`std::string_view`](/reference/string_view/basic_string_view.md)に対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>str -- basic_stringbuf : C++26 string_viewに対応 #1186</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_stringbuf/str.html"/>
      <id>9ff68ed23110ce265c33182f4f0e6cb074291660:reference/sstream/basic_stringbuf/str.md</id>
      <updated>2025-06-12T14:54:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_stringbuf/str.md b/reference/sstream/basic_stringbuf/str.md
index 3b05fee01..f09ec1573 100644
--- a/reference/sstream/basic_stringbuf/str.md
+++ b/reference/sstream/basic_stringbuf/str.md
@@ -19,21 +19,40 @@ template &amp;lt;class SAlloc&amp;gt;
 void str(const basic_string&amp;lt;CharT, Traits, SAlloc&amp;gt;&amp;amp; s);     // (5) C++20
 
 void str(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp;&amp;amp; s); // (6) C++20
+
+template&amp;lt;class T&amp;gt;
+void str(const T&amp;amp; t);                                       // (7) C++26
 ```
 * basic_string[link /reference/string/basic_string.md]
 
 ## 概要
 文字列オブジェクトを取得または設定する。
 
+- (1) : 文字列オブジェクトを取得する
+- (2) : 文字列オブジェクトを取得し、`SAlloc`型のアロケータ`sa`によってメモリ確保する
+- (3) : 保持する文字列オブジェクトをムーブして取得する
+- (4) : 文字列オブジェクト`s`を設定する
+- (5) : `Allocator`に変換可能な`SAlloc`型のアロケータによって確保されているデータをコピーして、文字列オブジェクト`s`を設定する
+- (6) : 与えられた文字列オブジェクト`s`をムーブして設定する
+- (7) : [`basic_string_view`](/reference/string_view/basic_string_view.md)に変換可能な文字列を設定する
+
+
+## テンプレートパラメータ制約
+- (7) : `is_convertible_v&amp;lt;const T&amp;amp;, basic_string_view&amp;lt;CharT, Traits&amp;gt;&amp;gt;`が`true`であること
+
+
 ## 効果
 - (1) : 文字列オブジェクトを取得する
 - (2) : 文字列オブジェクトを取得して、`SAlloc`型のアロケータ`sa`によって確保する
 - (3) : 保持する文字列オブジェクトをムーブして取得する
 - (4) : 文字列オブジェクト`s`を設定する
-- (5) : `SAlloc`型のアロケータによって確保されているデータをコピーして、文字列オブジェクト`s`を設定する
+- (5) : `Allocator`に変換可能な`SAlloc`型のアロケータによって確保されているデータをコピーして、文字列オブジェクト`s`を設定する
 - (6) : 与えられた文字列オブジェクト`s`をムーブして設定する
+- (7) : [`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;CharT, Traits&amp;gt;(t)`から文字列を設定する
+
 
 ## 例
+### 基本的な使い方
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;sstream&amp;gt;
@@ -64,26 +83,82 @@ int main()
   buf.sputc(&amp;#39;Y&amp;#39;);
   std::cout &amp;lt;&amp;lt; &amp;#34;4: After writing: &amp;#34; &amp;lt;&amp;lt; buf.str() &amp;lt;&amp;lt; std::endl;
   
-  // C++20: ムーブによる設定
-  std::string s = &amp;#34;Move test&amp;#34;;
-  buf.str(std::move(s));
-  std::cout &amp;lt;&amp;lt; &amp;#34;5: &amp;#34; &amp;lt;&amp;lt; buf.str() &amp;lt;&amp;lt; std::endl;
+  // C++26: string_viewから設定
+  // std::string_view sv = &amp;#34;string_view test&amp;#34;;
+  // buf.str(sv);
+  // std::cout &amp;lt;&amp;lt; &amp;#34;6: &amp;#34; &amp;lt;&amp;lt; buf.str() &amp;lt;&amp;lt; std::endl;
   
   // 空文字列でクリア
   buf.str(&amp;#34;&amp;#34;);
-  std::cout &amp;lt;&amp;lt; &amp;#34;6: Empty? &amp;#34; &amp;lt;&amp;lt; (buf.str().empty() ? &amp;#34;yes&amp;#34; : &amp;#34;no&amp;#34;) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; &amp;#34;7: Empty? &amp;#34; &amp;lt;&amp;lt; (buf.str().empty() ? &amp;#34;yes&amp;#34; : &amp;#34;no&amp;#34;) &amp;lt;&amp;lt; std::endl;
 }
 ```
 * sputn[link /reference/streambuf/basic_streambuf/sputn.md]
 * sbumpc[link /reference/streambuf/basic_streambuf/sbumpc.md]
 * sputc[link /reference/streambuf/basic_streambuf/sputc.md]
 
-### 出力
+#### 出力
 ```
 1: Hello, World!
 2: New content
 3: After reading 2 chars: Read/Write test
 4: After writing: ReXY/Write test
 5: Move test
-6: Empty? yes
+7: Empty? yes
 ```
+
+#### ムーブを使用する例 (C++20)
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;sstream&amp;gt;
+
+int main() {
+  std::stringbuf buf;
+
+  // ムーブして文字列を設定
+  std::string s = &amp;#34;Move string&amp;#34;;
+  buf.str(std::move(s));
+  std::cout &amp;lt;&amp;lt; buf.str() &amp;lt;&amp;lt; std::endl;
+
+  // ムーブで文字列を取得
+  std::string r = std::move(buf).str();
+  std::cout &amp;lt;&amp;lt; r &amp;lt;&amp;lt; std::endl;
+}
+```
+
+#### 出力
+```
+Move string
+Move string
+```
+
+### string_viewからの設定 (C++26)
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;sstream&amp;gt;
+#include &amp;lt;string_view&amp;gt;
+
+int main() {
+  std::stringbuf buf;
+
+  // 文字列リテラルを設定
+  buf.str(&amp;#34;set from string literal&amp;#34;);
+  std::cout &amp;lt;&amp;lt; buf.str() &amp;lt;&amp;lt; std::endl;
+
+  // string_viewを設定
+  std::string_view sv = &amp;#34;set from string_view&amp;#34;;
+  buf.str(sv);
+  std::cout &amp;lt;&amp;lt; buf.str() &amp;lt;&amp;lt; std::endl;
+}
+```
+
+#### 出力
+```
+set from string literal
+set from string_view
+```
+
+## 参照
+- [P0408R7 Efficient Access to `basic_stringbuf`&amp;#39;s Buffer](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0408r7.pdf)
+- [P2495R3 Interfacing stringstreams with `string_view`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2495r3.pdf)
+    - C++26で[`std::string_view`](/reference/string_view/basic_string_view.md)に対応した
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_istringstream -- sstream : 各クラスの概要を補強</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_istringstream.html"/>
      <id>b30cc4611f87d076bd60fe61f3b2df6c4bebb1ce:reference/sstream/basic_istringstream.md</id>
      <updated>2025-06-12T10:43:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_istringstream.md b/reference/sstream/basic_istringstream.md
index 8aa37930c..ebbf02ec1 100644
--- a/reference/sstream/basic_istringstream.md
+++ b/reference/sstream/basic_istringstream.md
@@ -18,7 +18,9 @@ namespace std {
 * basic_istream[link /reference/istream/basic_istream.md]
 
 ## 概要
-バッファに保持された文字列への読み取り操作ができるストリーム
+`std::basic_istringstream`クラスは、文字列を入力元とするストリームであり、文字列からの読み取り操作ができる。
+
+このクラスは、内部バッファに文字列を保持し、ストリーム操作で文字列の内容を解析することができる。
 
 
 ## メンバ関数
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_ostringstream -- sstream : 各クラスの概要を補強</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_ostringstream.html"/>
      <id>b30cc4611f87d076bd60fe61f3b2df6c4bebb1ce:reference/sstream/basic_ostringstream.md</id>
      <updated>2025-06-12T10:43:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_ostringstream.md b/reference/sstream/basic_ostringstream.md
index e14486acb..3e70ab69c 100644
--- a/reference/sstream/basic_ostringstream.md
+++ b/reference/sstream/basic_ostringstream.md
@@ -18,7 +18,9 @@ namespace std {
 * basic_ostream[link /reference/ostream/basic_ostream.md]
 
 ## 概要
-バッファに保持された文字列への書き込み操作ができるストリーム
+`std::basic_ostringstream`クラスは、文字列への書き込み操作ができる出力ストリームである。
+
+このクラスは、内部バッファに文字列を保持し、ストリーム操作で文字列の内容を組み立てることができる。
 
 
 ## メンバ関数
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_stringbuf -- sstream : 各クラスの概要を補強</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_stringbuf.html"/>
      <id>b30cc4611f87d076bd60fe61f3b2df6c4bebb1ce:reference/sstream/basic_stringbuf.md</id>
      <updated>2025-06-12T10:43:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_stringbuf.md b/reference/sstream/basic_stringbuf.md
index 0c2f2a467..64241ac57 100644
--- a/reference/sstream/basic_stringbuf.md
+++ b/reference/sstream/basic_stringbuf.md
@@ -18,7 +18,7 @@ namespace std {
 * basic_streambuf[link /reference/streambuf/basic_streambuf.md]
 
 ## 概要
-文字列を保持するストリームバッファ
+`std::basic_stringbuf`クラスは、文字列を保持するストリームバッファであり、文字列を読み書きするストレージとして機能する。
 
 
 ## メンバ関数
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_stringstream -- sstream : 各クラスの概要を補強</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_stringstream.html"/>
      <id>b30cc4611f87d076bd60fe61f3b2df6c4bebb1ce:reference/sstream/basic_stringstream.md</id>
      <updated>2025-06-12T10:43:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_stringstream.md b/reference/sstream/basic_stringstream.md
index 1557bc763..399c3b3b1 100644
--- a/reference/sstream/basic_stringstream.md
+++ b/reference/sstream/basic_stringstream.md
@@ -18,7 +18,9 @@ namespace std {
 * basic_iostream[link /reference/istream/basic_iostream.md]
 
 ## 概要
-バッファに保持された文字列への読み取りおよび書き込み操作ができるストリーム
+`std::basic_stringstream`クラスは、文字列を出力先・入力元とするストリームであり、読み取りと書き込みの両方の操作ができる。
+
+このクラスは、内部バッファに文字列を保持し、ストリーム操作で文字列の内容を組み立てたり、文字列内容を解析したりすることができる。
 
 
 ## メンバ関数
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>